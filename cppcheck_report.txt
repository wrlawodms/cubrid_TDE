contrib/collectd-plugin/cubrid_statdump.c:245:29: style: Variable 'qm_num_methscans[0].gauge' is assigned a value that is never used. [unreadVariable]
  qm_num_methscans[0].gauge = mystat.qm_num_methscans;
                            ^
contrib/cubmemc/wraplib/dict/demo.c:50:18: style: The scope of the variable 'p' can be reduced. [variableScope]
 char buf[512], *p, *ptr, *ptr2;
                 ^
contrib/cubmemc/wraplib/dict/demo.c:50:22: style: The scope of the variable 'ptr' can be reduced. [variableScope]
 char buf[512], *p, *ptr, *ptr2;
                     ^
contrib/cubmemc/wraplib/dict/demo.c:50:28: style: The scope of the variable 'ptr2' can be reduced. [variableScope]
 char buf[512], *p, *ptr, *ptr2;
                           ^
contrib/cubmemc/wraplib/dict/hashtable.c:51:52: style:inconclusive: Function 'hashtable_new' argument 2 names different: declaration 'key_hsh' definition 'key_hash'. [funcArgNamesDifferent]
hashtable_new(dict_cmp_func key_cmp, dict_hsh_func key_hash,
                                                   ^
contrib/cubmemc/wraplib/dict/hashtable.h:20:26: note: Function 'hashtable_new' argument 2 names different: declaration 'key_hsh' definition 'key_hash'.
hashtable *hashtable_new __P((dict_cmp_func key_cmp, dict_hsh_func key_hsh,
                         ^
contrib/cubmemc/wraplib/dict/hashtable.c:51:52: note: Function 'hashtable_new' argument 2 names different: declaration 'key_hsh' definition 'key_hash'.
hashtable_new(dict_cmp_func key_cmp, dict_hsh_func key_hash,
                                                   ^
contrib/cubmemc/wraplib/dict/hashtable.c:80:57: style:inconclusive: Function 'hashtable_dict_new' argument 2 names different: declaration 'key_hsh' definition 'key_hash'. [funcArgNamesDifferent]
hashtable_dict_new(dict_cmp_func key_cmp, dict_hsh_func key_hash,
                                                        ^
contrib/cubmemc/wraplib/dict/hashtable.h:23:26: note: Function 'hashtable_dict_new' argument 2 names different: declaration 'key_hsh' definition 'key_hash'.
dict *hashtable_dict_new __P((dict_cmp_func key_cmp, dict_hsh_func key_hsh,
                         ^
contrib/cubmemc/wraplib/dict/hashtable.c:80:57: note: Function 'hashtable_dict_new' argument 2 names different: declaration 'key_hsh' definition 'key_hash'.
hashtable_dict_new(dict_cmp_func key_cmp, dict_hsh_func key_hash,
                                                        ^
contrib/cubmemc/wraplib/dict/hashtable.c:589:8: style: Variable 'slot' is assigned a value that is never used. [unreadVariable]
  slot = 0;
       ^
contrib/cubmemc/wraplib/dict/hb_tree.c:154:6: style: The scope of the variable 'rv' can be reduced. [variableScope]
 int rv;
     ^
contrib/cubmemc/wraplib/dict/hb_tree.c:853:6: style: The scope of the variable 'rv' can be reduced. [variableScope]
 int rv;
     ^
contrib/cubmemc/wraplib/dict/hb_tree.c:741:26: style:inconclusive: Function 'hb_itor_destroy' argument 1 names different: declaration 'tree' definition 'itor'. [funcArgNamesDifferent]
hb_itor_destroy(hb_itor *itor)
                         ^
contrib/cubmemc/wraplib/dict/hb_tree.h:45:22: note: Function 'hb_itor_destroy' argument 1 names different: declaration 'tree' definition 'itor'.
void hb_itor_destroy __P((hb_itor *tree));
                     ^
contrib/cubmemc/wraplib/dict/hb_tree.c:741:26: note: Function 'hb_itor_destroy' argument 1 names different: declaration 'tree' definition 'itor'.
hb_itor_destroy(hb_itor *itor)
                         ^
contrib/cubmemc/wraplib/dict/pr_tree.c:392:8: style: Condition 'out' is always true [knownConditionTrueFalse]
   if (out)
       ^
contrib/cubmemc/wraplib/dict/pr_tree.c:370:19: note: Assuming that condition 'node->llink==NULL' is not redundant
  if (node->llink == NULL) {
                  ^
contrib/cubmemc/wraplib/dict/pr_tree.c:391:14: note: Assignment 'out=node->llink', assigned value is 0
   out = node->llink;
             ^
contrib/cubmemc/wraplib/dict/pr_tree.c:392:8: note: Condition 'out' is always true
   if (out)
       ^
contrib/cubmemc/wraplib/dict/pr_tree.c:119:6: style: The scope of the variable 'rv' can be reduced. [variableScope]
 int rv;
     ^
contrib/cubmemc/wraplib/dict/pr_tree.c:357:6: style: The scope of the variable 'rv' can be reduced. [variableScope]
 int rv;
     ^
contrib/cubmemc/wraplib/dict/pr_tree.c:906:6: style: The scope of the variable 'rv' can be reduced. [variableScope]
 int rv;
     ^
contrib/cubmemc/wraplib/dict/pr_tree.c:792:26: style:inconclusive: Function 'pr_itor_destroy' argument 1 names different: declaration 'tree' definition 'itor'. [funcArgNamesDifferent]
pr_itor_destroy(pr_itor *itor)
                         ^
contrib/cubmemc/wraplib/dict/pr_tree.h:45:22: note: Function 'pr_itor_destroy' argument 1 names different: declaration 'tree' definition 'itor'.
void pr_itor_destroy __P((pr_itor *tree));
                     ^
contrib/cubmemc/wraplib/dict/pr_tree.c:792:26: note: Function 'pr_itor_destroy' argument 1 names different: declaration 'tree' definition 'itor'.
pr_itor_destroy(pr_itor *itor)
                         ^
contrib/cubmemc/wraplib/dict/rb_tree.c:121:6: style: The scope of the variable 'rv' can be reduced. [variableScope]
 int rv;
     ^
contrib/cubmemc/wraplib/dict/rb_tree.c:295:6: style: The scope of the variable 'rv' can be reduced. [variableScope]
 int rv;
     ^
contrib/cubmemc/wraplib/dict/rb_tree.c:859:6: style: The scope of the variable 'rv' can be reduced. [variableScope]
 int rv;
     ^
contrib/cubmemc/wraplib/dict/rb_tree.c:747:26: style:inconclusive: Function 'rb_itor_destroy' argument 1 names different: declaration 'tree' definition 'itor'. [funcArgNamesDifferent]
rb_itor_destroy(rb_itor *itor)
                         ^
contrib/cubmemc/wraplib/dict/rb_tree.h:45:22: note: Function 'rb_itor_destroy' argument 1 names different: declaration 'tree' definition 'itor'.
void rb_itor_destroy __P((rb_itor *tree));
                     ^
contrib/cubmemc/wraplib/dict/rb_tree.c:747:26: note: Function 'rb_itor_destroy' argument 1 names different: declaration 'tree' definition 'itor'.
rb_itor_destroy(rb_itor *itor)
                         ^
contrib/cubmemc/wraplib/dict/sp_tree.c:323:6: style: The scope of the variable 'rv' can be reduced. [variableScope]
 int rv;
     ^
contrib/cubmemc/wraplib/dict/sp_tree.c:362:6: style: The scope of the variable 'rv' can be reduced. [variableScope]
 int rv;
     ^
contrib/cubmemc/wraplib/dict/sp_tree.c:833:6: style: The scope of the variable 'rv' can be reduced. [variableScope]
 int rv;
     ^
contrib/cubmemc/wraplib/dict/sp_tree.c:721:26: style:inconclusive: Function 'sp_itor_destroy' argument 1 names different: declaration 'tree' definition 'itor'. [funcArgNamesDifferent]
sp_itor_destroy(sp_itor *itor)
                         ^
contrib/cubmemc/wraplib/dict/sp_tree.h:45:22: note: Function 'sp_itor_destroy' argument 1 names different: declaration 'tree' definition 'itor'.
void sp_itor_destroy __P((sp_itor *tree));
                     ^
contrib/cubmemc/wraplib/dict/sp_tree.c:721:26: note: Function 'sp_itor_destroy' argument 1 names different: declaration 'tree' definition 'itor'.
sp_itor_destroy(sp_itor *itor)
                         ^
contrib/cubmemc/wraplib/dict/test.c:125:52: warning: Either the condition 'fp==NULL' is redundant or there is possible null pointer dereference: fp. [nullPointerRedundantCheck]
 for (i = 0; i < NWORDS && fgets(buf, sizeof(buf), fp); i++) {
                                                   ^
contrib/cubmemc/wraplib/dict/test.c:121:9: note: Assuming that condition 'fp==NULL' is not redundant
 if (fp == NULL)
        ^
contrib/cubmemc/wraplib/dict/test.c:125:52: note: Null pointer dereference
 for (i = 0; i < NWORDS && fgets(buf, sizeof(buf), fp); i++) {
                                                   ^
contrib/cubmemc/wraplib/dict/test.c:129:9: warning: Either the condition 'fp==NULL' is redundant or there is possible null pointer dereference: fp. [nullPointerRedundantCheck]
 fclose(fp);
        ^
contrib/cubmemc/wraplib/dict/test.c:121:9: note: Assuming that condition 'fp==NULL' is not redundant
 if (fp == NULL)
        ^
contrib/cubmemc/wraplib/dict/test.c:129:9: note: Null pointer dereference
 fclose(fp);
        ^
contrib/cubmemc/wraplib/dict/test.c:53:14: style: The scope of the variable 'n' can be reduced. [variableScope]
 unsigned i, n;
             ^
contrib/cubmemc/wraplib/dict/test.c:72:24: style: The scope of the variable 'p' can be reduced. [variableScope]
 char buf[512], *ptr, *p;
                       ^
contrib/cubmemc/wraplib/dict/tr_tree.c:287:6: style: The scope of the variable 'rv' can be reduced. [variableScope]
 int rv;
     ^
contrib/cubmemc/wraplib/dict/tr_tree.c:340:6: style: The scope of the variable 'rv' can be reduced. [variableScope]
 int rv;
     ^
contrib/cubmemc/wraplib/dict/tr_tree.c:777:6: style: The scope of the variable 'rv' can be reduced. [variableScope]
 int rv;
     ^
contrib/cubmemc/wraplib/dict/tr_tree.c:665:26: style:inconclusive: Function 'tr_itor_destroy' argument 1 names different: declaration 'tree' definition 'itor'. [funcArgNamesDifferent]
tr_itor_destroy(tr_itor *itor)
                         ^
contrib/cubmemc/wraplib/dict/tr_tree.h:45:22: note: Function 'tr_itor_destroy' argument 1 names different: declaration 'tree' definition 'itor'.
void tr_itor_destroy __P((tr_itor *tree));
                     ^
contrib/cubmemc/wraplib/dict/tr_tree.c:665:26: note: Function 'tr_itor_destroy' argument 1 names different: declaration 'tree' definition 'itor'.
tr_itor_destroy(tr_itor *itor)
                         ^
contrib/cubmemc/wraplib/dict/wb_tree.c:342:8: style: Condition 'out' is always true [knownConditionTrueFalse]
   if (out)
       ^
contrib/cubmemc/wraplib/dict/wb_tree.c:318:19: note: Assuming that condition 'node->llink==NULL' is not redundant
  if (node->llink == NULL) {
                  ^
contrib/cubmemc/wraplib/dict/wb_tree.c:341:14: note: Assignment 'out=node->llink', assigned value is 0
   out = node->llink;
             ^
contrib/cubmemc/wraplib/dict/wb_tree.c:342:8: note: Condition 'out' is always true
   if (out)
       ^
contrib/cubmemc/wraplib/dict/wb_tree.c:148:6: style: The scope of the variable 'rv' can be reduced. [variableScope]
 int rv;
     ^
contrib/cubmemc/wraplib/dict/wb_tree.c:178:8: style: The scope of the variable 'wbal' can be reduced. [variableScope]
 float wbal;
       ^
contrib/cubmemc/wraplib/dict/wb_tree.c:246:8: style: The scope of the variable 'wbal' can be reduced. [variableScope]
 float wbal;
       ^
contrib/cubmemc/wraplib/dict/wb_tree.c:305:6: style: The scope of the variable 'rv' can be reduced. [variableScope]
 int rv;
     ^
contrib/cubmemc/wraplib/dict/wb_tree.c:865:6: style: The scope of the variable 'rv' can be reduced. [variableScope]
 int rv;
     ^
contrib/cubmemc/wraplib/dict/wb_tree.c:752:26: style:inconclusive: Function 'wb_itor_destroy' argument 1 names different: declaration 'tree' definition 'itor'. [funcArgNamesDifferent]
wb_itor_destroy(wb_itor *itor)
                         ^
contrib/cubmemc/wraplib/dict/wb_tree.h:45:22: note: Function 'wb_itor_destroy' argument 1 names different: declaration 'tree' definition 'itor'.
void wb_itor_destroy __P((wb_itor *tree));
                     ^
contrib/cubmemc/wraplib/dict/wb_tree.c:752:26: note: Function 'wb_itor_destroy' argument 1 names different: declaration 'tree' definition 'itor'.
wb_itor_destroy(wb_itor *itor)
                         ^
contrib/cubmemc/wraplib/libcubmemc.c:332:19: style: The if condition is the same as the previous if condition [duplicateCondition]
   if (fsm_status == SL_SERVER)
                  ^
contrib/cubmemc/wraplib/libcubmemc.c:321:19: note: First condition
   if (fsm_status == SL_SERVER)
                  ^
contrib/cubmemc/wraplib/libcubmemc.c:332:19: note: Second condition
   if (fsm_status == SL_SERVER)
                  ^
contrib/cubmemc/wraplib/libcubmemc.c:1078:16: style: Condition 'value_p!=NULL' is always true [knownConditionTrueFalse]
   if (value_p != NULL)
               ^
contrib/cubmemc/wraplib/libcubmemc.c:1063:15: note: Assuming that condition 'value_p==NULL' is not redundant
  if (value_p == NULL)
              ^
contrib/cubmemc/wraplib/libcubmemc.c:1078:16: note: Condition 'value_p!=NULL' is always true
   if (value_p != NULL)
               ^
contrib/cubmemc/wraplib/libcubmemc.c:510:4: error: Memory leak: entry [memleak]
   return CUBMEMC_ERROR_OUT_OF_MEMORY;
   ^
contrib/cubmemc/wraplib/libcubmemc.c:867:11: style: Variable 'msg' is reassigned a value before the old one has been used. [redundantAssignment]
      msg = (char *) memcached_strerror (NULL, ret);
          ^
contrib/cubmemc/wraplib/libcubmemc.c:859:11: note: msg is assigned
      msg = "CUBRID error";
          ^
contrib/cubmemc/wraplib/libcubmemc.c:867:11: note: msg is overwritten
      msg = (char *) memcached_strerror (NULL, ret);
          ^
contrib/cubmemc/wraplib/libcubmemc.c:867:11: style: Variable 'msg' is reassigned a value before the old one has been used. [redundantAssignment]
      msg = (char *) memcached_strerror (NULL, ret);
          ^
contrib/cubmemc/wraplib/libcubmemc.c:863:11: note: msg is assigned
      msg = "Success";
          ^
contrib/cubmemc/wraplib/libcubmemc.c:867:11: note: msg is overwritten
      msg = (char *) memcached_strerror (NULL, ret);
          ^
contrib/cubmemc/wraplib/libcubmemc.c:1259:11: style: Variable 'ret' is reassigned a value before the old one has been used. [redundantAssignment]
      ret = CUBMEMC_ERROR_INTERNAL;
          ^
contrib/cubmemc/wraplib/libcubmemc.c:1254:11: note: ret is assigned
      ret = memcached_cas (hk->entry->memc, key_p, (size_t) key_len,
          ^
contrib/cubmemc/wraplib/libcubmemc.c:1259:11: note: ret is overwritten
      ret = CUBMEMC_ERROR_INTERNAL;
          ^
contrib/cubmemc/wraplib/libcubmemc.c:151:26: style:inconclusive: Function 'string_hash' argument 1 names different: declaration 'k1' definition 'k'. [funcArgNamesDifferent]
string_hash (const char *k)
                         ^
contrib/cubmemc/wraplib/libcubmemc.c:82:46: note: Function 'string_hash' argument 1 names different: declaration 'k1' definition 'k'.
static unsigned int string_hash (const char *k1);
                                             ^
contrib/cubmemc/wraplib/libcubmemc.c:151:26: note: Function 'string_hash' argument 1 names different: declaration 'k1' definition 'k'.
string_hash (const char *k)
                         ^
contrib/cubmemc/wraplib/libcubmemc.c:1016:38: style:inconclusive: Function 'my_cubmemc_get' argument 4 names different: declaration 'type' definition 'target_type'. [funcArgNamesDifferent]
  DB_VALUE * key, CUBMEMC_VALUE_TYPE target_type)
                                     ^
contrib/cubmemc/wraplib/libcubmemc.c:113:43: note: Function 'my_cubmemc_get' argument 4 names different: declaration 'type' definition 'target_type'.
       DB_VALUE * key, CUBMEMC_VALUE_TYPE type);
                                          ^
contrib/cubmemc/wraplib/libcubmemc.c:1016:38: note: Function 'my_cubmemc_get' argument 4 names different: declaration 'type' definition 'target_type'.
  DB_VALUE * key, CUBMEMC_VALUE_TYPE target_type)
                                     ^
contrib/cubmemc/wraplib/libcubmemc.c:516:11: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
      ret = create_and_init_memcached (&memc, server_list, behavior);
          ^
contrib/cubmemc/wraplib/libcubmemc.c:989:11: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
      ret = db_make_string (db_val, vp);
          ^
contrib/cubmemc/wraplib/libcubmemc.c:993:11: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
      ret = db_make_varbit (db_val, DB_DEFAULT_PRECISION, vp, vlen * 8);
          ^
contrib/cubmemc/wraplib/libcubmemc.c:997:11: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
      ret = CUBMEMC_ERROR_INTERNAL;
          ^
contrib/getshardid/get_shard_id.c:545:4: warning:inconclusive: The buffer 'key_file' may not be null-terminated after the call to strncpy(). [terminateStrncpy]
   strncpy (key_file, optarg, PATH_MAX);
   ^
contrib/getshardid/get_shard_id.c:557:4: warning:inconclusive: The buffer 'lib_file' may not be null-terminated after the call to strncpy(). [terminateStrncpy]
   strncpy (lib_file, optarg, PATH_MAX);
   ^
contrib/getshardid/get_shard_id.c:561:4: warning:inconclusive: The buffer 'function_name' may not be null-terminated after the call to strncpy(). [terminateStrncpy]
   strncpy (function_name, optarg, NAME_MAX);
   ^
contrib/getshardid/get_shard_id.c:388:12: warning: sscanf() without field width limits can crash with huge input data. [invalidscanf]
   nargs = sscanf (line, "[%%%[^]]", section);
           ^
contrib/getshardid/get_shard_id.c:151:7: style: The scope of the variable 'error' can be reduced. [variableScope]
  int error;
      ^
contrib/getshardid/get_shard_id.c:196:12: style: The scope of the variable 'mid' can be reduced. [variableScope]
  int min, mid, max;
           ^
contrib/getshardid/get_shard_id.c:197:7: style: The scope of the variable 'result' can be reduced. [variableScope]
  int result;
      ^
contrib/getshardid/get_shard_id.c:198:16: style: The scope of the variable 'key_p' can be reduced. [variableScope]
  T_SHARD_KEY *key_p;
               ^
contrib/getshardid/get_shard_id.c:230:12: style: The scope of the variable 'mid' can be reduced. [variableScope]
  int min, mid, max;
           ^
contrib/getshardid/get_shard_id.c:232:22: style: The scope of the variable 'range_p' can be reduced. [variableScope]
  T_SHARD_KEY_RANGE *range_p;
                     ^
contrib/getshardid/get_shard_id.c:486:16: style: The scope of the variable 'key_p' can be reduced. [variableScope]
  T_SHARD_KEY *key_p;
               ^
contrib/getshardid/get_shard_id.c:152:9: style: Local variable 'handle' shadows outer variable [shadowVariable]
  void *handle;
        ^
contrib/getshardid/get_shard_id.c:74:7: note: Shadowed declaration
void *handle = NULL;
      ^
contrib/getshardid/get_shard_id.c:152:9: note: Shadow variable
  void *handle;
        ^
contrib/getshardid/get_shard_id.c:152:9: style: Unused variable: handle [unusedVariable]
  void *handle;
        ^
contrib/getshardid/get_shard_id.c:231:7: style: Unused variable: result [unusedVariable]
  int result;
      ^
contrib/getshardid/get_shard_id.c:614:11: style: Variable 'buf_len' is assigned a value that is never used. [unreadVariable]
  buf_len += sprintf (buf + buf_len, ", KEY_COLUMN : %s\n", key_column);
          ^
contrib/perl/dbdimp.c:940:9: warning: Redundant assignment of 'sth' to itself. [selfAssignment]
    sth = sth;
        ^
contrib/perl/dbdimp.c:941:13: warning: Redundant assignment of 'imp_sth' to itself. [selfAssignment]
    imp_sth = imp_sth;
            ^
contrib/perl/dbdimp.c:942:11: warning: Redundant assignment of 'field' to itself. [selfAssignment]
    field = field;
          ^
contrib/perl/dbdimp.c:943:12: warning: Redundant assignment of 'offset' to itself. [selfAssignment]
    offset = offset;
           ^
contrib/perl/dbdimp.c:944:9: warning: Redundant assignment of 'len' to itself. [selfAssignment]
    len = len;
        ^
contrib/perl/dbdimp.c:945:12: warning: Redundant assignment of 'destrv' to itself. [selfAssignment]
    destrv = destrv;
           ^
contrib/perl/dbdimp.c:946:16: warning: Redundant assignment of 'destoffset' to itself. [selfAssignment]
    destoffset = destoffset;
               ^
contrib/perl/dbdimp.c:856:10: style: The scope of the variable 'col_name' can be reduced. [variableScope]
    char col_name[128] = {'\0'};
         ^
contrib/perl/dbdimp.c:870:17: style: The scope of the variable 'type' can be reduced. [variableScope]
            int type;
                ^
contrib/perl/dbdimp.c:882:17: style: The scope of the variable 'scale' can be reduced. [variableScope]
            int scale;
                ^
contrib/perl/dbdimp.c:893:17: style: The scope of the variable 'not_null' can be reduced. [variableScope]
            int not_null;
                ^
contrib/perl/dbdimp.c:904:17: style: The scope of the variable 'precision' can be reduced. [variableScope]
            int precision;
                ^
contrib/perl/dbdimp.c:1101:9: style: The scope of the variable 'res' can be reduced. [variableScope]
    int res;
        ^
contrib/perl/dbdimp.c:1649:9: style: The scope of the variable 'res' can be reduced. [variableScope]
    int res;
        ^
contrib/perl/dbdimp.c:1699:17: style: The scope of the variable 'type' can be reduced. [variableScope]
    int i, res, type, num, ind;
                ^
contrib/perl/dbdimp.c:1185:49: style:inconclusive: Function 'cubrid_st_lob_export' argument 3 names different: declaration 'file' definition 'filename'. [funcArgNamesDifferent]
cubrid_st_lob_export( SV *sth, int index, char *filename )
                                                ^
contrib/perl/dbdimp.h:104:53: note: Function 'cubrid_st_lob_export' argument 3 names different: declaration 'file' definition 'filename'.
int cubrid_st_lob_export (SV *sth, int index, char *file);
                                                    ^
contrib/perl/dbdimp.c:1185:49: note: Function 'cubrid_st_lob_export' argument 3 names different: declaration 'file' definition 'filename'.
cubrid_st_lob_export( SV *sth, int index, char *filename )
                                                ^
contrib/perl/dbdimp.c:1413:23: style:inconclusive: Function '_cubrid_lob_bind' argument 1 names different: declaration 'sv' definition 'sth'. [funcArgNamesDifferent]
_cubrid_lob_bind( SV *sth,
                      ^
contrib/perl/dbdimp.c:76:34: note: Function '_cubrid_lob_bind' argument 1 names different: declaration 'sv' definition 'sth'.
static int _cubrid_lob_bind (SV *sv,
                                 ^
contrib/perl/dbdimp.c:1413:23: note: Function '_cubrid_lob_bind' argument 1 names different: declaration 'sv' definition 'sth'.
_cubrid_lob_bind( SV *sth,
                      ^
contrib/perl/dbdimp.c:1612:18: error: Uninitialized variable: res [uninitvar]
    req_handle = res;
                 ^
contrib/perl/dbdimp.c:940:9: style: Variable 'sth' is assigned a value that is never used. [unreadVariable]
    sth = sth;
        ^
contrib/perl/dbdimp.c:941:13: style: Variable 'imp_sth' is assigned a value that is never used. [unreadVariable]
    imp_sth = imp_sth;
            ^
contrib/perl/dbdimp.c:942:11: style: Variable 'field' is assigned a value that is never used. [unreadVariable]
    field = field;
          ^
contrib/perl/dbdimp.c:943:12: style: Variable 'offset' is assigned a value that is never used. [unreadVariable]
    offset = offset;
           ^
contrib/perl/dbdimp.c:944:9: style: Variable 'len' is assigned a value that is never used. [unreadVariable]
    len = len;
        ^
contrib/perl/dbdimp.c:945:12: style: Variable 'destrv' is assigned a value that is never used. [unreadVariable]
    destrv = destrv;
           ^
contrib/perl/dbdimp.c:946:16: style: Variable 'destoffset' is assigned a value that is never used. [unreadVariable]
    destoffset = destoffset;
               ^
contrib/perl/dbdimp.c:1154:11: style: Variable 'i' is assigned a value that is never used. [unreadVariable]
    int i = 0;
          ^
contrib/perl/dbdimp.c:1152:9: style: Unused variable: res [unusedVariable]
    int res, ind;
        ^
contrib/perl/dbdimp.c:1152:14: style: Unused variable: ind [unusedVariable]
    int res, ind;
             ^
contrib/perl/dbdimp.c:1153:17: style: Unused variable: error [unusedVariable]
    T_CCI_ERROR error;
                ^
contrib/perl/dbdimp.c:1281:18: style: Variable 'res' is assigned a value that is never used. [unreadVariable]
        if ((res = write (fd, buf, size)) < 0) {
                 ^
contrib/php4/src/php_cubrid.h:128:1: error: There is an unknown macro here somewhere. Configuration is required. If ZEND_BEGIN_MODULE_GLOBALS is a macro then please configure it. [unknownMacro]
ZEND_BEGIN_MODULE_GLOBALS (cubrid)
^
contrib/php5/php_cubrid.c:1194:9: error: There is an unknown macro here somewhere. Configuration is required. If ZEND_NUM_ARGS is a macro then please configure it. [unknownMacro]
    if (zend_parse_parameters_none() == FAILURE) {
        ^
contrib/python-obsolete/cubrid.c:153:15: style: Expression is always false because 'else if' condition matches previous condition at line 151. [multiCondition]
    } else if (e > -2000) {
              ^
contrib/python-obsolete/cursor.c:73:7: style: The scope of the variable 'res' can be reduced. [variableScope]
  int res;
      ^
contrib/python-obsolete/cursor.c:105:7: style: The scope of the variable 'datatype' can be reduced. [variableScope]
  int datatype, precision, scale, nullable;
      ^
contrib/python-obsolete/cursor.c:105:17: style: The scope of the variable 'precision' can be reduced. [variableScope]
  int datatype, precision, scale, nullable;
                ^
contrib/python-obsolete/cursor.c:105:28: style: The scope of the variable 'scale' can be reduced. [variableScope]
  int datatype, precision, scale, nullable;
                           ^
contrib/python-obsolete/cursor.c:105:35: style: The scope of the variable 'nullable' can be reduced. [variableScope]
  int datatype, precision, scale, nullable;
                                  ^
contrib/python-obsolete/cursor.c:169:13: style: The scope of the variable 'paramVal' can be reduced. [variableScope]
  PyObject *paramVal;
            ^
contrib/python-obsolete/cursor.c:350:13: style: The scope of the variable 'e' can be reduced. [variableScope]
  PyObject *e;
            ^
contrib/python-obsolete/cursor.c:382:10: style: The scope of the variable 'type' can be reduced. [variableScope]
  int i, type;
         ^
contrib/python-obsolete/cursor.c:76:9: style: Variable 'res' is assigned a value that is never used. [unreadVariable]
    res = cci_close_req_handle(self->handle);
        ^
contrib/python/python_cubrid.c:206:21: style: Variable 'exception' is reassigned a value before the old one has been used. [redundantAssignment]
          exception = _cubrid_database_error;
                    ^
contrib/python/python_cubrid.c:197:13: note: exception is assigned
  exception = _cubrid_error;
            ^
contrib/python/python_cubrid.c:206:21: note: exception is overwritten
          exception = _cubrid_database_error;
                    ^
contrib/python/python_cubrid.c:1011:7: style: The scope of the variable 'type' can be reduced. [variableScope]
  int type;
      ^
contrib/python/python_cubrid.c:1012:13: style: The scope of the variable 'val' can be reduced. [variableScope]
  PyObject *val, *row;
            ^
contrib/python/python_cubrid.c:1596:20: style: The scope of the variable 'item' can be reduced. [variableScope]
  PyObject *desc, *item;
                   ^
contrib/python/python_cubrid.c:1598:7: style: The scope of the variable 'datatype' can be reduced. [variableScope]
  int datatype, precision, scale, nullable;
      ^
contrib/python/python_cubrid.c:1598:17: style: The scope of the variable 'precision' can be reduced. [variableScope]
  int datatype, precision, scale, nullable;
                ^
contrib/python/python_cubrid.c:1598:28: style: The scope of the variable 'scale' can be reduced. [variableScope]
  int datatype, precision, scale, nullable;
                           ^
contrib/python/python_cubrid.c:1598:35: style: The scope of the variable 'nullable' can be reduced. [variableScope]
  int datatype, precision, scale, nullable;
                                  ^
contrib/python/python_cubrid.c:1701:22: style: The scope of the variable 'item' can be reduced. [variableScope]
  PyObject *result, *item;
                     ^
contrib/python/python_cubrid.c:2065:13: style: The scope of the variable 'e' can be reduced. [variableScope]
  PyObject *e;
            ^
contrib/python/python_cubrid.c:2102:10: style: The scope of the variable 'type' can be reduced. [variableScope]
  int i, type;
         ^
contrib/python/python_cubrid.c:2129:10: style: The scope of the variable 'type' can be reduced. [variableScope]
  int i, type;
         ^
contrib/python/python_cubrid.c:2697:7: style: The scope of the variable 'res' can be reduced. [variableScope]
  int res, type_size, size;
      ^
contrib/python/python_cubrid.c:2697:12: style: The scope of the variable 'type_size' can be reduced. [variableScope]
  int res, type_size, size;
           ^
contrib/python/python_cubrid.c:2697:23: style: The scope of the variable 'size' can be reduced. [variableScope]
  int res, type_size, size;
                      ^
contrib/python/python_cubrid.c:2794:17: style: The scope of the variable 'type_len' can be reduced. [variableScope]
  int len, res, type_len = 0;
                ^
contrib/python/python_cubrid.c:2865:11: style: The scope of the variable 'res' can be reduced. [variableScope]
  int fp, res, size;
          ^
contrib/python/python_cubrid.c:2865:16: style: The scope of the variable 'size' can be reduced. [variableScope]
  int fp, res, size;
               ^
contrib/python/python_cubrid.c:53:7: style: struct member '_cubrid_isolation::level' is never used. [unusedStructMember]
  int level;
      ^
contrib/python/python_cubrid.c:2794:26: style: Variable 'type_len' is assigned a value that is never used. [unreadVariable]
  int len, res, type_len = 0;
                         ^
contrib/ruby/driver/ext/oid.c:123:9: style: The scope of the variable 'attr_name' can be reduced. [variableScope]
  char *attr_name;
        ^
contrib/ruby/driver/ext/oid.c:387:16: style: Local variable 'oid' shadows outer variable [shadowVariable]
          Oid *oid;
               ^
contrib/ruby/driver/ext/oid.c:266:8: note: Shadowed declaration
  Oid *oid;
       ^
contrib/ruby/driver/ext/oid.c:387:16: note: Shadow variable
          Oid *oid;
               ^
contrib/ruby/driver/ext/stmt.c:562:10: style: The scope of the variable 'double_val' can be reduced. [variableScope]
  double double_val;
         ^
contrib/ruby/driver/ext/stmt.c:675:10: style: The scope of the variable 'double_val' can be reduced. [variableScope]
  double double_val;
         ^
contrib/ruby/driver/ext/stmt.c:815:10: style: The scope of the variable 'type' can be reduced. [variableScope]
  int i, type;
         ^
contrib/ruby/driver/ext/stmt.c:1017:7: style: The scope of the variable 'datatype' can be reduced. [variableScope]
  int datatype, precision, scale, nullable;
      ^
contrib/ruby/driver/ext/stmt.c:1017:17: style: The scope of the variable 'precision' can be reduced. [variableScope]
  int datatype, precision, scale, nullable;
                ^
contrib/ruby/driver/ext/stmt.c:1017:28: style: The scope of the variable 'scale' can be reduced. [variableScope]
  int datatype, precision, scale, nullable;
                           ^
contrib/ruby/driver/ext/stmt.c:1017:35: style: The scope of the variable 'nullable' can be reduced. [variableScope]
  int datatype, precision, scale, nullable;
                                  ^
src/api/api_handle.c:616:7: style: The scope of the variable 'res' can be reduced. [variableScope]
  int res;
      ^
src/api/api_handle.c:817:23: style:inconclusive: Function 'bh_root_acquire' argument 1 names different: declaration 'rid' definition 'rrid'. [funcArgNamesDifferent]
bh_root_acquire (int *rrid, BH_ROOT_TYPE rt)
                      ^
src/api/api_handle.h:90:34: note: Function 'bh_root_acquire' argument 1 names different: declaration 'rid' definition 'rrid'.
extern int bh_root_acquire (int *rid, BH_ROOT_TYPE rt);
                                 ^
src/api/api_handle.c:817:23: note: Function 'bh_root_acquire' argument 1 names different: declaration 'rid' definition 'rrid'.
bh_root_acquire (int *rrid, BH_ROOT_TYPE rt)
                      ^
src/api/api_handle.c:871:22: style:inconclusive: Function 'bh_root_release' argument 1 names different: declaration 'rid' definition 'rrid'. [funcArgNamesDifferent]
bh_root_release (int rrid)
                     ^
src/api/api_handle.h:91:33: note: Function 'bh_root_release' argument 1 names different: declaration 'rid' definition 'rrid'.
extern int bh_root_release (int rid);
                                ^
src/api/api_handle.c:871:22: note: Function 'bh_root_release' argument 1 names different: declaration 'rid' definition 'rrid'.
bh_root_release (int rrid)
                     ^
src/api/api_handle.c:908:19: style:inconclusive: Function 'bh_root_lock' argument 1 names different: declaration 'rid' definition 'rrid'. [funcArgNamesDifferent]
bh_root_lock (int rrid, BH_INTERFACE ** bhifs)
                  ^
src/api/api_handle.h:92:30: note: Function 'bh_root_lock' argument 1 names different: declaration 'rid' definition 'rrid'.
extern int bh_root_lock (int rid, BH_INTERFACE ** ifs);
                             ^
src/api/api_handle.c:908:19: note: Function 'bh_root_lock' argument 1 names different: declaration 'rid' definition 'rrid'.
bh_root_lock (int rrid, BH_INTERFACE ** bhifs)
                  ^
src/api/api_handle.c:908:41: style:inconclusive: Function 'bh_root_lock' argument 2 names different: declaration 'ifs' definition 'bhifs'. [funcArgNamesDifferent]
bh_root_lock (int rrid, BH_INTERFACE ** bhifs)
                                        ^
src/api/api_handle.h:92:51: note: Function 'bh_root_lock' argument 2 names different: declaration 'ifs' definition 'bhifs'.
extern int bh_root_lock (int rid, BH_INTERFACE ** ifs);
                                                  ^
src/api/api_handle.c:908:41: note: Function 'bh_root_lock' argument 2 names different: declaration 'ifs' definition 'bhifs'.
bh_root_lock (int rrid, BH_INTERFACE ** bhifs)
                                        ^
src/api/api_handle.c:944:21: style:inconclusive: Function 'bh_root_unlock' argument 1 names different: declaration 'rid' definition 'rrid'. [funcArgNamesDifferent]
bh_root_unlock (int rrid)
                    ^
src/api/api_handle.h:93:32: note: Function 'bh_root_unlock' argument 1 names different: declaration 'rid' definition 'rrid'.
extern int bh_root_unlock (int rid);
                               ^
src/api/api_handle.c:944:21: note: Function 'bh_root_unlock' argument 1 names different: declaration 'rid' definition 'rrid'.
bh_root_unlock (int rrid)
                    ^
src/api/api_handle.c:967:77: style:inconclusive: Function 'create_handle_context' argument 3 names different: declaration 'ifs' definition 'bhifs'. [funcArgNamesDifferent]
create_handle_context (bh_provider * prov, BH_ROOT_TYPE rt, BH_INTERFACE ** bhifs)
                                                                            ^
src/api/api_handle.h:95:88: note: Function 'create_handle_context' argument 3 names different: declaration 'ifs' definition 'bhifs'.
extern int create_handle_context (bh_provider * prov, BH_ROOT_TYPE rt, BH_INTERFACE ** ifs);
                                                                                       ^
src/api/api_handle.c:967:77: note: Function 'create_handle_context' argument 3 names different: declaration 'ifs' definition 'bhifs'.
create_handle_context (bh_provider * prov, BH_ROOT_TYPE rt, BH_INTERFACE ** bhifs)
                                                                            ^
src/api/api_handle.c:470:6: style: Variable 'fe' is assigned a value that is never used. [unreadVariable]
  fe = (bh_context_fe *) bhifs;
     ^
src/api/api_handle.c:496:6: style: Variable 'fe' is assigned a value that is never used. [unreadVariable]
  fe = (bh_context_fe *) bhifs;
     ^
src/api/api_util.c:166:92: style:inconclusive: Function 'hash_new' argument 5 names different: declaration 'ht' definition 'rht'. [funcArgNamesDifferent]
hash_new (int bucket_sz, ht_hashf hashf, ht_keyf keyf, ht_comparef comparef, hash_table ** rht)
                                                                                           ^
src/api/api_util.h:90:103: note: Function 'hash_new' argument 5 names different: declaration 'ht' definition 'rht'.
extern int hash_new (int bucket_sz, ht_hashf hashf, ht_keyf keyf, ht_comparef comparef, hash_table ** ht);
                                                                                                      ^
src/api/api_util.c:166:92: note: Function 'hash_new' argument 5 names different: declaration 'ht' definition 'rht'.
hash_new (int bucket_sz, ht_hashf hashf, ht_keyf keyf, ht_comparef comparef, hash_table ** rht)
                                                                                           ^
src/api/api_util.c:233:49: style:inconclusive: Function 'hash_lookup' argument 3 names different: declaration 'elem' definition 'relem'. [funcArgNamesDifferent]
hash_lookup (hash_table * ht, void *key, void **relem)
                                                ^
src/api/api_util.h:92:60: note: Function 'hash_lookup' argument 3 names different: declaration 'elem' definition 'relem'.
extern int hash_lookup (hash_table * ht, void *key, void **elem);
                                                           ^
src/api/api_util.c:233:49: note: Function 'hash_lookup' argument 3 names different: declaration 'elem' definition 'relem'.
hash_lookup (hash_table * ht, void *key, void **relem)
                                                ^
src/api/api_util.c:318:49: style:inconclusive: Function 'hash_delete' argument 3 names different: declaration 'elem' definition 'relem'. [funcArgNamesDifferent]
hash_delete (hash_table * ht, void *key, void **relem)
                                                ^
src/api/api_util.h:94:60: note: Function 'hash_delete' argument 3 names different: declaration 'elem' definition 'relem'.
extern int hash_delete (hash_table * ht, void *key, void **elem);
                                                           ^
src/api/api_util.c:318:49: note: Function 'hash_delete' argument 3 names different: declaration 'elem' definition 'relem'.
hash_delete (hash_table * ht, void *key, void **relem)
                                                ^
src/api/api_value_indexer.c:171:10: style: The scope of the variable 'res' can be reduced. [variableScope]
  int i, res;
         ^
src/api/api_value_indexer.c:224:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/api/api_value_indexer.c:151:78: style:inconclusive: Function 'ai_api_set' argument 4 names different: declaration 'dv' definition 'val'. [funcArgNamesDifferent]
ai_api_set (VALUE_INDEXER * indexer, int index, VALUE_AREA * va, API_VALUE * val)
                                                                             ^
src/api/api_value_indexer.c:64:89: note: Function 'ai_api_set' argument 4 names different: declaration 'dv' definition 'val'.
static int ai_api_set (VALUE_INDEXER * indexer, int index, VALUE_AREA * va, API_VALUE * dv);
                                                                                        ^
src/api/api_value_indexer.c:151:78: note: Function 'ai_api_set' argument 4 names different: declaration 'dv' definition 'val'.
ai_api_set (VALUE_INDEXER * indexer, int index, VALUE_AREA * va, API_VALUE * val)
                                                                             ^
src/api/api_value_indexer.c:420:78: style:inconclusive: Function 'li_api_set' argument 4 names different: declaration 'val' definition 'dval'. [funcArgNamesDifferent]
li_api_set (VALUE_INDEXER * indexer, int index, VALUE_AREA * va, API_VALUE * dval)
                                                                             ^
src/api/api_value_indexer.c:74:89: note: Function 'li_api_set' argument 4 names different: declaration 'val' definition 'dval'.
static int li_api_set (VALUE_INDEXER * indexer, int index, VALUE_AREA * va, API_VALUE * val);
                                                                                        ^
src/api/api_value_indexer.c:420:78: note: Function 'li_api_set' argument 4 names different: declaration 'val' definition 'dval'.
li_api_set (VALUE_INDEXER * indexer, int index, VALUE_AREA * va, API_VALUE * dval)
                                                                             ^
src/api/cci_stub.c:2528:13: warning: Assert statement modifies 'i'. [assignmentInAssert]
  assert (i = pstmt->num_batch);
            ^
src/api/cci_stub.c:504:7: warning: Either the condition 'impl' is redundant or there is possible null pointer dereference: impl. [nullPointerRedundantCheck]
  if (impl->opool)
      ^
src/api/cci_stub.c:495:7: note: Assuming that condition 'impl' is not redundant
  if (impl)
      ^
src/api/cci_stub.c:504:7: note: Null pointer dereference
  if (impl->opool)
      ^
src/api/cci_stub.c:901:3: warning: Either the condition 'bind!=NULL' is redundant or there is possible null pointer dereference: bind. [nullPointerRedundantCheck]
  bind->value = NULL;
  ^
src/api/cci_stub.c:908:16: note: Assuming that condition 'bind!=NULL' is not redundant
  assert (bind != NULL);
               ^
src/api/cci_stub.c:901:3: note: Null pointer dereference
  bind->value = NULL;
  ^
src/api/cci_stub.c:902:3: warning: Either the condition 'bind!=NULL' is redundant or there is possible null pointer dereference: bind. [nullPointerRedundantCheck]
  bind->atype = CCI_A_TYPE_STR;
  ^
src/api/cci_stub.c:908:16: note: Assuming that condition 'bind!=NULL' is not redundant
  assert (bind != NULL);
               ^
src/api/cci_stub.c:902:3: note: Null pointer dereference
  bind->atype = CCI_A_TYPE_STR;
  ^
src/api/cci_stub.c:903:3: warning: Either the condition 'bind!=NULL' is redundant or there is possible null pointer dereference: bind. [nullPointerRedundantCheck]
  bind->redirected = false;
  ^
src/api/cci_stub.c:908:16: note: Assuming that condition 'bind!=NULL' is not redundant
  assert (bind != NULL);
               ^
src/api/cci_stub.c:903:3: note: Null pointer dereference
  bind->redirected = false;
  ^
src/api/cci_stub.c:3029:3: warning: Either the condition 'if(names)' is redundant or there is possible null pointer dereference: names. [nullPointerRedundantCheck]
  names[ARG.nupdates] = NULL;
  ^
src/api/cci_stub.c:3040:6: note: Assuming that condition 'if(names)' is not redundant
  if (names)
     ^
src/api/cci_stub.c:3029:3: note: Null pointer dereference
  names[ARG.nupdates] = NULL;
  ^
src/api/cci_stub.c:5368:20: style: Checking if unsigned expression 'buf_size' is less than zero. [unsignedLessThanZero]
      if (buf_size <= 0)
                   ^
src/api/cci_stub.c:521:41: style:inconclusive: Function 'init_connection_impl' argument 1 names different: declaration 'impl' definition 'pconn'. [funcArgNamesDifferent]
init_connection_impl (CONNECTION_IMPL * pconn, int rid, CI_CONNECTION conn, BH_INTERFACE * bh, int conn_handle,
                                        ^
src/api/cci_stub.c:249:53: note: Function 'init_connection_impl' argument 1 names different: declaration 'impl' definition 'pconn'.
static void init_connection_impl (CONNECTION_IMPL * impl, int rid, CI_CONNECTION conn, BH_INTERFACE * bh,
                                                    ^
src/api/cci_stub.c:521:41: note: Function 'init_connection_impl' argument 1 names different: declaration 'impl' definition 'pconn'.
init_connection_impl (CONNECTION_IMPL * pconn, int rid, CI_CONNECTION conn, BH_INTERFACE * bh, int conn_handle,
                                        ^
src/api/cci_stub.c:547:40: style:inconclusive: Function 'complete_connection' argument 1 names different: declaration 'impl' definition 'pconn'. [funcArgNamesDifferent]
complete_connection (CONNECTION_IMPL * pconn)
                                       ^
src/api/cci_stub.c:251:51: note: Function 'complete_connection' argument 1 names different: declaration 'impl' definition 'pconn'.
static int complete_connection (CONNECTION_IMPL * impl);
                                                  ^
src/api/cci_stub.c:547:40: note: Function 'complete_connection' argument 1 names different: declaration 'impl' definition 'pconn'.
complete_connection (CONNECTION_IMPL * pconn)
                                       ^
src/api/cci_stub.c:1441:93: style:inconclusive: Function 'api_val_cursor_update' argument 5 names different: declaration 'av' definition 'pv'. [funcArgNamesDifferent]
api_val_cursor_update (CI_CONNECTION conn, int req_handle, int offset, int index, API_VAL * pv, T_CCI_ERROR * err_buf)
                                                                                            ^
src/api/cci_stub.c:269:104: note: Function 'api_val_cursor_update' argument 5 names different: declaration 'av' definition 'pv'.
static int api_val_cursor_update (CI_CONNECTION conn, int req_handle, int offset, int index, API_VAL * av,
                                                                                                       ^
src/api/cci_stub.c:1441:93: note: Function 'api_val_cursor_update' argument 5 names different: declaration 'av' definition 'pv'.
api_val_cursor_update (CI_CONNECTION conn, int req_handle, int offset, int index, API_VAL * pv, T_CCI_ERROR * err_buf)
                                                                                            ^
src/api/cci_stub.c:1501:50: style:inconclusive: Function 'api_qres_get_resultset_metadata' argument 1 names different: declaration 'res' definition 'rs'. [funcArgNamesDifferent]
api_qres_get_resultset_metadata (API_RESULTSET * rs, API_RESULTSET_META ** rimpl)
                                                 ^
src/api/cci_stub.c:274:61: note: Function 'api_qres_get_resultset_metadata' argument 1 names different: declaration 'res' definition 'rs'.
static int api_qres_get_resultset_metadata (API_RESULTSET * res, API_RESULTSET_META ** rimpl);
                                                            ^
src/api/cci_stub.c:1501:50: note: Function 'api_qres_get_resultset_metadata' argument 1 names different: declaration 'res' definition 'rs'.
api_qres_get_resultset_metadata (API_RESULTSET * rs, API_RESULTSET_META ** rimpl)
                                                 ^
src/api/cci_stub.c:1532:33: style:inconclusive: Function 'api_qres_fetch' argument 1 names different: declaration 'res' definition 'rs'. [funcArgNamesDifferent]
api_qres_fetch (API_RESULTSET * rs, int offset, CI_FETCH_POSITION pos)
                                ^
src/api/cci_stub.c:275:44: note: Function 'api_qres_fetch' argument 1 names different: declaration 'res' definition 'rs'.
static int api_qres_fetch (API_RESULTSET * res, int offset, CI_FETCH_POSITION pos);
                                           ^
src/api/cci_stub.c:1532:33: note: Function 'api_qres_fetch' argument 1 names different: declaration 'res' definition 'rs'.
api_qres_fetch (API_RESULTSET * rs, int offset, CI_FETCH_POSITION pos)
                                ^
src/api/cci_stub.c:1577:32: style:inconclusive: Function 'api_qres_tell' argument 1 names different: declaration 'res' definition 'rs'. [funcArgNamesDifferent]
api_qres_tell (API_RESULTSET * rs, int *offset)
                               ^
src/api/cci_stub.c:276:43: note: Function 'api_qres_tell' argument 1 names different: declaration 'res' definition 'rs'.
static int api_qres_tell (API_RESULTSET * res, int *offset);
                                          ^
src/api/cci_stub.c:1577:32: note: Function 'api_qres_tell' argument 1 names different: declaration 'res' definition 'rs'.
api_qres_tell (API_RESULTSET * rs, int *offset)
                               ^
src/api/cci_stub.c:1593:41: style:inconclusive: Function 'api_qres_clear_updates' argument 1 names different: declaration 'res' definition 'rs'. [funcArgNamesDifferent]
api_qres_clear_updates (API_RESULTSET * rs)
                                        ^
src/api/cci_stub.c:277:52: note: Function 'api_qres_clear_updates' argument 1 names different: declaration 'res' definition 'rs'.
static int api_qres_clear_updates (API_RESULTSET * res);
                                                   ^
src/api/cci_stub.c:1593:41: note: Function 'api_qres_clear_updates' argument 1 names different: declaration 'res' definition 'rs'.
api_qres_clear_updates (API_RESULTSET * rs)
                                        ^
src/api/cci_stub.c:1670:37: style:inconclusive: Function 'api_qres_get_value' argument 1 names different: declaration 'res' definition 'rs'. [funcArgNamesDifferent]
api_qres_get_value (API_RESULTSET * rs, int index, CI_TYPE type, void *addr, size_t len, size_t * outlen,
                                    ^
src/api/cci_stub.c:279:48: note: Function 'api_qres_get_value' argument 1 names different: declaration 'res' definition 'rs'.
static int api_qres_get_value (API_RESULTSET * res, int index, CI_TYPE type, void *addr, size_t len, size_t * outlen,
                                               ^
src/api/cci_stub.c:1670:37: note: Function 'api_qres_get_value' argument 1 names different: declaration 'res' definition 'rs'.
api_qres_get_value (API_RESULTSET * rs, int index, CI_TYPE type, void *addr, size_t len, size_t * outlen,
                                    ^
src/api/cci_stub.c:1738:45: style:inconclusive: Function 'api_qres_get_value_by_name' argument 1 names different: declaration 'res' definition 'rs'. [funcArgNamesDifferent]
api_qres_get_value_by_name (API_RESULTSET * rs, const char *name, CI_TYPE type, void *addr, size_t len, size_t * outlen,
                                            ^
src/api/cci_stub.c:281:56: note: Function 'api_qres_get_value_by_name' argument 1 names different: declaration 'res' definition 'rs'.
static int api_qres_get_value_by_name (API_RESULTSET * res, const char *name, CI_TYPE type, void *addr, size_t len,
                                                       ^
src/api/cci_stub.c:1738:45: note: Function 'api_qres_get_value_by_name' argument 1 names different: declaration 'res' definition 'rs'.
api_qres_get_value_by_name (API_RESULTSET * rs, const char *name, CI_TYPE type, void *addr, size_t len, size_t * outlen,
                                            ^
src/api/cci_stub.c:1768:40: style:inconclusive: Function 'api_qres_update_value' argument 1 names different: declaration 'res' definition 'rs'. [funcArgNamesDifferent]
api_qres_update_value (API_RESULTSET * rs, int index, CI_TYPE type, void *addr, size_t len)
                                       ^
src/api/cci_stub.c:283:51: note: Function 'api_qres_update_value' argument 1 names different: declaration 'res' definition 'rs'.
static int api_qres_update_value (API_RESULTSET * res, int index, CI_TYPE type, void *addr, size_t len);
                                                  ^
src/api/cci_stub.c:1768:40: note: Function 'api_qres_update_value' argument 1 names different: declaration 'res' definition 'rs'.
api_qres_update_value (API_RESULTSET * rs, int index, CI_TYPE type, void *addr, size_t len)
                                       ^
src/api/cci_stub.c:1867:40: style:inconclusive: Function 'api_qres_apply_update' argument 1 names different: declaration 'res' definition 'rs'. [funcArgNamesDifferent]
api_qres_apply_update (API_RESULTSET * rs)
                                       ^
src/api/cci_stub.c:284:51: note: Function 'api_qres_apply_update' argument 1 names different: declaration 'res' definition 'rs'.
static int api_qres_apply_update (API_RESULTSET * res);
                                                  ^
src/api/cci_stub.c:1867:40: note: Function 'api_qres_apply_update' argument 1 names different: declaration 'res' definition 'rs'.
api_qres_apply_update (API_RESULTSET * rs)
                                       ^
src/api/cci_stub.c:1888:35: style:inconclusive: Function 'api_qres_destroy' argument 1 names different: declaration 'res' definition 'rs'. [funcArgNamesDifferent]
api_qres_destroy (API_RESULTSET * rs)
                                  ^
src/api/cci_stub.c:285:47: note: Function 'api_qres_destroy' argument 1 names different: declaration 'res' definition 'rs'.
static void api_qres_destroy (API_RESULTSET * res);
                                              ^
src/api/cci_stub.c:1888:35: note: Function 'api_qres_destroy' argument 1 names different: declaration 'res' definition 'rs'.
api_qres_destroy (API_RESULTSET * rs)
                                  ^
src/api/cci_stub.c:2805:38: style:inconclusive: Function 'api_ores_delete_row' argument 1 names different: declaration 'res' definition 'rs'. [funcArgNamesDifferent]
api_ores_delete_row (API_RESULTSET * rs)
                                     ^
src/api/cci_stub.c:317:49: note: Function 'api_ores_delete_row' argument 1 names different: declaration 'res' definition 'rs'.
static int api_ores_delete_row (API_RESULTSET * res);
                                                ^
src/api/cci_stub.c:2805:38: note: Function 'api_ores_delete_row' argument 1 names different: declaration 'res' definition 'rs'.
api_ores_delete_row (API_RESULTSET * rs)
                                     ^
src/api/cci_stub.c:2976:40: style:inconclusive: Function 'api_ores_apply_update' argument 1 names different: declaration 'res' definition 'rs'. [funcArgNamesDifferent]
api_ores_apply_update (API_RESULTSET * rs)
                                       ^
src/api/cci_stub.c:323:51: note: Function 'api_ores_apply_update' argument 1 names different: declaration 'res' definition 'rs'.
static int api_ores_apply_update (API_RESULTSET * res);
                                                  ^
src/api/cci_stub.c:2976:40: note: Function 'api_ores_apply_update' argument 1 names different: declaration 'res' definition 'rs'.
api_ores_apply_update (API_RESULTSET * rs)
                                       ^
src/api/cci_stub.c:3182:54: style:inconclusive: Function 'opool_oid_get_classname' argument 1 names different: declaration 'pool' definition 'poo'. [funcArgNamesDifferent]
opool_oid_get_classname (API_OBJECT_RESULTSET_POOL * poo, CI_OID * oid, char *name, size_t size)
                                                     ^
src/api/cci_stub.c:330:65: note: Function 'opool_oid_get_classname' argument 1 names different: declaration 'pool' definition 'poo'.
static int opool_oid_get_classname (API_OBJECT_RESULTSET_POOL * pool, CI_OID * oid, char *name, size_t size);
                                                                ^
src/api/cci_stub.c:3182:54: note: Function 'opool_oid_get_classname' argument 1 names different: declaration 'pool' definition 'poo'.
opool_oid_get_classname (API_OBJECT_RESULTSET_POOL * poo, CI_OID * oid, char *name, size_t size)
                                                     ^
src/api/cci_stub.c:3302:41: style:inconclusive: Function 'xoid2oidstr' argument 2 names different: declaration 'oidbuf' definition 'oidstr'. [funcArgNamesDifferent]
xoid2oidstr (const CI_OID * xoid, char *oidstr)
                                        ^
src/api/cci_stub.c:337:53: note: Function 'xoid2oidstr' argument 2 names different: declaration 'oidbuf' definition 'oidstr'.
static void xoid2oidstr (const CI_OID * xoid, char *oidbuf);
                                                    ^
src/api/cci_stub.c:3302:41: note: Function 'xoid2oidstr' argument 2 names different: declaration 'oidbuf' definition 'oidstr'.
xoid2oidstr (const CI_OID * xoid, char *oidstr)
                                        ^
src/api/cci_stub.c:3558:34: style:inconclusive: Function 'api_col_length' argument 1 names different: declaration 'col' definition 'coo'. [funcArgNamesDifferent]
api_col_length (API_COLLECTION * coo, int *length)
                                 ^
src/api/cci_stub.c:348:45: note: Function 'api_col_length' argument 1 names different: declaration 'col' definition 'coo'.
static int api_col_length (API_COLLECTION * col, int *len);
                                            ^
src/api/cci_stub.c:3558:34: note: Function 'api_col_length' argument 1 names different: declaration 'col' definition 'coo'.
api_col_length (API_COLLECTION * coo, int *length)
                                 ^
src/api/cci_stub.c:3558:44: style:inconclusive: Function 'api_col_length' argument 2 names different: declaration 'len' definition 'length'. [funcArgNamesDifferent]
api_col_length (API_COLLECTION * coo, int *length)
                                           ^
src/api/cci_stub.c:348:55: note: Function 'api_col_length' argument 2 names different: declaration 'len' definition 'length'.
static int api_col_length (API_COLLECTION * col, int *len);
                                                      ^
src/api/cci_stub.c:3558:44: note: Function 'api_col_length' argument 2 names different: declaration 'len' definition 'length'.
api_col_length (API_COLLECTION * coo, int *length)
                                           ^
src/api/cci_stub.c:3579:34: style:inconclusive: Function 'api_col_insert' argument 1 names different: declaration 'col' definition 'coo'. [funcArgNamesDifferent]
api_col_insert (API_COLLECTION * coo, long pos, CI_TYPE type, void *ptr, size_t size)
                                 ^
src/api/cci_stub.c:349:45: note: Function 'api_col_insert' argument 1 names different: declaration 'col' definition 'coo'.
static int api_col_insert (API_COLLECTION * col, long pos, CI_TYPE type, void *ptr, size_t size);
                                            ^
src/api/cci_stub.c:3579:34: note: Function 'api_col_insert' argument 1 names different: declaration 'col' definition 'coo'.
api_col_insert (API_COLLECTION * coo, long pos, CI_TYPE type, void *ptr, size_t size)
                                 ^
src/api/cci_stub.c:3633:34: style:inconclusive: Function 'api_col_update' argument 1 names different: declaration 'col' definition 'coo'. [funcArgNamesDifferent]
api_col_update (API_COLLECTION * coo, long pos, CI_TYPE type, void *ptr, size_t size)
                                 ^
src/api/cci_stub.c:350:45: note: Function 'api_col_update' argument 1 names different: declaration 'col' definition 'coo'.
static int api_col_update (API_COLLECTION * col, long pos, CI_TYPE type, void *ptr, size_t size);
                                            ^
src/api/cci_stub.c:3633:34: note: Function 'api_col_update' argument 1 names different: declaration 'col' definition 'coo'.
api_col_update (API_COLLECTION * coo, long pos, CI_TYPE type, void *ptr, size_t size)
                                 ^
src/api/cci_stub.c:3668:34: style:inconclusive: Function 'api_col_delete' argument 1 names different: declaration 'col' definition 'coo'. [funcArgNamesDifferent]
api_col_delete (API_COLLECTION * coo, long pos)
                                 ^
src/api/cci_stub.c:351:45: note: Function 'api_col_delete' argument 1 names different: declaration 'col' definition 'coo'.
static int api_col_delete (API_COLLECTION * col, long pos);
                                            ^
src/api/cci_stub.c:3668:34: note: Function 'api_col_delete' argument 1 names different: declaration 'col' definition 'coo'.
api_col_delete (API_COLLECTION * coo, long pos)
                                 ^
src/api/cci_stub.c:3701:48: style:inconclusive: Function 'api_col_get_elem_domain_info' argument 1 names different: declaration 'col' definition 'coo'. [funcArgNamesDifferent]
api_col_get_elem_domain_info (API_COLLECTION * coo, long pos, CI_TYPE * type, int *precision, int *scale)
                                               ^
src/api/cci_stub.c:352:59: note: Function 'api_col_get_elem_domain_info' argument 1 names different: declaration 'col' definition 'coo'.
static int api_col_get_elem_domain_info (API_COLLECTION * col, long pos, CI_TYPE * type, int *precision, int *scale);
                                                          ^
src/api/cci_stub.c:3701:48: note: Function 'api_col_get_elem_domain_info' argument 1 names different: declaration 'col' definition 'coo'.
api_col_get_elem_domain_info (API_COLLECTION * coo, long pos, CI_TYPE * type, int *precision, int *scale)
                                               ^
src/api/cci_stub.c:3746:36: style:inconclusive: Function 'api_col_get_elem' argument 1 names different: declaration 'col' definition 'coo'. [funcArgNamesDifferent]
api_col_get_elem (API_COLLECTION * coo, long pos, CI_TYPE type, void *addr, size_t len, size_t * outlen, bool * isnull)
                                   ^
src/api/cci_stub.c:353:47: note: Function 'api_col_get_elem' argument 1 names different: declaration 'col' definition 'coo'.
static int api_col_get_elem (API_COLLECTION * col, long pos, CI_TYPE type, void *addr, size_t len, size_t * outlen,
                                              ^
src/api/cci_stub.c:3746:36: note: Function 'api_col_get_elem' argument 1 names different: declaration 'col' definition 'coo'.
api_col_get_elem (API_COLLECTION * coo, long pos, CI_TYPE type, void *addr, size_t len, size_t * outlen, bool * isnull)
                                   ^
src/api/cci_stub.c:3776:35: style:inconclusive: Function 'api_col_destroy' argument 1 names different: declaration 'col' definition 'coo'. [funcArgNamesDifferent]
api_col_destroy (API_COLLECTION * coo)
                                  ^
src/api/cci_stub.c:355:47: note: Function 'api_col_destroy' argument 1 names different: declaration 'col' definition 'coo'.
static void api_col_destroy (API_COLLECTION * col);
                                              ^
src/api/cci_stub.c:3776:35: note: Function 'api_col_destroy' argument 1 names different: declaration 'col' definition 'coo'.
api_col_destroy (API_COLLECTION * coo)
                                  ^
src/api/cci_stub.c:3898:49: style:inconclusive: Function 'xcol_to_cci_set' argument 2 names different: declaration 'tset' definition 'rtset'. [funcArgNamesDifferent]
xcol_to_cci_set (CI_COLLECTION col, T_CCI_SET * rtset)
                                                ^
src/api/cci_stub.c:362:60: note: Function 'xcol_to_cci_set' argument 2 names different: declaration 'tset' definition 'rtset'.
static int xcol_to_cci_set (CI_COLLECTION col, T_CCI_SET * tset);
                                                           ^
src/api/cci_stub.c:3898:49: note: Function 'xcol_to_cci_set' argument 2 names different: declaration 'tset' definition 'rtset'.
xcol_to_cci_set (CI_COLLECTION col, T_CCI_SET * rtset)
                                                ^
src/api/cci_stub.c:3998:70: style:inconclusive: Function 'cci_set_to_xcol' argument 3 names different: declaration 'col' definition 'rcol'. [funcArgNamesDifferent]
cci_set_to_xcol (CI_CONNECTION conn, T_CCI_SET tset, CI_COLLECTION * rcol)
                                                                     ^
src/api/cci_stub.c:364:81: note: Function 'cci_set_to_xcol' argument 3 names different: declaration 'col' definition 'rcol'.
static int cci_set_to_xcol (CI_CONNECTION conn, T_CCI_SET tset, CI_COLLECTION * col);
                                                                                ^
src/api/cci_stub.c:3998:70: note: Function 'cci_set_to_xcol' argument 3 names different: declaration 'col' definition 'rcol'.
cci_set_to_xcol (CI_CONNECTION conn, T_CCI_SET tset, CI_COLLECTION * rcol)
                                                                     ^
src/api/cci_stub.c:3057:11: style: Local variable 'i' shadows outer variable [shadowVariable]
      int i;
          ^
src/api/cci_stub.c:2981:7: note: Shadowed declaration
  int i, res, nattrs;
      ^
src/api/cci_stub.c:3057:11: note: Shadow variable
      int i;
          ^
src/api/cci_stub.c:4366:18: style: Local variable 'res' shadows outer variable [shadowVariable]
 int mj, mi, pa, res;
                 ^
src/api/cci_stub.c:4333:7: note: Shadowed declaration
  int res = 0;
      ^
src/api/cci_stub.c:4366:18: note: Shadow variable
 int mj, mi, pa, res;
                 ^
src/api/cci_stub.c:2614:7: error: Uninitialized variable: res [uninitvar]
  if (res != 0)
      ^
src/api/cci_stub.c:3909:11: error: Uninitialized variable: tset [uninitvar]
  assert (tset != NULL);
          ^
src/api/cci_stub.c:1293:9: style: union member 'Anonymous1::ival' is never used. [unusedStructMember]
    int ival;
        ^
src/api/cci_stub.c:1294:11: style: union member 'Anonymous1::fval' is never used. [unusedStructMember]
    float fval;
          ^
src/api/cci_stub.c:1295:12: style: union member 'Anonymous1::dval' is never used. [unusedStructMember]
    double dval;
           ^
src/api/cci_stub.c:2921:9: style: struct member 'ores_nvt_s::name' is never used. [unusedStructMember]
  char *name;
        ^
src/api/cci_stub.c:2255:8: style: Variable 'nres' is assigned a value that is never used. [unreadVariable]
  nres = res;
       ^
src/api/cci_stub.c:2623:13: style: Variable 'num_batch' is assigned a value that is never used. [unreadVariable]
  num_batch = pstmt->num_batch;
            ^
src/api/db_collection.c:309:10: style: The scope of the variable 'res' can be reduced. [variableScope]
  int i, res;
         ^
src/api/db_collection.c:310:13: style: The scope of the variable 'val' can be reduced. [variableScope]
  DB_VALUE *val;
            ^
src/api/db_collection.c:241:41: style:inconclusive: Function 'col_dtorf' argument 2 names different: declaration 'val' definition 'aval'. [funcArgNamesDifferent]
col_dtorf (VALUE_AREA * va, API_VALUE * aval)
                                        ^
src/api/db_collection.c:43:53: note: Function 'col_dtorf' argument 2 names different: declaration 'val' definition 'aval'.
static void col_dtorf (VALUE_AREA * va, API_VALUE * val);
                                                    ^
src/api/db_collection.c:241:41: note: Function 'col_dtorf' argument 2 names different: declaration 'val' definition 'aval'.
col_dtorf (VALUE_AREA * va, API_VALUE * aval)
                                        ^
src/api/db_object.c:159:27: style: Checking if unsigned expression 'size' is less than zero. [unsignedLessThanZero]
  if (arg == NULL || size <= 0)
                          ^
src/api/db_object.c:974:74: style:inconclusive: Function 'orp_api_get_object_resultset' argument 2 names different: declaration 'oid' definition 'xoid'. [funcArgNamesDifferent]
orp_api_get_object_resultset (API_OBJECT_RESULTSET_POOL * pool, CI_OID * xoid, API_RESULTSET ** rref)
                                                                         ^
src/api/db_object.c:108:85: note: Function 'orp_api_get_object_resultset' argument 2 names different: declaration 'oid' definition 'xoid'.
static int orp_api_get_object_resultset (API_OBJECT_RESULTSET_POOL * pool, CI_OID * oid, API_RESULTSET ** rref);
                                                                                    ^
src/api/db_object.c:974:74: note: Function 'orp_api_get_object_resultset' argument 2 names different: declaration 'oid' definition 'xoid'.
orp_api_get_object_resultset (API_OBJECT_RESULTSET_POOL * pool, CI_OID * xoid, API_RESULTSET ** rref)
                                                                         ^
src/api/db_object.c:1011:60: style:inconclusive: Function 'orp_oid_delete' argument 2 names different: declaration 'oid' definition 'xoid'. [funcArgNamesDifferent]
orp_oid_delete (API_OBJECT_RESULTSET_POOL * pool, CI_OID * xoid)
                                                           ^
src/api/db_object.c:109:71: note: Function 'orp_oid_delete' argument 2 names different: declaration 'oid' definition 'xoid'.
static int orp_oid_delete (API_OBJECT_RESULTSET_POOL * pool, CI_OID * oid);
                                                                      ^
src/api/db_object.c:1011:60: note: Function 'orp_oid_delete' argument 2 names different: declaration 'oid' definition 'xoid'.
orp_oid_delete (API_OBJECT_RESULTSET_POOL * pool, CI_OID * xoid)
                                                           ^
src/api/db_object.c:1159:102: style:inconclusive: Function 'api_object_resultset_pool_create' argument 3 names different: declaration 'pool' definition 'rpool'. [funcArgNamesDifferent]
api_object_resultset_pool_create (BH_INTERFACE * ifs, BIND_HANDLE conn, API_OBJECT_RESULTSET_POOL ** rpool)
                                                                                                     ^
src/api/db_stub.h:235:113: note: Function 'api_object_resultset_pool_create' argument 3 names different: declaration 'pool' definition 'rpool'.
extern int api_object_resultset_pool_create (BH_INTERFACE * ifs, BIND_HANDLE conn, API_OBJECT_RESULTSET_POOL ** pool);
                                                                                                                ^
src/api/db_object.c:1159:102: note: Function 'api_object_resultset_pool_create' argument 3 names different: declaration 'pool' definition 'rpool'.
api_object_resultset_pool_create (BH_INTERFACE * ifs, BIND_HANDLE conn, API_OBJECT_RESULTSET_POOL ** rpool)
                                                                                                     ^
src/api/db_object.c:414:6: style: Variable 'or' is assigned a value that is never used. [unreadVariable]
  or = ((OBJECT_RES_BIND *) impl)->or;
     ^
src/api/db_object.c:750:7: style: Variable 'res' is assigned a value that is never used. [unreadVariable]
  res = db_value_domain_init (value, dbt, p, s);
      ^
src/api/db_stub.c:2509:11: warning: Identical inner 'if' condition is always true. [identicalInnerCondition]
      if (batch_data)
          ^
src/api/db_stub.c:2507:41: note: outer condition: batch_data
  for (i = 0; i < pstmt->batch_count && batch_data; i++)
                                        ^
src/api/db_stub.c:2509:11: note: identical inner condition: batch_data
      if (batch_data)
          ^
src/api/db_stub.c:2648:11: warning: Identical inner 'if' condition is always true. [identicalInnerCondition]
      if (batch_data)
          ^
src/api/db_stub.c:2646:41: note: outer condition: batch_data
  for (i = 0; i < pstmt->batch_count && batch_data; i++)
                                        ^
src/api/db_stub.c:2648:11: note: identical inner condition: batch_data
      if (batch_data)
          ^
src/api/db_stub.c:144:15: warning: Either the condition 'if(err_info)' is redundant or there is possible null pointer dereference: err_info. [nullPointerRedundantCheck]
      memset (err_info, '\0', sizeof (err_info));
              ^
src/api/db_stub.c:145:10: note: Assuming that condition 'if(err_info)' is not redundant
      if (err_info)
         ^
src/api/db_stub.c:144:15: note: Null pointer dereference
      memset (err_info, '\0', sizeof (err_info));
              ^
src/api/db_stub.c:1676:15: warning: Either the condition 'if(err_info)' is redundant or there is possible null pointer dereference: err_info. [nullPointerRedundantCheck]
      memset (err_info, '\0', sizeof (err_info));
              ^
src/api/db_stub.c:1678:10: note: Assuming that condition 'if(err_info)' is not redundant
      if (err_info)
         ^
src/api/db_stub.c:1676:15: note: Null pointer dereference
      memset (err_info, '\0', sizeof (err_info));
              ^
src/api/db_stub.c:2277:39: warning: Either the condition 'query_type==NULL' is redundant or there is possible null pointer dereference: query_type. [nullPointerRedundantCheck]
  retval = db_value_domain_init (val, query_type->db_type, precision, scale);
                                      ^
src/api/db_stub.c:2266:18: note: Assuming that condition 'query_type==NULL' is not redundant
  if (query_type == NULL || query_type->domain == NULL)
                 ^
src/api/db_stub.c:2277:39: note: Null pointer dereference
  retval = db_value_domain_init (val, query_type->db_type, precision, scale);
                                      ^
src/api/db_stub.c:2513:20: warning: Either the condition 'batch_data' is redundant or there is possible null pointer dereference: tmp. [nullPointerRedundantCheck]
      batch_data = tmp->next;
                   ^
src/api/db_stub.c:2509:11: note: Assuming that condition 'batch_data' is not redundant
      if (batch_data)
          ^
src/api/db_stub.c:2512:13: note: Assignment 'tmp=batch_data', assigned value is 0
      tmp = batch_data;
            ^
src/api/db_stub.c:2513:20: note: Null pointer dereference
      batch_data = tmp->next;
                   ^
src/api/db_stub.c:2561:15: warning: Either the condition 'session==NULL' is redundant or there is possible null pointer dereference: session. [nullPointerRedundantCheck]
      memset (session, '\0', sizeof (DB_SESSION));
              ^
src/api/db_stub.c:2563:19: note: Assuming that condition 'session==NULL' is not redundant
      if (session == NULL)
                  ^
src/api/db_stub.c:2561:15: note: Null pointer dereference
      memset (session, '\0', sizeof (DB_SESSION));
              ^
src/api/db_stub.c:2652:20: warning: Either the condition 'batch_data' is redundant or there is possible null pointer dereference: tmp. [nullPointerRedundantCheck]
      batch_data = tmp->next;
                   ^
src/api/db_stub.c:2648:11: note: Assuming that condition 'batch_data' is not redundant
      if (batch_data)
          ^
src/api/db_stub.c:2651:13: note: Assignment 'tmp=batch_data', assigned value is 0
      tmp = batch_data;
            ^
src/api/db_stub.c:2652:20: note: Null pointer dereference
      batch_data = tmp->next;
                   ^
src/api/db_stub.c:1799:15: style: Variable 'retval' is reassigned a value before the old one has been used. [redundantAssignment]
       retval = bh_interface->alloc_handle (bh_interface, (BH_BIND *) rs_ptr, &hresult);
              ^
src/api/db_stub.c:1782:15: note: retval is assigned
       retval = bh_interface->bind_get_first_child (bh_interface, (BH_BIND *) pstmt, (BH_BIND **) (&pnext));
              ^
src/api/db_stub.c:1799:15: note: retval is overwritten
       retval = bh_interface->alloc_handle (bh_interface, (BH_BIND *) rs_ptr, &hresult);
              ^
src/api/db_stub.c:1799:15: style: Variable 'retval' is reassigned a value before the old one has been used. [redundantAssignment]
       retval = bh_interface->alloc_handle (bh_interface, (BH_BIND *) rs_ptr, &hresult);
              ^
src/api/db_stub.c:1795:16: note: retval is assigned
        retval = bh_interface->bind_get_next_sibling (bh_interface, tmp, (BH_BIND **) (&pnext));
               ^
src/api/db_stub.c:1799:15: note: retval is overwritten
       retval = bh_interface->alloc_handle (bh_interface, (BH_BIND *) rs_ptr, &hresult);
              ^
src/api/db_stub.c:2480:11: style: Variable 'session' is reassigned a value before the old one has been used. [redundantAssignment]
  session = pstmt->session;
          ^
src/api/db_stub.c:2467:11: note: session is assigned
  session = pstmt->session;
          ^
src/api/db_stub.c:2480:11: note: session is overwritten
  session = pstmt->session;
          ^
src/api/db_stub.c:2763:11: style: Variable 'retval' is reassigned a value before the old one has been used. [redundantAssignment]
   retval = bh_interface->bind_get_next_sibling (bh_interface, (BH_BIND *) pstmt, (BH_BIND **) (&pnextstmt));
          ^
src/api/db_stub.c:2752:11: note: retval is assigned
   retval = stmt_release_children (bh_interface, pstmt, true);
          ^
src/api/db_stub.c:2763:11: note: retval is overwritten
   retval = bh_interface->bind_get_next_sibling (bh_interface, (BH_BIND *) pstmt, (BH_BIND **) (&pnextstmt));
          ^
src/api/db_stub.c:136:19: style: The scope of the variable 'err_msg' can be reduced. [variableScope]
      const char *err_msg;
                  ^
src/api/db_stub.c:227:22: style: The scope of the variable 'pconn' can be reduced. [variableScope]
  CI_CONN_STRUCTURE *pconn;
                     ^
src/api/db_stub.c:254:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i, param_count;
      ^
src/api/db_stub.c:254:10: style: The scope of the variable 'param_count' can be reduced. [variableScope]
  int i, param_count;
         ^
src/api/db_stub.c:360:8: style: The scope of the variable 'retval' can be reduced. [variableScope]
   int retval;
       ^
src/api/db_stub.c:415:32: style: The scope of the variable 'prmeta' can be reduced. [variableScope]
  CI_RESULTSET_META_STRUCTURE *prmeta;
                               ^
src/api/db_stub.c:437:28: style: The scope of the variable 'ppmeta' can be reduced. [variableScope]
  CI_PARAM_META_STRUCTURE *ppmeta;
                           ^
src/api/db_stub.c:459:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/api/db_stub.c:460:30: style: The scope of the variable 'pbrs' can be reduced. [variableScope]
  CI_BATCH_RESULT_STRUCTURE *pbrs;
                             ^
src/api/db_stub.c:607:7: style: The scope of the variable 'stmt_idx' can be reduced. [variableScope]
  int stmt_idx, retval;
      ^
src/api/db_stub.c:607:17: style: The scope of the variable 'retval' can be reduced. [variableScope]
  int stmt_idx, retval;
                ^
src/api/db_stub.c:1144:16: style: The scope of the variable 'att' can be reduced. [variableScope]
 SM_ATTRIBUTE *att;
               ^
src/api/db_stub.c:1170:16: style: The scope of the variable 'att' can be reduced. [variableScope]
 SM_ATTRIBUTE *att;
               ^
src/api/db_stub.c:1226:21: style: The scope of the variable 'affected_row' can be reduced. [variableScope]
  int statement_id, affected_row;
                    ^
src/api/db_stub.c:1359:15: style: The scope of the variable 'i' can be reduced. [variableScope]
  int retval, i;
              ^
src/api/db_stub.c:1439:15: style: The scope of the variable 'i' can be reduced. [variableScope]
  int retval, i, host_var_count;
              ^
src/api/db_stub.c:1439:18: style: The scope of the variable 'host_var_count' can be reduced. [variableScope]
  int retval, i, host_var_count;
                 ^
src/api/db_stub.c:1441:7: style: The scope of the variable 'statement_id' can be reduced. [variableScope]
  int statement_id;
      ^
src/api/db_stub.c:1726:7: style: The scope of the variable 'retval' can be reduced. [variableScope]
  int retval, i, affected_row, j;
      ^
src/api/db_stub.c:2151:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i, retval;
      ^
src/api/db_stub.c:2231:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i, retval;
      ^
src/api/db_stub.c:2315:7: style: The scope of the variable 'retval' can be reduced. [variableScope]
  int retval, i;
      ^
src/api/db_stub.c:2734:15: style: The scope of the variable 'i' can be reduced. [variableScope]
  int retval, i;
              ^
src/api/db_stub.c:2736:8: style: The scope of the variable 'retain_lock' can be reduced. [variableScope]
  bool retain_lock = false;
       ^
src/api/db_stub.c:2737:7: style: The scope of the variable 'query_count' can be reduced. [variableScope]
  int query_count = 0;
      ^
src/api/db_stub.c:2795:12: style: The scope of the variable 'continue_work' can be reduced. [variableScope]
      bool continue_work = false;
           ^
src/api/db_stub.c:2937:37: style: The scope of the variable 'tmp' can be reduced. [variableScope]
  CI_BATCH_RESULT_STRUCTURE *pbrs, *tmp;
                                    ^
src/api/db_stub.c:3138:8: style: The scope of the variable 'dbname_host' can be reduced. [variableScope]
  char dbname_host[1024];
       ^
src/api/db_stub.c:4200:21: style: The scope of the variable 'retval' can be reduced. [variableScope]
  int affected_row, retval;
                    ^
src/api/db_stub.c:2785:85: style:inconclusive: Function 'stmt_release_children' argument 3 names different: declaration 'resultset_only' definition 'result_set_only'. [funcArgNamesDifferent]
stmt_release_children (BH_INTERFACE * bh_interface, CI_STMT_STRUCTURE * pstmt, bool result_set_only)
                                                                                    ^
src/api/db_stub.c:52:96: note: Function 'stmt_release_children' argument 3 names different: declaration 'resultset_only' definition 'result_set_only'.
static int stmt_release_children (BH_INTERFACE * bh_interface, CI_STMT_STRUCTURE * pstmt, bool resultset_only);
                                                                                               ^
src/api/db_stub.c:2785:85: note: Function 'stmt_release_children' argument 3 names different: declaration 'resultset_only' definition 'result_set_only'.
stmt_release_children (BH_INTERFACE * bh_interface, CI_STMT_STRUCTURE * pstmt, bool result_set_only)
                                                                                    ^
src/api/db_stub.c:2553:19: style: Local variable 'session' shadows outer variable [shadowVariable]
      DB_SESSION *session;
                  ^
src/api/db_stub.c:2533:15: note: Shadowed declaration
  DB_SESSION *session;
              ^
src/api/db_stub.c:2553:19: note: Shadow variable
      DB_SESSION *session;
                  ^
src/api/db_stub.c:2604:14: style: Local variable 'tmp' shadows outer variable [shadowVariable]
   PT_NODE **tmp = session->statements;
             ^
src/api/db_stub.c:2536:31: note: Shadowed declaration
  CI_BATCH_DATA *batch_data, *tmp;
                              ^
src/api/db_stub.c:2604:14: note: Shadow variable
   PT_NODE **tmp = session->statements;
             ^
src/api/db_stub.c:144:15: warning: Size of pointer 'err_info' used instead of size of its data. [pointerSize]
      memset (err_info, '\0', sizeof (err_info));
              ^
src/api/db_stub.c:1462:18: warning: Size of pointer 'rs_info' used instead of size of its data. [pointerSize]
  memset (pstmt->rs_info, '\0', sizeof (pstmt->rs_info));
                 ^
src/api/db_stub.c:1512:19: warning: Size of pointer 'param_val' used instead of size of its data. [pointerSize]
   memset (pstmt->param_val, '\0', sizeof (pstmt->param_val));
                  ^
src/api/db_stub.c:1513:19: warning: Size of pointer 'param_value_is_set' used instead of size of its data. [pointerSize]
   memset (pstmt->param_value_is_set, '\0', sizeof (pstmt->param_value_is_set));
                  ^
src/api/db_stub.c:1676:15: warning: Size of pointer 'err_info' used instead of size of its data. [pointerSize]
      memset (err_info, '\0', sizeof (err_info));
              ^
src/api/db_stub.c:1733:18: warning: Size of pointer 'rs_info' used instead of size of its data. [pointerSize]
  memset (pstmt->rs_info, '\0', sizeof (pstmt->rs_info));
                 ^
src/api/db_stub.c:2900:23: warning: Size of pointer 'is_out_param' used instead of size of its data. [pointerSize]
      memset (ppmeta->is_out_param, '\0', sizeof (ppmeta->is_out_param));
                      ^
src/api/db_stub.c:3346:19: portability: 'arg' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined. [arithOperationsOnVoidPointer]
      memset (arg + size - 1, '\0', 1);
                  ^
src/api/db_stub.c:3346:26: portability: 'arg+size' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined. [arithOperationsOnVoidPointer]
      memset (arg + size - 1, '\0', 1);
                         ^
src/api/db_stub.c:3354:19: portability: 'arg' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined. [arithOperationsOnVoidPointer]
      memset (arg + size - 1, '\0', 1);
                  ^
src/api/db_stub.c:3354:26: portability: 'arg+size' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined. [arithOperationsOnVoidPointer]
      memset (arg + size - 1, '\0', 1);
                         ^
src/api/db_stub.c:376:12: style: Variable 'retval' is assigned a value that is never used. [unreadVariable]
    retval = bh_interface->destroy_handle (bh_interface, (BIND_HANDLE) hrsmeta);
           ^
src/api/db_stub.c:1079:9: style: Variable 'retval' is assigned a value that is never used. [unreadVariable]
 retval = (int) db_type_to_type (query_type->db_type, &xtype);
        ^
src/api/db_stub.c:2432:7: style: Variable 'tmp' is assigned a value that is never used. [unreadVariable]
  tmp = pstmt->batch_data;
      ^
src/api/db_stub.c:2482:14: style: Variable 'has_result' is assigned a value that is never used. [unreadVariable]
  has_result = (HAS_RESULT (db_get_statement_type (session, 1))) ? true : false;
             ^
src/api/db_stub.c:2737:19: style: Variable 'query_count' is assigned a value that is never used. [unreadVariable]
  int query_count = 0;
                  ^
src/api/db_stub.c:2841:12: style: Variable 'retval' is assigned a value that is never used. [unreadVariable]
    retval =
           ^
src/api/db_stub.c:3180:9: style: Variable 'pconn' is assigned a value that is never used. [unreadVariable]
  pconn = (CI_CONN_STRUCTURE *) pst;
        ^
src/api/db_stub.c:3482:7: style: Variable 'tmp' is assigned a value that is never used. [unreadVariable]
  tmp = pstmt->batch_data;
      ^
src/api/db_stub.c:3569:15: style: Variable 'param_count' is assigned a value that is never used. [unreadVariable]
  param_count = pstmt->session->parser->host_var_count;
              ^
src/api/db_value_table.c:305:8: style: Assignment 'res=NO_ERROR' is redundant with condition 'res==NO_ERROR'. [duplicateConditionalAssign]
   res = NO_ERROR;
       ^
src/api/db_value_table.c:304:10: note: Condition 'res==NO_ERROR'
 if (res == NO_ERROR)
         ^
src/api/db_value_table.c:305:8: note: Assignment 'res=NO_ERROR' is redundant
   res = NO_ERROR;
       ^
src/api/db_value_table.c:820:7: style: The scope of the variable 'res' can be reduced. [variableScope]
  int res;
      ^
src/api/db_value_table.c:167:10: style: Checking if unsigned expression 'len' is less than zero. [unsignedLessThanZero]
 if (len <= 0)
         ^
src/api/db_value_table.c:182:10: style: Checking if unsigned expression 'len' is less than zero. [unsignedLessThanZero]
 if (len <= 0)
         ^
src/api/db_value_table.c:1157:70: style: Checking if unsigned expression 'len' is less than zero. [unsignedLessThanZero]
  if (dbval == NULL || (type != CI_TYPE_NULL && (addr == NULL || len <= 0)))
                                                                     ^
src/api/db_value_table.c:1180:44: style: Checking if unsigned expression 'len' is less than zero. [unsignedLessThanZero]
  if (dbval == NULL || addr == NULL || len <= 0 || outlen == NULL || isnull == NULL)
                                           ^
src/api/db_value_table.c:83:69: style:inconclusive: Function 'value_to_db_value' argument 4 names different: declaration 'val' definition 'dbval'. [funcArgNamesDifferent]
value_to_db_value (CI_TYPE type, void *addr, size_t len, DB_VALUE * dbval, bool domain_initalized)
                                                                    ^
src/api/db_value_table.c:55:80: note: Function 'value_to_db_value' argument 4 names different: declaration 'val' definition 'dbval'.
static int value_to_db_value (CI_TYPE type, void *addr, size_t len, DB_VALUE * val, bool domain_initialized);
                                                                               ^
src/api/db_value_table.c:83:69: note: Function 'value_to_db_value' argument 4 names different: declaration 'val' definition 'dbval'.
value_to_db_value (CI_TYPE type, void *addr, size_t len, DB_VALUE * dbval, bool domain_initalized)
                                                                    ^
src/api/db_value_table.c:83:81: style:inconclusive: Function 'value_to_db_value' argument 5 names different: declaration 'domain_initialized' definition 'domain_initalized'. [funcArgNamesDifferent]
value_to_db_value (CI_TYPE type, void *addr, size_t len, DB_VALUE * dbval, bool domain_initalized)
                                                                                ^
src/api/db_value_table.c:55:90: note: Function 'value_to_db_value' argument 5 names different: declaration 'domain_initialized' definition 'domain_initalized'.
static int value_to_db_value (CI_TYPE type, void *addr, size_t len, DB_VALUE * val, bool domain_initialized);
                                                                                         ^
src/api/db_value_table.c:83:81: note: Function 'value_to_db_value' argument 5 names different: declaration 'domain_initialized' definition 'domain_initalized'.
value_to_db_value (CI_TYPE type, void *addr, size_t len, DB_VALUE * dbval, bool domain_initalized)
                                                                                ^
src/api/db_value_table.c:340:107: style:inconclusive: Function 'db_value_to_value' argument 6 names different: declaration 'outlen' definition 'out_len'. [funcArgNamesDifferent]
db_value_to_value (BIND_HANDLE conn, const DB_VALUE * val, CI_TYPE type, void *addr, size_t len, size_t * out_len,
                                                                                                          ^
src/api/db_value_table.c:57:19: note: Function 'db_value_to_value' argument 6 names different: declaration 'outlen' definition 'out_len'.
         size_t * outlen, bool * isnull);
                  ^
src/api/db_value_table.c:340:107: note: Function 'db_value_to_value' argument 6 names different: declaration 'outlen' definition 'out_len'.
db_value_to_value (BIND_HANDLE conn, const DB_VALUE * val, CI_TYPE type, void *addr, size_t len, size_t * out_len,
                                                                                                          ^
src/api/db_value_table.c:341:13: style:inconclusive: Function 'db_value_to_value' argument 7 names different: declaration 'isnull' definition 'is_null'. [funcArgNamesDifferent]
     bool * is_null)
            ^
src/api/db_value_table.c:57:34: note: Function 'db_value_to_value' argument 7 names different: declaration 'isnull' definition 'is_null'.
         size_t * outlen, bool * isnull);
                                 ^
src/api/db_value_table.c:341:13: note: Function 'db_value_to_value' argument 7 names different: declaration 'isnull' definition 'is_null'.
     bool * is_null)
            ^
src/api/db_value_table.c:815:60: style:inconclusive: Function 'vbt_apply_updatesf_map' argument 3 names different: declaration 'va' definition 'v'. [funcArgNamesDifferent]
vbt_apply_updatesf_map (void *arg, int index, VALUE_AREA * v, API_VALUE * aval)
                                                           ^
src/api/db_value_table.c:66:71: note: Function 'vbt_apply_updatesf_map' argument 3 names different: declaration 'va' definition 'v'.
static int vbt_apply_updatesf_map (void *arg, int index, VALUE_AREA * va, API_VALUE * val);
                                                                      ^
src/api/db_value_table.c:815:60: note: Function 'vbt_apply_updatesf_map' argument 3 names different: declaration 'va' definition 'v'.
vbt_apply_updatesf_map (void *arg, int index, VALUE_AREA * v, API_VALUE * aval)
                                                           ^
src/api/db_value_table.c:815:75: style:inconclusive: Function 'vbt_apply_updatesf_map' argument 4 names different: declaration 'val' definition 'aval'. [funcArgNamesDifferent]
vbt_apply_updatesf_map (void *arg, int index, VALUE_AREA * v, API_VALUE * aval)
                                                                          ^
src/api/db_value_table.c:66:87: note: Function 'vbt_apply_updatesf_map' argument 4 names different: declaration 'val' definition 'aval'.
static int vbt_apply_updatesf_map (void *arg, int index, VALUE_AREA * va, API_VALUE * val);
                                                                                      ^
src/api/db_value_table.c:815:75: note: Function 'vbt_apply_updatesf_map' argument 4 names different: declaration 'val' definition 'aval'.
vbt_apply_updatesf_map (void *arg, int index, VALUE_AREA * v, API_VALUE * aval)
                                                                          ^
src/api/db_value_table.c:865:52: style:inconclusive: Function 'vbt_resetf_map' argument 3 names different: declaration 'va' definition 'v'. [funcArgNamesDifferent]
vbt_resetf_map (void *arg, int index, VALUE_AREA * v, API_VALUE * aval)
                                                   ^
src/api/db_value_table.c:68:63: note: Function 'vbt_resetf_map' argument 3 names different: declaration 'va' definition 'v'.
static int vbt_resetf_map (void *arg, int index, VALUE_AREA * va, API_VALUE * val);
                                                              ^
src/api/db_value_table.c:865:52: note: Function 'vbt_resetf_map' argument 3 names different: declaration 'va' definition 'v'.
vbt_resetf_map (void *arg, int index, VALUE_AREA * v, API_VALUE * aval)
                                                   ^
src/api/db_value_table.c:865:67: style:inconclusive: Function 'vbt_resetf_map' argument 4 names different: declaration 'val' definition 'aval'. [funcArgNamesDifferent]
vbt_resetf_map (void *arg, int index, VALUE_AREA * v, API_VALUE * aval)
                                                                  ^
src/api/db_value_table.c:68:79: note: Function 'vbt_resetf_map' argument 4 names different: declaration 'val' definition 'aval'.
static int vbt_resetf_map (void *arg, int index, VALUE_AREA * va, API_VALUE * val);
                                                                              ^
src/api/db_value_table.c:865:67: note: Function 'vbt_resetf_map' argument 4 names different: declaration 'val' definition 'aval'.
vbt_resetf_map (void *arg, int index, VALUE_AREA * v, API_VALUE * aval)
                                                                  ^
src/api/db_value_table.c:249:11: style: Unused variable: d [unusedVariable]
 DB_VALUE d, t;
          ^
src/api/db_value_table.c:249:14: style: Unused variable: t [unusedVariable]
 DB_VALUE d, t;
             ^
src/base/adjustable_array.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 41 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/base/area_alloc.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 43 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/base/area_alloc.c:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
src/base/base64.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 47 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/base/base64.c:307:35: style: Array index 'i' is used before limits check. [arrayIndexThenCheck]
      while (from_base64_table[src[i]] == CH_SPACE && i < size)
                                  ^
src/base/base64.c:533:18: style: Condition 'dest_p!=NULL' is always true [knownConditionTrueFalse]
      if (dest_p != NULL)
                 ^
src/base/base64.c:516:14: note: Assuming that condition 'dest_p==NULL' is not redundant
  if (dest_p == NULL)
             ^
src/base/base64.c:533:18: note: Condition 'dest_p!=NULL' is always true
      if (dest_p != NULL)
                 ^
src/base/base64.c:393:18: warning: Either the condition 'ppchunk!=NULL' is redundant or there is possible null pointer dereference: ppchunk. [nullPointerRedundantCheck]
  BASE64_CHUNK **ppchunk = NULL;
                 ^
src/base/base64.c:458:15: note: Assuming that condition 'ppchunk!=NULL' is not redundant
  if (ppchunk != NULL)
              ^
src/base/base64.c:393:18: note: Null pointer dereference
  BASE64_CHUNK **ppchunk = NULL;
                 ^
src/base/base64.c:339:13: style: The scope of the variable 'copy_num' can be reduced. [variableScope]
  int i, d, copy_num;
            ^
src/base/base64.c:341:17: style: The scope of the variable 'chk' can be reduced. [variableScope]
  BASE64_CHUNK *chk;
                ^
src/base/base64.c:559:16: style: The scope of the variable 'd' can be reduced. [variableScope]
  unsigned int d;
               ^
src/base/base64.c:560:23: style: The scope of the variable 'fill' can be reduced. [variableScope]
  int i, encoded_len, fill, line_break_count;
                      ^
src/base/base64.c:615:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i = 0;
      ^
src/base/base64.c:152:74: style:inconclusive: Function 'base64_partition_into_chunk' argument 3 names different: declaration 'chunk_num' definition 'chunk_num_out'. [funcArgNamesDifferent]
base64_partition_into_chunk (const unsigned char *src, int src_len, int *chunk_num_out, int *dst_len_out,
                                                                         ^
src/base/base64.c:93:85: note: Function 'base64_partition_into_chunk' argument 3 names different: declaration 'chunk_num' definition 'chunk_num_out'.
static int base64_partition_into_chunk (const unsigned char *src, int src_len, int *chunk_num, int *dst_len,
                                                                                    ^
src/base/base64.c:152:74: note: Function 'base64_partition_into_chunk' argument 3 names different: declaration 'chunk_num' definition 'chunk_num_out'.
base64_partition_into_chunk (const unsigned char *src, int src_len, int *chunk_num_out, int *dst_len_out,
                                                                         ^
src/base/base64.c:152:94: style:inconclusive: Function 'base64_partition_into_chunk' argument 4 names different: declaration 'dst_len' definition 'dst_len_out'. [funcArgNamesDifferent]
base64_partition_into_chunk (const unsigned char *src, int src_len, int *chunk_num_out, int *dst_len_out,
                                                                                             ^
src/base/base64.c:93:101: note: Function 'base64_partition_into_chunk' argument 4 names different: declaration 'dst_len' definition 'dst_len_out'.
static int base64_partition_into_chunk (const unsigned char *src, int src_len, int *chunk_num, int *dst_len,
                                                                                                    ^
src/base/base64.c:152:94: note: Function 'base64_partition_into_chunk' argument 4 names different: declaration 'dst_len' definition 'dst_len_out'.
base64_partition_into_chunk (const unsigned char *src, int src_len, int *chunk_num_out, int *dst_len_out,
                                                                                             ^
src/base/base64.c:293:52: style:inconclusive: Function 'base64_remove_space' argument 2 names different: declaration 'src_len' definition 'size'. [funcArgNamesDifferent]
base64_remove_space (const unsigned char *src, int size, unsigned char *dest, int *dst_len)
                                                   ^
src/base/base64.c:92:63: note: Function 'base64_remove_space' argument 2 names different: declaration 'src_len' definition 'size'.
static int base64_remove_space (const unsigned char *src, int src_len, unsigned char *dest, int *dst_len);
                                                              ^
src/base/base64.c:293:52: note: Function 'base64_remove_space' argument 2 names different: declaration 'src_len' definition 'size'.
base64_remove_space (const unsigned char *src, int size, unsigned char *dest, int *dst_len)
                                                   ^
src/base/base64.c:615:9: style: Variable 'i' is assigned a value that is never used. [unreadVariable]
  int i = 0;
        ^
src/base/binaryheap.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 13 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/base/bit.c:76:5: style: Opposite expression on both sides of '&='. [oppositeExpression]
  i &= -i;
    ^
src/base/bit.c:198:5: style: Opposite expression on both sides of '&='. [oppositeExpression]
  i &= -i;
    ^
src/base/bit.c:333:5: style: Opposite expression on both sides of '&='. [oppositeExpression]
  i &= -i;
    ^
src/base/bit.c:480:5: style: Opposite expression on both sides of '&='. [oppositeExpression]
  i &= -i;
    ^
src/base/condition_handler.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 44 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/base/condition_handler.c:301:7: style: The scope of the variable 'default_position' can be reduced. [variableScope]
  int default_position = 0;
      ^
src/base/condition_handler.c:302:7: style: The scope of the variable 'start' can be reduced. [variableScope]
  int start, end;
      ^
src/base/condition_handler.c:303:7: style: The scope of the variable 'length' can be reduced. [variableScope]
  int length;
      ^
src/base/condition_handler.c:306:15: style: The scope of the variable 'parameter' can be reduced. [variableScope]
  const char *parameter;
              ^
src/base/condition_handler.c:568:22: style: The scope of the variable 'bad_index' can be reduced. [variableScope]
  static const char *bad_index = "?";
                     ^
src/base/condition_handler.c:569:22: style: The scope of the variable 'bad_type' can be reduced. [variableScope]
  static const char *bad_type = "*";
                     ^
src/base/condition_handler.c:570:16: style: The scope of the variable 'arg' can be reduced. [variableScope]
  CO_ARGUMENT *arg;
               ^
src/base/condition_handler.c:571:9: style: The scope of the variable 'string' can be reduced. [variableScope]
  char *string;
        ^
src/base/condition_handler.c:669:7: style: The scope of the variable 'result' can be reduced. [variableScope]
  int result = 0;
      ^
src/base/condition_handler.c:566:25: style:inconclusive: Function 'co_print_parameter' argument 1 names different: declaration 'p' definition 'index'. [funcArgNamesDifferent]
co_print_parameter (int index, CO_FORMAT_TYPE type, const char *format, int width)
                        ^
src/base/condition_handler.c:109:44: note: Function 'co_print_parameter' argument 1 names different: declaration 'p' definition 'index'.
static const char *co_print_parameter (int p, CO_FORMAT_TYPE type, const char *format, int width);
                                           ^
src/base/condition_handler.c:566:25: note: Function 'co_print_parameter' argument 1 names different: declaration 'p' definition 'index'.
co_print_parameter (int index, CO_FORMAT_TYPE type, const char *format, int width)
                        ^
src/base/condition_handler.c:664:56: style:inconclusive: Function 'co_find_conversion' argument 3 names different: declaration 'start' definition 'end'. [funcArgNamesDifferent]
co_find_conversion (const char *format, int from, int *end, CO_FORMAT_TYPE * type, int *position, int *width)
                                                       ^
src/base/condition_handler.c:111:67: note: Function 'co_find_conversion' argument 3 names different: declaration 'start' definition 'end'.
static int co_find_conversion (const char *format, int from, int *start, CO_FORMAT_TYPE * type, int *position,
                                                                  ^
src/base/condition_handler.c:664:56: note: Function 'co_find_conversion' argument 3 names different: declaration 'start' definition 'end'.
co_find_conversion (const char *format, int from, int *end, CO_FORMAT_TYPE * type, int *position, int *width)
                                                       ^
src/base/condition_handler.c:669:14: style: Variable 'result' is assigned a value that is never used. [unreadVariable]
  int result = 0;
             ^
src/base/locale_support.h:483:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char unicode_data_file[PATH_MAX];
^
src/base/locale_support.h:536:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char conv_file[PATH_MAX];
^
src/base/locale_support.h:612:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char unicode_data_file[PATH_MAX];
^
src/base/cubrid_getopt_long.c:136:7: style: The scope of the variable 'cstart' can be reduced. [variableScope]
  int cstart, cyclelen, i, j, ncycle, nnonopts, nopts, pos;
      ^
src/base/cubrid_getopt_long.c:136:56: style: The scope of the variable 'pos' can be reduced. [variableScope]
  int cstart, cyclelen, i, j, ncycle, nnonopts, nopts, pos;
                                                       ^
src/base/cubrid_getopt_long.c:49:0: information: Skipping configuration '__weak_alias' since the value of '__weak_alias' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
__weak_alias (getopt, _getopt)
^
src/base/cubrid_getopt_long.c:59:0: information: Skipping configuration '__weak_alias' since the value of '__weak_alias' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
__weak_alias (getopt_long, _getopt_long)
^
src/base/databases_file.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 54 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/base/databases_file.c:439:9: style: Condition 'ha_node_list' is always false [knownConditionTrueFalse]
    if (ha_node_list)
        ^
src/base/databases_file.c:402:24: note: Assignment 'ha_node_list=NULL', assigned value is 0
  char *ha_node_list = NULL;
                       ^
src/base/databases_file.c:425:12: note: Assuming condition is false
    if (db == NULL)
           ^
src/base/databases_file.c:439:9: note: Condition 'ha_node_list' is always false
    if (ha_node_list)
        ^
src/base/databases_file.c:1008:29: style:inconclusive: Function 'cfg_find_db_list' argument 1 names different: declaration 'dir' definition 'db_info_list_p'. [funcArgNamesDifferent]
cfg_find_db_list (DB_INFO * db_info_list_p, const char *name)
                            ^
src/base/databases_file.h:82:45: note: Function 'cfg_find_db_list' argument 1 names different: declaration 'dir' definition 'db_info_list_p'.
extern DB_INFO *cfg_find_db_list (DB_INFO * dir, const char *name);
                                            ^
src/base/databases_file.c:1008:29: note: Function 'cfg_find_db_list' argument 1 names different: declaration 'dir' definition 'db_info_list_p'.
cfg_find_db_list (DB_INFO * db_info_list_p, const char *name)
                            ^
src/base/databases_file.c:1425:59: style:inconclusive: Function 'cfg_create_host_list' argument 2 names different: declaration 'append_local_host' definition 'include_local_host'. [funcArgNamesDifferent]
cfg_create_host_list (const char *primary_host_name, bool include_local_host, int *count)
                                                          ^
src/base/databases_file.h:90:72: note: Function 'cfg_create_host_list' argument 2 names different: declaration 'append_local_host' definition 'include_local_host'.
extern char *cfg_create_host_list (const char *primary_host_name, bool append_local_host, int *cnt);
                                                                       ^
src/base/databases_file.c:1425:59: note: Function 'cfg_create_host_list' argument 2 names different: declaration 'append_local_host' definition 'include_local_host'.
cfg_create_host_list (const char *primary_host_name, bool include_local_host, int *count)
                                                          ^
src/base/databases_file.c:1425:84: style:inconclusive: Function 'cfg_create_host_list' argument 3 names different: declaration 'cnt' definition 'count'. [funcArgNamesDifferent]
cfg_create_host_list (const char *primary_host_name, bool include_local_host, int *count)
                                                                                   ^
src/base/databases_file.h:90:96: note: Function 'cfg_create_host_list' argument 3 names different: declaration 'cnt' definition 'count'.
extern char *cfg_create_host_list (const char *primary_host_name, bool append_local_host, int *cnt);
                                                                                               ^
src/base/databases_file.c:1425:84: note: Function 'cfg_create_host_list' argument 3 names different: declaration 'cnt' definition 'count'.
cfg_create_host_list (const char *primary_host_name, bool include_local_host, int *count)
                                                                                   ^
src/base/databases_file.c:453:9: style: Variable 'str' is assigned a value that is never used. [unreadVariable]
    str = cfg_pop_token (str, &db->lobpath);
        ^
src/base/databases_file.c:262:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  static char working_dir[PATH_MAX];
^
src/base/databases_file.c:263:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  return_str = _fullpath (working_dir, ".", PATH_MAX);
^
src/base/databases_file.c:305:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char filename[PATH_MAX];
^
src/base/databases_file.c:334:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char filename[PATH_MAX];
^
src/base/ddl_log.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 47 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/base/ddl_log.c:484:19: style: Condition 'fsource!=NULL' is always true [knownConditionTrueFalse]
      if (fsource != NULL)
                  ^
src/base/ddl_log.c:476:15: note: Assuming that condition 'fsource==NULL' is not redundant
  if (fsource == NULL)
              ^
src/base/ddl_log.c:484:19: note: Condition 'fsource!=NULL' is always true
      if (fsource != NULL)
                  ^
src/base/ddl_log.c:516:15: style: Condition 'fsource!=NULL' is always true [knownConditionTrueFalse]
  if (fsource != NULL)
              ^
src/base/ddl_log.c:476:15: note: Assuming that condition 'fsource==NULL' is not redundant
  if (fsource == NULL)
              ^
src/base/ddl_log.c:482:13: note: Assuming condition is false
  if (fdest == NULL)
            ^
src/base/ddl_log.c:516:15: note: Condition 'fsource!=NULL' is always true
  if (fsource != NULL)
              ^
src/base/ddl_log.c:521:13: style: Condition 'fdest!=NULL' is always true [knownConditionTrueFalse]
  if (fdest != NULL)
            ^
src/base/ddl_log.c:482:13: note: Assuming that condition 'fdest==NULL' is not redundant
  if (fdest == NULL)
            ^
src/base/ddl_log.c:521:13: note: Condition 'fdest!=NULL' is always true
  if (fdest != NULL)
            ^
src/base/ddl_log.c:1225:13: style: Condition 'p!=NULL' is always true [knownConditionTrueFalse]
      if (p != NULL)
            ^
src/base/ddl_log.c:1222:13: note: Assuming that condition 'p==NULL' is not redundant
      if (p == NULL)
            ^
src/base/ddl_log.c:1225:13: note: Condition 'p!=NULL' is always true
      if (p != NULL)
            ^
src/base/ddl_log.c:1235:13: style: Condition 'p!=NULL' is always true [knownConditionTrueFalse]
      if (p != NULL)
            ^
src/base/ddl_log.c:1222:13: note: Assuming that condition 'p==NULL' is not redundant
      if (p == NULL)
            ^
src/base/ddl_log.c:1235:13: note: Condition 'p!=NULL' is always true
      if (p != NULL)
            ^
src/base/ddl_log.c:393:11: style: The scope of the variable 'args' can be reduced. [variableScope]
  va_list args;
          ^
src/base/ddl_log.c:462:10: style: The scope of the variable 'size' can be reduced. [variableScope]
  size_t size;
         ^
src/base/ddl_log.c:537:95: style: Checking if unsigned expression 'buf_size' is less than zero. [unsignedLessThanZero]
  if (ddl_audit_handle == NULL || file_full_path == NULL || copy_filename == NULL || buf_size < 0)
                                                                                              ^
src/base/ddl_log.c:573:94: style: Checking if unsigned expression 'buf_size' is less than zero. [unsignedLessThanZero]
  if (ddl_audit_handle == NULL || copy_filename == NULL || copy_fullpath == NULL || buf_size < 0)
                                                                                             ^
src/base/ddl_log.c:360:26: style:inconclusive: Function 'logddl_set_err_code' argument 1 names different: declaration 'err_number' definition 'err_code'. [funcArgNamesDifferent]
logddl_set_err_code (int err_code)
                         ^
src/base/ddl_log.h:83:38: note: Function 'logddl_set_err_code' argument 1 names different: declaration 'err_number' definition 'err_code'.
extern void logddl_set_err_code (int err_number);
                                     ^
src/base/ddl_log.c:360:26: note: Function 'logddl_set_err_code' argument 1 names different: declaration 'err_number' definition 'err_code'.
logddl_set_err_code (int err_code)
                         ^
src/base/ddl_log.c:403:31: style:inconclusive: Function 'logddl_set_execute_type' argument 1 names different: declaration 'type' definition 'exe_type'. [funcArgNamesDifferent]
logddl_set_execute_type (char exe_type)
                              ^
src/base/ddl_log.h:86:43: note: Function 'logddl_set_execute_type' argument 1 names different: declaration 'type' definition 'exe_type'.
extern void logddl_set_execute_type (char type);
                                          ^
src/base/ddl_log.c:403:31: note: Function 'logddl_set_execute_type' argument 1 names different: declaration 'type' definition 'exe_type'.
logddl_set_execute_type (char exe_type)
                              ^
src/base/ddl_log.c:542:12: style: Variable 'env_root' is assigned a value that is never used. [unreadVariable]
  env_root = envvar_root ();
           ^
src/base/ddl_log.c:1288:8: style: Variable 'tm_p' is assigned a value that is never used. [unreadVariable]
  tm_p = localtime_r (&sec, &tm);
       ^
src/base/ddl_log.c:80:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char load_filename[PATH_MAX];
^
src/base/ddl_log.c:81:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char copy_filename[PATH_MAX];
^
src/base/ddl_log.c:82:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char copy_fullpath[PATH_MAX];
^
src/base/ddl_log.c:86:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char log_filepath[PATH_MAX];
^
src/base/ddl_log.c:329:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      strncpy (ddl_audit_handle->load_filename, load_filename, PATH_MAX);
^
src/base/ddl_log.c:645:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  len = logddl_make_filename (ddl_audit_handle->log_filepath, PATH_MAX, app_name);
^
src/base/ddl_log.c:743:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
     PATH_MAX) < 0)
^
src/base/ddl_log.c:752:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    (APP_NAME_LOADDB, ddl_audit_handle->copy_filename, ddl_audit_handle->copy_fullpath, PATH_MAX) < 0)
^
src/base/ddl_log.c:766:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
     PATH_MAX) < 0)
^
src/base/ddl_log.c:775:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    (APP_NAME_CSQL, ddl_audit_handle->copy_filename, ddl_audit_handle->copy_fullpath, PATH_MAX) < 0)
^
src/base/ddl_log.c:841:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
     PATH_MAX) < 0)
^
src/base/ddl_log.c:850:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    (APP_NAME_CSQL, ddl_audit_handle->copy_filename, ddl_audit_handle->copy_fullpath, PATH_MAX) < 0)
^
src/base/ddl_log.c:953:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        PATH_MAX) < 0)
^
src/base/ddl_log.c:962:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
       (APP_NAME_CSQL, ddl_audit_handle->copy_filename, ddl_audit_handle->copy_fullpath, PATH_MAX) < 0)
^
src/base/ddl_log.c:1124:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char backup_file[PATH_MAX] = { 0 };
^
src/base/ddl_log.c:1193:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char *p, path[PATH_MAX] = { 0 };
^
src/base/dl_daemon.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 44 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/base/dl_daemon.c:39:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static char dynload_Temporary_filename[PATH_MAX] = "";
^
src/base/dtoa.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 53 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/base/dtoa.c:200:1: style:inconclusive: Function '_Jv_dtoa_r' argument 2 names different: declaration 'd' definition '_d'. [funcArgNamesDifferent]
_DEFUN (_dtoa_r, (ptr, _d, mode, ndigits, decpt, sign, rve, float_type),
^
src/base/mprec.h:367:16: note: Function '_Jv_dtoa_r' argument 2 names different: declaration 'd' definition '_d'.
  extern char *_EXFUN (_dtoa_r,
               ^
src/base/dtoa.c:200:1: note: Function '_Jv_dtoa_r' argument 2 names different: declaration 'd' definition '_d'.
_DEFUN (_dtoa_r, (ptr, _d, mode, ndigits, decpt, sign, rve, float_type),
^
src/base/dtoa.c:851:1: style:inconclusive: Function '_Jv_dtoa' argument 1 names different: declaration 'd' definition '_d'. [funcArgNamesDifferent]
_DEFUN (_dtoa, (_d, mode, ndigits, decpt, sign, rve, buf, float_type),
^
src/base/mprec.h:370:15: note: Function '_Jv_dtoa' argument 1 names different: declaration 'd' definition '_d'.
  extern void _EXFUN (_dtoa,
              ^
src/base/dtoa.c:851:1: note: Function '_Jv_dtoa' argument 1 names different: declaration 'd' definition '_d'.
_DEFUN (_dtoa, (_d, mode, ndigits, decpt, sign, rve, buf, float_type),
^
src/base/dynamic_load.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 81 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/base/encryption.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 48 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/base/encryption.c:203:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/base/encryption.c:62:25: style:inconclusive: Function 'crypt_seed' argument 1 names different: declaration 'seed' definition 'key'. [funcArgNamesDifferent]
crypt_seed (const char *key)
                        ^
src/base/encryption.h:31:37: note: Function 'crypt_seed' argument 1 names different: declaration 'seed' definition 'key'.
extern void crypt_seed (const char *seed);
                                    ^
src/base/encryption.c:62:25: note: Function 'crypt_seed' argument 1 names different: declaration 'seed' definition 'key'.
crypt_seed (const char *key)
                        ^
src/base/environment_variable.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 44 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/base/environment_variable.c:516:9: style: The scope of the variable 'buf' can be reduced. [variableScope]
  char *buf;
        ^
src/base/environment_variable.c:514:25: style:inconclusive: Function 'envvar_trim_char' argument 1 names different: declaration 'var' definition 'env_val'. [funcArgNamesDifferent]
envvar_trim_char (char *env_val, const int c)
                        ^
src/base/environment_variable.h:50:39: note: Function 'envvar_trim_char' argument 1 names different: declaration 'var' definition 'env_val'.
  extern void envvar_trim_char (char *var, const int c);
                                      ^
src/base/environment_variable.c:514:25: note: Function 'envvar_trim_char' argument 1 names different: declaration 'var' definition 'env_val'.
envvar_trim_char (char *env_val, const int c)
                        ^
src/base/error_context.hpp:99:12: style:inconclusive: Technically the member function 'cuberr::context::has_error_stack' can be const. [functionConst]
      bool has_error_stack (void);
           ^
src/base/error_context.cpp:303:12: note: Technically the member function 'cuberr::context::has_error_stack' can be const.
  context::has_error_stack (void)
           ^
src/base/error_context.hpp:99:12: note: Technically the member function 'cuberr::context::has_error_stack' can be const.
      bool has_error_stack (void);
           ^
src/base/error_context.hpp:101:19: style:inconclusive: Technically the member function 'cuberr::context::get_logging' can be const. [functionConst]
      const bool &get_logging (void);
                  ^
src/base/error_context.cpp:309:12: note: Technically the member function 'cuberr::context::get_logging' can be const.
  context::get_logging (void)
           ^
src/base/error_context.hpp:101:19: note: Technically the member function 'cuberr::context::get_logging' can be const.
      const bool &get_logging (void);
                  ^
src/base/error_context.hpp:48:7: style: Struct 'er_message' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
      er_message (const bool &logging);
      ^
src/base/error_context.cpp:149:30: style:inconclusive: Function 'set_error' argument 1 names different: declaration 'error_id' definition 'error_id_arg'. [funcArgNamesDifferent]
  er_message::set_error (int error_id_arg, int error_severity_arg, const char *filename_arg, int line_no_arg)
                             ^
src/base/error_context.hpp:54:27: note: Function 'set_error' argument 1 names different: declaration 'error_id' definition 'error_id_arg'.
      void set_error (int error_id, int error_severity, const char *filename, int line_no);  // set error
                          ^
src/base/error_context.cpp:149:30: note: Function 'set_error' argument 1 names different: declaration 'error_id' definition 'error_id_arg'.
  er_message::set_error (int error_id_arg, int error_severity_arg, const char *filename_arg, int line_no_arg)
                             ^
src/base/error_context.cpp:149:48: style:inconclusive: Function 'set_error' argument 2 names different: declaration 'error_severity' definition 'error_severity_arg'. [funcArgNamesDifferent]
  er_message::set_error (int error_id_arg, int error_severity_arg, const char *filename_arg, int line_no_arg)
                                               ^
src/base/error_context.hpp:54:41: note: Function 'set_error' argument 2 names different: declaration 'error_severity' definition 'error_severity_arg'.
      void set_error (int error_id, int error_severity, const char *filename, int line_no);  // set error
                                        ^
src/base/error_context.cpp:149:48: note: Function 'set_error' argument 2 names different: declaration 'error_severity' definition 'error_severity_arg'.
  er_message::set_error (int error_id_arg, int error_severity_arg, const char *filename_arg, int line_no_arg)
                                               ^
src/base/error_context.cpp:149:80: style:inconclusive: Function 'set_error' argument 3 names different: declaration 'filename' definition 'filename_arg'. [funcArgNamesDifferent]
  er_message::set_error (int error_id_arg, int error_severity_arg, const char *filename_arg, int line_no_arg)
                                                                               ^
src/base/error_context.hpp:54:69: note: Function 'set_error' argument 3 names different: declaration 'filename' definition 'filename_arg'.
      void set_error (int error_id, int error_severity, const char *filename, int line_no);  // set error
                                                                    ^
src/base/error_context.cpp:149:80: note: Function 'set_error' argument 3 names different: declaration 'filename' definition 'filename_arg'.
  er_message::set_error (int error_id_arg, int error_severity_arg, const char *filename_arg, int line_no_arg)
                                                                               ^
src/base/error_context.cpp:149:98: style:inconclusive: Function 'set_error' argument 4 names different: declaration 'line_no' definition 'line_no_arg'. [funcArgNamesDifferent]
  er_message::set_error (int error_id_arg, int error_severity_arg, const char *filename_arg, int line_no_arg)
                                                                                                 ^
src/base/error_context.hpp:54:83: note: Function 'set_error' argument 4 names different: declaration 'line_no' definition 'line_no_arg'.
      void set_error (int error_id, int error_severity, const char *filename, int line_no);  // set error
                                                                                  ^
src/base/error_context.cpp:149:98: note: Function 'set_error' argument 4 names different: declaration 'line_no' definition 'line_no_arg'.
  er_message::set_error (int error_id_arg, int error_severity_arg, const char *filename_arg, int line_no_arg)
                                                                                                 ^
src/base/error_manager.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 55 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/base/error_context.hpp:30:1: error: Code 'namespacecuberr{' is invalid C code. Use --std or --language to configure the language. [syntaxError]
namespace cuberr
^
src/base/error_manager.c:286:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static char er_Msglog_filename_buff[PATH_MAX];
^
src/base/error_manager.c:292:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static char er_Accesslog_filename_buff[PATH_MAX];
^
src/base/error_manager.c:801:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   strncpy (er_Msglog_filename_buff, msglog_filename, PATH_MAX - 1);
^
src/base/error_manager.c:805:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   envvar_logdir_file (er_Msglog_filename_buff, PATH_MAX, msglog_filename);
^
src/base/error_manager.c:808:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      er_Msglog_filename_buff[PATH_MAX - 1] = '\0';
^
src/base/error_manager.c:833:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
       char path[PATH_MAX];
^
src/base/error_manager.c:879:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
       char path[PATH_MAX];
^
src/base/error_manager.c:1001:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char dir[PATH_MAX], *tpath;
^
src/base/error_manager.c:1008:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      if (cub_dirname_r (tpath, dir, PATH_MAX) > 0 && access (dir, F_OK) < 0)
^
src/base/error_manager.c:1066:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char backup_file[PATH_MAX];
^
src/base/error_manager.c:1612:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char more_info[CUB_MAXHOSTNAMELEN + PATH_MAX + 64];
^
src/base/event_log.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 47 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/base/event_log.c:98:12: style: Redundant initialization for 'log_tm_p'. The initialized value is overwritten before it is read. [redundantInitialization]
  log_tm_p = localtime (&log_time);
           ^
src/base/event_log.c:75:31: note: log_tm_p is initialized
  struct tm log_tm, *log_tm_p = &log_tm;
                              ^
src/base/event_log.c:98:12: note: log_tm_p is overwritten
  log_tm_p = localtime (&log_time);
           ^
src/base/event_log.c:266:11: style: Redundant initialization for 'er_tm_p'. The initialized value is overwritten before it is read. [redundantInitialization]
  er_tm_p = localtime (&er_time);
          ^
src/base/event_log.c:226:22: note: er_tm_p is initialized
  struct tm *er_tm_p = &er_tm;
                     ^
src/base/event_log.c:266:11: note: er_tm_p is overwritten
  er_tm_p = localtime (&er_time);
          ^
src/base/event_log.c:409:9: style: The scope of the variable 'val_str' can be reduced. [variableScope]
  char *val_str;
        ^
src/base/event_log.c:75:13: style: Unused variable: log_tm [unusedVariable]
  struct tm log_tm, *log_tm_p = &log_tm;
            ^
src/base/event_log.c:225:13: style: Unused variable: er_tm [unusedVariable]
  struct tm er_tm;
            ^
src/base/event_log.c:59:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static char event_log_file_path[PATH_MAX];
^
src/base/event_log.c:76:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char event_log_name[PATH_MAX];
^
src/base/event_log.c:106:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  snprintf (event_log_name, PATH_MAX - 1, "%s%c%s_%04d%02d%02d_%02d%02d%s", EVENT_LOG_FILE_DIR, PATH_SEPARATOR,
^
src/base/event_log.c:110:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  envvar_logdir_file (event_log_file_path, PATH_MAX, event_log_name);
^
src/base/event_log.c:123:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char dir[PATH_MAX], *tpath;
^
src/base/event_log.c:136:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      if (cub_dirname_r (tpath, dir, PATH_MAX) > 0 && access (dir, F_OK) < 0)
^
src/base/event_log.c:190:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char backup_file[PATH_MAX];
^
src/base/fault_injection.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 49 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/base/fileline_location.cpp:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 41 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/base/get_clock_freq.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 68 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/base/ini_parser.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 41 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/base/ini_parser.c:219:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  ini = NULL;
  ^
src/base/ini_parser.c:431:11: style: Array index 'i' is used before limits check. [arrayIndexThenCheck]
  while (s[i] && i < INI_BUFSIZ)
          ^
src/base/ini_parser.c:513:7: warning: sscanf() without field width limits can crash with huge input data. [invalidscanf]
      sscanf (line, "[%[^]]", section);
      ^
src/base/ini_parser.c:523:12: warning: sscanf() without field width limits can crash with huge input data. [invalidscanf]
  else if (sscanf (line, "%[^=] = \"%[^\"]\"", key, value) == 2 || sscanf (line, "%[^=] = '%[^\']'", key, value) == 2
           ^
src/base/ini_parser.c:524:8: warning: sscanf() without field width limits can crash with huge input data. [invalidscanf]
    || sscanf (line, "%[^=] = %[^;#]", key, value) == 2)
       ^
src/base/ini_parser.c:540:12: warning: sscanf() without field width limits can crash with huge input data. [invalidscanf]
  else if (sscanf (line, "%[^=] = %[;#]", key, value) == 2 || sscanf (line, "%[^=] %[=]", key, value) == 2)
           ^
src/base/ini_parser.c:501:14: style: Variable 'status' is reassigned a value before the old one has been used. [redundantAssignment]
      status = LINE_EMPTY;
             ^
src/base/ini_parser.c:497:10: note: status is assigned
  status = LINE_UNPROCESSED;
         ^
src/base/ini_parser.c:501:14: note: status is overwritten
      status = LINE_EMPTY;
             ^
src/base/ini_parser.c:580:7: style: The scope of the variable 'len' can be reduced. [variableScope]
  int len;
      ^
src/base/ini_parser.c:65:21: style:inconclusive: Function 'ini_dblalloc' argument 1 names different: declaration 'ptr' definition 'p'. [funcArgNamesDifferent]
ini_dblalloc (void *p, int size)
                    ^
src/base/ini_parser.c:44:34: note: Function 'ini_dblalloc' argument 1 names different: declaration 'ptr' definition 'p'.
static void *ini_dblalloc (void *ptr, int size);
                                 ^
src/base/ini_parser.c:65:21: note: Function 'ini_dblalloc' argument 1 names different: declaration 'ptr' definition 'p'.
ini_dblalloc (void *p, int size)
                    ^
src/base/ini_parser.c:191:29: style:inconclusive: Function 'ini_table_free' argument 1 names different: declaration 'vd' definition 'ini'. [funcArgNamesDifferent]
ini_table_free (INI_TABLE * ini)
                            ^
src/base/ini_parser.c:47:41: note: Function 'ini_table_free' argument 1 names different: declaration 'vd' definition 'ini'.
static void ini_table_free (INI_TABLE * vd);
                                        ^
src/base/ini_parser.c:191:29: note: Function 'ini_table_free' argument 1 names different: declaration 'vd' definition 'ini'.
ini_table_free (INI_TABLE * ini)
                            ^
src/base/ini_parser.c:274:28: style:inconclusive: Function 'ini_table_set' argument 1 names different: declaration 'vd' definition 'ini'. [funcArgNamesDifferent]
ini_table_set (INI_TABLE * ini, char *key, char *val, int lineno)
                           ^
src/base/ini_parser.c:49:39: note: Function 'ini_table_set' argument 1 names different: declaration 'vd' definition 'ini'.
static int ini_table_set (INI_TABLE * vd, char *key, char *val, int lineno);
                                      ^
src/base/ini_parser.c:274:28: note: Function 'ini_table_set' argument 1 names different: declaration 'vd' definition 'ini'.
ini_table_set (INI_TABLE * ini, char *key, char *val, int lineno)
                           ^
src/base/intl_support.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 51 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/base/intl_support.c:607:23: style: Array index 'i' is used before limits check. [arrayIndexThenCheck]
      for (i = 0; (src[i] != '\0') && (i < max_len - 1); ++i)
                      ^
src/base/intl_support.c:698:21: style: Array index 'i' is used before limits check. [arrayIndexThenCheck]
      for (i = 0; ws[i] && i < n; i++)
                    ^
src/base/intl_support.c:3855:40: warning: Either the condition 'utf8!=NULL' is redundant or there is pointer arithmetic with NULL pointer. [nullPointerArithmeticRedundantCheck]
  const unsigned char *utf8_end = utf8 + size;
                                       ^
src/base/intl_support.c:3858:16: note: Assuming that condition 'utf8!=NULL' is not redundant
  assert (utf8 != NULL);
               ^
src/base/intl_support.c:3855:40: note: Null pointer addition
  const unsigned char *utf8_end = utf8 + size;
                                       ^
src/base/intl_support.c:3167:4: warning: Redundant assignment of 'cname' to itself. [selfAssignment]
   INTL_NEXT_CHAR (cname, cname, codeset, &char_size);
   ^
src/base/intl_support.c:692:10: style: The scope of the variable 'i' can be reduced. [variableScope]
  size_t i;
         ^
src/base/intl_support.c:1518:7: style: The scope of the variable 'char_count' can be reduced. [variableScope]
  int char_count;
      ^
src/base/intl_support.c:1629:7: style: The scope of the variable 'char_count' can be reduced. [variableScope]
  int char_count;
      ^
src/base/intl_support.c:1808:18: style: The scope of the variable 'i' can be reduced. [variableScope]
  int char_size, i;
                 ^
src/base/intl_support.c:2085:19: style: The scope of the variable 'size' can be reduced. [variableScope]
  int char_count, size;
                  ^
src/base/intl_support.c:2126:19: style: The scope of the variable 'size' can be reduced. [variableScope]
  int char_count, size;
                  ^
src/base/intl_support.c:2245:8: style: The scope of the variable 'bytes' can be reduced. [variableScope]
   int bytes;
       ^
src/base/intl_support.c:2307:8: style: The scope of the variable 'bytes' can be reduced. [variableScope]
   int bytes;
       ^
src/base/intl_support.c:2362:15: style: The scope of the variable 'cp1' can be reduced. [variableScope]
 unsigned int cp1, cp2;
              ^
src/base/intl_support.c:2362:20: style: The scope of the variable 'cp2' can be reduced. [variableScope]
 unsigned int cp1, cp2;
                   ^
src/base/intl_support.c:2474:15: style: The scope of the variable 'cp1' can be reduced. [variableScope]
 unsigned int cp1, cp2;
              ^
src/base/intl_support.c:2474:20: style: The scope of the variable 'cp2' can be reduced. [variableScope]
 unsigned int cp1, cp2;
                   ^
src/base/intl_support.c:2855:15: style: The scope of the variable 'cp' can be reduced. [variableScope]
 unsigned int cp;
              ^
src/base/intl_support.c:2917:7: style: The scope of the variable 'length_in_chars' can be reduced. [variableScope]
  int length_in_chars = 0;
      ^
src/base/intl_support.c:2993:15: style: The scope of the variable 'cp' can be reduced. [variableScope]
 unsigned int cp;
              ^
src/base/intl_support.c:3054:7: style: The scope of the variable 'length_in_chars' can be reduced. [variableScope]
  int length_in_chars = 0;
      ^
src/base/intl_support.c:5175:16: style: The scope of the variable 'unicode_cp' can be reduced. [variableScope]
  unsigned int unicode_cp = 0;
               ^
src/base/intl_support.c:149:40: style:inconclusive: Function 'intl_mbs_chr' argument 2 names different: declaration 'the_char' definition 'wc'. [funcArgNamesDifferent]
intl_mbs_chr (const char *mbs, wchar_t wc)
                                       ^
src/base/intl_support.h:278:55: note: Function 'intl_mbs_chr' argument 2 names different: declaration 'the_char' definition 'wc'.
  extern char *intl_mbs_chr (const char *mbs, wchar_t the_char);
                                                      ^
src/base/intl_support.c:149:40: note: Function 'intl_mbs_chr' argument 2 names different: declaration 'the_char' definition 'wc'.
intl_mbs_chr (const char *mbs, wchar_t wc)
                                       ^
src/base/intl_support.c:777:49: style:inconclusive: Function 'intl_nextchar_euc' argument 2 names different: declaration 'curr_length' definition 'curr_char_length'. [funcArgNamesDifferent]
intl_nextchar_euc (const unsigned char *s, int *curr_char_length)
                                                ^
src/base/intl_support.h:202:79: note: Function 'intl_nextchar_euc' argument 2 names different: declaration 'curr_length' definition 'curr_char_length'.
  extern const unsigned char *intl_nextchar_euc (const unsigned char *s, int *curr_length);
                                                                              ^
src/base/intl_support.c:777:49: note: Function 'intl_nextchar_euc' argument 2 names different: declaration 'curr_length' definition 'curr_char_length'.
intl_nextchar_euc (const unsigned char *s, int *curr_char_length)
                                                ^
src/base/intl_support.c:806:79: style:inconclusive: Function 'intl_prevchar_euc' argument 3 names different: declaration 'prev_length' definition 'prev_char_length'. [funcArgNamesDifferent]
intl_prevchar_euc (const unsigned char *s, const unsigned char *s_start, int *prev_char_length)
                                                                              ^
src/base/intl_support.h:204:13: note: Function 'intl_prevchar_euc' argument 3 names different: declaration 'prev_length' definition 'prev_char_length'.
       int *prev_length);
            ^
src/base/intl_support.c:806:79: note: Function 'intl_prevchar_euc' argument 3 names different: declaration 'prev_length' definition 'prev_char_length'.
intl_prevchar_euc (const unsigned char *s, const unsigned char *s_start, int *prev_char_length)
                                                                              ^
src/base/intl_support.c:2039:50: style:inconclusive: Function 'intl_nextchar_utf8' argument 2 names different: declaration 'curr_length' definition 'curr_char_length'. [funcArgNamesDifferent]
intl_nextchar_utf8 (const unsigned char *s, int *curr_char_length)
                                                 ^
src/base/intl_support.h:205:80: note: Function 'intl_nextchar_utf8' argument 2 names different: declaration 'curr_length' definition 'curr_char_length'.
  extern const unsigned char *intl_nextchar_utf8 (const unsigned char *s, int *curr_length);
                                                                               ^
src/base/intl_support.c:2039:50: note: Function 'intl_nextchar_utf8' argument 2 names different: declaration 'curr_length' definition 'curr_char_length'.
intl_nextchar_utf8 (const unsigned char *s, int *curr_char_length)
                                                 ^
src/base/intl_support.c:2054:80: style:inconclusive: Function 'intl_prevchar_utf8' argument 3 names different: declaration 'prev_length' definition 'prev_char_length'. [funcArgNamesDifferent]
intl_prevchar_utf8 (const unsigned char *s, const unsigned char *s_start, int *prev_char_length)
                                                                               ^
src/base/intl_support.h:207:14: note: Function 'intl_prevchar_utf8' argument 3 names different: declaration 'prev_length' definition 'prev_char_length'.
        int *prev_length);
             ^
src/base/intl_support.c:2054:80: note: Function 'intl_prevchar_utf8' argument 3 names different: declaration 'prev_length' definition 'prev_char_length'.
intl_prevchar_utf8 (const unsigned char *s, const unsigned char *s_start, int *prev_char_length)
                                                                               ^
src/base/intl_support.c:2082:42: style:inconclusive: Function 'intl_tolower_utf8' argument 1 names different: declaration 'a' definition 'alphabet'. [funcArgNamesDifferent]
intl_tolower_utf8 (const ALPHABET_DATA * alphabet, const unsigned char *s, unsigned char *d, int length_in_chars,
                                         ^
src/base/intl_support.c:100:53: note: Function 'intl_tolower_utf8' argument 1 names different: declaration 'a' definition 'alphabet'.
static int intl_tolower_utf8 (const ALPHABET_DATA * a, const unsigned char *s, unsigned char *d, int length_in_chars,
                                                    ^
src/base/intl_support.c:2082:42: note: Function 'intl_tolower_utf8' argument 1 names different: declaration 'a' definition 'alphabet'.
intl_tolower_utf8 (const ALPHABET_DATA * alphabet, const unsigned char *s, unsigned char *d, int length_in_chars,
                                         ^
src/base/intl_support.c:2123:42: style:inconclusive: Function 'intl_toupper_utf8' argument 1 names different: declaration 'a' definition 'alphabet'. [funcArgNamesDifferent]
intl_toupper_utf8 (const ALPHABET_DATA * alphabet, const unsigned char *s, unsigned char *d, int length_in_chars,
                                         ^
src/base/intl_support.c:102:53: note: Function 'intl_toupper_utf8' argument 1 names different: declaration 'a' definition 'alphabet'.
static int intl_toupper_utf8 (const ALPHABET_DATA * a, const unsigned char *s, unsigned char *d, int length_in_chars,
                                                    ^
src/base/intl_support.c:2123:42: note: Function 'intl_toupper_utf8' argument 1 names different: declaration 'a' definition 'alphabet'.
intl_toupper_utf8 (const ALPHABET_DATA * alphabet, const unsigned char *s, unsigned char *d, int length_in_chars,
                                         ^
src/base/intl_support.c:2226:47: style:inconclusive: Function 'intl_char_tolower_utf8' argument 1 names different: declaration 'a' definition 'alphabet'. [funcArgNamesDifferent]
intl_char_tolower_utf8 (const ALPHABET_DATA * alphabet, const unsigned char *s, const int size, unsigned char *d,
                                              ^
src/base/intl_support.c:105:58: note: Function 'intl_char_tolower_utf8' argument 1 names different: declaration 'a' definition 'alphabet'.
static int intl_char_tolower_utf8 (const ALPHABET_DATA * a, const unsigned char *s, const int size, unsigned char *d,
                                                         ^
src/base/intl_support.c:2226:47: note: Function 'intl_char_tolower_utf8' argument 1 names different: declaration 'a' definition 'alphabet'.
intl_char_tolower_utf8 (const ALPHABET_DATA * alphabet, const unsigned char *s, const int size, unsigned char *d,
                                              ^
src/base/intl_support.c:2288:47: style:inconclusive: Function 'intl_char_toupper_utf8' argument 1 names different: declaration 'a' definition 'alphabet'. [funcArgNamesDifferent]
intl_char_toupper_utf8 (const ALPHABET_DATA * alphabet, const unsigned char *s, const int size, unsigned char *d,
                                              ^
src/base/intl_support.c:107:58: note: Function 'intl_char_toupper_utf8' argument 1 names different: declaration 'a' definition 'alphabet'.
static int intl_char_toupper_utf8 (const ALPHABET_DATA * a, const unsigned char *s, const int size, unsigned char *d,
                                                         ^
src/base/intl_support.c:2288:47: note: Function 'intl_char_toupper_utf8' argument 1 names different: declaration 'a' definition 'alphabet'.
intl_char_toupper_utf8 (const ALPHABET_DATA * alphabet, const unsigned char *s, const int size, unsigned char *d,
                                              ^
src/base/intl_support.c:4364:42: style:inconclusive: Function 'intl_text_single_byte_to_utf8_ext' argument 1 names different: declaration 'txt_conv' definition 't'. [funcArgNamesDifferent]
intl_text_single_byte_to_utf8_ext (void *t, const unsigned char *in_buf, const int in_size, unsigned char **out_buf,
                                         ^
src/base/intl_support.h:306:55: note: Function 'intl_text_single_byte_to_utf8_ext' argument 1 names different: declaration 'txt_conv' definition 't'.
  extern int intl_text_single_byte_to_utf8_ext (void *txt_conv, const unsigned char *in_buf, const int in_size,
                                                      ^
src/base/intl_support.c:4364:42: note: Function 'intl_text_single_byte_to_utf8_ext' argument 1 names different: declaration 'txt_conv' definition 't'.
intl_text_single_byte_to_utf8_ext (void *t, const unsigned char *in_buf, const int in_size, unsigned char **out_buf,
                                         ^
src/base/intl_support.c:1753:13: style: Variable 'loc' is assigned a value that is never used. [unreadVariable]
  char *loc = setlocale (category, NULL);
            ^
src/base/intl_support.c:5175:27: style: Variable 'unicode_cp' is assigned a value that is never used. [unreadVariable]
  unsigned int unicode_cp = 0;
                          ^
src/base/language_support.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 52 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/base/language_support.c:975:14: style: Condition 'sys_id!=NULL' is always true [knownConditionTrueFalse]
  if (sys_id != NULL && conv_sys_ids != NULL)
             ^
src/base/language_support.c:944:8: warning:inconclusive: Either the condition 'sys_id!=NULL' is redundant or there is possible null pointer dereference: win_codepage_str. [nullPointerRedundantCheck]
  char win_codepage_str[32];
       ^
src/base/language_support.c:975:14: note: Assuming that condition 'sys_id!=NULL' is not redundant
  if (sys_id != NULL && conv_sys_ids != NULL)
             ^
src/base/language_support.c:962:12: note: Assignment to 'sys_id=win_codepage_str'
  sys_id = win_codepage_str;
           ^
src/base/language_support.c:944:8: note: Null pointer dereference
  char win_codepage_str[32];
       ^
src/base/language_support.c:978:13: style: The scope of the variable 'found_token' can be reduced. [variableScope]
      char *found_token;
            ^
src/base/language_support.c:1074:8: style: The scope of the variable 'err_msg' can be reduced. [variableScope]
  char err_msg[ERR_MSG_SIZE];
       ^
src/base/language_support.c:2106:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/base/language_support.c:2861:16: style: The scope of the variable 'cp1' can be reduced. [variableScope]
  unsigned int cp1, cp2, w_cp1, w_cp2;
               ^
src/base/language_support.c:2861:21: style: The scope of the variable 'cp2' can be reduced. [variableScope]
  unsigned int cp1, cp2, w_cp1, w_cp2;
                    ^
src/base/language_support.c:3025:16: style: The scope of the variable 'cp1' can be reduced. [variableScope]
  unsigned int cp1, cp2, w_cp1, w_cp2;
               ^
src/base/language_support.c:3025:21: style: The scope of the variable 'cp2' can be reduced. [variableScope]
  unsigned int cp1, cp2, w_cp1, w_cp2;
                    ^
src/base/language_support.c:3030:8: style: The scope of the variable 'is_str1_contr' can be reduced. [variableScope]
  bool is_str1_contr = false;
       ^
src/base/language_support.c:3031:8: style: The scope of the variable 'is_str2_contr' can be reduced. [variableScope]
  bool is_str2_contr = false;
       ^
src/base/language_support.c:3206:16: style: The scope of the variable 'cp' can be reduced. [variableScope]
  unsigned int cp, w;
               ^
src/base/language_support.c:3478:20: style: The scope of the variable 'cp_prev' can be reduced. [variableScope]
      unsigned int cp_prev;
                   ^
src/base/language_support.c:4509:16: style: The scope of the variable 'cp' can be reduced. [variableScope]
  unsigned int cp;
               ^
src/base/language_support.c:4646:16: style: The scope of the variable 'next_seq_id' can be reduced. [variableScope]
  unsigned int next_seq_id;
               ^
src/base/language_support.c:4814:16: style: The scope of the variable 'w1' can be reduced. [variableScope]
  unsigned int w1, w2;
               ^
src/base/language_support.c:4814:20: style: The scope of the variable 'w2' can be reduced. [variableScope]
  unsigned int w1, w2;
                   ^
src/base/language_support.c:5720:16: style: The scope of the variable 'w' can be reduced. [variableScope]
  unsigned int w;
               ^
src/base/language_support.c:6211:16: style: The scope of the variable 'w' can be reduced. [variableScope]
  unsigned int w;
               ^
src/base/language_support.c:6529:16: style: The scope of the variable 'c1' can be reduced. [variableScope]
  unsigned int c1, c2;
               ^
src/base/language_support.c:6529:20: style: The scope of the variable 'c2' can be reduced. [variableScope]
  unsigned int c1, c2;
                   ^
src/base/language_support.c:2613:97: style:inconclusive: Function 'lang_get_charset_env_string' argument 4 names different: declaration 'charset' definition 'codeset'. [funcArgNamesDifferent]
lang_get_charset_env_string (char *buf, int buf_size, const char *lang_name, const INTL_CODESET codeset)
                                                                                                ^
src/base/language_support.h:314:110: note: Function 'lang_get_charset_env_string' argument 4 names different: declaration 'charset' definition 'codeset'.
  extern int lang_get_charset_env_string (char *buf, int buf_size, const char *lang_name, const INTL_CODESET charset);
                                                                                                             ^
src/base/language_support.c:2613:97: note: Function 'lang_get_charset_env_string' argument 4 names different: declaration 'charset' definition 'codeset'.
lang_get_charset_env_string (char *buf, int buf_size, const char *lang_name, const INTL_CODESET codeset)
                                                                                                ^
src/base/language_support.c:5812:17: style: Local variable 'lang_Weight_TR' shadows outer variable [shadowVariable]
  unsigned int *lang_Weight_TR;
                ^
src/base/language_support.c:93:21: note: Shadowed declaration
static unsigned int lang_Weight_TR[LANG_CHAR_COUNT_TR];
                    ^
src/base/language_support.c:5812:17: note: Shadow variable
  unsigned int *lang_Weight_TR;
                ^
src/base/language_support.c:5813:17: style: Local variable 'lang_Next_alpha_char_TR' shadows outer variable [shadowVariable]
  unsigned int *lang_Next_alpha_char_TR;
                ^
src/base/language_support.c:94:21: note: Shadowed declaration
static unsigned int lang_Next_alpha_char_TR[LANG_CHAR_COUNT_TR];
                    ^
src/base/language_support.c:5813:17: note: Shadow variable
  unsigned int *lang_Next_alpha_char_TR;
                ^
src/base/language_support.c:5814:17: style: Local variable 'lang_Weight_TR_ti' shadows outer variable [shadowVariable]
  unsigned int *lang_Weight_TR_ti;
                ^
src/base/language_support.c:96:21: note: Shadowed declaration
static unsigned int lang_Weight_TR_ti[LANG_CHAR_COUNT_TR];
                    ^
src/base/language_support.c:5814:17: note: Shadow variable
  unsigned int *lang_Weight_TR_ti;
                ^
src/base/language_support.c:5815:17: style: Local variable 'lang_Next_alpha_char_TR_ti' shadows outer variable [shadowVariable]
  unsigned int *lang_Next_alpha_char_TR_ti;
                ^
src/base/language_support.c:97:21: note: Shadowed declaration
static unsigned int lang_Next_alpha_char_TR_ti[LANG_CHAR_COUNT_TR];
                    ^
src/base/language_support.c:5815:17: note: Shadow variable
  unsigned int *lang_Next_alpha_char_TR_ti;
                ^
src/base/language_support.c:3030:22: style: Variable 'is_str1_contr' is assigned a value that is never used. [unreadVariable]
  bool is_str1_contr = false;
                     ^
src/base/language_support.c:3031:22: style: Variable 'is_str2_contr' is assigned a value that is never used. [unreadVariable]
  bool is_str2_contr = false;
                     ^
src/base/language_support.c:4568:8: style: Variable 'str' is assigned a value that is never used. [unreadVariable]
   str = str_next;
       ^
src/base/language_support.c:6755:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char err_msg[ERR_MSG_SIZE + PATH_MAX];
^
src/base/language_support.c:7085:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char err_msg[ERR_MSG_SIZE + PATH_MAX];
^
src/base/language_support.c:7118:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char err_msg[ERR_MSG_SIZE + PATH_MAX];
^
src/base/language_support.c:7155:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char err_msg[ERR_MSG_SIZE + PATH_MAX];
^
src/base/language_support.c:7266:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char err_msg[ERR_MSG_SIZE + PATH_MAX];
^
src/base/language_support.c:7414:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char err_msg[ERR_MSG_SIZE + PATH_MAX];
^
src/base/locale_helper.cpp:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 44 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/base/locale_support.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 52 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/base/locale_support.c:2371:24: warning: Either the condition 'ld->data_buf_count>256' is redundant or the array 'ct_rule->start_cp_buf[256]' is accessed at index 256, which is out of bounds. [arrayIndexOutOfBoundsCond]
  ct_rule->start_cp_buf[ld->data_buf_count] = '\0';
                       ^
src/base/locale_support.c:2363:26: note: Assuming that condition 'ld->data_buf_count>256' is not redundant
  if (ld->data_buf_count > LOC_DATA_BUFF_SIZE)
                         ^
src/base/locale_support.c:2371:24: note: Array index out of bounds
  ct_rule->start_cp_buf[ld->data_buf_count] = '\0';
                       ^
src/base/locale_support.c:2374:22: warning: Either the condition 'ld->data_buf_count>256' is redundant or the array 'ct_rule->end_cp_buf[256]' is accessed at index 256, which is out of bounds. [arrayIndexOutOfBoundsCond]
  ct_rule->end_cp_buf[ld->data_buf_count] = '\0';
                     ^
src/base/locale_support.c:2363:26: note: Assuming that condition 'ld->data_buf_count>256' is not redundant
  if (ld->data_buf_count > LOC_DATA_BUFF_SIZE)
                         ^
src/base/locale_support.c:2374:22: note: Array index out of bounds
  ct_rule->end_cp_buf[ld->data_buf_count] = '\0';
                     ^
src/base/locale_support.c:2435:22: warning: Either the condition 'ld->data_buf_count>256' is redundant or the array 'ct_rule->end_cp_buf[256]' is accessed at index 256, which is out of bounds. [arrayIndexOutOfBoundsCond]
  ct_rule->end_cp_buf[ld->data_buf_count] = '\0';
                     ^
src/base/locale_support.c:2425:26: note: Assuming that condition 'ld->data_buf_count>256' is not redundant
  if (ld->data_buf_count > LOC_DATA_BUFF_SIZE)
                         ^
src/base/locale_support.c:2435:22: note: Array index out of bounds
  ct_rule->end_cp_buf[ld->data_buf_count] = '\0';
                     ^
src/base/locale_support.c:2494:24: warning: Either the condition 'ld->data_buf_count>256' is redundant or the array 'ct_rule->start_weight[136]' is accessed at index 256, which is out of bounds. [arrayIndexOutOfBoundsCond]
  ct_rule->start_weight[ld->data_buf_count] = '\0';
                       ^
src/base/locale_support.c:2486:26: note: Assuming that condition 'ld->data_buf_count>256' is not redundant
  if (ld->data_buf_count > LOC_DATA_BUFF_SIZE)
                         ^
src/base/locale_support.c:2494:24: note: Array index out of bounds
  ct_rule->start_weight[ld->data_buf_count] = '\0';
                       ^
src/base/locale_support.c:7437:8: error: The address of local variable 'nv' is accessed at non-zero index. [objectIndex]
       BUF_PUT_INT32 (buf_pos, cd->uca_w_l13[cp * cd->uca_exp_num + w]);
       ^
src/base/locale_support.c:7437:8: note: Address of variable taken here.
       BUF_PUT_INT32 (buf_pos, cd->uca_w_l13[cp * cd->uca_exp_num + w]);
       ^
src/base/locale_support.c:7437:8: note: The address of local variable 'nv' is accessed at non-zero index.
       BUF_PUT_INT32 (buf_pos, cd->uca_w_l13[cp * cd->uca_exp_num + w]);
       ^
src/base/locale_support.c:7448:5: error: The address of local variable 'nv' is accessed at non-zero index. [objectIndex]
    BUF_PUT_INT16 (buf_pos, cd->uca_w_l4[cp * cd->uca_exp_num + w]);
    ^
src/base/locale_support.c:7448:5: note: Address of variable taken here.
    BUF_PUT_INT16 (buf_pos, cd->uca_w_l4[cp * cd->uca_exp_num + w]);
    ^
src/base/locale_support.c:7448:5: note: The address of local variable 'nv' is accessed at non-zero index.
    BUF_PUT_INT16 (buf_pos, cd->uca_w_l4[cp * cd->uca_exp_num + w]);
    ^
src/base/locale_support.c:7457:4: error: The address of local variable 'nv' is accessed at non-zero index. [objectIndex]
   BUF_PUT_INT32 (buf_pos, cd->weights[cp]);
   ^
src/base/locale_support.c:7457:4: note: Address of variable taken here.
   BUF_PUT_INT32 (buf_pos, cd->weights[cp]);
   ^
src/base/locale_support.c:7457:4: note: The address of local variable 'nv' is accessed at non-zero index.
   BUF_PUT_INT32 (buf_pos, cd->weights[cp]);
   ^
src/base/locale_support.c:7463:7: error: The address of local variable 'nv' is accessed at non-zero index. [objectIndex]
      BUF_PUT_INT32 (buf_pos, cd->next_cp[cp]);
      ^
src/base/locale_support.c:7463:7: note: Address of variable taken here.
      BUF_PUT_INT32 (buf_pos, cd->next_cp[cp]);
      ^
src/base/locale_support.c:7463:7: note: The address of local variable 'nv' is accessed at non-zero index.
      BUF_PUT_INT32 (buf_pos, cd->next_cp[cp]);
      ^
src/base/locale_support.c:7473:4: error: The address of local variable 'nv' is accessed at non-zero index. [objectIndex]
   BUF_PUT_INT32 (buf_pos, c->next);
   ^
src/base/locale_support.c:7473:4: note: Address of variable taken here.
   BUF_PUT_INT32 (buf_pos, c->next);
   ^
src/base/locale_support.c:7473:4: note: The address of local variable 'nv' is accessed at non-zero index.
   BUF_PUT_INT32 (buf_pos, c->next);
   ^
src/base/locale_support.c:7474:4: error: The address of local variable 'nv' is accessed at non-zero index. [objectIndex]
   BUF_PUT_INT32 (buf_pos, c->wv);
   ^
src/base/locale_support.c:7474:4: note: Address of variable taken here.
   BUF_PUT_INT32 (buf_pos, c->wv);
   ^
src/base/locale_support.c:7474:4: note: The address of local variable 'nv' is accessed at non-zero index.
   BUF_PUT_INT32 (buf_pos, c->wv);
   ^
src/base/locale_support.c:7477:8: error: The address of local variable 'nv' is accessed at non-zero index. [objectIndex]
       BUF_PUT_INT32 (buf_pos, c->uca_w_l13[w]);
       ^
src/base/locale_support.c:7477:8: note: Address of variable taken here.
       BUF_PUT_INT32 (buf_pos, c->uca_w_l13[w]);
       ^
src/base/locale_support.c:7477:8: note: The address of local variable 'nv' is accessed at non-zero index.
       BUF_PUT_INT32 (buf_pos, c->uca_w_l13[w]);
       ^
src/base/locale_support.c:7481:8: error: The address of local variable 'nv' is accessed at non-zero index. [objectIndex]
       BUF_PUT_INT16 (buf_pos, c->uca_w_l4[w]);
       ^
src/base/locale_support.c:7481:8: note: Address of variable taken here.
       BUF_PUT_INT16 (buf_pos, c->uca_w_l4[w]);
       ^
src/base/locale_support.c:7481:8: note: The address of local variable 'nv' is accessed at non-zero index.
       BUF_PUT_INT16 (buf_pos, c->uca_w_l4[w]);
       ^
src/base/locale_support.c:7496:7: error: The address of local variable 'nv' is accessed at non-zero index. [objectIndex]
      BUF_PUT_INT32 (buf_pos, cd->contr_min_size);
      ^
src/base/locale_support.c:7496:7: note: Address of variable taken here.
      BUF_PUT_INT32 (buf_pos, cd->contr_min_size);
      ^
src/base/locale_support.c:7496:7: note: The address of local variable 'nv' is accessed at non-zero index.
      BUF_PUT_INT32 (buf_pos, cd->contr_min_size);
      ^
src/base/locale_support.c:7498:7: error: The address of local variable 'nv' is accessed at non-zero index. [objectIndex]
      BUF_PUT_INT32 (buf_pos, cd->cp_first_contr_offset);
      ^
src/base/locale_support.c:7498:7: note: Address of variable taken here.
      BUF_PUT_INT32 (buf_pos, cd->cp_first_contr_offset);
      ^
src/base/locale_support.c:7498:7: note: The address of local variable 'nv' is accessed at non-zero index.
      BUF_PUT_INT32 (buf_pos, cd->cp_first_contr_offset);
      ^
src/base/locale_support.c:7500:7: error: The address of local variable 'nv' is accessed at non-zero index. [objectIndex]
      BUF_PUT_INT32 (buf_pos, cd->cp_first_contr_count);
      ^
src/base/locale_support.c:7500:7: note: Address of variable taken here.
      BUF_PUT_INT32 (buf_pos, cd->cp_first_contr_count);
      ^
src/base/locale_support.c:7500:7: note: The address of local variable 'nv' is accessed at non-zero index.
      BUF_PUT_INT32 (buf_pos, cd->cp_first_contr_count);
      ^
src/base/locale_support.c:7503:3: error: The address of local variable 'nv' is accessed at non-zero index. [objectIndex]
  BUF_PUT_INT32 (buf_pos, cd->uca_opt.sett_strength);
  ^
src/base/locale_support.c:7503:3: note: Address of variable taken here.
  BUF_PUT_INT32 (buf_pos, cd->uca_opt.sett_strength);
  ^
src/base/locale_support.c:7503:3: note: The address of local variable 'nv' is accessed at non-zero index.
  BUF_PUT_INT32 (buf_pos, cd->uca_opt.sett_strength);
  ^
src/base/locale_support.c:7507:3: error: The address of local variable 'nv' is accessed at non-zero index. [objectIndex]
  BUF_PUT_INT32 (buf_pos, cd->uca_opt.sett_caseFirst);
  ^
src/base/locale_support.c:7507:3: note: Address of variable taken here.
  BUF_PUT_INT32 (buf_pos, cd->uca_opt.sett_caseFirst);
  ^
src/base/locale_support.c:7507:3: note: The address of local variable 'nv' is accessed at non-zero index.
  BUF_PUT_INT32 (buf_pos, cd->uca_opt.sett_caseFirst);
  ^
src/base/locale_support.c:7510:3: error: The address of local variable 'nv' is accessed at non-zero index. [objectIndex]
  BUF_PUT_INT32 (buf_pos, cd->uca_opt.sett_contr_policy);
  ^
src/base/locale_support.c:7510:3: note: Address of variable taken here.
  BUF_PUT_INT32 (buf_pos, cd->uca_opt.sett_contr_policy);
  ^
src/base/locale_support.c:7510:3: note: The address of local variable 'nv' is accessed at non-zero index.
  BUF_PUT_INT32 (buf_pos, cd->uca_opt.sett_contr_policy);
  ^
src/base/locale_support.c:7513:3: error: The address of local variable 'nv' is accessed at non-zero index. [objectIndex]
  BUF_PUT_INT32 (buf_pos, cd->uca_opt.sett_match_contr);
  ^
src/base/locale_support.c:7513:3: note: Address of variable taken here.
  BUF_PUT_INT32 (buf_pos, cd->uca_opt.sett_match_contr);
  ^
src/base/locale_support.c:7513:3: note: The address of local variable 'nv' is accessed at non-zero index.
  BUF_PUT_INT32 (buf_pos, cd->uca_opt.sett_match_contr);
  ^
src/base/locale_support.c:7563:3: error: The address of local variable 'nv' is accessed at non-zero index. [objectIndex]
  BUF_PUT_INT32 (buf_pos, a->a_type);
  ^
src/base/locale_support.c:7563:3: note: Address of variable taken here.
  BUF_PUT_INT32 (buf_pos, a->a_type);
  ^
src/base/locale_support.c:7563:3: note: The address of local variable 'nv' is accessed at non-zero index.
  BUF_PUT_INT32 (buf_pos, a->a_type);
  ^
src/base/locale_support.c:7569:4: error: The address of local variable 'nv' is accessed at non-zero index. [objectIndex]
   BUF_PUT_INT32 (buf_pos, a->lower_cp[cp * a->lower_multiplier + m]);
   ^
src/base/locale_support.c:7569:4: note: Address of variable taken here.
   BUF_PUT_INT32 (buf_pos, a->lower_cp[cp * a->lower_multiplier + m]);
   ^
src/base/locale_support.c:7569:4: note: The address of local variable 'nv' is accessed at non-zero index.
   BUF_PUT_INT32 (buf_pos, a->lower_cp[cp * a->lower_multiplier + m]);
   ^
src/base/locale_support.c:7577:4: error: The address of local variable 'nv' is accessed at non-zero index. [objectIndex]
   BUF_PUT_INT32 (buf_pos, a->upper_cp[cp * a->upper_multiplier + m]);
   ^
src/base/locale_support.c:7577:4: note: Address of variable taken here.
   BUF_PUT_INT32 (buf_pos, a->upper_cp[cp * a->upper_multiplier + m]);
   ^
src/base/locale_support.c:7577:4: note: The address of local variable 'nv' is accessed at non-zero index.
   BUF_PUT_INT32 (buf_pos, a->upper_cp[cp * a->upper_multiplier + m]);
   ^
src/base/locale_support.c:7726:3: error: The address of local variable 'nv' is accessed at non-zero index. [objectIndex]
  BUF_PUT_INT32 (buf_pos, ld->default_currency_code);
  ^
src/base/locale_support.c:7726:3: note: Address of variable taken here.
  BUF_PUT_INT32 (buf_pos, ld->default_currency_code);
  ^
src/base/locale_support.c:7726:3: note: The address of local variable 'nv' is accessed at non-zero index.
  BUF_PUT_INT32 (buf_pos, ld->default_currency_code);
  ^
src/base/locale_support.c:7733:3: error: The address of local variable 'nv' is accessed at non-zero index. [objectIndex]
  BUF_PUT_INT32 (buf_pos, ld->txt_conv.conv_type);
  ^
src/base/locale_support.c:7733:3: note: Address of variable taken here.
  BUF_PUT_INT32 (buf_pos, ld->txt_conv.conv_type);
  ^
src/base/locale_support.c:7733:3: note: The address of local variable 'nv' is accessed at non-zero index.
  BUF_PUT_INT32 (buf_pos, ld->txt_conv.conv_type);
  ^
src/base/locale_support.c:7742:7: error: The address of local variable 'nv' is accessed at non-zero index. [objectIndex]
      BUF_PUT_INT32 (buf_pos, tc->utf8_first_cp);
      ^
src/base/locale_support.c:7742:7: note: Address of variable taken here.
      BUF_PUT_INT32 (buf_pos, tc->utf8_first_cp);
      ^
src/base/locale_support.c:7742:7: note: The address of local variable 'nv' is accessed at non-zero index.
      BUF_PUT_INT32 (buf_pos, tc->utf8_first_cp);
      ^
src/base/locale_support.c:7743:7: error: The address of local variable 'nv' is accessed at non-zero index. [objectIndex]
      BUF_PUT_INT32 (buf_pos, tc->utf8_last_cp);
      ^
src/base/locale_support.c:7743:7: note: Address of variable taken here.
      BUF_PUT_INT32 (buf_pos, tc->utf8_last_cp);
      ^
src/base/locale_support.c:7743:7: note: The address of local variable 'nv' is accessed at non-zero index.
      BUF_PUT_INT32 (buf_pos, tc->utf8_last_cp);
      ^
src/base/locale_support.c:7744:7: error: The address of local variable 'nv' is accessed at non-zero index. [objectIndex]
      BUF_PUT_INT32 (buf_pos, tc->text_first_cp);
      ^
src/base/locale_support.c:7744:7: note: Address of variable taken here.
      BUF_PUT_INT32 (buf_pos, tc->text_first_cp);
      ^
src/base/locale_support.c:7744:7: note: The address of local variable 'nv' is accessed at non-zero index.
      BUF_PUT_INT32 (buf_pos, tc->text_first_cp);
      ^
src/base/locale_support.c:7745:7: error: The address of local variable 'nv' is accessed at non-zero index. [objectIndex]
      BUF_PUT_INT32 (buf_pos, tc->text_last_cp);
      ^
src/base/locale_support.c:7745:7: note: Address of variable taken here.
      BUF_PUT_INT32 (buf_pos, tc->text_last_cp);
      ^
src/base/locale_support.c:7745:7: note: The address of local variable 'nv' is accessed at non-zero index.
      BUF_PUT_INT32 (buf_pos, tc->text_last_cp);
      ^
src/base/locale_support.c:7766:4: error: The address of local variable 'nv' is accessed at non-zero index. [objectIndex]
   BUF_PUT_INT32 (buf_pos, un->unicode_mapping_index[cp]);
   ^
src/base/locale_support.c:7766:4: note: Address of variable taken here.
   BUF_PUT_INT32 (buf_pos, un->unicode_mapping_index[cp]);
   ^
src/base/locale_support.c:7766:4: note: The address of local variable 'nv' is accessed at non-zero index.
   BUF_PUT_INT32 (buf_pos, un->unicode_mapping_index[cp]);
   ^
src/base/locale_support.c:7771:4: error: The address of local variable 'nv' is accessed at non-zero index. [objectIndex]
   BUF_PUT_INT32 (buf_pos, un->list_full_decomp[cp]);
   ^
src/base/locale_support.c:7771:4: note: Address of variable taken here.
   BUF_PUT_INT32 (buf_pos, un->list_full_decomp[cp]);
   ^
src/base/locale_support.c:7771:4: note: The address of local variable 'nv' is accessed at non-zero index.
   BUF_PUT_INT32 (buf_pos, un->list_full_decomp[cp]);
   ^
src/base/locale_support.c:7777:4: error: The address of local variable 'nv' is accessed at non-zero index. [objectIndex]
   BUF_PUT_INT32 (buf_pos, um->cp);
   ^
src/base/locale_support.c:7777:4: note: Address of variable taken here.
   BUF_PUT_INT32 (buf_pos, um->cp);
   ^
src/base/locale_support.c:7777:4: note: The address of local variable 'nv' is accessed at non-zero index.
   BUF_PUT_INT32 (buf_pos, um->cp);
   ^
src/base/locale_support.c:7778:4: error: The address of local variable 'nv' is accessed at non-zero index. [objectIndex]
   BUF_PUT_INT32 (buf_pos, um->size);
   ^
src/base/locale_support.c:7778:4: note: Address of variable taken here.
   BUF_PUT_INT32 (buf_pos, um->size);
   ^
src/base/locale_support.c:7778:4: note: The address of local variable 'nv' is accessed at non-zero index.
   BUF_PUT_INT32 (buf_pos, um->size);
   ^
src/base/locale_support.c:4012:4: error: Common realloc mistake: 'txt_conv_array' nulled but not freed upon failure [memleakOnRealloc]
   txt_conv_array =
   ^
src/base/locale_support.c:5151:4: error: Common realloc mistake: 'locale_files' nulled but not freed upon failure [memleakOnRealloc]
   locale_files = (LOCALE_FILE *) realloc (locale_files, max_locales * sizeof (LOCALE_FILE));
   ^
src/base/locale_support.c:6824:7: error: Common realloc mistake: 'shared_data' nulled but not freed upon failure [memleakOnRealloc]
      shared_data =
      ^
src/base/locale_support.c:5136:42: warning: Either the condition 'fp!=NULL' is redundant or there is possible null pointer dereference: fp. [nullPointerRedundantCheck]
  while (fgets (line, sizeof (line) - 1, fp) != NULL)
                                         ^
src/base/locale_support.c:5200:10: note: Assuming that condition 'fp!=NULL' is not redundant
  if (fp != NULL)
         ^
src/base/locale_support.c:5136:42: note: Null pointer dereference
  while (fgets (line, sizeof (line) - 1, fp) != NULL)
                                         ^
src/base/locale_support.c:7956:24: warning: Either the condition 'new_pd==NULL' is redundant or there is possible null pointer dereference: new_pd. [nullPointerRedundantCheck]
  ld = (LOCALE_DATA *) XML_USER_DATA (new_pd);
                       ^
src/base/locale_support.c:7966:14: note: Assuming that condition 'new_pd==NULL' is not redundant
  if (new_pd == NULL)
             ^
src/base/locale_support.c:7956:24: note: Null pointer dereference
  ld = (LOCALE_DATA *) XML_USER_DATA (new_pd);
                       ^
src/base/locale_support.c:4752:13: style: Variable 'er_status' is reassigned a value before the old one has been used. [redundantAssignment]
  er_status = load_console_conv_data (ld, is_verbose);
            ^
src/base/locale_support.c:4733:13: note: er_status is assigned
  er_status = locale_check_and_set_shared_data (LOC_SHARED_NORMALIZATION, "normalization", NULL, NULL, &norm_sh_entry);
            ^
src/base/locale_support.c:4752:13: note: er_status is overwritten
  er_status = load_console_conv_data (ld, is_verbose);
            ^
src/base/locale_support.c:3403:8: style: The scope of the variable 'msg' can be reduced. [variableScope]
  char msg[64];
       ^
src/base/locale_support.c:3618:16: style: The scope of the variable 'curr_att' can be reduced. [variableScope]
  const char **curr_att;
               ^
src/base/locale_support.c:3776:7: style: The scope of the variable 'range_start' can be reduced. [variableScope]
  int range_start, range_size;
      ^
src/base/locale_support.c:3776:20: style: The scope of the variable 'range_size' can be reduced. [variableScope]
  int range_start, range_size;
                   ^
src/base/locale_support.c:3842:8: style: The scope of the variable 'err_msg' can be reduced. [variableScope]
  char err_msg[ERR_MSG_SIZE];
       ^
src/base/locale_support.c:5661:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/base/locale_support.c:6576:17: style: The scope of the variable 'utf8_buf_1' can be reduced. [variableScope]
  unsigned char utf8_buf_1[INTL_UTF8_MAX_CHAR_SIZE + 1];
                ^
src/base/locale_support.c:6577:17: style: The scope of the variable 'utf8_buf_2' can be reduced. [variableScope]
  unsigned char utf8_buf_2[INTL_UTF8_MAX_CHAR_SIZE + 1];
                ^
src/base/locale_support.c:7109:16: style: The scope of the variable 'cp' can be reduced. [variableScope]
  unsigned int cp;
               ^
src/base/locale_support.c:7191:21: style: The scope of the variable 'dbcs_seq' can be reduced. [variableScope]
      unsigned char dbcs_seq[2 + 1];
                    ^
src/base/locale_support.c:7192:11: style: The scope of the variable 'dbcs_size' can be reduced. [variableScope]
      int dbcs_size;
          ^
src/base/locale_support.c:7597:7: style: The scope of the variable 'cp' can be reduced. [variableScope]
  int cp;
      ^
src/base/locale_support.c:7965:7: style: The scope of the variable 'ret' can be reduced. [variableScope]
  int ret;
      ^
src/base/locale_support.c:4436:63: style:inconclusive: Function 'locale_destroy_alphabet_tailoring' argument 1 names different: declaration 'cd' definition 'at'. [funcArgNamesDifferent]
locale_destroy_alphabet_tailoring (const ALPHABET_TAILORING * at)
                                                              ^
src/base/locale_support.c:180:75: note: Function 'locale_destroy_alphabet_tailoring' argument 1 names different: declaration 'cd' definition 'at'.
static void locale_destroy_alphabet_tailoring (const ALPHABET_TAILORING * cd);
                                                                          ^
src/base/locale_support.c:4436:63: note: Function 'locale_destroy_alphabet_tailoring' argument 1 names different: declaration 'cd' definition 'at'.
locale_destroy_alphabet_tailoring (const ALPHABET_TAILORING * at)
                                                              ^
src/base/locale_support.c:2910:11: style: Local variable 'rule_id' shadows outer variable [shadowVariable]
      int rule_id = curr_coll_tail->count_rules;
          ^
src/base/locale_support.c:2874:7: note: Shadowed declaration
  int rule_id;
      ^
src/base/locale_support.c:2910:11: note: Shadow variable
      int rule_id = curr_coll_tail->count_rules;
          ^
src/base/locale_support.c:3426:12: style: Local variable 'msg' shadows outer variable [shadowVariable]
      char msg[64];
           ^
src/base/locale_support.c:3403:8: note: Shadowed declaration
  char msg[64];
       ^
src/base/locale_support.c:3426:12: note: Shadow variable
      char msg[64];
           ^
src/base/locale_support.c:1221:6: style: Variable 'ld' is assigned a value that is never used. [unreadVariable]
  ld = (LOCALE_DATA *) XML_USER_DATA (pd);
     ^
src/base/locale_support.c:1644:6: style: Variable 'ld' is assigned a value that is never used. [unreadVariable]
  ld = (LOCALE_DATA *) XML_USER_DATA (pd);
     ^
src/base/locale_support.c:1787:15: style: Variable 'att_val_end' is assigned a value that is never used. [unreadVariable]
  att_val_end = valid_locales + strlen (valid_locales);
              ^
src/base/locale_support.c:2940:6: style: Variable 'ld' is assigned a value that is never used. [unreadVariable]
  ld = (LOCALE_DATA *) XML_USER_DATA (pd);
     ^
src/base/locale_support.c:3780:16: style: Variable 'charset_part' is assigned a value that is never used. [unreadVariable]
  charset_part = coll_name;
               ^
src/base/locale_support.c:5226:17: style: Variable 'er_status' is assigned a value that is never used. [unreadVariable]
  int er_status = NO_ERROR;
                ^
src/base/locale_support.c:5283:25: style: Variable 'is_alloc_lib_file' is assigned a value that is never used. [unreadVariable]
      is_alloc_lib_file = true;
                        ^
src/base/locale_support.c:7973:8: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
   ret = snprintf (err_msg, sizeof (err_msg) - 1, "Inclusion loop found for file %s.", include_file_path);
       ^
src/base/locale_support.c:7976:8: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
   ret = snprintf (err_msg, sizeof (err_msg) - 1, "Failed to initialize subparser for file path %s.",
       ^
src/base/locale_support.c:7980:8: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
   ret = snprintf (err_msg, sizeof (err_msg) - 1, "Memory exhausted when creating subparser for file %s.",
       ^
src/base/xml_parser.h:124:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char filepath[PATH_MAX]; /* path to current XML file */
^
src/base/locale_support.c:1919:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char err_msg[ERR_MSG_SIZE + PATH_MAX];
^
src/base/locale_support.c:3875:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char conv_file_name[PATH_MAX];
^
src/base/locale_support.c:4808:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
       char msg[ERR_MSG_SIZE + 2 * PATH_MAX];
^
src/base/locale_support.c:5094:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char locale_cfg_file[PATH_MAX];
^
src/base/locale_support.c:5250:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      lf->ldml_file = (char *) malloc (PATH_MAX + 1);
^
src/base/locale_support.c:5259:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      envvar_ldmldir_file (lf->ldml_file, PATH_MAX, ldml_short_file);
^
src/base/locale_support.c:5265:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      char lib_short_file[PATH_MAX];
^
src/base/locale_support.c:5275:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      lf->lib_file = (char *) malloc (PATH_MAX + 1);
^
src/base/locale_support.c:5284:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      envvar_libdir_file (lf->lib_file, PATH_MAX, lib_short_file);
^
src/base/locale_support.c:5299:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
       envvar_libdir_file (lf->lib_file, PATH_MAX, lib_short_file);
^
src/base/locale_support.c:5392:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char c_file_path[PATH_MAX];
^
src/base/locale_support.c:5431:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char c_file_path[PATH_MAX];
^
src/base/locale_support.c:7937:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char include_file_path[PATH_MAX] = { 0 };
^
src/base/locale_support.c:7953:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  envvar_ldmldir_file (include_file_path, PATH_MAX, att_val);
^
src/base/lock_free.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 53 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/base/lockfree_bitmap.hpp:28:1: error: Code 'namespacelockfree{' is invalid C code. Use --std or --language to configure the language. [syntaxError]
namespace lockfree
^
src/base/lockfree_bitmap.cpp:84:18: style: The scope of the variable 'mask' can be reduced. [variableScope]
    unsigned int mask, chunk;
                 ^
src/base/lockfree_bitmap.cpp:84:24: style: The scope of the variable 'chunk' can be reduced. [variableScope]
    unsigned int mask, chunk;
                       ^
src/base/lockfree_bitmap.cpp:85:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
src/base/lockfree_bitmap.cpp:51:32: style:inconclusive: Function 'init' argument 1 names different: declaration 'style' definition 'style_arg'. [funcArgNamesDifferent]
  bitmap::init (chunking_style style_arg, int entries_count_arg, float usage_ratio_arg)
                               ^
src/base/lockfree_bitmap.hpp:46:33: note: Function 'init' argument 1 names different: declaration 'style' definition 'style_arg'.
      void init (chunking_style style, int entries_count, float usage_ratio);
                                ^
src/base/lockfree_bitmap.cpp:51:32: note: Function 'init' argument 1 names different: declaration 'style' definition 'style_arg'.
  bitmap::init (chunking_style style_arg, int entries_count_arg, float usage_ratio_arg)
                               ^
src/base/lockfree_bitmap.cpp:51:47: style:inconclusive: Function 'init' argument 2 names different: declaration 'entries_count' definition 'entries_count_arg'. [funcArgNamesDifferent]
  bitmap::init (chunking_style style_arg, int entries_count_arg, float usage_ratio_arg)
                                              ^
src/base/lockfree_bitmap.hpp:46:44: note: Function 'init' argument 2 names different: declaration 'entries_count' definition 'entries_count_arg'.
      void init (chunking_style style, int entries_count, float usage_ratio);
                                           ^
src/base/lockfree_bitmap.cpp:51:47: note: Function 'init' argument 2 names different: declaration 'entries_count' definition 'entries_count_arg'.
  bitmap::init (chunking_style style_arg, int entries_count_arg, float usage_ratio_arg)
                                              ^
src/base/lockfree_bitmap.cpp:51:72: style:inconclusive: Function 'init' argument 3 names different: declaration 'usage_ratio' definition 'usage_ratio_arg'. [funcArgNamesDifferent]
  bitmap::init (chunking_style style_arg, int entries_count_arg, float usage_ratio_arg)
                                                                       ^
src/base/lockfree_bitmap.hpp:46:65: note: Function 'init' argument 3 names different: declaration 'usage_ratio' definition 'usage_ratio_arg'.
      void init (chunking_style style, int entries_count, float usage_ratio);
                                                                ^
src/base/lockfree_bitmap.cpp:51:72: note: Function 'init' argument 3 names different: declaration 'usage_ratio' definition 'usage_ratio_arg'.
  bitmap::init (chunking_style style_arg, int entries_count_arg, float usage_ratio_arg)
                                                                       ^
src/base/lockfree_hashmap.cpp:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 45 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/base/lockfree_freelist.hpp:360:18: warning: Assert statement calls a function which may have desired side effects: 'get_freelist_next'. [assertWithSideEffect]
    assert (node.get_freelist_next () == NULL);
                 ^
src/base/lockfree_freelist.hpp:371:18: warning: Assert statement calls a function which may have desired side effects: 'get_freelist_next'. [assertWithSideEffect]
    assert (tail.get_freelist_next () == NULL);
                 ^
src/base/lockfree_freelist.hpp:486:27: warning: Member variable 'free_node::m_owner' is not initialized in the constructor. [uninitMemberVar]
  freelist<T>::free_node::free_node ()
                          ^
src/base/lock_free.h:388:10: performance:inconclusive: Technically the member function 'lf_hash_table_cpp::start_tran' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    void start_tran (lf_tran_entry *t_entry);
         ^
src/base/lock_free.h:584:28: note: Technically the member function 'lf_hash_table_cpp::start_tran' can be static (but you may consider moving to unnamed namespace).
lf_hash_table_cpp<Key, T>::start_tran (lf_tran_entry *t_entry)
                           ^
src/base/lock_free.h:388:10: note: Technically the member function 'lf_hash_table_cpp::start_tran' can be static (but you may consider moving to unnamed namespace).
    void start_tran (lf_tran_entry *t_entry);
         ^
src/base/lock_free.h:389:10: performance:inconclusive: Technically the member function 'lf_hash_table_cpp::end_tran' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    void end_tran (lf_tran_entry *t_entry);
         ^
src/base/lock_free.h:591:28: note: Technically the member function 'lf_hash_table_cpp::end_tran' can be static (but you may consider moving to unnamed namespace).
lf_hash_table_cpp<Key, T>::end_tran (lf_tran_entry *t_entry)
                           ^
src/base/lock_free.h:389:10: note: Technically the member function 'lf_hash_table_cpp::end_tran' can be static (but you may consider moving to unnamed namespace).
    void end_tran (lf_tran_entry *t_entry);
         ^
src/base/lockfree_freelist.hpp:93:12: performance:inconclusive: Technically the member function 'lockfree::freelist::dealloc_list' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      void dealloc_list (free_node *head);
           ^
src/base/lockfree_freelist.hpp:247:16: note: Technically the member function 'lockfree::freelist::dealloc_list' can be static (but you may consider moving to unnamed namespace).
  freelist<T>::dealloc_list (free_node *head)
               ^
src/base/lockfree_freelist.hpp:93:12: note: Technically the member function 'lockfree::freelist::dealloc_list' can be static (but you may consider moving to unnamed namespace).
      void dealloc_list (free_node *head);
           ^
src/base/lockfree_freelist.hpp:96:12: performance:inconclusive: Technically the member function 'lockfree::freelist::push_to_list' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      void push_to_list (free_node &head, free_node &tail, std::atomic<free_node *> &dest);
           ^
src/base/lockfree_freelist.hpp:368:16: note: Technically the member function 'lockfree::freelist::push_to_list' can be static (but you may consider moving to unnamed namespace).
  freelist<T>::push_to_list (free_node &head, free_node &tail, std::atomic<free_node *> &dest)
               ^
src/base/lockfree_freelist.hpp:96:12: note: Technically the member function 'lockfree::freelist::push_to_list' can be static (but you may consider moving to unnamed namespace).
      void push_to_list (free_node &head, free_node &tail, std::atomic<free_node *> &dest);
           ^
src/base/lockfree_hashmap.hpp:140:12: performance:inconclusive: Technically the member function 'lockfree::hashmap::start_tran_if_not_started' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      void start_tran_if_not_started (tran::descriptor &tdes);
           ^
src/base/lockfree_hashmap.hpp:710:20: note: Technically the member function 'lockfree::hashmap::start_tran_if_not_started' can be static (but you may consider moving to unnamed namespace).
  hashmap<Key, T>::start_tran_if_not_started (tran::descriptor &tdes)
                   ^
src/base/lockfree_hashmap.hpp:140:12: note: Technically the member function 'lockfree::hashmap::start_tran_if_not_started' can be static (but you may consider moving to unnamed namespace).
      void start_tran_if_not_started (tran::descriptor &tdes);
           ^
src/base/lockfree_hashmap.hpp:141:12: performance:inconclusive: Technically the member function 'lockfree::hashmap::start_tran_force' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      void start_tran_force (tran::descriptor &tdes);
           ^
src/base/lockfree_hashmap.hpp:717:20: note: Technically the member function 'lockfree::hashmap::start_tran_force' can be static (but you may consider moving to unnamed namespace).
  hashmap<Key, T>::start_tran_force (tran::descriptor &tdes)
                   ^
src/base/lockfree_hashmap.hpp:141:12: note: Technically the member function 'lockfree::hashmap::start_tran_force' can be static (but you may consider moving to unnamed namespace).
      void start_tran_force (tran::descriptor &tdes);
           ^
src/base/lockfree_hashmap.hpp:142:12: performance:inconclusive: Technically the member function 'lockfree::hashmap::promote_tran_force' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      void promote_tran_force (tran::descriptor &tdes);
           ^
src/base/lockfree_hashmap.hpp:725:20: note: Technically the member function 'lockfree::hashmap::promote_tran_force' can be static (but you may consider moving to unnamed namespace).
  hashmap<Key, T>::promote_tran_force (tran::descriptor &tdes)
                   ^
src/base/lockfree_hashmap.hpp:142:12: note: Technically the member function 'lockfree::hashmap::promote_tran_force' can be static (but you may consider moving to unnamed namespace).
      void promote_tran_force (tran::descriptor &tdes);
           ^
src/base/lockfree_hashmap.hpp:143:12: performance:inconclusive: Technically the member function 'lockfree::hashmap::end_tran_if_started' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      void end_tran_if_started (tran::descriptor &tdes);
           ^
src/base/lockfree_hashmap.hpp:733:20: note: Technically the member function 'lockfree::hashmap::end_tran_if_started' can be static (but you may consider moving to unnamed namespace).
  hashmap<Key, T>::end_tran_if_started (tran::descriptor &tdes)
                   ^
src/base/lockfree_hashmap.hpp:143:12: note: Technically the member function 'lockfree::hashmap::end_tran_if_started' can be static (but you may consider moving to unnamed namespace).
      void end_tran_if_started (tran::descriptor &tdes);
           ^
src/base/lockfree_hashmap.hpp:144:12: performance:inconclusive: Technically the member function 'lockfree::hashmap::end_tran_force' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      void end_tran_force (tran::descriptor &tdes);
           ^
src/base/lockfree_hashmap.hpp:743:20: note: Technically the member function 'lockfree::hashmap::end_tran_force' can be static (but you may consider moving to unnamed namespace).
  hashmap<Key, T>::end_tran_force (tran::descriptor &tdes)
                   ^
src/base/lockfree_hashmap.hpp:144:12: note: Technically the member function 'lockfree::hashmap::end_tran_force' can be static (but you may consider moving to unnamed namespace).
      void end_tran_force (tran::descriptor &tdes);
           ^
src/base/lockfree_freelist.hpp:141:7: warning: Class 'freelist' does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s). [noCopyConstructor]
    , m_trantable (new tran::table (transys))
      ^
src/base/lockfree_freelist.hpp:141:7: warning: Class 'freelist' does not have a operator= which is recommended since it has dynamic memory/resource allocation(s). [noOperatorEq]
    , m_trantable (new tran::table (transys))
      ^
src/base/lockfree_address_marker.hpp:43:7: style: Class 'address_marker' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
      address_marker (T *addr);
      ^
src/base/lockfree_transaction_table.hpp:60:2: style: Class 'table' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 table (system &sys);
 ^
src/base/lockfree_hashmap.hpp:263:5: warning: Possible leak in public function. The pointer 'm_freelist' is not deallocated before it is allocated. [publicAllocationError]
    m_freelist = new freelist_type (transys, freelist_block_size, freelist_block_count);
    ^
src/base/lockfree_hashmap.hpp:921:12: warning: Either the condition 'if(behavior_flags&&(*behavior_flags&((int)0x01)))' is redundant or there is possible null pointer dereference: behavior_flags. [nullPointerRedundantCheck]
      if (!LF_LIST_BF_IS_FLAG_SET (behavior_flags, LF_LIST_BF_INSERT_GIVEN) && entry != NULL)
           ^
src/base/lockfree_hashmap.hpp:940:11: note: Assuming that condition 'if(behavior_flags&&(*behavior_flags&((int)0x01)))' is not redundant
       if (behavior_flags && (*behavior_flags & LF_LIST_BF_RETURN_ON_RESTART))
          ^
src/base/lockfree_hashmap.hpp:921:12: note: Null pointer dereference
      if (!LF_LIST_BF_IS_FLAG_SET (behavior_flags, LF_LIST_BF_INSERT_GIVEN) && entry != NULL)
           ^
src/base/lockfree_hashmap.hpp:550:12: style: C-style pointer casting [cstyleCast]
    return (free_node_type *) cp;
           ^
src/base/lockfree_hashmap.hpp:822:17: style: Variable 'restart_search' is reassigned a value before the old one has been used. [redundantAssignment]
 restart_search = false;
                ^
src/base/lockfree_hashmap.hpp:819:17: note: restart_search is assigned
 restart_search = false;
                ^
src/base/lockfree_hashmap.hpp:822:17: note: restart_search is overwritten
 restart_search = false;
                ^
src/base/lockfree_hashmap.hpp:1107:9: style: The scope of the variable 'curr_p' can be reduced. [variableScope]
    T **curr_p;
        ^
src/base/lockfree_hashmap.hpp:1108:8: style: The scope of the variable 'curr' can be reduced. [variableScope]
    T *curr;
       ^
src/base/lock_free.h:439:80: style:inconclusive: Function 'init' argument 5 names different: declaration 'edes' definition 'edesc'. [funcArgNamesDifferent]
                                 int freelist_block_size, lf_entry_descriptor &edesc)
                                                                               ^
src/base/lock_free.h:371:37: note: Function 'init' argument 5 names different: declaration 'edes' definition 'edesc'.
               lf_entry_descriptor &edes);
                                    ^
src/base/lock_free.h:439:80: note: Function 'init' argument 5 names different: declaration 'edes' definition 'edesc'.
                                 int freelist_block_size, lf_entry_descriptor &edesc)
                                                                               ^
src/base/lockfree_freelist.hpp:495:48: style:inconclusive: Function 'set_owner' argument 1 names different: declaration 'm_freelist' definition 'fl'. [funcArgNamesDifferent]
  freelist<T>::free_node::set_owner (freelist &fl)
                                               ^
src/base/lockfree_freelist.hpp:117:33: note: Function 'set_owner' argument 1 names different: declaration 'm_freelist' definition 'fl'.
      void set_owner (freelist &m_freelist);
                                ^
src/base/lockfree_freelist.hpp:495:48: note: Function 'set_owner' argument 1 names different: declaration 'm_freelist' definition 'fl'.
  freelist<T>::free_node::set_owner (freelist &fl)
                                               ^
src/base/lockfree_hashmap.hpp:805:104: style:inconclusive: Function 'list_find' argument 5 names different: declaration 'found_node' definition 'entry'. [funcArgNamesDifferent]
  hashmap<Key, T>::list_find (tran::index tran_index, T *list_head, Key &key, int *behavior_flags, T *&entry)
                                                                                                       ^
src/base/lockfree_hashmap.hpp:155:96: note: Function 'list_find' argument 5 names different: declaration 'found_node' definition 'entry'.
      void list_find (tran::index tran_index, T *list_head, Key &key, int *behavior_flags, T *&found_node);
                                                                                               ^
src/base/lockfree_hashmap.hpp:805:104: note: Function 'list_find' argument 5 names different: declaration 'found_node' definition 'entry'.
  hashmap<Key, T>::list_find (tran::index tran_index, T *list_head, Key &key, int *behavior_flags, T *&entry)
                                                                                                       ^
src/base/lockfree_hashmap.hpp:892:11: style:inconclusive: Function 'list_insert_internal' argument 5 names different: declaration 'found_node' definition 'entry'. [funcArgNamesDifferent]
      T *&entry)
          ^
src/base/lockfree_hashmap.hpp:157:10: note: Function 'list_insert_internal' argument 5 names different: declaration 'found_node' definition 'entry'.
     T *&found_node);
         ^
src/base/lockfree_hashmap.hpp:892:11: note: Function 'list_insert_internal' argument 5 names different: declaration 'found_node' definition 'entry'.
      T *&entry)
          ^
src/base/lockfree_address_marker.hpp:122:49: performance:inconclusive: Function parameter 'ct' should be passed by const reference. [passedByValue]
  address_marker<T>::is_ct_marked (convert_type ct)
                                                ^
src/base/lockfree_address_marker.hpp:129:48: performance:inconclusive: Function parameter 'ct' should be passed by const reference. [passedByValue]
  address_marker<T>::set_ct_mark (convert_type ct)
                                               ^
src/base/lockfree_address_marker.hpp:136:50: performance:inconclusive: Function parameter 'ct' should be passed by const reference. [passedByValue]
  address_marker<T>::strip_ct_mark (convert_type ct)
                                                 ^
src/base/lockfree_hashmap.hpp:381:23: style: Variable 'tdes' can be declared with const [constVariable]
    tran::descriptor &tdes = get_tran_descriptor (tran_index);
                      ^
src/base/lockfree_hashmap.hpp:283:16: style: Variable 'bflags' is assigned a value that is never used. [unreadVariable]
    int bflags = 0;
               ^
src/base/lockfree_transaction_descriptor.cpp:63:48: style:inconclusive: Function 'retire_node' argument 1 names different: declaration 'hzp' definition 'node'. [funcArgNamesDifferent]
    descriptor::retire_node (reclaimable_node &node)
                                               ^
src/base/lockfree_transaction_descriptor.hpp:60:38: note: Function 'retire_node' argument 1 names different: declaration 'hzp' definition 'node'.
 void retire_node (reclaimable_node &hzp);
                                     ^
src/base/lockfree_transaction_descriptor.cpp:63:48: note: Function 'retire_node' argument 1 names different: declaration 'hzp' definition 'node'.
    descriptor::retire_node (reclaimable_node &node)
                                               ^
src/base/lockfree_transaction_system.hpp:80:2: style: Class 'system' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
 system (size_t max_tran_count);
 ^
src/base/lockfree_transaction_table.cpp:36:9: warning: Class 'table' does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s). [noCopyConstructor]
      , m_all (new descriptor[m_sys.get_max_transaction_count ()] ())
        ^
src/base/lockfree_transaction_table.cpp:36:9: warning: Class 'table' does not have a operator= which is recommended since it has dynamic memory/resource allocation(s). [noOperatorEq]
      , m_all (new descriptor[m_sys.get_max_transaction_count ()] ())
        ^
src/base/mem_block.hpp:141:12: performance:inconclusive: Technically the member function 'cubmem::single_block_allocator::deallocate' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      void deallocate (block &b);
           ^
src/base/mem_block.cpp:175:27: note: Technically the member function 'cubmem::single_block_allocator::deallocate' can be static (but you may consider moving to unnamed namespace).
  single_block_allocator::deallocate (block &b)
                          ^
src/base/mem_block.hpp:141:12: note: Technically the member function 'cubmem::single_block_allocator::deallocate' can be static (but you may consider moving to unnamed namespace).
      void deallocate (block &b);
           ^
src/base/mem_block.hpp:127:7: style: Class 'single_block_allocator' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
      single_block_allocator (const block_allocator &base_alloc);
      ^
src/base/mem_block.hpp:164:14: style: Struct 'extensible_block' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
      inline extensible_block (const block_allocator &alloc);     //general ctor
             ^
src/base/mem_block.hpp:195:7: style: Class 'extensible_stack_block' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
      extensible_stack_block (const block_allocator &alloc);
      ^
src/base/memory_alloc.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 54 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/base/fileline_location.hpp:28:1: error: Code 'namespacecubbase{' is invalid C code. Use --std or --language to configure the language. [syntaxError]
namespace cubbase
^
src/base/memory_hash.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 52 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/base/memory_hash.c:867:31: style: Array index 'middle' is used before limits check. [arrayIndexThenCheck]
      if (ht_size > mht_Primes[middle] && middle < (NPRIMES - 1))
                              ^
src/base/memory_hash.c:2285:12: style: Variable 'ret' is reassigned a value before the old one has been used. [redundantAssignment]
  for (ret = key & (np - 1); ret >= ht_size; ret &= (np - 1))
           ^
src/base/memory_hash.c:2283:7: note: ret is assigned
  ret = key & (np - 1);
      ^
src/base/memory_hash.c:2285:12: note: ret is overwritten
  for (ret = key & (np - 1); ret >= ht_size; ret &= (np - 1))
           ^
src/base/memory_hash.c:179:16: style: The scope of the variable 'i' can be reduced. [variableScope]
  unsigned int i;
               ^
src/base/memory_hash.c:424:16: style: The scope of the variable 'ch' can be reduced. [variableScope]
  unsigned int ch;
               ^
src/base/memory_hash.c:832:7: style: The scope of the variable 'left' can be reduced. [variableScope]
  int left, right, middle; /* indices for binary search */
      ^
src/base/memory_hash.c:832:13: style: The scope of the variable 'right' can be reduced. [variableScope]
  int left, right, middle; /* indices for binary search */
            ^
src/base/memory_hash.c:832:20: style: The scope of the variable 'middle' can be reduced. [variableScope]
  int left, right, middle; /* indices for binary search */
                   ^
src/base/memory_hash.c:547:26: style:inconclusive: Function 'mht_ptrhash' argument 1 names different: declaration 'ptr' definition 'key'. [funcArgNamesDifferent]
mht_ptrhash (const void *key, const unsigned int ht_size)
                         ^
src/base/memory_hash.h:87:46: note: Function 'mht_ptrhash' argument 1 names different: declaration 'ptr' definition 'key'.
extern unsigned int mht_ptrhash (const void *ptr, const unsigned int ht_size);
                                             ^
src/base/memory_hash.c:547:26: note: Function 'mht_ptrhash' argument 1 names different: declaration 'ptr' definition 'key'.
mht_ptrhash (const void *key, const unsigned int ht_size)
                         ^
src/base/memory_hash.c:2149:10: style: Local variable 'i' shadows outer variable [shadowVariable]
     int i;
         ^
src/base/memory_hash.c:2024:7: note: Shadowed declaration
  int i, len;
      ^
src/base/memory_hash.c:2149:10: note: Shadow variable
     int i;
         ^
src/base/memory_hash.c:1703:18: style: Variable 'error_code' is assigned a value that is never used. [unreadVariable]
  int error_code = NO_ERROR;
                 ^
src/base/memory_hash.c:1830:18: style: Variable 'error_code' is assigned a value that is never used. [unreadVariable]
  int error_code = NO_ERROR;
                 ^
src/base/memory_private_allocator.hpp:204:5: performance: Variable 'm_heapid' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    m_heapid = other.m_heapid;
    ^
src/base/memory_private_allocator.hpp:305:5: performance: Variable 'm_smart_ptr' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    m_smart_ptr = std::unique_ptr<T, private_pointer_deleter<T>> (ptr, private_pointer_deleter<T> (thread_p));
    ^
src/base/memory_private_allocator.hpp:88:28: performance:inconclusive: Technically the member function 'cubmem::private_allocator::address' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      inline const_pointer address (const_reference r)
                           ^
src/base/memory_private_allocator.hpp:98:17: performance:inconclusive: Technically the member function 'cubmem::private_allocator::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      size_type max_size () const;
                ^
src/base/memory_private_allocator.hpp:240:25: note: Technically the member function 'cubmem::private_allocator::max_size' can be static (but you may consider moving to unnamed namespace).
  private_allocator<T>::max_size () const
                        ^
src/base/memory_private_allocator.hpp:98:17: note: Technically the member function 'cubmem::private_allocator::max_size' can be static (but you may consider moving to unnamed namespace).
      size_type max_size () const;
                ^
src/base/memory_private_allocator.hpp:143:7: style: Class 'private_pointer_deleter' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
      private_pointer_deleter (cubthread::entry *thread_p);
      ^
src/base/message_catalog.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 49 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/base/message_catalog.c:359:0: information: Skipping configuration 'ENOMSG;WINDOWS' since the value of 'ENOMSG' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  errno = ENOMSG;
^
src/base/message_catalog.c:152:0: information: Skipping configuration 'LC_MESSAGES;WINDOWS' since the value of 'LC_MESSAGES' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      lang = setlocale (LC_MESSAGES, NULL);
^
src/base/message_catalog.c:133:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char path[PATH_MAX];
^
src/base/message_catalog.c:237:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        if (pathP - path >= PATH_MAX - 1)
^
src/base/message_catalog.c:247:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    spcleft = PATH_MAX - (CAST_STRLEN (pathP - path)) - 1;
^
src/base/message_catalog.c:260:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    if (pathP - path >= PATH_MAX - 1)
^
src/base/message_catalog.c:604:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char path[PATH_MAX];
^
src/base/message_catalog.c:607:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  envvar_localedir_file (path, PATH_MAX, lang_get_msg_Loc_name (), name);
^
src/base/message_catalog.c:612:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      envvar_localedir_file (path, PATH_MAX, LANG_NAME_DEFAULT, name);
^
src/base/message_catalog.c:699:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char path[PATH_MAX];
^
src/base/message_catalog.c:702:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  envvar_localedir_file (path, PATH_MAX, lang_get_msg_Loc_name (), name);
^
src/base/message_catalog.c:707:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      envvar_localedir_file (path, PATH_MAX, LANG_NAME_DEFAULT, name);
^
src/base/misc_string.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 44 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/base/misc_string.c:44:15: style: The scope of the variable 'p1' can be reduced. [variableScope]
  const char *p1, *p2;
              ^
src/base/misc_string.c:44:20: style: The scope of the variable 'p2' can be reduced. [variableScope]
  const char *p1, *p2;
                   ^
src/base/mprec.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 57 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/base/mprec.c:327:14: style:inconclusive: Boolean expression '!x' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]
      if (!x & 1)
             ^
src/base/mprec.c:327:14: style: Boolean result is used in bitwise operation. Clarify expression with parentheses. [clarifyCondition]
      if (!x & 1)
             ^
src/base/mprec.c:790:7: style: Variable 'd.d' is reassigned a value before the old one has been used. [redundantAssignment]
  d.d = _d;
      ^
src/base/mprec.c:783:7: note: d.d is assigned
  d.d = _d;
      ^
src/base/mprec.c:790:7: note: d.d is overwritten
  d.d = _d;
      ^
src/base/mprec.c:114:7: style: The scope of the variable 'x' can be reduced. [variableScope]
  int x;
      ^
src/base/mprec.c:112:1: style:inconclusive: Function '_Jv_Balloc' argument 1 names different: declaration 'p' definition 'ptr'. [funcArgNamesDifferent]
_DEFUN (Balloc, (ptr, k), struct _reent * ptr _AND int k)
^
src/base/mprec.h:375:15: note: Function '_Jv_Balloc' argument 1 names different: declaration 'p' definition 'ptr'.
  _Jv_Bigint *_EXFUN (Balloc, (struct _Jv_reent * p, int k));
              ^
src/base/mprec.c:112:1: note: Function '_Jv_Balloc' argument 1 names different: declaration 'p' definition 'ptr'.
_DEFUN (Balloc, (ptr, k), struct _reent * ptr _AND int k)
^
src/base/mprec.c:160:1: style:inconclusive: Function '_Jv_Bfree' argument 1 names different: declaration 'p' definition 'ptr'. [funcArgNamesDifferent]
_DEFUN (Bfree, (ptr, v), struct _reent *ptr _AND _Bigint * v)
^
src/base/mprec.h:376:8: note: Function '_Jv_Bfree' argument 1 names different: declaration 'p' definition 'ptr'.
  void _EXFUN (Bfree, (struct _Jv_reent * p, _Jv_Bigint * v));
       ^
src/base/mprec.c:160:1: note: Function '_Jv_Bfree' argument 1 names different: declaration 'p' definition 'ptr'.
_DEFUN (Bfree, (ptr, v), struct _reent *ptr _AND _Bigint * v)
^
src/base/mprec.c:171:1: style:inconclusive: Function '_Jv_multadd' argument 1 names different: declaration 'p' definition 'ptr'. [funcArgNamesDifferent]
_DEFUN (multadd, (ptr, b, m, a), struct _reent *ptr _AND _Bigint * b _AND int m _AND int a)
^
src/base/mprec.h:377:15: note: Function '_Jv_multadd' argument 1 names different: declaration 'p' definition 'ptr'.
  _Jv_Bigint *_EXFUN (multadd, (struct _Jv_reent * p, _Jv_Bigint *, int, int));
              ^
src/base/mprec.c:171:1: note: Function '_Jv_multadd' argument 1 names different: declaration 'p' definition 'ptr'.
_DEFUN (multadd, (ptr, b, m, a), struct _reent *ptr _AND _Bigint * b _AND int m _AND int a)
^
src/base/mprec.c:477:1: style:inconclusive: Function '_Jv_lshift' argument 1 names different: declaration 'p' definition 'ptr'. [funcArgNamesDifferent]
_DEFUN (lshift, (ptr, b, k), struct _reent * ptr _AND _Bigint * b _AND int k)
^
src/base/mprec.h:385:15: note: Function '_Jv_lshift' argument 1 names different: declaration 'p' definition 'ptr'.
  _Jv_Bigint *_EXFUN (lshift, (struct _Jv_reent * p, _Jv_Bigint * b, int k));
              ^
src/base/mprec.c:477:1: note: Function '_Jv_lshift' argument 1 names different: declaration 'p' definition 'ptr'.
_DEFUN (lshift, (ptr, b, k), struct _reent * ptr _AND _Bigint * b _AND int k)
^
src/base/mprec.c:567:1: style:inconclusive: Function '_Jv__mdiff' argument 1 names different: declaration 'p' definition 'ptr'. [funcArgNamesDifferent]
_DEFUN (diff, (ptr, a, b), struct _reent * ptr _AND _Bigint * a _AND _Bigint * b)
^
src/base/mprec.h:386:15: note: Function '_Jv__mdiff' argument 1 names different: declaration 'p' definition 'ptr'.
  _Jv_Bigint *_EXFUN (diff, (struct _Jv_reent * p, _Jv_Bigint * a, _Jv_Bigint * b));
              ^
src/base/mprec.c:567:1: note: Function '_Jv__mdiff' argument 1 names different: declaration 'p' definition 'ptr'.
_DEFUN (diff, (ptr, a, b), struct _reent * ptr _AND _Bigint * a _AND _Bigint * b)
^
src/base/mprec.c:774:1: style:inconclusive: Function '_Jv_d2b' argument 1 names different: declaration 'p' definition 'ptr'. [funcArgNamesDifferent]
_DEFUN (d2b, (ptr, _d, e, bits), struct _reent * ptr _AND double _d _AND int *e _AND int *bits)
^
src/base/mprec.h:384:15: note: Function '_Jv_d2b' argument 1 names different: declaration 'p' definition 'ptr'.
  _Jv_Bigint *_EXFUN (d2b, (struct _Jv_reent * p, double d, int *e, int *bits));
              ^
src/base/mprec.c:774:1: note: Function '_Jv_d2b' argument 1 names different: declaration 'p' definition 'ptr'.
_DEFUN (d2b, (ptr, _d, e, bits), struct _reent * ptr _AND double _d _AND int *e _AND int *bits)
^
src/base/mprec.c:774:1: style:inconclusive: Function '_Jv_d2b' argument 2 names different: declaration 'd' definition '_d'. [funcArgNamesDifferent]
_DEFUN (d2b, (ptr, _d, e, bits), struct _reent * ptr _AND double _d _AND int *e _AND int *bits)
^
src/base/mprec.h:384:15: note: Function '_Jv_d2b' argument 2 names different: declaration 'd' definition '_d'.
  _Jv_Bigint *_EXFUN (d2b, (struct _Jv_reent * p, double d, int *e, int *bits));
              ^
src/base/mprec.c:774:1: note: Function '_Jv_d2b' argument 2 names different: declaration 'd' definition '_d'.
_DEFUN (d2b, (ptr, _d, e, bits), struct _reent * ptr _AND double _d _AND int *e _AND int *bits)
^
src/base/mprec.c:779:15: style: Unused variable: y [unusedVariable]
  __ULong *x, y, z;
              ^
src/base/object_representation_sr.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 15 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/base/object_representation_sr.c:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
src/base/packer.cpp:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 14 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/base/packer.hpp:361:13: warning: Assert statement calls a function which may have desired side effects: 'get_curr_ptr'. [assertWithSideEffect]
    assert (get_curr_ptr () >= eb.get_ptr () && get_curr_ptr () <= eb.get_ptr () + eb.get_size ());
            ^
src/base/packer.cpp:63:11: warning:inconclusive: Member variable 'packer::m_start_ptr' is not initialized in the constructor. [uninitMemberVar]
  packer::packer (void)
          ^
src/base/packer.cpp:63:11: warning:inconclusive: Member variable 'packer::m_end_ptr' is not initialized in the constructor. [uninitMemberVar]
  packer::packer (void)
          ^
src/base/packer.cpp:63:11: warning:inconclusive: Member variable 'packer::m_ptr' is not initialized in the constructor. [uninitMemberVar]
  packer::packer (void)
          ^
src/base/packer.hpp:57:14: performance:inconclusive: Technically the member function 'cubpacking::packer::get_packed_int_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      size_t get_packed_int_size (size_t curr_offset);
             ^
src/base/packer.cpp:95:11: note: Technically the member function 'cubpacking::packer::get_packed_int_size' can be static (but you may consider moving to unnamed namespace).
  packer::get_packed_int_size (size_t curr_offset)
          ^
src/base/packer.hpp:57:14: note: Technically the member function 'cubpacking::packer::get_packed_int_size' can be static (but you may consider moving to unnamed namespace).
      size_t get_packed_int_size (size_t curr_offset);
             ^
src/base/packer.hpp:67:14: performance:inconclusive: Technically the member function 'cubpacking::packer::get_packed_short_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      size_t get_packed_short_size (size_t curr_offset);
             ^
src/base/packer.cpp:187:11: note: Technically the member function 'cubpacking::packer::get_packed_short_size' can be static (but you may consider moving to unnamed namespace).
  packer::get_packed_short_size (size_t curr_offset)
          ^
src/base/packer.hpp:67:14: note: Technically the member function 'cubpacking::packer::get_packed_short_size' can be static (but you may consider moving to unnamed namespace).
      size_t get_packed_short_size (size_t curr_offset);
             ^
src/base/packer.hpp:72:14: performance:inconclusive: Technically the member function 'cubpacking::packer::get_packed_bigint_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      size_t get_packed_bigint_size (size_t curr_offset);
             ^
src/base/packer.cpp:231:11: note: Technically the member function 'cubpacking::packer::get_packed_bigint_size' can be static (but you may consider moving to unnamed namespace).
  packer::get_packed_bigint_size (size_t curr_offset)
          ^
src/base/packer.hpp:72:14: note: Technically the member function 'cubpacking::packer::get_packed_bigint_size' can be static (but you may consider moving to unnamed namespace).
      size_t get_packed_bigint_size (size_t curr_offset);
             ^
src/base/packer.hpp:82:14: performance:inconclusive: Technically the member function 'cubpacking::packer::get_packed_int_vector_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      size_t get_packed_int_vector_size (size_t curr_offset, const size_t count);
             ^
src/base/packer.cpp:351:11: note: Technically the member function 'cubpacking::packer::get_packed_int_vector_size' can be static (but you may consider moving to unnamed namespace).
  packer::get_packed_int_vector_size (size_t curr_offset, const size_t count)
          ^
src/base/packer.hpp:82:14: note: Technically the member function 'cubpacking::packer::get_packed_int_vector_size' can be static (but you may consider moving to unnamed namespace).
      size_t get_packed_int_vector_size (size_t curr_offset, const size_t count);
             ^
src/base/packer.hpp:85:14: performance:inconclusive: Technically the member function 'cubpacking::packer::get_packed_db_value_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      size_t get_packed_db_value_size (const db_value &value, size_t curr_offset);
             ^
src/base/packer.cpp:394:11: note: Technically the member function 'cubpacking::packer::get_packed_db_value_size' can be static (but you may consider moving to unnamed namespace).
  packer::get_packed_db_value_size (const db_value &value, size_t curr_offset)
          ^
src/base/packer.hpp:85:14: note: Technically the member function 'cubpacking::packer::get_packed_db_value_size' can be static (but you may consider moving to unnamed namespace).
      size_t get_packed_db_value_size (const db_value &value, size_t curr_offset);
             ^
src/base/packer.hpp:90:14: performance:inconclusive: Technically the member function 'cubpacking::packer::get_packed_small_string_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      size_t get_packed_small_string_size (const char *string, const size_t curr_offset);
             ^
src/base/packer.cpp:453:11: note: Technically the member function 'cubpacking::packer::get_packed_small_string_size' can be static (but you may consider moving to unnamed namespace).
  packer::get_packed_small_string_size (const char *string, const size_t curr_offset)
          ^
src/base/packer.hpp:90:14: note: Technically the member function 'cubpacking::packer::get_packed_small_string_size' can be static (but you may consider moving to unnamed namespace).
      size_t get_packed_small_string_size (const char *string, const size_t curr_offset);
             ^
src/base/packer.hpp:93:14: performance:inconclusive: Technically the member function 'cubpacking::packer::get_packed_large_string_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      size_t get_packed_large_string_size (const std::string &str, const size_t curr_offset);
             ^
src/base/packer.cpp:529:11: note: Technically the member function 'cubpacking::packer::get_packed_large_string_size' can be static (but you may consider moving to unnamed namespace).
  packer::get_packed_large_string_size (const std::string &str, const size_t curr_offset)
          ^
src/base/packer.hpp:93:14: note: Technically the member function 'cubpacking::packer::get_packed_large_string_size' can be static (but you may consider moving to unnamed namespace).
      size_t get_packed_large_string_size (const std::string &str, const size_t curr_offset);
             ^
src/base/packer.hpp:101:14: performance:inconclusive: Technically the member function 'cubpacking::packer::get_packed_c_string_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      size_t get_packed_c_string_size (const char *str, const size_t str_size, const size_t curr_offset);
             ^
src/base/packer.cpp:650:11: note: Technically the member function 'cubpacking::packer::get_packed_c_string_size' can be static (but you may consider moving to unnamed namespace).
  packer::get_packed_c_string_size (const char *str, const size_t str_size, const size_t curr_offset)
          ^
src/base/packer.hpp:101:14: note: Technically the member function 'cubpacking::packer::get_packed_c_string_size' can be static (but you may consider moving to unnamed namespace).
      size_t get_packed_c_string_size (const char *str, const size_t str_size, const size_t curr_offset);
             ^
src/base/packer.hpp:107:14: performance:inconclusive: Technically the member function 'cubpacking::packer::get_packed_oid_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      size_t get_packed_oid_size (const size_t curr_offset);
             ^
src/base/packer.cpp:771:11: note: Technically the member function 'cubpacking::packer::get_packed_oid_size' can be static (but you may consider moving to unnamed namespace).
  packer::get_packed_oid_size (const size_t curr_offset)
          ^
src/base/packer.hpp:107:14: note: Technically the member function 'cubpacking::packer::get_packed_oid_size' can be static (but you may consider moving to unnamed namespace).
      size_t get_packed_oid_size (const size_t curr_offset);
             ^
src/base/packer.hpp:117:19: style:inconclusive: Technically the member function 'cubpacking::packer::get_curr_ptr' can be const. [functionConst]
      const char *get_curr_ptr (void);;
                  ^
src/base/packer.cpp:930:11: note: Technically the member function 'cubpacking::packer::get_curr_ptr' can be const.
  packer::get_curr_ptr (void)
          ^
src/base/packer.hpp:117:19: note: Technically the member function 'cubpacking::packer::get_curr_ptr' can be const.
      const char *get_curr_ptr (void);;
                  ^
src/base/packer.hpp:120:19: style:inconclusive: Technically the member function 'cubpacking::packer::get_buffer_start' can be const. [functionConst]
      const char *get_buffer_start (void);
                  ^
src/base/packer.cpp:948:11: note: Technically the member function 'cubpacking::packer::get_buffer_start' can be const.
  packer::get_buffer_start (void)
          ^
src/base/packer.hpp:120:19: note: Technically the member function 'cubpacking::packer::get_buffer_start' can be const.
      const char *get_buffer_start (void);
                  ^
src/base/packer.hpp:121:19: style:inconclusive: Technically the member function 'cubpacking::packer::get_buffer_end' can be const. [functionConst]
      const char *get_buffer_end (void);
                  ^
src/base/packer.cpp:954:11: note: Technically the member function 'cubpacking::packer::get_buffer_end' can be const.
  packer::get_buffer_end (void)
          ^
src/base/packer.hpp:121:19: note: Technically the member function 'cubpacking::packer::get_buffer_end' can be const.
      const char *get_buffer_end (void);
                  ^
src/base/packer.hpp:124:19: performance:inconclusive: Technically the member function 'cubpacking::packer::get_packed_buffer_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      std::size_t get_packed_buffer_size (const char *stream, const std::size_t length, const std::size_t curr_offset) const;
                  ^
src/base/packer.cpp:851:11: note: Technically the member function 'cubpacking::packer::get_packed_buffer_size' can be static (but you may consider moving to unnamed namespace).
  packer::get_packed_buffer_size (const char *stream, const size_t length, const size_t curr_offset) const
          ^
src/base/packer.hpp:124:19: note: Technically the member function 'cubpacking::packer::get_packed_buffer_size' can be static (but you may consider moving to unnamed namespace).
      std::size_t get_packed_buffer_size (const char *stream, const std::size_t length, const std::size_t curr_offset) const;
                  ^
src/base/packer.hpp:223:19: style:inconclusive: Technically the member function 'cubpacking::unpacker::get_curr_ptr' can be const. [functionConst]
      const char *get_curr_ptr (void);
                  ^
src/base/packer.cpp:815:13: note: Technically the member function 'cubpacking::unpacker::get_curr_ptr' can be const.
  unpacker::get_curr_ptr (void)
            ^
src/base/packer.hpp:223:19: note: Technically the member function 'cubpacking::unpacker::get_curr_ptr' can be const.
      const char *get_curr_ptr (void);
                  ^
src/base/packer.hpp:226:19: style:inconclusive: Technically the member function 'cubpacking::unpacker::get_buffer_start' can be const. [functionConst]
      const char *get_buffer_start (void);
                  ^
src/base/packer.cpp:833:13: note: Technically the member function 'cubpacking::unpacker::get_buffer_start' can be const.
  unpacker::get_buffer_start (void)
            ^
src/base/packer.hpp:226:19: note: Technically the member function 'cubpacking::unpacker::get_buffer_start' can be const.
      const char *get_buffer_start (void);
                  ^
src/base/packer.hpp:227:19: style:inconclusive: Technically the member function 'cubpacking::unpacker::get_buffer_end' can be const. [functionConst]
      const char *get_buffer_end (void);
                  ^
src/base/packer.cpp:839:13: note: Technically the member function 'cubpacking::unpacker::get_buffer_end' can be const.
  unpacker::get_buffer_end (void)
            ^
src/base/packer.hpp:227:19: note: Technically the member function 'cubpacking::unpacker::get_buffer_end' can be const.
      const char *get_buffer_end (void);
                  ^
src/base/object_representation.h:1453:7: style: The scope of the variable 'compressed_length' can be reduced. [variableScope]
  int compressed_length = 0, decompressed_length = 0, rc = NO_ERROR, net_charlen = 0;
      ^
src/base/object_representation.h:1453:30: style: The scope of the variable 'decompressed_length' can be reduced. [variableScope]
  int compressed_length = 0, decompressed_length = 0, rc = NO_ERROR, net_charlen = 0;
                             ^
src/base/packer.hpp:364:20: style: Unsigned expression 'offset' can't be negative so it is unnecessary to test it. [unsignedPositive]
    assert (offset >= 0);
                   ^
src/base/packer.cpp:926:5: style: Checking if unsigned expression 'size' is less than zero. [unsignedLessThanZero]
    OR_BUF_INIT (buf, m_ptr, size);
    ^
src/base/packer.cpp:971:5: style: Checking if unsigned expression 'size' is less than zero. [unsignedLessThanZero]
    OR_BUF_INIT (buf, const_cast <char *> (m_ptr), size);
    ^
src/base/packer.hpp:347:35: warning: Access of forwarded variable 'args'. [accessForwarded]
    pack_all (std::forward<Args> (args)...);
                                  ^
src/base/packer.hpp:343:46: note: Calling std::forward(args)
    size_t total_size = get_all_packed_size (std::forward<Args> (args)...);
                                             ^
src/base/packer.hpp:347:35: note: Access of forwarded variable 'args'.
    pack_all (std::forward<Args> (args)...);
                                  ^
src/base/packer.hpp:379:35: warning: Access of forwarded variable 'args'. [accessForwarded]
    pack_all (std::forward<Args> (args)...);
                                  ^
src/base/packer.hpp:368:46: note: Calling std::forward(args)
    size_t total_size = get_all_packed_size (std::forward<Args> (args)...);
                                             ^
src/base/packer.hpp:370:19: note: Assuming condition is false
    if (available < total_size)
                  ^
src/base/packer.hpp:379:35: note: Access of forwarded variable 'args'.
    pack_all (std::forward<Args> (args)...);
                                  ^
src/base/object_representation.h:1453:25: style: Variable 'compressed_length' is assigned a value that is never used. [unreadVariable]
  int compressed_length = 0, decompressed_length = 0, rc = NO_ERROR, net_charlen = 0;
                        ^
src/base/object_representation.h:1453:50: style: Variable 'decompressed_length' is assigned a value that is never used. [unreadVariable]
  int compressed_length = 0, decompressed_length = 0, rc = NO_ERROR, net_charlen = 0;
                                                 ^
src/base/perf.cpp:36:20: warning:inconclusive: Member variable 'stat_definition::m_id' is not initialized in the constructor. [uninitMemberVarPrivate]
  stat_definition::stat_definition (void)
                   ^
src/base/perf.cpp:36:20: warning:inconclusive: Member variable 'stat_definition::m_type' is not initialized in the constructor. [uninitMemberVarPrivate]
  stat_definition::stat_definition (void)
                   ^
src/base/perf.cpp:36:20: warning:inconclusive: Member variable 'stat_definition::m_names' is not initialized in the constructor. [uninitMemberVarPrivate]
  stat_definition::stat_definition (void)
                   ^
src/base/perf.cpp:36:20: warning:inconclusive: Member variable 'stat_definition::m_offset' is not initialized in the constructor. [uninitMemberVarPrivate]
  stat_definition::stat_definition (void)
                   ^
src/base/perf_def.hpp:85:18: style:inconclusive: Technically the member function 'cubperf::generic_stat_counter::get_count' can be const. [functionConst]
      stat_value get_count (void);                      // get current count
                 ^
src/base/perf.hpp:499:35: note: Technically the member function 'cubperf::generic_stat_counter::get_count' can be const.
  generic_stat_counter<IsAtomic>::get_count (void)
                                  ^
src/base/perf_def.hpp:85:18: note: Technically the member function 'cubperf::generic_stat_counter::get_count' can be const.
      stat_value get_count (void);                      // get current count
                 ^
src/base/perf_def.hpp:86:19: style:inconclusive: Technically the member function 'cubperf::generic_stat_counter::get_name' can be const. [functionConst]
      const char *get_name (void);                      // get statistic name
                  ^
src/base/perf.hpp:506:35: note: Technically the member function 'cubperf::generic_stat_counter::get_name' can be const.
  generic_stat_counter<IsAtomic>::get_name (void)
                                  ^
src/base/perf_def.hpp:86:19: note: Technically the member function 'cubperf::generic_stat_counter::get_name' can be const.
      const char *get_name (void);                      // get statistic name
                  ^
src/base/perf_def.hpp:103:18: style:inconclusive: Technically the member function 'cubperf::generic_stat_timer::get_time' can be const. [functionConst]
      stat_value get_time (void);                       // get current timer value
                 ^
src/base/perf.hpp:542:33: note: Technically the member function 'cubperf::generic_stat_timer::get_time' can be const.
  generic_stat_timer<IsAtomic>::get_time (void)
                                ^
src/base/perf_def.hpp:103:18: note: Technically the member function 'cubperf::generic_stat_timer::get_time' can be const.
      stat_value get_time (void);                       // get current timer value
                 ^
src/base/perf_def.hpp:104:19: style:inconclusive: Technically the member function 'cubperf::generic_stat_timer::get_name' can be const. [functionConst]
      const char *get_name (void);                      // get statistic name
                  ^
src/base/perf.hpp:549:33: note: Technically the member function 'cubperf::generic_stat_timer::get_name' can be const.
  generic_stat_timer<IsAtomic>::get_name (void)
                                ^
src/base/perf_def.hpp:104:19: note: Technically the member function 'cubperf::generic_stat_timer::get_name' can be const.
      const char *get_name (void);                      // get statistic name
                  ^
src/base/perf.hpp:164:19: performance:inconclusive: Technically the member function 'cubperf::statset_definition::time' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      inline void time (statset &statsetr, stat_id id, duration d) const;
                  ^
src/base/perf.hpp:293:23: note: Technically the member function 'cubperf::statset_definition::time' can be static (but you may consider moving to unnamed namespace).
  statset_definition::time (statset &statsetr, stat_id id, duration d) const
                      ^
src/base/perf.hpp:164:19: note: Technically the member function 'cubperf::statset_definition::time' can be static (but you may consider moving to unnamed namespace).
      inline void time (statset &statsetr, stat_id id, duration d) const;
                  ^
src/base/perf.hpp:166:19: performance:inconclusive: Technically the member function 'cubperf::statset_definition::time' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      inline void time (atomic_statset &statsetr, stat_id id, duration d) const;
                  ^
src/base/perf.hpp:305:23: note: Technically the member function 'cubperf::statset_definition::time' can be static (but you may consider moving to unnamed namespace).
  statset_definition::time (atomic_statset &statsetr, stat_id id, duration d) const
                      ^
src/base/perf.hpp:166:19: note: Technically the member function 'cubperf::statset_definition::time' can be static (but you may consider moving to unnamed namespace).
      inline void time (atomic_statset &statsetr, stat_id id, duration d) const;
                  ^
src/base/perf.hpp:171:19: performance:inconclusive: Technically the member function 'cubperf::statset_definition::time_and_increment' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      inline void time_and_increment (statset &statsetr, stat_id id, duration d, stat_value incr = 1) const;
                  ^
src/base/perf.hpp:340:23: note: Technically the member function 'cubperf::statset_definition::time_and_increment' can be static (but you may consider moving to unnamed namespace).
  statset_definition::time_and_increment (statset &statsetr, stat_id id, duration d, stat_value incr /* = 1 */) const
                      ^
src/base/perf.hpp:171:19: note: Technically the member function 'cubperf::statset_definition::time_and_increment' can be static (but you may consider moving to unnamed namespace).
      inline void time_and_increment (statset &statsetr, stat_id id, duration d, stat_value incr = 1) const;
                  ^
src/base/perf.hpp:173:19: performance:inconclusive: Technically the member function 'cubperf::statset_definition::time_and_increment' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      inline void time_and_increment (atomic_statset &statsetr, stat_id id, duration d, stat_value incr = 1) const;
                  ^
src/base/perf.hpp:352:23: note: Technically the member function 'cubperf::statset_definition::time_and_increment' can be static (but you may consider moving to unnamed namespace).
  statset_definition::time_and_increment (atomic_statset &statsetr, stat_id id, duration d,
                      ^
src/base/perf.hpp:173:19: note: Technically the member function 'cubperf::statset_definition::time_and_increment' can be static (but you may consider moving to unnamed namespace).
      inline void time_and_increment (atomic_statset &statsetr, stat_id id, duration d, stat_value incr = 1) const;
                  ^
src/base/perf.hpp:209:19: performance:inconclusive: Technically the member function 'cubperf::statset_definition::generic_time < false >' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      inline void generic_time (generic_statset<IsAtomic> &statsetr, stat_id id) const;
                  ^
src/base/perf.hpp:285:23: note: Technically the member function 'cubperf::statset_definition::generic_time < false >' can be static (but you may consider moving to unnamed namespace).
  statset_definition::generic_time (generic_statset<IsAtomic> &statsetr, stat_id id) const
                      ^
src/base/perf.hpp:209:19: note: Technically the member function 'cubperf::statset_definition::generic_time < false >' can be static (but you may consider moving to unnamed namespace).
      inline void generic_time (generic_statset<IsAtomic> &statsetr, stat_id id) const;
                  ^
src/base/perf.hpp:209:19: performance:inconclusive: Technically the member function 'cubperf::statset_definition::generic_time < true >' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      inline void generic_time (generic_statset<IsAtomic> &statsetr, stat_id id) const;
                  ^
src/base/perf.hpp:285:23: note: Technically the member function 'cubperf::statset_definition::generic_time < true >' can be static (but you may consider moving to unnamed namespace).
  statset_definition::generic_time (generic_statset<IsAtomic> &statsetr, stat_id id) const
                      ^
src/base/perf.hpp:209:19: note: Technically the member function 'cubperf::statset_definition::generic_time < true >' can be static (but you may consider moving to unnamed namespace).
      inline void generic_time (generic_statset<IsAtomic> &statsetr, stat_id id) const;
                  ^
src/base/perf.hpp:214:19: performance:inconclusive: Technically the member function 'cubperf::statset_definition::generic_time_and_increment < false >' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      inline void generic_time_and_increment (generic_statset<IsAtomic> &statsetr, stat_id id, stat_value incr) const;
                  ^
src/base/perf.hpp:332:23: note: Technically the member function 'cubperf::statset_definition::generic_time_and_increment < false >' can be static (but you may consider moving to unnamed namespace).
  statset_definition::generic_time_and_increment (generic_statset<IsAtomic> &statsetr, stat_id id, stat_value incr) const
                      ^
src/base/perf.hpp:214:19: note: Technically the member function 'cubperf::statset_definition::generic_time_and_increment < false >' can be static (but you may consider moving to unnamed namespace).
      inline void generic_time_and_increment (generic_statset<IsAtomic> &statsetr, stat_id id, stat_value incr) const;
                  ^
src/base/perf.hpp:214:19: performance:inconclusive: Technically the member function 'cubperf::statset_definition::generic_time_and_increment < true >' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      inline void generic_time_and_increment (generic_statset<IsAtomic> &statsetr, stat_id id, stat_value incr) const;
                  ^
src/base/perf.hpp:332:23: note: Technically the member function 'cubperf::statset_definition::generic_time_and_increment < true >' can be static (but you may consider moving to unnamed namespace).
  statset_definition::generic_time_and_increment (generic_statset<IsAtomic> &statsetr, stat_id id, stat_value incr) const
                      ^
src/base/perf.hpp:214:19: note: Technically the member function 'cubperf::statset_definition::generic_time_and_increment < true >' can be static (but you may consider moving to unnamed namespace).
      inline void generic_time_and_increment (generic_statset<IsAtomic> &statsetr, stat_id id, stat_value incr) const;
                  ^
src/base/perf.cpp:91:5: warning: Class 'statset_definition' does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s). [noCopyConstructor]
    m_stat_defs = new stat_definition[defs.size ()];
    ^
src/base/perf.cpp:91:5: warning: Class 'statset_definition' does not have a operator= which is recommended since it has dynamic memory/resource allocation(s). [noOperatorEq]
    m_stat_defs = new stat_definition[defs.size ()];
    ^
src/base/perf.hpp:148:7: style: Class 'statset_definition' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
      statset_definition (std::initializer_list<stat_definition> defs);
      ^
src/base/perf.hpp:378:17: style: The scope of the variable 'offset' can be reduced. [variableScope]
    std::size_t offset = 0;
                ^
src/base/perf.hpp:421:17: style: The scope of the variable 'offset' can be reduced. [variableScope]
    std::size_t offset = 0;
                ^
src/base/perf.hpp:366:51: style:inconclusive: Function 'convert_timeval' argument 1 names different: declaration 'nanosecs' definition 'default_duration_count'. [funcArgNamesDifferent]
  statset_definition::convert_timeval (stat_value default_duration_count) const
                                                  ^
src/base/perf.hpp:219:46: note: Function 'convert_timeval' argument 1 names different: declaration 'nanosecs' definition 'default_duration_count'.
      stat_value convert_timeval (stat_value nanosecs) const;
                                             ^
src/base/perf.hpp:366:51: note: Function 'convert_timeval' argument 1 names different: declaration 'nanosecs' definition 'default_duration_count'.
  statset_definition::convert_timeval (stat_value default_duration_count) const
                                                  ^
src/base/perf.cpp:41:51: style:inconclusive: Function 'stat_definition' argument 1 names different: declaration 'id' definition 'idref'. [funcArgNamesDifferent]
  stat_definition::stat_definition (const stat_id idref, type stat_type, const char *first_name,
                                                  ^
src/base/perf.hpp:117:38: note: Function 'stat_definition' argument 1 names different: declaration 'id' definition 'idref'.
      stat_definition (const stat_id id, type stat_type, const char *first_name, const char *second_name = NULL);
                                     ^
src/base/perf.cpp:41:51: note: Function 'stat_definition' argument 1 names different: declaration 'id' definition 'idref'.
  stat_definition::stat_definition (const stat_id idref, type stat_type, const char *first_name,
                                                  ^
src/base/perf.hpp:378:24: style: Variable 'offset' is assigned a value that is never used. [unreadVariable]
    std::size_t offset = 0;
                       ^
src/base/perf.hpp:421:24: style: Variable 'offset' is assigned a value that is never used. [unreadVariable]
    std::size_t offset = 0;
                       ^
src/base/perf_monitor.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 88 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/base/perf_monitor.c:1696:17: style: Condition 'module==PERF_MODULE_VACUUM' is always true [knownConditionTrueFalse]
     if (module == PERF_MODULE_VACUUM)
                ^
src/base/perf_monitor.c:1687:20: note: Assuming that condition 'module==PERF_MODULE_VACUUM' is not redundant
        if (module == PERF_MODULE_VACUUM && page_found_mode != PERF_PAGE_MODE_NEW_LOCK_WAIT
                   ^
src/base/perf_monitor.c:1696:17: note: Condition 'module==PERF_MODULE_VACUUM' is always true
     if (module == PERF_MODULE_VACUUM)
                ^
src/base/perf_monitor.c:2868:4: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
   sprintf (buffer, "%d Volumes", flushed_block_volumes);
   ^
src/base/perf_monitor.c:2905:7: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
      sprintf (buffer, "%d Volumes", flushed_block_volumes);
      ^
src/base/perf_monitor.c:2099:7: style: The scope of the variable 'module' can be reduced. [variableScope]
  int module;
      ^
src/base/perf_monitor.c:2100:7: style: The scope of the variable 'page_type' can be reduced. [variableScope]
  int page_type;
      ^
src/base/perf_monitor.c:2101:7: style: The scope of the variable 'page_mode' can be reduced. [variableScope]
  int page_mode;
      ^
src/base/perf_monitor.c:2102:7: style: The scope of the variable 'latch_mode' can be reduced. [variableScope]
  int latch_mode;
      ^
src/base/perf_monitor.c:2103:7: style: The scope of the variable 'cond_type' can be reduced. [variableScope]
  int cond_type;
      ^
src/base/perf_monitor.c:2104:7: style: The scope of the variable 'offset' can be reduced. [variableScope]
  int offset;
      ^
src/base/perf_monitor.c:2106:7: style: The scope of the variable 'ret' can be reduced. [variableScope]
  int ret;
      ^
src/base/perf_monitor.c:2211:7: style: The scope of the variable 'module' can be reduced. [variableScope]
  int module;
      ^
src/base/perf_monitor.c:2212:7: style: The scope of the variable 'page_type' can be reduced. [variableScope]
  int page_type;
      ^
src/base/perf_monitor.c:2213:7: style: The scope of the variable 'promote_cond' can be reduced. [variableScope]
  int promote_cond;
      ^
src/base/perf_monitor.c:2214:7: style: The scope of the variable 'holder_latch' can be reduced. [variableScope]
  int holder_latch;
      ^
src/base/perf_monitor.c:2215:7: style: The scope of the variable 'success' can be reduced. [variableScope]
  int success;
      ^
src/base/perf_monitor.c:2216:7: style: The scope of the variable 'offset' can be reduced. [variableScope]
  int offset;
      ^
src/base/perf_monitor.c:2218:7: style: The scope of the variable 'ret' can be reduced. [variableScope]
  int ret;
      ^
src/base/perf_monitor.c:2325:7: style: The scope of the variable 'module' can be reduced. [variableScope]
  int module;
      ^
src/base/perf_monitor.c:2326:7: style: The scope of the variable 'page_type' can be reduced. [variableScope]
  int page_type;
      ^
src/base/perf_monitor.c:2327:7: style: The scope of the variable 'buf_dirty' can be reduced. [variableScope]
  int buf_dirty;
      ^
src/base/perf_monitor.c:2328:7: style: The scope of the variable 'holder_dirty' can be reduced. [variableScope]
  int holder_dirty;
      ^
src/base/perf_monitor.c:2329:7: style: The scope of the variable 'holder_latch' can be reduced. [variableScope]
  int holder_latch;
      ^
src/base/perf_monitor.c:2330:7: style: The scope of the variable 'offset' can be reduced. [variableScope]
  int offset;
      ^
src/base/perf_monitor.c:2332:7: style: The scope of the variable 'ret' can be reduced. [variableScope]
  int ret;
      ^
src/base/perf_monitor.c:2438:7: style: The scope of the variable 'module' can be reduced. [variableScope]
  int module;
      ^
src/base/perf_monitor.c:2439:7: style: The scope of the variable 'page_type' can be reduced. [variableScope]
  int page_type;
      ^
src/base/perf_monitor.c:2440:7: style: The scope of the variable 'page_mode' can be reduced. [variableScope]
  int page_mode;
      ^
src/base/perf_monitor.c:2441:7: style: The scope of the variable 'latch_mode' can be reduced. [variableScope]
  int latch_mode;
      ^
src/base/perf_monitor.c:2442:7: style: The scope of the variable 'cond_type' can be reduced. [variableScope]
  int cond_type;
      ^
src/base/perf_monitor.c:2443:7: style: The scope of the variable 'offset' can be reduced. [variableScope]
  int offset;
      ^
src/base/perf_monitor.c:2445:7: style: The scope of the variable 'ret' can be reduced. [variableScope]
  int ret;
      ^
src/base/perf_monitor.c:2549:7: style: The scope of the variable 'module' can be reduced. [variableScope]
  int module;
      ^
src/base/perf_monitor.c:2550:7: style: The scope of the variable 'page_type' can be reduced. [variableScope]
  int page_type;
      ^
src/base/perf_monitor.c:2551:7: style: The scope of the variable 'page_mode' can be reduced. [variableScope]
  int page_mode;
      ^
src/base/perf_monitor.c:2552:7: style: The scope of the variable 'latch_mode' can be reduced. [variableScope]
  int latch_mode;
      ^
src/base/perf_monitor.c:2553:7: style: The scope of the variable 'offset' can be reduced. [variableScope]
  int offset;
      ^
src/base/perf_monitor.c:2555:7: style: The scope of the variable 'ret' can be reduced. [variableScope]
  int ret;
      ^
src/base/perf_monitor.c:2681:16: style: The scope of the variable 'snapshot' can be reduced. [variableScope]
  unsigned int snapshot;
               ^
src/base/perf_monitor.c:2682:16: style: The scope of the variable 'rec_type' can be reduced. [variableScope]
  unsigned int rec_type;
               ^
src/base/perf_monitor.c:2683:16: style: The scope of the variable 'visibility' can be reduced. [variableScope]
  unsigned int visibility;
               ^
src/base/perf_monitor.c:2684:7: style: The scope of the variable 'offset' can be reduced. [variableScope]
  int offset;
      ^
src/base/perf_monitor.c:2686:7: style: The scope of the variable 'ret' can be reduced. [variableScope]
  int ret;
      ^
src/base/perf_monitor.c:2783:16: style: The scope of the variable 'lock_mode' can be reduced. [variableScope]
  unsigned int lock_mode;
               ^
src/base/perf_monitor.c:2785:7: style: The scope of the variable 'ret' can be reduced. [variableScope]
  int ret;
      ^
src/base/perf_monitor.c:2849:16: style: The scope of the variable 'flushed_block_volumes' can be reduced. [variableScope]
  unsigned int flushed_block_volumes;
               ^
src/base/perf_monitor.c:2851:7: style: The scope of the variable 'ret' can be reduced. [variableScope]
  int ret;
      ^
src/base/perf_monitor.c:2852:8: style: The scope of the variable 'buffer' can be reduced. [variableScope]
  char buffer[15];
       ^
src/base/perf_monitor.c:2921:7: style: The scope of the variable 'module' can be reduced. [variableScope]
  int module;
      ^
src/base/perf_monitor.c:2922:7: style: The scope of the variable 'offset' can be reduced. [variableScope]
  int offset;
      ^
src/base/perf_monitor.c:2924:7: style: The scope of the variable 'ret' can be reduced. [variableScope]
  int ret;
      ^
src/base/perf_monitor.c:2964:7: style: The scope of the variable 'offset' can be reduced. [variableScope]
  int offset;
      ^
src/base/perf_monitor.c:1565:37: style:inconclusive: Function 'perfmon_get_current_times' argument 1 names different: declaration 'cpu_usr_time' definition 'cpu_user_time'. [funcArgNamesDifferent]
perfmon_get_current_times (time_t * cpu_user_time, time_t * cpu_sys_time, time_t * elapsed_time)
                                    ^
src/base/perf_monitor.h:815:49: note: Function 'perfmon_get_current_times' argument 1 names different: declaration 'cpu_usr_time' definition 'cpu_user_time'.
extern void perfmon_get_current_times (time_t * cpu_usr_time, time_t * cpu_sys_time, time_t * elapsed_time);
                                                ^
src/base/perf_monitor.c:1565:37: note: Function 'perfmon_get_current_times' argument 1 names different: declaration 'cpu_usr_time' definition 'cpu_user_time'.
perfmon_get_current_times (time_t * cpu_user_time, time_t * cpu_sys_time, time_t * elapsed_time)
                                    ^
src/base/perf_monitor.c:3735:31: warning: Function 'perfmon_copy_values' argument order different: declaration 'src, dest' definition 'dest, src' [funcArgOrderDifferent]
perfmon_copy_values (UINT64 * dest, UINT64 * src)
                              ^
src/base/perf_monitor.h:823:43: note: Function 'perfmon_copy_values' argument order different: declaration 'src, dest' definition 'dest, src'
extern void perfmon_copy_values (UINT64 * src, UINT64 * dest);
                                          ^
src/base/perf_monitor.c:3735:31: note: Function 'perfmon_copy_values' argument order different: declaration 'src, dest' definition 'dest, src'
perfmon_copy_values (UINT64 * dest, UINT64 * src)
                              ^
src/base/perf_monitor.c:1810:8: style: Local variable 'offset' shadows outer variable [shadowVariable]
   int offset = pstat_Metadata[i].start_offset;
       ^
src/base/perf_monitor.c:1600:7: note: Shadowed declaration
  int offset;
      ^
src/base/perf_monitor.c:1810:8: note: Shadow variable
   int offset = pstat_Metadata[i].start_offset;
       ^
src/base/perf_monitor.c:1608:18: style: Variable 'counter' is assigned a value that is never used. [unreadVariable]
  UINT64 counter = 0;
                 ^
src/base/perf_monitor.c:2105:18: style: Variable 'counter' is assigned a value that is never used. [unreadVariable]
  UINT64 counter = 0;
                 ^
src/base/perf_monitor.c:2167:18: style: Variable 'counter' is assigned a value that is never used. [unreadVariable]
  UINT64 counter = 0;
                 ^
src/base/perf_monitor.c:2217:18: style: Variable 'counter' is assigned a value that is never used. [unreadVariable]
  UINT64 counter = 0;
                 ^
src/base/perf_monitor.c:2280:18: style: Variable 'counter' is assigned a value that is never used. [unreadVariable]
  UINT64 counter = 0;
                 ^
src/base/perf_monitor.c:2331:18: style: Variable 'counter' is assigned a value that is never used. [unreadVariable]
  UINT64 counter = 0;
                 ^
src/base/perf_monitor.c:2394:18: style: Variable 'counter' is assigned a value that is never used. [unreadVariable]
  UINT64 counter = 0;
                 ^
src/base/perf_monitor.c:2444:18: style: Variable 'counter' is assigned a value that is never used. [unreadVariable]
  UINT64 counter = 0;
                 ^
src/base/perf_monitor.c:2505:18: style: Variable 'counter' is assigned a value that is never used. [unreadVariable]
  UINT64 counter = 0;
                 ^
src/base/perf_monitor.c:2554:18: style: Variable 'counter' is assigned a value that is never used. [unreadVariable]
  UINT64 counter = 0;
                 ^
src/base/perf_monitor.c:2610:18: style: Variable 'counter' is assigned a value that is never used. [unreadVariable]
  UINT64 counter = 0;
                 ^
src/base/perf_monitor.c:2685:18: style: Variable 'counter' is assigned a value that is never used. [unreadVariable]
  UINT64 counter = 0;
                 ^
src/base/perf_monitor.c:2741:18: style: Variable 'counter' is assigned a value that is never used. [unreadVariable]
  UINT64 counter = 0;
                 ^
src/base/perf_monitor.c:2784:18: style: Variable 'counter' is assigned a value that is never used. [unreadVariable]
  UINT64 counter = 0;
                 ^
src/base/perf_monitor.c:2822:18: style: Variable 'counter' is assigned a value that is never used. [unreadVariable]
  UINT64 counter = 0;
                 ^
src/base/perf_monitor.c:2850:18: style: Variable 'counter' is assigned a value that is never used. [unreadVariable]
  UINT64 counter = 0;
                 ^
src/base/perf_monitor.c:2891:18: style: Variable 'counter' is assigned a value that is never used. [unreadVariable]
  UINT64 counter = 0;
                 ^
src/base/perf_monitor.c:2923:18: style: Variable 'counter' is assigned a value that is never used. [unreadVariable]
  UINT64 counter = 0;
                 ^
src/base/perf_monitor.c:2965:18: style: Variable 'counter' is assigned a value that is never used. [unreadVariable]
  UINT64 counter = 0;
                 ^
src/base/perf_monitor.c:3982:16: style: Variable 'value' is assigned a value that is never used. [unreadVariable]
  UINT64 value = 0;
               ^
src/base/perf_monitor.c:4024:16: style: Variable 'value' is assigned a value that is never used. [unreadVariable]
  UINT64 value = 0;
               ^
src/base/perf_monitor.c:4162:16: style: Variable 'value' is assigned a value that is never used. [unreadVariable]
  UINT64 value = 0;
               ^
src/base/perf_monitor.c:4205:16: style: Variable 'value' is assigned a value that is never used. [unreadVariable]
  UINT64 value = 0;
               ^
src/base/perf_monitor.c:1802:3: error: Code 'cubload::worker_manager_get_stats' is invalid C code. Use --std or --language to configure the language. [syntaxError]
  cubload::worker_manager_get_stats (&stats[pstat_Metadata[PSTAT_LOAD_THREAD_STATS].start_offset]);
  ^
src/base/pinning.hpp:52:10: warning: Assert statement calls a function which may have desired side effects: 'check_references'. [assertWithSideEffect]
 assert (check_references () == true);
         ^
src/base/pinnable_buffer.hpp:57:10: warning: Assert statement calls a function which may have desired side effects: 'get_pin_count'. [assertWithSideEffect]
 assert (get_pin_count () == 0);
         ^
src/base/pinning.hpp:45:12: style:inconclusive: Technically the member function 'cubbase::pinner::check_references' can be const. [functionConst]
      bool check_references (void)
           ^
src/base/pinning.hpp:74:11: style:inconclusive: Technically the member function 'cubbase::pinnable::get_pin_count' can be const. [functionConst]
      int get_pin_count (void)
          ^
src/base/pinnable_buffer.hpp:65:14: style:inconclusive: Technically the member function 'cubmem::pinnable_buffer::get_buffer_size' can be const. [functionConst]
      size_t get_buffer_size (void)
             ^
src/base/porting.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 46 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/base/porting.c:316:14: error: Code 'C++ cast <...' is invalid C code. Use --std or --language to configure the language. [syntaxError]
  DWORD wd = static_cast < DWORD > (bufsize);
             ^
src/base/porting.c:1770:0: information: Skipping configuration 'ETIMEDOUT;WINDOWS' since the value of 'ETIMEDOUT' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  return result == WAIT_TIMEOUT ? ETIMEDOUT : 0;
^
src/base/porting.c:1870:0: information: Skipping configuration 'ETIMEDOUT;WINDOWS' since the value of 'ETIMEDOUT' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   return ETIMEDOUT;
^
src/base/porting.c:865:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  TCHAR disk[PATH_MAX];
^
src/base/porting.c:869:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  _tcsncpy (disk, (TCHAR *) path, PATH_MAX);
^
src/base/porting.c:1034:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  if (len + 1 > PATH_MAX)
^
src/base/porting.c:1072:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      bname = (char *) malloc (PATH_MAX);
^
src/base/porting.c:1077:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  return (cub_dirname_r (path, bname, PATH_MAX) < 0) ? NULL : bname;
^
src/base/porting.c:1117:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  if (len + 1 > PATH_MAX)
^
src/base/porting.c:1138:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      bname = (char *) malloc (PATH_MAX);
^
src/base/porting.c:1143:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  return (basename_r (path, bname, PATH_MAX) < 0) ? NULL : bname;
^
src/base/string_buffer.hpp:128:27: warning: Assert statement calls a function which may have desired side effects: 'get_ptr'. [assertWithSideEffect]
      assert (m_ext_block.get_ptr ()[m_len] == '\0');
                          ^
src/base/printer.hpp:42:6: warning:inconclusive: Class 'print_output' which has virtual members does not have a virtual destructor. [virtualDestructor]
    ~print_output ()
     ^
src/base/string_buffer.hpp:60:5: style: Class 'string_buffer' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    string_buffer (const cubmem::block_allocator &alloc)
    ^
src/base/printer.hpp:78:5: style: Class 'file_print_output' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    file_print_output (FILE *fp);
    ^
src/base/printer.hpp:82:9: style: The function 'flush' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
    int flush (void);
        ^
src/base/printer.hpp:47:17: note: Virtual function in base class
    virtual int flush (void) = 0;
                ^
src/base/printer.hpp:82:9: note: Function in derived class
    int flush (void);
        ^
src/base/printer.hpp:96:9: style: The function 'flush' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
    int flush (void);
        ^
src/base/printer.hpp:47:17: note: Virtual function in base class
    virtual int flush (void) = 0;
                ^
src/base/printer.hpp:96:9: note: Function in derived class
    int flush (void);
        ^
src/base/string_buffer.hpp:146:98: warning: Access of forwarded variable 'args'. [accessForwarded]
  snprintf (m_ext_block.get_ptr () + m_len, m_ext_block.get_size () - m_len, std::forward<Args> (args)...);
                                                                                                 ^
src/base/string_buffer.hpp:140:32: note: Calling std::forward(args)
  int len = snprintf (NULL, 0, std::forward<Args> (args)...);
                               ^
src/base/string_buffer.hpp:146:98: note: Access of forwarded variable 'args'.
  snprintf (m_ext_block.get_ptr () + m_len, m_ext_block.get_size () - m_len, std::forward<Args> (args)...);
                                                                                                 ^
src/base/process_util.c:50:3: error: Code 'std::string' is invalid C code. Use --std or --language to configure the language. [syntaxError]
  std::string cmd_arg = "";
  ^
src/base/rand.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 41 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/base/rand.c:93:21: style:inconclusive: Function 'srand48_r' argument 1 names different: declaration 'seedval' definition 'seed'. [funcArgNamesDifferent]
srand48_r (long int seed, struct drand48_data *buffer)
                    ^
src/base/porting.h:547:32: note: Function 'srand48_r' argument 1 names different: declaration 'seedval' definition 'seed'.
extern int srand48_r (long int seedval, struct drand48_data *buffer);
                               ^
src/base/rand.c:93:21: note: Function 'srand48_r' argument 1 names different: declaration 'seedval' definition 'seed'.
srand48_r (long int seed, struct drand48_data *buffer)
                    ^
src/base/release_string.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 49 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/base/release_string.c:393:19: style: Redundant condition: If 'EXPR == '.'', the comparison 'EXPR' is always true. [redundantCondition]
   while (*a_temp && *a_temp == '.')
                  ^
src/base/release_string.c:397:19: style: Redundant condition: If 'EXPR == '.'', the comparison 'EXPR' is always true. [redundantCondition]
   while (*b_temp && *b_temp == '.')
                  ^
src/base/release_string.c:546:17: style: Redundant condition: If 'EXPR == '.'', the comparison 'EXPR' is always true. [redundantCondition]
  while (*str_a && *str_a == '.')
                ^
src/base/release_string.c:550:17: style: Redundant condition: If 'EXPR == '.'', the comparison 'EXPR' is always true. [redundantCondition]
  while (*str_b && *str_b == '.')
                ^
src/base/release_string.c:564:17: style: Redundant condition: If 'EXPR == '.'', the comparison 'EXPR' is always true. [redundantCondition]
  while (*str_a && *str_a == '.')
                ^
src/base/release_string.c:568:17: style: Redundant condition: If 'EXPR == '.'', the comparison 'EXPR' is always true. [redundantCondition]
  while (*str_b && *str_b == '.')
                ^
src/base/release_string.c:353:9: style: The scope of the variable 'a_temp' can be reduced. [variableScope]
  char *a_temp, *b_temp, *end_p;
        ^
src/base/release_string.c:353:18: style: The scope of the variable 'b_temp' can be reduced. [variableScope]
  char *a_temp, *b_temp, *end_p;
                 ^
src/base/release_string.c:519:21: style:inconclusive: Function 'rel_get_compatible_internal' argument 4 names different: declaration 'rules' definition 'versions'. [funcArgNamesDifferent]
        REL_VERSION versions[])
                    ^
src/base/release_string.c:96:57: note: Function 'rel_get_compatible_internal' argument 4 names different: declaration 'rules' definition 'versions'.
            COMPATIBILITY_CHECK_MODE check, REL_VERSION rules[]);
                                                        ^
src/base/release_string.c:519:21: note: Function 'rel_get_compatible_internal' argument 4 names different: declaration 'rules' definition 'versions'.
        REL_VERSION versions[])
                    ^
src/base/resource_tracker.cpp:57:28: style:inconclusive: Function 'restrack_set_error' argument 1 names different: declaration 'set_error' definition 'error'. [funcArgNamesDifferent]
  restrack_set_error (bool error)
                           ^
src/base/resource_tracker.hpp:162:33: note: Function 'restrack_set_error' argument 1 names different: declaration 'set_error' definition 'error'.
  void restrack_set_error (bool set_error);
                                ^
src/base/resource_tracker.cpp:57:28: note: Function 'restrack_set_error' argument 1 names different: declaration 'set_error' definition 'error'.
  restrack_set_error (bool error)
                           ^
src/base/resource_tracker.hpp:318:12: style: Consider using std::accumulate algorithm instead of a raw loop. [useStlAlgorithm]
     total += map_it.second.m_reuse_count;
           ^
src/base/mem_block.hpp:42:1: error: Code 'namespacecubmem{' is invalid C code. Use --std or --language to configure the language. [syntaxError]
namespace cubmem
^
src/base/system_parameter.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 90 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/base/system_parameter.c:12180:49: style: Condition 'second_int_list==NULL' is always false [knownConditionTrueFalse]
 if (second_int_list == NULL || second_int_list == NULL)
                                                ^
src/base/system_parameter.c:12180:22: note: Assuming that condition 'second_int_list==NULL' is not redundant
 if (second_int_list == NULL || second_int_list == NULL)
                     ^
src/base/system_parameter.c:12180:49: note: Condition 'second_int_list==NULL' is always false
 if (second_int_list == NULL || second_int_list == NULL)
                                                ^
src/base/system_parameter.c:8777:21: warning: Either the condition '(prm)!=NULL' is redundant or there is possible null pointer dereference: prm. [nullPointerRedundantCheck]
   *((int *) min) = PRM_GET_INT (prm->lower_limit);
                    ^
src/base/system_parameter.c:8780:8: note: Assuming that condition '(prm)!=NULL' is not redundant
       PRM_ADJUST_FOR_GET_INTEGER_TO_INTEGER (prm, (int *) min, (int *) min, &error);
       ^
src/base/system_parameter.c:8777:21: note: Null pointer dereference
   *((int *) min) = PRM_GET_INT (prm->lower_limit);
                    ^
src/base/system_parameter.c:8790:21: warning: Either the condition '(prm)!=NULL' is redundant or there is possible null pointer dereference: prm. [nullPointerRedundantCheck]
   *((int *) max) = PRM_GET_INT (prm->upper_limit);
                    ^
src/base/system_parameter.c:8793:8: note: Assuming that condition '(prm)!=NULL' is not redundant
       PRM_ADJUST_FOR_GET_INTEGER_TO_INTEGER (prm, (int *) max, (int *) max, &error);
       ^
src/base/system_parameter.c:8790:21: note: Null pointer dereference
   *((int *) max) = PRM_GET_INT (prm->upper_limit);
                    ^
src/base/system_parameter.c:8805:23: warning: Either the condition '(prm)!=NULL' is redundant or there is possible null pointer dereference: prm. [nullPointerRedundantCheck]
   *((float *) min) = PRM_GET_FLOAT (prm->lower_limit);
                      ^
src/base/system_parameter.c:8808:8: note: Assuming that condition '(prm)!=NULL' is not redundant
       PRM_ADJUST_FOR_GET_FLOAT_TO_FLOAT (prm, (float *) min, (float *) min, &error);
       ^
src/base/system_parameter.c:8805:23: note: Null pointer dereference
   *((float *) min) = PRM_GET_FLOAT (prm->lower_limit);
                      ^
src/base/system_parameter.c:8818:23: warning: Either the condition '(prm)!=NULL' is redundant or there is possible null pointer dereference: prm. [nullPointerRedundantCheck]
   *((float *) max) = PRM_GET_FLOAT (prm->upper_limit);
                      ^
src/base/system_parameter.c:8821:8: note: Assuming that condition '(prm)!=NULL' is not redundant
       PRM_ADJUST_FOR_GET_FLOAT_TO_FLOAT (prm, (float *) max, (float *) max, &error);
       ^
src/base/system_parameter.c:8818:23: note: Null pointer dereference
   *((float *) max) = PRM_GET_FLOAT (prm->upper_limit);
                      ^
src/base/system_parameter.c:8833:24: warning: Either the condition '(prm)!=NULL' is redundant or there is possible null pointer dereference: prm. [nullPointerRedundantCheck]
   *((UINT64 *) min) = PRM_GET_BIGINT (prm->lower_limit);
                       ^
src/base/system_parameter.c:8836:8: note: Assuming that condition '(prm)!=NULL' is not redundant
       PRM_ADJUST_FOR_GET_BIGINT_TO_BIGINT (prm, (UINT64 *) min, (UINT64 *) min, &error);
       ^
src/base/system_parameter.c:8833:24: note: Null pointer dereference
   *((UINT64 *) min) = PRM_GET_BIGINT (prm->lower_limit);
                       ^
src/base/system_parameter.c:8846:24: warning: Either the condition '(prm)!=NULL' is redundant or there is possible null pointer dereference: prm. [nullPointerRedundantCheck]
   *((UINT64 *) max) = PRM_GET_BIGINT (prm->upper_limit);
                       ^
src/base/system_parameter.c:8849:8: note: Assuming that condition '(prm)!=NULL' is not redundant
       PRM_ADJUST_FOR_GET_BIGINT_TO_BIGINT (prm, (UINT64 *) max, (UINT64 *) max, &error);
       ^
src/base/system_parameter.c:8846:24: note: Null pointer dereference
   *((UINT64 *) max) = PRM_GET_BIGINT (prm->upper_limit);
                       ^
src/base/system_parameter.c:8935:7: warning: Either the condition '(prm)!=NULL' is redundant or there is possible null pointer dereference: prm. [nullPointerRedundantCheck]
  if (PRM_IS_INTEGER (prm) || PRM_IS_KEYWORD (prm))
      ^
src/base/system_parameter.c:9236:3: note: Assuming that condition '(prm)!=NULL' is not redundant
  PRM_ADJUST_FOR_SET_BIGINT_TO_INTEGER (prm, &val, &dup_val, &error);
  ^
src/base/system_parameter.c:9229:27: note: Calling function 'prm_check_range', 1st argument 'prm' value is 0
     if (prm_check_range (prm, (void *) &dup_val) != NO_ERROR)
                          ^
src/base/system_parameter.c:8935:7: note: Null pointer dereference
  if (PRM_IS_INTEGER (prm) || PRM_IS_KEYWORD (prm))
      ^
src/base/system_parameter.c:10652:7: warning: Either the condition 'ha_mode_prm!=NULL' is redundant or there is possible null pointer dereference: ha_mode_prm. [nullPointerRedundantCheck]
  if (PRM_GET_INT (ha_mode_prm->value) != HA_MODE_OFF)
      ^
src/base/system_parameter.c:10686:23: note: Assuming that condition 'ha_mode_prm!=NULL' is not redundant
  assert (ha_mode_prm != NULL);
                      ^
src/base/system_parameter.c:10652:7: note: Null pointer dereference
  if (PRM_GET_INT (ha_mode_prm->value) != HA_MODE_OFF)
      ^
src/base/system_parameter.c:6525:12: style: Redundant initialization for 'log_tm_p'. The initialized value is overwritten before it is read. [redundantInitialization]
  log_tm_p = localtime_r (&log_time, &log_tm);
           ^
src/base/system_parameter.c:6497:31: note: log_tm_p is initialized
  struct tm log_tm, *log_tm_p = &log_tm;
                              ^
src/base/system_parameter.c:6525:12: note: log_tm_p is overwritten
  log_tm_p = localtime_r (&log_time, &log_tm);
           ^
src/base/system_parameter.c:10306:26: style: Variable '*prm->dynamic_flag' is reassigned a value before the old one has been used. [redundantAssignment]
      *prm->dynamic_flag = 0;
                         ^
src/base/system_parameter.c:10291:8: note: *prm->dynamic_flag is assigned
       PRM_CLEAR_BIT (PRM_ALLOCATED, *prm->dynamic_flag);
       ^
src/base/system_parameter.c:10306:26: note: *prm->dynamic_flag is overwritten
      *prm->dynamic_flag = 0;
                         ^
src/base/system_parameter.c:10306:26: style: Variable '*prm->dynamic_flag' is reassigned a value before the old one has been used. [redundantAssignment]
      *prm->dynamic_flag = 0;
                         ^
src/base/system_parameter.c:10296:8: note: *prm->dynamic_flag is assigned
       PRM_CLEAR_BIT (PRM_ALLOCATED, *prm->dynamic_flag);
       ^
src/base/system_parameter.c:10306:26: note: *prm->dynamic_flag is overwritten
      *prm->dynamic_flag = 0;
                         ^
src/base/system_parameter.c:6984:22: style: Same expression on both sides of '||' because 'on_server' and 'on_client' represent the same value. [knownConditionTrueFalse]
      if ((on_server || on_client)
                     ^
src/base/system_parameter.c:6853:20: note: 'on_server' is assigned value 'false' here.
  bool on_server = false;
                   ^
src/base/system_parameter.c:6854:20: note: 'on_client' is assigned value 'false' here.
  bool on_client = false;
                   ^
src/base/system_parameter.c:6984:22: note: Same expression on both sides of '||' because 'on_server' and 'on_client' represent the same value.
      if ((on_server || on_client)
                     ^
src/base/system_parameter.c:12180:30: style: Same expression on both sides of '||'. [duplicateExpression]
 if (second_int_list == NULL || second_int_list == NULL)
                             ^
src/base/system_parameter.c:6450:23: style: The scope of the variable 'prm' can be reduced. [variableScope]
  const SYSPRM_PARAM *prm;
                      ^
src/base/system_parameter.c:6498:8: style: The scope of the variable 'error_log_name' can be reduced. [variableScope]
  char error_log_name[PATH_MAX];
       ^
src/base/system_parameter.c:6959:8: style: The scope of the variable 'er_status' can be reduced. [variableScope]
   int er_status = NO_ERROR;
       ^
src/base/system_parameter.c:8175:22: style: The scope of the variable 'list_size' can be reduced. [variableScope]
      int *int_list, list_size, i;
                     ^
src/base/system_parameter.c:8175:33: style: The scope of the variable 'i' can be reduced. [variableScope]
      int *int_list, list_size, i;
                                ^
src/base/system_parameter.c:8176:13: style: The scope of the variable 's' can be reduced. [variableScope]
      char *s;
            ^
src/base/system_parameter.c:8475:29: style: The scope of the variable 'list_size' can be reduced. [variableScope]
      int *int_list = NULL, list_size, i;
                            ^
src/base/system_parameter.c:8475:40: style: The scope of the variable 'i' can be reduced. [variableScope]
      int *int_list = NULL, list_size, i;
                                       ^
src/base/system_parameter.c:9308:6: style: The scope of the variable 'result' can be reduced. [variableScope]
 int result;
     ^
src/base/system_parameter.c:10150:8: style: The scope of the variable 'val' can be reduced. [variableScope]
  char val[LINE_MAX];
       ^
src/base/system_parameter.c:10279:17: style: The scope of the variable 'prm' can be reduced. [variableScope]
  SYSPRM_PARAM *prm;
                ^
src/base/system_parameter.c:11588:12: style: The scope of the variable 'i' can be reduced. [variableScope]
 int temp, i;
           ^
src/base/system_parameter.c:12224:10: style: The scope of the variable 'size' can be reduced. [variableScope]
  size_t size;
         ^
src/base/system_parameter.c:6492:37: style:inconclusive: Function 'sysprm_set_er_log_file' argument 1 names different: declaration 'base_db_name' definition 'db_name'. [funcArgNamesDifferent]
sysprm_set_er_log_file (const char *db_name)
                                    ^
src/base/system_parameter.h:553:51: note: Function 'sysprm_set_er_log_file' argument 1 names different: declaration 'base_db_name' definition 'db_name'.
  extern void sysprm_set_er_log_file (const char *base_db_name);
                                                  ^
src/base/system_parameter.c:6492:37: note: Function 'sysprm_set_er_log_file' argument 1 names different: declaration 'base_db_name' definition 'db_name'.
sysprm_set_er_log_file (const char *db_name)
                                    ^
src/base/system_parameter.c:8533:62: style:inconclusive: Function 'sysprm_obtain_parameters' argument 2 names different: declaration 'prm_values' definition 'prm_values_ptr'. [funcArgNamesDifferent]
sysprm_obtain_parameters (char *data, SYSPRM_ASSIGN_VALUE ** prm_values_ptr)
                                                             ^
src/base/system_parameter.h:555:82: note: Function 'sysprm_obtain_parameters' argument 2 names different: declaration 'prm_values' definition 'prm_values_ptr'.
  extern SYSPRM_ERR sysprm_obtain_parameters (char *data, SYSPRM_ASSIGN_VALUE ** prm_values);
                                                                                 ^
src/base/system_parameter.c:8533:62: note: Function 'sysprm_obtain_parameters' argument 2 names different: declaration 'prm_values' definition 'prm_values_ptr'.
sysprm_obtain_parameters (char *data, SYSPRM_ASSIGN_VALUE ** prm_values_ptr)
                                                             ^
src/base/system_parameter.c:8756:40: style:inconclusive: Function 'xsysprm_dump_server_parameters' argument 1 names different: declaration 'fp' definition 'outfp'. [funcArgNamesDifferent]
xsysprm_dump_server_parameters (FILE * outfp)
                                       ^
src/base/system_parameter.h:566:54: note: Function 'xsysprm_dump_server_parameters' argument 1 names different: declaration 'fp' definition 'outfp'.
  extern void xsysprm_dump_server_parameters (FILE * fp);
                                                     ^
src/base/system_parameter.c:8756:40: note: Function 'xsysprm_dump_server_parameters' argument 1 names different: declaration 'fp' definition 'outfp'.
xsysprm_dump_server_parameters (FILE * outfp)
                                       ^
src/base/system_parameter.c:10785:59: style:inconclusive: Function 'prm_get_next_param_value' argument 3 names different: declaration 'value' definition 'val'. [funcArgNamesDifferent]
prm_get_next_param_value (char **data, char **prm, char **val)
                                                          ^
src/base/system_parameter.c:6374:70: note: Function 'prm_get_next_param_value' argument 3 names different: declaration 'value' definition 'val'.
static int prm_get_next_param_value (char **data, char **prm, char **value);
                                                                     ^
src/base/system_parameter.c:10785:59: note: Function 'prm_get_next_param_value' argument 3 names different: declaration 'value' definition 'val'.
prm_get_next_param_value (char **data, char **prm, char **val)
                                                          ^
src/base/system_parameter.c:11398:50: style:inconclusive: Function 'sysprm_free_session_parameters' argument 1 names different: declaration 'session_parameters' definition 'session_parameters_ptr'. [funcArgNamesDifferent]
sysprm_free_session_parameters (SESSION_PARAM ** session_parameters_ptr)
                                                 ^
src/base/system_parameter.h:560:64: note: Function 'sysprm_free_session_parameters' argument 1 names different: declaration 'session_parameters' definition 'session_parameters_ptr'.
  extern void sysprm_free_session_parameters (SESSION_PARAM ** session_parameters);
                                                               ^
src/base/system_parameter.c:11398:50: note: Function 'sysprm_free_session_parameters' argument 1 names different: declaration 'session_parameters' definition 'session_parameters_ptr'.
sysprm_free_session_parameters (SESSION_PARAM ** session_parameters_ptr)
                                                 ^
src/base/system_parameter.c:9301:17: error: Uninitialized variable: val [uninitvar]
 new_value->i = val;
                ^
src/base/system_parameter.c:9215:6: note: Assuming condition is false
 if (set_default)
     ^
src/base/system_parameter.c:9221:6: note: Assuming condition is true
 if (PRM_HAS_SIZE_UNIT (prm->static_flag))
     ^
src/base/system_parameter.c:9301:17: note: Uninitialized variable: val
 new_value->i = val;
                ^
src/base/system_parameter.c:9416:17: error: Uninitialized variable: val [uninitvar]
 new_value->f = val;
                ^
src/base/system_parameter.c:9357:6: note: Assuming condition is false
 if (set_default)
     ^
src/base/system_parameter.c:9363:6: note: Assuming condition is true
 if (PRM_HAS_SIZE_UNIT (prm->static_flag))
     ^
src/base/system_parameter.c:9416:17: note: Uninitialized variable: val
 new_value->f = val;
                ^
src/base/system_parameter.c:10626:50: style: Variable 'ha_process_dereg_confirm_interval_in_msecs_prm' is assigned a value that is never used. [unreadVariable]
  ha_process_dereg_confirm_interval_in_msecs_prm = prm_find (PRM_NAME_HA_PROCESS_DEREG_CONFIRM_INTERVAL_IN_MSECS, NULL);
                                                 ^
src/base/system_parameter.c:10627:36: style: Variable 'ha_max_process_dereg_confirm_prm' is assigned a value that is never used. [unreadVariable]
  ha_max_process_dereg_confirm_prm = prm_find (PRM_NAME_HA_MAX_PROCESS_DEREG_CONFIRM, NULL);
                                   ^
src/base/system_parameter.c:10628:34: style: Variable 'shutdown_wait_time_in_secs_prm' is assigned a value that is never used. [unreadVariable]
  shutdown_wait_time_in_secs_prm = prm_find (PRM_NAME_SHUTDOWN_WAIT_TIME_IN_SECS, NULL);
                                 ^
src/base/system_parameter.c:6498:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char error_log_name[PATH_MAX];
^
src/base/system_parameter.c:6528:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      snprintf (error_log_name, PATH_MAX - 1, "%s%c%s_%04d%02d%02d_%02d%02d.err", ER_LOG_FILE_DIR, PATH_SEPARATOR,
^
src/base/system_parameter.c:6549:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char file_being_dealt_with[PATH_MAX];
^
src/base/system_parameter.c:6623:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      envvar_confdir_file (file_being_dealt_with, PATH_MAX, sysprm_conf_file_name);
^
src/base/system_parameter.c:6651:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   envvar_confdir_file (file_being_dealt_with, PATH_MAX, sysprm_ha_conf_file_name);
^
src/base/system_parameter.c:9796:18: style: The scope of the variable 'session_tz_region' can be reduced. [variableScope]
      TZ_REGION *session_tz_region;
                 ^
src/base/system_parameter.c:10927:17: style: The scope of the variable 'thread_p' can be reduced. [variableScope]
  THREAD_ENTRY *thread_p;
                ^
src/base/system_parameter.c:11937:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/base/system_parameter.c:11970:58: style:inconclusive: Function 'sysprm_session_init_session_parameters' argument 1 names different: declaration 'session_params' definition 'session_parameters_ptr'. [funcArgNamesDifferent]
sysprm_session_init_session_parameters (SESSION_PARAM ** session_parameters_ptr, int *found_session_parameters)
                                                         ^
src/base/system_parameter.h:586:71: note: Function 'sysprm_session_init_session_parameters' argument 1 names different: declaration 'session_params' definition 'session_parameters_ptr'.
  extern int sysprm_session_init_session_parameters (SESSION_PARAM ** session_params, int *found_session_parameters);
                                                                      ^
src/base/system_parameter.c:11970:58: note: Function 'sysprm_session_init_session_parameters' argument 1 names different: declaration 'session_params' definition 'session_parameters_ptr'.
sysprm_session_init_session_parameters (SESSION_PARAM ** session_parameters_ptr, int *found_session_parameters)
                                                         ^
src/base/system_parameter.c:10417:32: style: Variable 'log_background_archiving_prm' is assigned a value that is never used. [unreadVariable]
  log_background_archiving_prm = prm_find (PRM_NAME_LOG_BACKGROUND_ARCHIVING, NULL);
                               ^
src/base/tsc_timer.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 68 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/base/tz_compile.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 53 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/base/tz_compile.c:3443:28: error: Using pointer to local variable 'empty' that is out of scope. [invalidLifetime]
   sprintf (err_msg, "%d", strlen (prev_letter_abbrev));
                           ^
src/base/tz_compile.c:3436:25: note: Array decayed to pointer here.
   prev_letter_abbrev = empty;
                        ^
src/base/tz_compile.c:3433:9: note: Variable created here.
   char empty[2];
        ^
src/base/tz_compile.c:3443:28: note: Using pointer to local variable 'empty' that is out of scope.
   sprintf (err_msg, "%d", strlen (prev_letter_abbrev));
                           ^
src/base/tz_compile.c:6374:7: error: The address of local variable 'nv' is accessed at non-zero index. [objectIndex]
      BUF_PUT_INT32 (buf, tzd->timezones[i].country_id);
      ^
src/base/tz_compile.c:6374:7: note: Address of variable taken here.
      BUF_PUT_INT32 (buf, tzd->timezones[i].country_id);
      ^
src/base/tz_compile.c:6374:7: note: The address of local variable 'nv' is accessed at non-zero index.
      BUF_PUT_INT32 (buf, tzd->timezones[i].country_id);
      ^
src/base/tz_compile.c:6375:7: error: The address of local variable 'nv' is accessed at non-zero index. [objectIndex]
      BUF_PUT_INT32 (buf, tzd->timezones[i].gmt_off_rule_count);
      ^
src/base/tz_compile.c:6375:7: note: Address of variable taken here.
      BUF_PUT_INT32 (buf, tzd->timezones[i].gmt_off_rule_count);
      ^
src/base/tz_compile.c:6375:7: note: The address of local variable 'nv' is accessed at non-zero index.
      BUF_PUT_INT32 (buf, tzd->timezones[i].gmt_off_rule_count);
      ^
src/base/tz_compile.c:6376:7: error: The address of local variable 'nv' is accessed at non-zero index. [objectIndex]
      BUF_PUT_INT32 (buf, tzd->timezones[i].gmt_off_rule_start);
      ^
src/base/tz_compile.c:6376:7: note: Address of variable taken here.
      BUF_PUT_INT32 (buf, tzd->timezones[i].gmt_off_rule_start);
      ^
src/base/tz_compile.c:6376:7: note: The address of local variable 'nv' is accessed at non-zero index.
      BUF_PUT_INT32 (buf, tzd->timezones[i].gmt_off_rule_start);
      ^
src/base/tz_compile.c:6377:7: error: The address of local variable 'nv' is accessed at non-zero index. [objectIndex]
      BUF_PUT_INT32 (buf, tzd->timezones[i].zone_id);
      ^
src/base/tz_compile.c:6377:7: note: Address of variable taken here.
      BUF_PUT_INT32 (buf, tzd->timezones[i].zone_id);
      ^
src/base/tz_compile.c:6377:7: note: The address of local variable 'nv' is accessed at non-zero index.
      BUF_PUT_INT32 (buf, tzd->timezones[i].zone_id);
      ^
src/base/tz_compile.c:6388:7: error: The address of local variable 'nv' is accessed at non-zero index. [objectIndex]
      BUF_PUT_INT32 (buf, tzd->offset_rules[i].gmt_off);
      ^
src/base/tz_compile.c:6388:7: note: Address of variable taken here.
      BUF_PUT_INT32 (buf, tzd->offset_rules[i].gmt_off);
      ^
src/base/tz_compile.c:6388:7: note: The address of local variable 'nv' is accessed at non-zero index.
      BUF_PUT_INT32 (buf, tzd->offset_rules[i].gmt_off);
      ^
src/base/tz_compile.c:6389:7: error: The address of local variable 'nv' is accessed at non-zero index. [objectIndex]
      BUF_PUT_INT32 (buf, tzd->offset_rules[i].ds_ruleset);
      ^
src/base/tz_compile.c:6389:7: note: Address of variable taken here.
      BUF_PUT_INT32 (buf, tzd->offset_rules[i].ds_ruleset);
      ^
src/base/tz_compile.c:6389:7: note: The address of local variable 'nv' is accessed at non-zero index.
      BUF_PUT_INT32 (buf, tzd->offset_rules[i].ds_ruleset);
      ^
src/base/tz_compile.c:6390:7: error: The address of local variable 'nv' is accessed at non-zero index. [objectIndex]
      BUF_PUT_INT16 (buf, tzd->offset_rules[i].until_year);
      ^
src/base/tz_compile.c:6390:7: note: Address of variable taken here.
      BUF_PUT_INT16 (buf, tzd->offset_rules[i].until_year);
      ^
src/base/tz_compile.c:6390:7: note: The address of local variable 'nv' is accessed at non-zero index.
      BUF_PUT_INT16 (buf, tzd->offset_rules[i].until_year);
      ^
src/base/tz_compile.c:6401:7: error: The address of local variable 'nv' is accessed at non-zero index. [objectIndex]
      BUF_PUT_INT32 (buf, tzd->offset_rules[i].until_time_type);
      ^
src/base/tz_compile.c:6401:7: note: Address of variable taken here.
      BUF_PUT_INT32 (buf, tzd->offset_rules[i].until_time_type);
      ^
src/base/tz_compile.c:6401:7: note: The address of local variable 'nv' is accessed at non-zero index.
      BUF_PUT_INT32 (buf, tzd->offset_rules[i].until_time_type);
      ^
src/base/tz_compile.c:6402:7: error: The address of local variable 'nv' is accessed at non-zero index. [objectIndex]
      BUF_PUT_INT32 (buf, tzd->offset_rules[i].until_flag);
      ^
src/base/tz_compile.c:6402:7: note: Address of variable taken here.
      BUF_PUT_INT32 (buf, tzd->offset_rules[i].until_flag);
      ^
src/base/tz_compile.c:6402:7: note: The address of local variable 'nv' is accessed at non-zero index.
      BUF_PUT_INT32 (buf, tzd->offset_rules[i].until_flag);
      ^
src/base/tz_compile.c:6403:7: error: The address of local variable 'nv' is accessed at non-zero index. [objectIndex]
      BUF_PUT_INT32 (buf, tzd->offset_rules[i].ds_type);
      ^
src/base/tz_compile.c:6403:7: note: Address of variable taken here.
      BUF_PUT_INT32 (buf, tzd->offset_rules[i].ds_type);
      ^
src/base/tz_compile.c:6403:7: note: The address of local variable 'nv' is accessed at non-zero index.
      BUF_PUT_INT32 (buf, tzd->offset_rules[i].ds_type);
      ^
src/base/tz_compile.c:6404:7: error: The address of local variable 'nv' is accessed at non-zero index. [objectIndex]
      BUF_PUT_INT32 (buf, tzd->offset_rules[i].julian_date);
      ^
src/base/tz_compile.c:6404:7: note: Address of variable taken here.
      BUF_PUT_INT32 (buf, tzd->offset_rules[i].julian_date);
      ^
src/base/tz_compile.c:6404:7: note: The address of local variable 'nv' is accessed at non-zero index.
      BUF_PUT_INT32 (buf, tzd->offset_rules[i].julian_date);
      ^
src/base/tz_compile.c:6426:7: error: The address of local variable 'nv' is accessed at non-zero index. [objectIndex]
      BUF_PUT_INT32 (buf, tzd->names[i].zone_id);
      ^
src/base/tz_compile.c:6426:7: note: Address of variable taken here.
      BUF_PUT_INT32 (buf, tzd->names[i].zone_id);
      ^
src/base/tz_compile.c:6426:7: note: The address of local variable 'nv' is accessed at non-zero index.
      BUF_PUT_INT32 (buf, tzd->names[i].zone_id);
      ^
src/base/tz_compile.c:6433:7: error: The address of local variable 'nv' is accessed at non-zero index. [objectIndex]
      BUF_PUT_INT32 (buf, tzd->ds_rulesets[i].count);
      ^
src/base/tz_compile.c:6433:7: note: Address of variable taken here.
      BUF_PUT_INT32 (buf, tzd->ds_rulesets[i].count);
      ^
src/base/tz_compile.c:6433:7: note: The address of local variable 'nv' is accessed at non-zero index.
      BUF_PUT_INT32 (buf, tzd->ds_rulesets[i].count);
      ^
src/base/tz_compile.c:6434:7: error: The address of local variable 'nv' is accessed at non-zero index. [objectIndex]
      BUF_PUT_INT32 (buf, tzd->ds_rulesets[i].index_start);
      ^
src/base/tz_compile.c:6434:7: note: Address of variable taken here.
      BUF_PUT_INT32 (buf, tzd->ds_rulesets[i].index_start);
      ^
src/base/tz_compile.c:6434:7: note: The address of local variable 'nv' is accessed at non-zero index.
      BUF_PUT_INT32 (buf, tzd->ds_rulesets[i].index_start);
      ^
src/base/tz_compile.c:6441:7: error: The address of local variable 'nv' is accessed at non-zero index. [objectIndex]
      BUF_PUT_INT16 (buf, tzd->ds_rules[i].from_year);
      ^
src/base/tz_compile.c:6441:7: note: Address of variable taken here.
      BUF_PUT_INT16 (buf, tzd->ds_rules[i].from_year);
      ^
src/base/tz_compile.c:6441:7: note: The address of local variable 'nv' is accessed at non-zero index.
      BUF_PUT_INT16 (buf, tzd->ds_rules[i].from_year);
      ^
src/base/tz_compile.c:6442:7: error: The address of local variable 'nv' is accessed at non-zero index. [objectIndex]
      BUF_PUT_INT16 (buf, tzd->ds_rules[i].to_year);
      ^
src/base/tz_compile.c:6442:7: note: Address of variable taken here.
      BUF_PUT_INT16 (buf, tzd->ds_rules[i].to_year);
      ^
src/base/tz_compile.c:6442:7: note: The address of local variable 'nv' is accessed at non-zero index.
      BUF_PUT_INT16 (buf, tzd->ds_rules[i].to_year);
      ^
src/base/tz_compile.c:6445:7: error: The address of local variable 'nv' is accessed at non-zero index. [objectIndex]
      BUF_PUT_INT32 (buf, tzd->ds_rules[i].change_on.type);
      ^
src/base/tz_compile.c:6445:7: note: Address of variable taken here.
      BUF_PUT_INT32 (buf, tzd->ds_rules[i].change_on.type);
      ^
src/base/tz_compile.c:6445:7: note: The address of local variable 'nv' is accessed at non-zero index.
      BUF_PUT_INT32 (buf, tzd->ds_rules[i].change_on.type);
      ^
src/base/tz_compile.c:6450:7: error: The address of local variable 'nv' is accessed at non-zero index. [objectIndex]
      BUF_PUT_INT32 (buf, tzd->ds_rules[i].at_time);
      ^
src/base/tz_compile.c:6450:7: note: Address of variable taken here.
      BUF_PUT_INT32 (buf, tzd->ds_rules[i].at_time);
      ^
src/base/tz_compile.c:6450:7: note: The address of local variable 'nv' is accessed at non-zero index.
      BUF_PUT_INT32 (buf, tzd->ds_rules[i].at_time);
      ^
src/base/tz_compile.c:6451:7: error: The address of local variable 'nv' is accessed at non-zero index. [objectIndex]
      BUF_PUT_INT32 (buf, tzd->ds_rules[i].at_time_type);
      ^
src/base/tz_compile.c:6451:7: note: Address of variable taken here.
      BUF_PUT_INT32 (buf, tzd->ds_rules[i].at_time_type);
      ^
src/base/tz_compile.c:6451:7: note: The address of local variable 'nv' is accessed at non-zero index.
      BUF_PUT_INT32 (buf, tzd->ds_rules[i].at_time_type);
      ^
src/base/tz_compile.c:6452:7: error: The address of local variable 'nv' is accessed at non-zero index. [objectIndex]
      BUF_PUT_INT32 (buf, tzd->ds_rules[i].save_time);
      ^
src/base/tz_compile.c:6452:7: note: Address of variable taken here.
      BUF_PUT_INT32 (buf, tzd->ds_rules[i].save_time);
      ^
src/base/tz_compile.c:6452:7: note: The address of local variable 'nv' is accessed at non-zero index.
      BUF_PUT_INT32 (buf, tzd->ds_rules[i].save_time);
      ^
src/base/tz_compile.c:6469:7: error: The address of local variable 'nv' is accessed at non-zero index. [objectIndex]
      BUF_PUT_INT16 (buf, tzd->ds_leap_sec[i].year);
      ^
src/base/tz_compile.c:6469:7: note: Address of variable taken here.
      BUF_PUT_INT16 (buf, tzd->ds_leap_sec[i].year);
      ^
src/base/tz_compile.c:6469:7: note: The address of local variable 'nv' is accessed at non-zero index.
      BUF_PUT_INT16 (buf, tzd->ds_leap_sec[i].year);
      ^
src/base/tz_compile.c:5060:4: error: Memory leak: temp [memleak]
   return -1;
   ^
src/base/tz_compile.c:1100:36: warning: Either the condition 'fp!=NULL' is redundant or there is possible null pointer dereference: fp. [nullPointerRedundantCheck]
  while (fgets (str, sizeof (str), fp))
                                   ^
src/base/tz_compile.c:1145:10: note: Assuming that condition 'fp!=NULL' is not redundant
  if (fp != NULL)
         ^
src/base/tz_compile.c:1100:36: note: Null pointer dereference
  while (fgets (str, sizeof (str), fp))
                                   ^
src/base/tz_compile.c:1201:36: warning: Either the condition 'fp!=NULL' is redundant or there is possible null pointer dereference: fp. [nullPointerRedundantCheck]
  while (fgets (str, sizeof (str), fp))
                                   ^
src/base/tz_compile.c:1242:10: note: Assuming that condition 'fp!=NULL' is not redundant
  if (fp != NULL)
         ^
src/base/tz_compile.c:1201:36: note: Null pointer dereference
  while (fgets (str, sizeof (str), fp))
                                   ^
src/base/tz_compile.c:1290:36: warning: Either the condition 'fp!=NULL' is redundant or there is possible null pointer dereference: fp. [nullPointerRedundantCheck]
  while (fgets (str, sizeof (str), fp))
                                   ^
src/base/tz_compile.c:1394:10: note: Assuming that condition 'fp!=NULL' is not redundant
  if (fp != NULL)
         ^
src/base/tz_compile.c:1290:36: note: Null pointer dereference
  while (fgets (str, sizeof (str), fp))
                                   ^
src/base/tz_compile.c:1449:36: warning: Either the condition 'fp!=NULL' is redundant or there is possible null pointer dereference: fp. [nullPointerRedundantCheck]
  while (fgets (str, sizeof (str), fp))
                                   ^
src/base/tz_compile.c:1495:10: note: Assuming that condition 'fp!=NULL' is not redundant
  if (fp != NULL)
         ^
src/base/tz_compile.c:1449:36: note: Null pointer dereference
  while (fgets (str, sizeof (str), fp))
                                   ^
src/base/tz_compile.c:1555:36: warning: Either the condition 'fp!=NULL' is redundant or there is possible null pointer dereference: fp. [nullPointerRedundantCheck]
  while (fgets (str, sizeof (str), fp))
                                   ^
src/base/tz_compile.c:1644:10: note: Assuming that condition 'fp!=NULL' is not redundant
  if (fp != NULL)
         ^
src/base/tz_compile.c:1555:36: note: Null pointer dereference
  while (fgets (str, sizeof (str), fp))
                                   ^
src/base/tz_compile.c:2327:7: style: The scope of the variable 'year' can be reduced. [variableScope]
  int year;
      ^
src/base/tz_compile.c:2365:10: style: The scope of the variable 'j' can be reduced. [variableScope]
  int i, j;
         ^
src/base/tz_compile.c:4390:7: style: The scope of the variable 'ruleset_id' can be reduced. [variableScope]
  int ruleset_id = -1;
      ^
src/base/tz_compile.c:4392:7: style: The scope of the variable 'cmp_res' can be reduced. [variableScope]
  int cmp_res;
      ^
src/base/tz_compile.c:4545:15: style: The scope of the variable 'rule' can be reduced. [variableScope]
  TZ_DS_RULE *rule;
              ^
src/base/tz_compile.c:4793:16: style: The scope of the variable 'leap_sec' can be reduced. [variableScope]
  TZ_LEAP_SEC *leap_sec;
               ^
src/base/tz_compile.c:4845:17: style: The scope of the variable 'temp_len2' can be reduced. [variableScope]
  int max_len2, temp_len2;
                ^
src/base/tz_compile.c:5025:7: style: The scope of the variable 'len_windows_zone' can be reduced. [variableScope]
  int len_windows_zone;
      ^
src/base/tz_compile.c:5026:7: style: The scope of the variable 'len_territory' can be reduced. [variableScope]
  int len_territory;
      ^
src/base/tz_compile.c:5027:7: style: The scope of the variable 'iana_zone_id' can be reduced. [variableScope]
  int iana_zone_id = -1;
      ^
src/base/tz_compile.c:5028:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/base/tz_compile.c:5152:7: style: The scope of the variable 'cmp_res' can be reduced. [variableScope]
  int cmp_res;
      ^
src/base/tz_compile.c:5190:7: style: The scope of the variable 'cmp_res' can be reduced. [variableScope]
  int cmp_res;
      ^
src/base/tz_compile.c:1766:27: warning: Function 'tzc_add_zone' argument order different: declaration 'zone, coord, code, comments, tzd_raw, new_zone' definition 'zone, code, coord, comments, tzd_raw, new_zone' [funcArgOrderDifferent]
tzc_add_zone (const char *zone, const char *code, const char *coord, const char *comments, TZ_RAW_DATA * tzd_raw,
                          ^
src/base/tz_compile.c:402:38: note: Function 'tzc_add_zone' argument order different: declaration 'zone, coord, code, comments, tzd_raw, new_zone' definition 'zone, code, coord, comments, tzd_raw, new_zone'
static int tzc_add_zone (const char *zone, const char *coord, const char *code, const char *comments,
                                     ^
src/base/tz_compile.c:1766:27: note: Function 'tzc_add_zone' argument order different: declaration 'zone, coord, code, comments, tzd_raw, new_zone' definition 'zone, code, coord, comments, tzd_raw, new_zone'
tzc_add_zone (const char *zone, const char *code, const char *coord, const char *comments, TZ_RAW_DATA * tzd_raw,
                          ^
src/base/tz_compile.c:3667:31: style:inconclusive: Function 'str_month_to_int' argument 1 names different: declaration 'month' definition 'str_in'. [funcArgNamesDifferent]
str_month_to_int (const char *str_in, int *month_num, const char **str_next)
                              ^
src/base/tz_compile.c:427:42: note: Function 'str_month_to_int' argument 1 names different: declaration 'month' definition 'str_in'.
static int str_month_to_int (const char *month, int *month_num, const char **str_next);
                                         ^
src/base/tz_compile.c:3667:31: note: Function 'str_month_to_int' argument 1 names different: declaration 'month' definition 'str_in'.
str_month_to_int (const char *str_in, int *month_num, const char **str_next)
                              ^
src/base/tz_compile.c:4207:61: style:inconclusive: Function 'tzc_export_timezone_dot_c' argument 2 names different: declaration 'tz_C_filepath' definition 'timezones_dot_c_filepath'. [funcArgNamesDifferent]
tzc_export_timezone_dot_c (const TZ_DATA * tzd, const char *timezones_dot_c_filepath)
                                                            ^
src/base/tz_compile.c:442:72: note: Function 'tzc_export_timezone_dot_c' argument 2 names different: declaration 'tz_C_filepath' definition 'timezones_dot_c_filepath'.
static int tzc_export_timezone_dot_c (const TZ_DATA * tzd, const char *tz_C_filepath);
                                                                       ^
src/base/tz_compile.c:4207:61: note: Function 'tzc_export_timezone_dot_c' argument 2 names different: declaration 'tz_C_filepath' definition 'timezones_dot_c_filepath'.
tzc_export_timezone_dot_c (const TZ_DATA * tzd, const char *timezones_dot_c_filepath)
                                                            ^
src/base/tz_compile.c:233:7: style: struct member 'offset_rule_interval::original_offset_rule_start' is never used. [unusedStructMember]
  int original_offset_rule_start;
      ^
src/base/tz_compile.c:234:7: style: struct member 'offset_rule_interval::len' is never used. [unusedStructMember]
  int len;
      ^
src/base/tz_compile.c:235:7: style: struct member 'offset_rule_interval::final_offset_rule_start' is never used. [unusedStructMember]
  int final_offset_rule_start;
      ^
src/base/tz_compile.c:4390:18: style: Variable 'ruleset_id' is assigned a value that is never used. [unreadVariable]
  int ruleset_id = -1;
                 ^
src/base/tz_compile.c:205:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char current_file[PATH_MAX];
^
src/base/tz_compile.c:589:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char temp_path[PATH_MAX];
^
src/base/tz_compile.c:1066:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char country_filepath[PATH_MAX] = { 0 };
^
src/base/tz_compile.c:1165:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char zone_filepath[PATH_MAX] = { 0 };
^
src/base/tz_compile.c:1265:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char filepath[PATH_MAX] = { 0 };
^
src/base/tz_compile.c:1418:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char filepath[PATH_MAX] = { 0 };
^
src/base/tz_compile.c:1516:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char filepath[PATH_MAX] = { 0 };
^
src/base/tz_compile.c:4193:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char tz_cub_path[PATH_MAX] = { 0 };
^
src/base/tz_compile.c:5098:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char filepath[PATH_MAX] = { 0 };
^
src/base/tz_compile.c:5972:25: style: Redundant condition: comp_res<0. 'comp_res>=0 || (comp_res<0 && mark_ruleset[i-1]==1)' is equivalent to 'comp_res>=0 || mark_ruleset[i-1]==1' [redundantCondition]
      if (comp_res >= 0 || (comp_res < 0 && mark_ruleset[i - 1] == 1))
                        ^
src/base/tz_compile.c:628:22: style:inconclusive: Function 'timezone_compile_data' argument 4 names different: declaration 'output_file_path' definition 'timezones_dot_c_filepath'. [funcArgNamesDifferent]
         const char *timezones_dot_c_filepath, char *checksum)
                     ^
src/base/tz_compile.h:33:21: note: Function 'timezone_compile_data' argument 4 names different: declaration 'output_file_path' definition 'timezones_dot_c_filepath'.
        const char *output_file_path, char *checksum);
                    ^
src/base/tz_compile.c:628:22: note: Function 'timezone_compile_data' argument 4 names different: declaration 'output_file_path' definition 'timezones_dot_c_filepath'.
         const char *timezones_dot_c_filepath, char *checksum)
                     ^
src/base/tz_compile.c:5493:11: style: Local variable 'country_id' shadows outer variable [shadowVariable]
      int country_id = tzc_find_country_names (old_tzd.countries, old_tzd.country_count,
          ^
src/base/tz_compile.c:5455:7: note: Shadowed declaration
  int country_id;
      ^
src/base/tz_compile.c:5493:11: note: Shadow variable
      int country_id = tzc_find_country_names (old_tzd.countries, old_tzd.country_count,
          ^
src/base/tz_support.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 53 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/base/tz_support.c:1251:25: warning: Either the condition 'dst_str_end-dst_str>(int)sizeof(tz_info->zone.dst_str)' is redundant or the array 'tz_info->zone.dst_str[10]' is accessed at index 10, which is out of bounds. [arrayIndexOutOfBoundsCond]
   tz_info->zone.dst_str[dst_str_end - dst_str] = '\0';
                        ^
src/base/tz_support.c:1244:30: note: Assuming that condition 'dst_str_end-dst_str>(int)sizeof(tz_info->zone.dst_str)' is not redundant
   if (dst_str_end - dst_str > (int) sizeof (tz_info->zone.dst_str))
                             ^
src/base/tz_support.c:1251:25: note: Array index out of bounds
   tz_info->zone.dst_str[dst_str_end - dst_str] = '\0';
                        ^
src/base/tz_support.c:1730:13: style: Condition 'ds_abbr!=NULL' is always true [knownConditionTrueFalse]
   (ds_abbr != NULL && *ds_abbr != '-') ? ds_abbr : "");
            ^
src/base/tz_support.c:1723:16: note: Assuming that condition 'ds_abbr==NULL' is not redundant
   if (ds_abbr == NULL)
               ^
src/base/tz_support.c:1730:13: note: Condition 'ds_abbr!=NULL' is always true
   (ds_abbr != NULL && *ds_abbr != '-') ? ds_abbr : "");
            ^
src/base/tz_support.c:4005:13: style: Condition 'ds_abbr!=NULL' is always true [knownConditionTrueFalse]
   (ds_abbr != NULL && *ds_abbr != '-') ? ds_abbr : "");
            ^
src/base/tz_support.c:3998:16: note: Assuming that condition 'ds_abbr==NULL' is not redundant
   if (ds_abbr == NULL)
               ^
src/base/tz_support.c:4005:13: note: Condition 'ds_abbr!=NULL' is always true
   (ds_abbr != NULL && *ds_abbr != '-') ? ds_abbr : "");
            ^
src/base/tz_support.c:2933:21: style: Variable 'rule_time_sec' is reassigned a value before the old one has been used. [redundantAssignment]
      rule_time_sec = (curr_off_rule->until_hour * 60 + curr_off_rule->until_min) * 60 + curr_off_rule->until_sec;
                    ^
src/base/tz_support.c:2896:18: note: rule_time_sec is assigned
   rule_time_sec = (curr_off_rule->until_hour * 60 + curr_off_rule->until_min) * 60 + curr_off_rule->until_sec;
                 ^
src/base/tz_support.c:2933:21: note: rule_time_sec is overwritten
      rule_time_sec = (curr_off_rule->until_hour * 60 + curr_off_rule->until_min) * 60 + curr_off_rule->until_sec;
                    ^
src/base/tz_support.c:1112:7: style: The scope of the variable 'name_index' can be reduced. [variableScope]
  int name_index = -1;
      ^
src/base/tz_support.c:1114:7: style: The scope of the variable 'cmp_res' can be reduced. [variableScope]
  int cmp_res;
      ^
src/base/tz_support.c:1174:7: style: The scope of the variable 'zone_id' can be reduced. [variableScope]
  int zone_id;
      ^
src/base/tz_support.c:2651:15: style: The scope of the variable 'ds_rule' can be reduced. [variableScope]
  TZ_DS_RULE *ds_rule;
              ^
src/base/tz_support.c:2654:7: style: The scope of the variable 'err_status' can be reduced. [variableScope]
  int err_status = NO_ERROR;
      ^
src/base/tz_support.c:4159:7: style: The scope of the variable 'cmp_res' can be reduced. [variableScope]
  int cmp_res;
      ^
src/base/tz_support.c:4216:7: style: The scope of the variable 'offset' can be reduced. [variableScope]
  int offset = 0;
      ^
src/base/tz_support.c:4540:7: style: The scope of the variable 'mid' can be reduced. [variableScope]
  int mid = 0;
      ^
src/base/tz_support.c:4542:7: style: The scope of the variable 'cmp_res' can be reduced. [variableScope]
  int cmp_res;
      ^
src/base/tz_support.c:2083:97: style:inconclusive: Function 'tz_get_first_weekday_around_date' argument 4 names different: declaration 'after_day' definition 'ref_day'. [funcArgNamesDifferent]
tz_get_first_weekday_around_date (const int year, const int month, const int weekday, const int ref_day,
                                                                                                ^
src/base/tz_support.h:145:110: note: Function 'tz_get_first_weekday_around_date' argument 4 names different: declaration 'after_day' definition 'ref_day'.
  extern int tz_get_first_weekday_around_date (const int year, const int month, const int weekday, const int after_day,
                                                                                                             ^
src/base/tz_support.c:2083:97: note: Function 'tz_get_first_weekday_around_date' argument 4 names different: declaration 'after_day' definition 'ref_day'.
tz_get_first_weekday_around_date (const int year, const int month, const int weekday, const int ref_day,
                                                                                                ^
src/base/tz_support.c:2276:63: style:inconclusive: Function 'tz_str_to_seconds' argument 3 names different: declaration 'sec' definition 'seconds'. [funcArgNamesDifferent]
tz_str_to_seconds (const char *str, const char *str_end, int *seconds, const char **str_next, const bool is_offset)
                                                              ^
src/base/tz_support.h:166:76: note: Function 'tz_str_to_seconds' argument 3 names different: declaration 'sec' definition 'seconds'.
  extern int tz_str_to_seconds (const char *str, const char *str_end, int *sec, const char **str_next,
                                                                           ^
src/base/tz_support.c:2276:63: note: Function 'tz_str_to_seconds' argument 3 names different: declaration 'sec' definition 'seconds'.
tz_str_to_seconds (const char *str, const char *str_end, int *seconds, const char **str_next, const bool is_offset)
                                                              ^
src/base/tz_support.c:4586:45: style:inconclusive: Function 'tz_resolve_os_timezone' argument 2 names different: declaration 'buf_size' definition 'buf_len'. [funcArgNamesDifferent]
tz_resolve_os_timezone (char *timezone, int buf_len)
                                            ^
src/base/tz_support.h:202:58: note: Function 'tz_resolve_os_timezone' argument 2 names different: declaration 'buf_size' definition 'buf_len'.
  extern int tz_resolve_os_timezone (char *timezone, int buf_size);
                                                         ^
src/base/tz_support.c:4586:45: note: Function 'tz_resolve_os_timezone' argument 2 names different: declaration 'buf_size' definition 'buf_len'.
tz_resolve_os_timezone (char *timezone, int buf_len)
                                            ^
src/base/tz_support.c:3033:9: style: Local variable 'prev_rule_save_time' shadows outer variable [shadowVariable]
    int prev_rule_save_time = 0;
        ^
src/base/tz_support.c:2975:8: note: Shadowed declaration
   int prev_rule_save_time = 0;
       ^
src/base/tz_support.c:3033:9: note: Shadow variable
    int prev_rule_save_time = 0;
        ^
src/base/tz_support.c:3167:8: style: Local variable 'save_time' shadows outer variable [shadowVariable]
   int save_time = 0;
       ^
src/base/tz_support.c:2835:7: note: Shadowed declaration
  int save_time = 0, src_offset_curr_off_rule = 0;
      ^
src/base/tz_support.c:3167:8: note: Shadow variable
   int save_time = 0;
       ^
src/base/tz_support.c:3209:20: style: Local variable 'date_diff' shadows outer variable [shadowVariable]
       full_date_t date_diff;
                   ^
src/base/tz_support.c:3097:19: note: Shadowed declaration
      full_date_t date_diff;
                  ^
src/base/tz_support.c:3209:20: note: Shadow variable
       full_date_t date_diff;
                   ^
src/base/tz_support.c:3211:12: style: Local variable 'add_save_time' shadows outer variable [shadowVariable]
       int add_save_time = 0;
           ^
src/base/tz_support.c:3169:47: note: Shadowed declaration
   int ds_rule_time_offset_curr_off_rule = 0, add_save_time = 0;
                                              ^
src/base/tz_support.c:3211:12: note: Shadow variable
       int add_save_time = 0;
           ^
src/base/tz_support.c:3212:12: style: Local variable 'year_to_apply_rule' shadows outer variable [shadowVariable]
       int year_to_apply_rule;
           ^
src/base/tz_support.c:3101:11: note: Shadowed declaration
      int year_to_apply_rule = 0;
          ^
src/base/tz_support.c:3212:12: note: Shadow variable
       int year_to_apply_rule;
           ^
src/base/tz_support.c:4938:9: style: Local variable 'tz_Lib_handle' shadows outer variable [shadowVariable]
  void *tz_Lib_handle = NULL;
        ^
src/base/tz_support.c:110:14: note: Shadowed declaration
static void *tz_Lib_handle = NULL;
             ^
src/base/tz_support.c:4938:9: note: Shadow variable
  void *tz_Lib_handle = NULL;
        ^
src/base/tz_support.c:1112:18: style: Variable 'name_index' is assigned a value that is never used. [unreadVariable]
  int name_index = -1;
                 ^
src/base/tz_support.c:1252:13: style: Variable 'zone_str' is assigned a value that is never used. [unreadVariable]
   zone_str = dst_str_end;
            ^
src/base/tz_support.c:2654:18: style: Variable 'err_status' is assigned a value that is never used. [unreadVariable]
  int err_status = NO_ERROR;
                 ^
src/base/tz_support.c:4216:14: style: Variable 'offset' is assigned a value that is never used. [unreadVariable]
  int offset = 0;
             ^
src/base/tz_support.c:4540:11: style: Variable 'mid' is assigned a value that is never used. [unreadVariable]
  int mid = 0;
          ^
src/base/tz_support.c:284:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char err_msg[512 + PATH_MAX];
^
src/base/tz_support.c:340:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char lib_file[PATH_MAX] = { 0 };
^
src/base/tz_support.c:347:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  envvar_libdir_file (lib_file, PATH_MAX, LIB_TZ_NAME);
^
src/base/tz_support.c:4676:17: style: The scope of the variable 'worker_thread_p' can be reduced. [variableScope]
  THREAD_ENTRY *worker_thread_p;
                ^
src/base/uca_support.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 50 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/base/uca_support.c:432:12: style: Local variable 'val' shadows outer variable [shadowVariable]
       int val;
           ^
src/base/uca_support.c:303:11: note: Shadowed declaration
      int val;
          ^
src/base/uca_support.c:432:12: note: Shadow variable
       int val;
           ^
src/base/uca_support.c:928:8: style: Local variable 'er_msg' shadows outer function [shadowFunction]
  char er_msg[ERR_MSG_SIZE];
       ^
src/base/error_manager.h:202:22: note: Shadowed declaration
  extern const char *er_msg (void);
                     ^
src/base/uca_support.c:928:8: note: Shadow variable
  char er_msg[ERR_MSG_SIZE];
       ^
src/base/uca_support.c:1923:20: style: Local variable 'cp' shadows outer variable [shadowVariable]
      unsigned int cp;
                   ^
src/base/uca_support.c:1796:7: note: Shadowed declaration
  int cp;
      ^
src/base/uca_support.c:1923:20: note: Shadow variable
      unsigned int cp;
                   ^
src/base/uca_support.c:136:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char prev_file_path[PATH_MAX];
^
src/base/uca_support.c:575:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char ducet_file_path[PATH_MAX];
^
src/base/unicode_support.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 49 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/base/unicode_support.c:520:15: style: Condition 'str_p!=NULL' is always true [knownConditionTrueFalse]
    if (str_p != NULL)
              ^
src/base/unicode_support.c:608:19: style: Condition 'max_letters>0' is always true [knownConditionTrueFalse]
  if (max_letters > 0)
                  ^
src/base/unicode_support.c:602:19: note: Assuming that condition 'max_letters<=0' is not redundant
  if (max_letters <= 0 || max_letters > MAX_UNICODE_CHARS)
                  ^
src/base/unicode_support.c:608:19: note: Condition 'max_letters>0' is always true
  if (max_letters > 0)
                  ^
src/base/unicode_support.c:452:9: warning: Either the condition 'str_p!=NULL' is redundant or there is possible null pointer dereference: str_p. [nullPointerRedundantCheck]
   char str_p[UNICODE_FILE_LINE_SIZE];
        ^
src/base/unicode_support.c:520:15: note: Assuming that condition 'str_p!=NULL' is not redundant
    if (str_p != NULL)
              ^
src/base/unicode_support.c:452:9: note: Null pointer dereference
   char str_p[UNICODE_FILE_LINE_SIZE];
        ^
src/base/unicode_support.c:456:12: warning: Either the condition 'str_p!=NULL' is redundant or there is possible null pointer dereference: str_p. [nullPointerRedundantCheck]
   strcpy (str_p, s);
           ^
src/base/unicode_support.c:520:15: note: Assuming that condition 'str_p!=NULL' is not redundant
    if (str_p != NULL)
              ^
src/base/unicode_support.c:456:12: note: Null pointer dereference
   strcpy (str_p, s);
           ^
src/base/unicode_support.c:515:9: warning: Either the condition 'str_p!=NULL' is redundant or there is possible null pointer dereference: str_p. [nullPointerRedundantCheck]
    if (str_p[0] == ';' || str_p[0] == '<')
        ^
src/base/unicode_support.c:520:15: note: Assuming that condition 'str_p!=NULL' is not redundant
    if (str_p != NULL)
              ^
src/base/unicode_support.c:515:9: note: Null pointer dereference
    if (str_p[0] == ';' || str_p[0] == '<')
        ^
src/base/unicode_support.c:976:6: style: Variable 'uc' is reassigned a value before the old one has been used. [redundantAssignment]
  uc = &(unicode_data[cp]);
     ^
src/base/unicode_support.c:970:6: note: uc is assigned
  uc = &(unicode_data[cp]);
     ^
src/base/unicode_support.c:976:6: note: uc is overwritten
  uc = &(unicode_data[cp]);
     ^
src/base/unicode_support.c:1362:7: style: The scope of the variable 'bytes_read' can be reduced. [variableScope]
  int bytes_read, decomp_index;
      ^
src/base/unicode_support.c:1362:19: style: The scope of the variable 'decomp_index' can be reduced. [variableScope]
  int bytes_read, decomp_index;
                  ^
src/base/unicode_support.c:1363:16: style: The scope of the variable 'cp' can be reduced. [variableScope]
  unsigned int cp;
               ^
src/base/unicode_support.c:914:11: style: Local variable 'mapping_start' shadows outer variable [shadowVariable]
      int mapping_start = 0;
          ^
src/base/unicode_support.c:717:7: note: Shadowed declaration
  int mapping_start, mapping_count;
      ^
src/base/unicode_support.c:914:11: note: Shadow variable
      int mapping_start = 0;
          ^
src/base/unicode_support.c:915:11: style: Local variable 'mapping_count' shadows outer variable [shadowVariable]
      int mapping_count = 0;
          ^
src/base/unicode_support.c:717:22: note: Shadowed declaration
  int mapping_start, mapping_count;
                     ^
src/base/unicode_support.c:915:11: note: Shadow variable
      int mapping_count = 0;
          ^
src/base/unicode_support.c:78:9: style: struct member 'CANONICAL_COMBINING_CLASS::std_val' is never used. [unusedStructMember]
  char *std_val;  /* Standard value as defined by Unicode Consortium */
        ^
src/base/unicode_support.c:1083:18: style: Variable 'byte_count' is assigned a value that is never used. [unreadVariable]
      byte_count = 0;
                 ^
src/base/unicode_support.c:1182:20: style: Variable 'match_found' is assigned a value that is never used. [unreadVariable]
  bool match_found = false, composition_found;
                   ^
src/base/unicode_support.c:114:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static char last_unicode_file[PATH_MAX] = { 0 };
^
src/base/unicode_support.c:139:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char unicode_file[PATH_MAX];
^
src/base/util_func.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 47 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/base/util_func.c:266:7: error: Common realloc mistake: 'r' nulled but not freed upon failure [memleakOnRealloc]
      r = (char **) realloc (r, sizeof (char *) * (count + 1));
      ^
src/base/util_func.c:79:19: style: The scope of the variable 'g' can be reduced. [variableScope]
  unsigned int h, g;
                  ^
src/base/util_func.c:244:16: style: The scope of the variable 'v' can be reduced. [variableScope]
  char *save, *v;
               ^
src/base/util_func.c:533:31: style: The scope of the variable 'str_len' can be reduced. [variableScope]
  size_t remained_buf_length, str_len;
                              ^
src/base/util_func.c:762:7: style: The scope of the variable 'compare' can be reduced. [variableScope]
  int compare = 0;
      ^
src/base/util_func.c:764:15: style: The scope of the variable 'elem' can be reduced. [variableScope]
  const void *elem;
              ^
src/base/util_func.c:762:15: style: Variable 'compare' is assigned a value that is never used. [unreadVariable]
  int compare = 0;
              ^
src/base/util_func.c:54:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static char util_Log_filename_buf[PATH_MAX];
^
src/base/util_func.c:108:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char path1[PATH_MAX], path2[PATH_MAX];
^
src/base/util_func.c:587:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      envvar_logdir_file (util_Log_filename, PATH_MAX, UTIL_LOG_FILENAME);
^
src/base/util_func.c:692:0: information: Skipping configuration 'PATH_MAX;WINDOWS' since the value of 'PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char backup_file[PATH_MAX];
^
src/base/variable_string.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 47 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/base/xml_parser.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 41 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/base/xml_parser.c:383:10: warning: Either the condition 'xml_node!=NULL' is redundant or there is possible null pointer dereference: xml_node. [nullPointerRedundantCheck]
  while (xml_node->def->depth < new_elem_def->depth)
         ^
src/base/xml_parser.c:400:20: note: Assuming that condition 'xml_node!=NULL' is not redundant
  assert (xml_node != NULL);
                   ^
src/base/xml_parser.c:383:10: note: Null pointer dereference
  while (xml_node->def->depth < new_elem_def->depth)
         ^
src/base/xml_parser.c:701:36: warning: Either the condition 'el!=NULL' is redundant or there is possible null pointer dereference: el. [nullPointerRedundantCheck]
      ELEM_START_FUNC start_func = START_FUNC (el);
                                   ^
src/base/xml_parser.c:705:18: note: Assuming that condition 'el!=NULL' is not redundant
      assert (el != NULL);
                 ^
src/base/xml_parser.c:701:36: note: Null pointer dereference
      ELEM_START_FUNC start_func = START_FUNC (el);
                                   ^
src/base/xml_parser.c:702:34: warning: Either the condition 'el!=NULL' is redundant or there is possible null pointer dereference: el. [nullPointerRedundantCheck]
      ELEM_DATA_FUNC data_func = DATA_FUNC (el);
                                 ^
src/base/xml_parser.c:705:18: note: Assuming that condition 'el!=NULL' is not redundant
      assert (el != NULL);
                 ^
src/base/xml_parser.c:702:34: note: Null pointer dereference
      ELEM_DATA_FUNC data_func = DATA_FUNC (el);
                                 ^
src/base/xml_parser.c:645:7: style: The scope of the variable 'el_order' can be reduced. [variableScope]
  int el_order;
      ^
src/base/xml_parser.c:1002:41: style:inconclusive: Function 'xml_create_subparser' argument 1 names different: declaration 'data' definition 'pd'. [funcArgNamesDifferent]
xml_create_subparser (XML_PARSER_DATA * pd, char *new_file)
                                        ^
src/base/xml_parser.h:142:60: note: Function 'xml_create_subparser' argument 1 names different: declaration 'data' definition 'pd'.
  XML_PARSER_DATA *xml_create_subparser (XML_PARSER_DATA * data, char *new_file);
                                                           ^
src/base/xml_parser.c:1002:41: note: Function 'xml_create_subparser' argument 1 names different: declaration 'data' definition 'pd'.
xml_create_subparser (XML_PARSER_DATA * pd, char *new_file)
                                        ^
src/broker/broker.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 32 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/broker/broker.c:3141:25: style: Variable 'client_fd' is reassigned a value before the old one has been used. [redundantAssignment]
      while ((client_fd = broker_get_readable_proxy_conn (&rset)) != INVALID_SOCKET)
                        ^
src/broker/broker.c:3137:18: note: client_fd is assigned
       client_fd = INVALID_SOCKET;
                 ^
src/broker/broker.c:3141:25: note: client_fd is overwritten
      while ((client_fd = broker_get_readable_proxy_conn (&rset)) != INVALID_SOCKET)
                        ^
src/broker/broker.c:853:13: style: The scope of the variable 'i' can be reduced. [variableScope]
   int pid, i;
            ^
src/broker/broker.c:1738:28: style: The scope of the variable 'read_len' can be reduced. [variableScope]
  int total_read_size = 0, read_len;
                           ^
src/broker/broker.c:1988:7: style: The scope of the variable 'server_state' can be reduced. [variableScope]
  int server_state;
      ^
src/broker/broker.c:2343:8: style: The scope of the variable 'log_filepath' can be reduced. [variableScope]
  char log_filepath[BROKER_PATH_MAX];
       ^
src/broker/broker.c:2370:9: style: The scope of the variable 'fp' can be reduced. [variableScope]
  FILE *fp;
        ^
src/broker/broker.c:3101:12: style: The scope of the variable 'select_ret' can be reduced. [variableScope]
  int ret, select_ret;
           ^
src/broker/broker.c:1940:26: style:inconclusive: Function 'cas_monitor_thr_f' argument 1 names different: declaration 'arg' definition 'ar'. [funcArgNamesDifferent]
cas_monitor_thr_f (void *ar)
                         ^
src/broker/broker.c:248:45: note: Function 'cas_monitor_thr_f' argument 1 names different: declaration 'arg' definition 'ar'.
static THREAD_FUNC cas_monitor_thr_f (void *arg);
                                            ^
src/broker/broker.c:1940:26: note: Function 'cas_monitor_thr_f' argument 1 names different: declaration 'arg' definition 'ar'.
cas_monitor_thr_f (void *ar)
                         ^
src/broker/broker.c:2179:25: style:inconclusive: Function 'hang_check_thr_f' argument 1 names different: declaration 'arg' definition 'ar'. [funcArgNamesDifferent]
hang_check_thr_f (void *ar)
                        ^
src/broker/broker.c:249:44: note: Function 'hang_check_thr_f' argument 1 names different: declaration 'arg' definition 'ar'.
static THREAD_FUNC hang_check_thr_f (void *arg);
                                           ^
src/broker/broker.c:2179:25: note: Function 'hang_check_thr_f' argument 1 names different: declaration 'arg' definition 'ar'.
hang_check_thr_f (void *ar)
                        ^
src/broker/broker.c:2489:26: style:inconclusive: Function 'psize_check_thr_f' argument 1 names different: declaration 'arg' definition 'ar'. [funcArgNamesDifferent]
psize_check_thr_f (void *ar)
                         ^
src/broker/broker.c:247:45: note: Function 'psize_check_thr_f' argument 1 names different: declaration 'arg' definition 'ar'.
static THREAD_FUNC psize_check_thr_f (void *arg);
                                            ^
src/broker/broker.c:2489:26: note: Function 'psize_check_thr_f' argument 1 names different: declaration 'arg' definition 'ar'.
psize_check_thr_f (void *ar)
                         ^
src/broker/broker.c:1756:7: style: Local variable 'sock_addr_len' shadows outer variable [shadowVariable]
  int sock_addr_len;
      ^
src/broker/broker.c:302:12: note: Shadowed declaration
static int sock_addr_len;
           ^
src/broker/broker.c:1756:7: note: Shadow variable
  int sock_addr_len;
      ^
src/broker/broker.c:1760:22: style: Local variable 'sock_addr' shadows outer variable [shadowVariable]
  struct sockaddr_un sock_addr;
                     ^
src/broker/broker.c:301:27: note: Shadowed declaration
static struct sockaddr_in sock_addr;
                          ^
src/broker/broker.c:1760:22: note: Shadow variable
  struct sockaddr_un sock_addr;
                     ^
src/broker/broker.c:2183:18: style: Local variable 'br_info_p' shadows outer variable [shadowVariable]
  T_BROKER_INFO *br_info_p;
                 ^
src/broker/broker.c:312:23: note: Shadowed declaration
static T_BROKER_INFO *br_info_p = NULL;
                      ^
src/broker/broker.c:2183:18: note: Shadow variable
  T_BROKER_INFO *br_info_p;
                 ^
src/broker/broker.c:3076:24: style: Variable 'tmp_num_busy_uts' is assigned a value that is never used. [unreadVariable]
      tmp_num_busy_uts = 0;
                       ^
src/broker/broker_access_list.c:90:4: error: Common realloc mistake: 'acl' nulled but not freed upon failure [memleakOnRealloc]
   acl = (T_IP *) realloc (acl, sizeof (T_IP) * num_acl);
   ^
src/broker/broker_access_list.c:45:9: style: The scope of the variable 'p' can be reduced. [variableScope]
  char *p;
        ^
src/broker/broker_access_list.c:153:7: style: The scope of the variable 'val' can be reduced. [variableScope]
  int val;
      ^
src/broker/broker_access_list.c:154:8: style: The scope of the variable 'end_char' can be reduced. [variableScope]
  char end_char;
       ^
src/broker/broker_acl.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/broker/broker_acl.c:79:42: style: Condition 'shm_br->access_control_file[0]!='\0'' is always true [knownConditionTrueFalse]
      if (shm_br->access_control_file[0] != '\0')
                                         ^
src/broker/broker_acl.c:59:64: note: Assuming that condition 'shm_br->access_control_file[0]!='\0'' is not redundant
  if (shm_br->access_control && shm_br->access_control_file[0] != '\0')
                                                               ^
src/broker/broker_acl.c:73:44: note: Assuming condition is false
      if (uw_sem_init (&shm_as_p->acl_sem) < 0)
                                           ^
src/broker/broker_acl.c:79:42: note: Condition 'shm_br->access_control_file[0]!='\0'' is always true
      if (shm_br->access_control_file[0] != '\0')
                                         ^
src/broker/broker_acl.c:327:4: warning: %d in format string (no. 2) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
   sprintf (admin_err_msg, "Error while loading ip info file(%s)" " - %d line is too long", filename, ln);
   ^
src/broker/broker_acl.c:345:4: warning: %d in format string (no. 2) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
   sprintf (admin_err_msg, "Error while loading ip info file(%s) line(%d)" " - max ip count(%d) exceeded.",
   ^
src/broker/broker_acl.c:357:8: warning: %d in format string (no. 2) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
       sprintf (admin_err_msg, "Error while loading ip info file(%s) line(%d)", filename, ln);
       ^
src/broker/broker_acl.c:373:5: warning: %d in format string (no. 2) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
    sprintf (admin_err_msg, "Error while loading ip info file(%s) line(%d)", filename, ln);
    ^
src/broker/broker_acl.c:383:8: warning: %d in format string (no. 2) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
       sprintf (admin_err_msg, "Error while loading ip info file(%s) line(%d)", filename, ln);
       ^
src/broker/broker_acl.c:53:45: style:inconclusive: Function 'access_control_set_shm' argument 1 names different: declaration 'shm_as_cp' definition 'shm_as_p'. [funcArgNamesDifferent]
access_control_set_shm (T_SHM_APPL_SERVER * shm_as_p, T_BROKER_INFO * br_info_p, T_SHM_BROKER * shm_br,
                                            ^
src/broker/broker_acl.h:31:56: note: Function 'access_control_set_shm' argument 1 names different: declaration 'shm_as_cp' definition 'shm_as_p'.
extern int access_control_set_shm (T_SHM_APPL_SERVER * shm_as_cp, T_BROKER_INFO * br_info_p, T_SHM_BROKER * shm_br,
                                                       ^
src/broker/broker_acl.c:53:45: note: Function 'access_control_set_shm' argument 1 names different: declaration 'shm_as_cp' definition 'shm_as_p'.
access_control_set_shm (T_SHM_APPL_SERVER * shm_as_p, T_BROKER_INFO * br_info_p, T_SHM_BROKER * shm_br,
                                            ^
src/broker/broker_acl.c:118:16: style: Local variable 'access_info' shadows outer variable [shadowVariable]
  ACCESS_INFO *access_info;
               ^
src/broker/broker_acl.c:39:13: note: Shadowed declaration
ACCESS_INFO access_info[ACL_MAX_ITEM_COUNT];
            ^
src/broker/broker_acl.c:118:16: note: Shadow variable
  ACCESS_INFO *access_info;
               ^
src/broker/broker_admin.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/broker/broker_admin.c:79:0: information: Skipping configuration 'BROKER_PATH_MAX' since the value of 'BROKER_PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char admin_log_file[BROKER_PATH_MAX];
^
src/broker/broker_admin.c:80:0: information: Skipping configuration 'BROKER_PATH_MAX' since the value of 'BROKER_PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char acl_file[BROKER_PATH_MAX];
^
src/broker/broker_admin_pub.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 25 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/broker/broker_admin_pub.c:1454:22: style: The if condition is the same as the previous if condition [duplicateCondition]
  if (full_info_flag == true)
                     ^
src/broker/broker_admin_pub.c:1439:22: note: First condition
  if (full_info_flag == true)
                     ^
src/broker/broker_admin_pub.c:1454:22: note: Second condition
  if (full_info_flag == true)
                     ^
src/broker/broker_admin_pub.c:1478:22: style: The if condition is the same as the previous if condition [duplicateCondition]
  if (full_info_flag == true)
                     ^
src/broker/broker_admin_pub.c:1454:22: note: First condition
  if (full_info_flag == true)
                     ^
src/broker/broker_admin_pub.c:1478:22: note: Second condition
  if (full_info_flag == true)
                     ^
src/broker/broker_admin_pub.c:426:7: style: Condition 'shm_br' is always true [knownConditionTrueFalse]
  if (shm_br)
      ^
src/broker/broker_admin_pub.c:303:14: note: Assuming that condition 'shm_br==NULL' is not redundant
  if (shm_br == NULL)
             ^
src/broker/broker_admin_pub.c:426:7: note: Condition 'shm_br' is always true
  if (shm_br)
      ^
src/broker/broker_admin_pub.c:843:59: style: Condition 'shm_appl_server->as_info[as_index].service_flag==SERVICE_OFF_ACK' is always false [knownConditionTrueFalse]
      if (shm_appl_server->as_info[as_index].service_flag == SERVICE_OFF_ACK)
                                                          ^
src/broker/broker_admin_pub.c:839:51: note: shm_appl_server->as_info[as_index].service_flag is assigned value 0
  shm_appl_server->as_info[as_index].service_flag = SERVICE_OFF;
                                                  ^
src/broker/broker_admin_pub.c:843:59: note: Condition 'shm_appl_server->as_info[as_index].service_flag==SERVICE_OFF_ACK' is always false
      if (shm_appl_server->as_info[as_index].service_flag == SERVICE_OFF_ACK)
                                                          ^
src/broker/broker_admin_pub.c:3555:2: error: Common realloc mistake: 'env' nulled but not freed upon failure [memleakOnRealloc]
 env = (char **) realloc (env, sizeof (char *) * (num + 1));
 ^
src/broker/broker_admin_pub.c:1068:8: style: The scope of the variable 'reset_next' can be reduced. [variableScope]
  bool reset_next = FALSE;
       ^
src/broker/broker_admin_pub.c:1069:10: style: The scope of the variable 'j' can be reduced. [variableScope]
  int i, j, k, as_index, br_index;
         ^
src/broker/broker_admin_pub.c:1069:13: style: The scope of the variable 'k' can be reduced. [variableScope]
  int i, j, k, as_index, br_index;
            ^
src/broker/broker_admin_pub.c:1069:16: style: The scope of the variable 'as_index' can be reduced. [variableScope]
  int i, j, k, as_index, br_index;
               ^
src/broker/broker_admin_pub.c:1073:17: style: The scope of the variable 'proxy_info_p' can be reduced. [variableScope]
  T_PROXY_INFO *proxy_info_p;
                ^
src/broker/broker_admin_pub.c:2512:9: style: The scope of the variable 'p' can be reduced. [variableScope]
  char *p;
        ^
src/broker/broker_admin_pub.c:3306:17: style: The scope of the variable 'proxy_info_p' can be reduced. [variableScope]
  T_PROXY_INFO *proxy_info_p;
                ^
src/broker/broker_admin_pub.c:3639:7: style: The scope of the variable 'proxy_index' can be reduced. [variableScope]
  int proxy_index;
      ^
src/broker/broker_admin_pub.c:3792:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/broker/broker_admin_pub.c:3870:7: style: The scope of the variable 'shard_index' can be reduced. [variableScope]
  int shard_index;
      ^
src/broker/broker_admin_pub.c:3908:7: style: The scope of the variable 'proxy_index' can be reduced. [variableScope]
  int proxy_index;
      ^
src/broker/broker_admin_pub.c:3154:82: style:inconclusive: Function 'as_activate' argument 3 names different: declaration 'shm_as_p' definition 'shm_appl'. [funcArgNamesDifferent]
as_activate (T_SHM_BROKER * shm_br, T_BROKER_INFO * br_info, T_SHM_APPL_SERVER * shm_appl, T_APPL_SERVER_INFO * as_info,
                                                                                 ^
src/broker/broker_admin_pub.c:139:94: note: Function 'as_activate' argument 3 names different: declaration 'shm_as_p' definition 'shm_appl'.
static void as_activate (T_SHM_BROKER * shm_br, T_BROKER_INFO * br_info, T_SHM_APPL_SERVER * shm_as_p,
                                                                                             ^
src/broker/broker_admin_pub.c:3154:82: note: Function 'as_activate' argument 3 names different: declaration 'shm_as_p' definition 'shm_appl'.
as_activate (T_SHM_BROKER * shm_br, T_BROKER_INFO * br_info, T_SHM_APPL_SERVER * shm_appl, T_APPL_SERVER_INFO * as_info,
                                                                                 ^
src/broker/broker_admin_pub.c:3154:113: style:inconclusive: Function 'as_activate' argument 4 names different: declaration 'as_info_p' definition 'as_info'. [funcArgNamesDifferent]
as_activate (T_SHM_BROKER * shm_br, T_BROKER_INFO * br_info, T_SHM_APPL_SERVER * shm_appl, T_APPL_SERVER_INFO * as_info,
                                                                                                                ^
src/broker/broker_admin_pub.c:140:26: note: Function 'as_activate' argument 4 names different: declaration 'as_info_p' definition 'as_info'.
    T_APPL_SERVER_INFO * as_info_p, int as_idex, char **env, int env_num);
                         ^
src/broker/broker_admin_pub.c:3154:113: note: Function 'as_activate' argument 4 names different: declaration 'as_info_p' definition 'as_info'.
as_activate (T_SHM_BROKER * shm_br, T_BROKER_INFO * br_info, T_SHM_APPL_SERVER * shm_appl, T_APPL_SERVER_INFO * as_info,
                                                                                                                ^
src/broker/broker_admin_pub.c:3155:11: style:inconclusive: Function 'as_activate' argument 5 names different: declaration 'as_idex' definition 'as_index'. [funcArgNamesDifferent]
      int as_index, char **env, int env_num)
          ^
src/broker/broker_admin_pub.c:140:41: note: Function 'as_activate' argument 5 names different: declaration 'as_idex' definition 'as_index'.
    T_APPL_SERVER_INFO * as_info_p, int as_idex, char **env, int env_num);
                                        ^
src/broker/broker_admin_pub.c:3155:11: note: Function 'as_activate' argument 5 names different: declaration 'as_idex' definition 'as_index'.
      int as_index, char **env, int env_num)
          ^
src/broker/broker_admin_pub.c:255:16: style: Local variable 'shm_proxy_p' shadows outer variable [shadowVariable]
  T_SHM_PROXY *shm_proxy_p = NULL;
               ^
src/broker/broker_admin_pub.c:109:14: note: Shadowed declaration
T_SHM_PROXY *shm_proxy_p = NULL;
             ^
src/broker/broker_admin_pub.c:255:16: note: Shadow variable
  T_SHM_PROXY *shm_proxy_p = NULL;
               ^
src/broker/broker_admin_pub.c:867:16: style: Local variable 'shm_proxy_p' shadows outer variable [shadowVariable]
  T_SHM_PROXY *shm_proxy_p = NULL;
               ^
src/broker/broker_admin_pub.c:109:14: note: Shadowed declaration
T_SHM_PROXY *shm_proxy_p = NULL;
             ^
src/broker/broker_admin_pub.c:867:16: note: Shadow variable
  T_SHM_PROXY *shm_proxy_p = NULL;
               ^
src/broker/broker_admin_pub.c:1534:16: style: Local variable 'shm_proxy_p' shadows outer variable [shadowVariable]
  T_SHM_PROXY *shm_proxy_p = NULL;
               ^
src/broker/broker_admin_pub.c:109:14: note: Shadowed declaration
T_SHM_PROXY *shm_proxy_p = NULL;
             ^
src/broker/broker_admin_pub.c:1534:16: note: Shadow variable
  T_SHM_PROXY *shm_proxy_p = NULL;
               ^
src/broker/broker_admin_pub.c:2851:16: style: Local variable 'shm_proxy_p' shadows outer variable [shadowVariable]
  T_SHM_PROXY *shm_proxy_p = NULL;
               ^
src/broker/broker_admin_pub.c:109:14: note: Shadowed declaration
T_SHM_PROXY *shm_proxy_p = NULL;
             ^
src/broker/broker_admin_pub.c:2851:16: note: Shadow variable
  T_SHM_PROXY *shm_proxy_p = NULL;
               ^
src/broker/broker_admin_pub.c:3067:16: style: Local variable 'shm_proxy_p' shadows outer variable [shadowVariable]
  T_SHM_PROXY *shm_proxy_p = NULL;
               ^
src/broker/broker_admin_pub.c:109:14: note: Shadowed declaration
T_SHM_PROXY *shm_proxy_p = NULL;
             ^
src/broker/broker_admin_pub.c:3067:16: note: Shadow variable
  T_SHM_PROXY *shm_proxy_p = NULL;
               ^
src/broker/broker_admin_pub.c:1435:11: style: Variable 'buf_len' is assigned a value that is never used. [unreadVariable]
  buf_len += sprintf (buf + buf_len, "\n");
          ^
src/broker/broker_admin_pub.c:1449:15: style: Variable 'buf_len' is assigned a value that is never used. [unreadVariable]
      buf_len += sprintf (buf + buf_len, "\n");
              ^
src/broker/broker_admin_pub.c:1473:15: style: Variable 'buf_len' is assigned a value that is never used. [unreadVariable]
      buf_len += sprintf (buf + buf_len, "\t%5d ~ %5d : %10d\n", range_p->min, range_p->max, range_p->shard_id);
              ^
src/broker/broker_admin_pub.c:1503:16: style: Variable 'buf_len' is assigned a value that is never used. [unreadVariable]
       buf_len += sprintf (buf + buf_len, "%24s ", shm_conn_p->shard_conn[i].db_conn_info);
               ^
src/broker/broker_admin_pub.c:2727:9: style: Variable 'len' is assigned a value that is never used. [unreadVariable]
    len += sprintf (line_buf + len, "%25.25s", str);
        ^
src/broker/broker_admin_pub.c:3310:11: style: Variable 'res' is assigned a value that is never used. [unreadVariable]
  int res = 0;
          ^
src/broker/broker_admin_pub.c:3599:13: style: The scope of the variable 'p' can be reduced. [variableScope]
      char *p;
            ^
src/broker/broker_admin_pub.c:3698:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/broker/broker_admin_pub.c:3753:7: style: The scope of the variable 'proxy_index' can be reduced. [variableScope]
  int proxy_index;
      ^
src/broker/broker_admin_pub.c:3979:7: warning: %d in format string (no. 3) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
      sprintf (admin_err_msg, "%s (current : %d, required : %d)\n",
      ^
src/broker/broker_admin_pub.c:3987:7: warning: %d in format string (no. 3) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
      sprintf (admin_err_msg, "%s (current : %d, required : %d)\n",
      ^
src/broker/broker_admin_so.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/broker/broker_admin_so.c:872:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/broker/broker_admin_so.c:989:54: style:inconclusive: Function 'uc_del_cas_log' argument 3 names different: declaration 'errmsg' definition 'err_msg'. [funcArgNamesDifferent]
uc_del_cas_log (const char *br_name, int asid, char *err_msg)
                                                     ^
src/broker/broker_admin_so.h:220:69: note: Function 'uc_del_cas_log' argument 3 names different: declaration 'errmsg' definition 'err_msg'.
DLL_EXPORT int uc_del_cas_log (const char *br_name, int asid, char *errmsg);
                                                                    ^
src/broker/broker_admin_so.c:989:54: note: Function 'uc_del_cas_log' argument 3 names different: declaration 'errmsg' definition 'err_msg'.
uc_del_cas_log (const char *br_name, int asid, char *err_msg)
                                                     ^
src/broker/broker_admin_so.c:1187:30: style:inconclusive: Function 'copy_job_info' argument 1 names different: declaration 'job_info' definition 'ret_job_info'. [funcArgNamesDifferent]
copy_job_info (T_JOB_INFO ** ret_job_info, T_MAX_HEAP_NODE * job_q)
                             ^
src/broker/broker_admin_so.c:144:41: note: Function 'copy_job_info' argument 1 names different: declaration 'job_info' definition 'ret_job_info'.
static int copy_job_info (T_JOB_INFO ** job_info, T_MAX_HEAP_NODE * job_q);
                                        ^
src/broker/broker_admin_so.c:1187:30: note: Function 'copy_job_info' argument 1 names different: declaration 'job_info' definition 'ret_job_info'.
copy_job_info (T_JOB_INFO ** ret_job_info, T_MAX_HEAP_NODE * job_q)
                             ^
src/broker/broker_changer.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 20 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/broker/broker_config.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 23 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/broker/broker_error.c:109:43: style:inconclusive: Function 'uw_get_error_message' argument 2 names different: declaration 'os_errno' definition 'os_error_code'. [funcArgNamesDifferent]
uw_get_error_message (int error_code, int os_error_code)
                                          ^
src/broker/broker_error.h:93:62: note: Function 'uw_get_error_message' argument 2 names different: declaration 'os_errno' definition 'os_error_code'.
extern const char *uw_get_error_message (int error_code, int os_errno);
                                                             ^
src/broker/broker_error.c:109:43: note: Function 'uw_get_error_message' argument 2 names different: declaration 'os_errno' definition 'os_error_code'.
uw_get_error_message (int error_code, int os_error_code)
                                          ^
src/broker/broker_error.c:156:20: style:inconclusive: Function 'uw_os_err_msg' argument 1 names different: declaration 'err_code' definition 'os_err_code'. [funcArgNamesDifferent]
uw_os_err_msg (int os_err_code, char *err_msg)
                   ^
src/broker/broker_error.h:97:32: note: Function 'uw_os_err_msg' argument 1 names different: declaration 'err_code' definition 'os_err_code'.
extern void uw_os_err_msg (int err_code, char *err_msg);
                               ^
src/broker/broker_error.c:156:20: note: Function 'uw_os_err_msg' argument 1 names different: declaration 'err_code' definition 'os_err_code'.
uw_os_err_msg (int os_err_code, char *err_msg)
                   ^
src/broker/broker_filename.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/broker/broker_list.c:159:11: style: The scope of the variable 'del' can be reduced. [variableScope]
  T_LIST *del;
          ^
src/broker/broker_log_replay.c:191:3: warning: %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'. [invalidPrintfArgType_uint]
  snprintf (conn_url, sizeof (conn_url), "cci:cubrid:%s:%u:%s:::", host, broker_port, dbname);
  ^
src/broker/broker_log_replay.c:1076:7: style: Variable 'res' is reassigned a value before the old one has been used. [redundantAssignment]
  res = str_to_int32 (&sql_log_time, &endp, p, 10);
      ^
src/broker/broker_log_replay.c:1073:7: note: res is assigned
  res = str_to_int32 (&exec_time, &endp, start_p, 10);
      ^
src/broker/broker_log_replay.c:1076:7: note: res is overwritten
  res = str_to_int32 (&sql_log_time, &endp, p, 10);
      ^
src/broker/broker_log_replay.c:752:13: style: The scope of the variable 'res' can be reduced. [variableScope]
  int type, res;
            ^
src/broker/broker_log_replay.c:978:10: style: The scope of the variable 'bind_len' can be reduced. [variableScope]
  size_t bind_len;
         ^
src/broker/broker_log_replay.c:1159:7: style: The scope of the variable 'res' can be reduced. [variableScope]
  int res;
      ^
src/broker/broker_log_replay.c:1198:7: style: The scope of the variable 'res' can be reduced. [variableScope]
  int res = 0;
      ^
src/broker/broker_log_replay.c:530:21: style:inconclusive: Function 'log_prepare' argument 1 names different: declaration 'cci_err' definition 'cci_errfp'. [funcArgNamesDifferent]
log_prepare (FILE * cci_errfp, FILE * pass_sql, int con, char *sql_log, T_SQL_INFO * sql_info, T_SUMMARY_INFO * summary)
                    ^
src/broker/broker_log_replay.c:107:32: note: Function 'log_prepare' argument 1 names different: declaration 'cci_err' definition 'cci_errfp'.
static int log_prepare (FILE * cci_err, FILE * pass_sql, int con, char *sql_log, T_SQL_INFO * sql_info,
                               ^
src/broker/broker_log_replay.c:530:21: note: Function 'log_prepare' argument 1 names different: declaration 'cci_err' definition 'cci_errfp'.
log_prepare (FILE * cci_errfp, FILE * pass_sql, int con, char *sql_log, T_SQL_INFO * sql_info, T_SUMMARY_INFO * summary)
                    ^
src/broker/broker_log_replay.c:1065:22: style:inconclusive: Function 'make_sql_info' argument 1 names different: declaration 'info_buf' definition 'sql_info'. [funcArgNamesDifferent]
make_sql_info (char *sql_info, char *start_p, int diff_time, int buf_size)
                     ^
src/broker/broker_log_replay.c:121:35: note: Function 'make_sql_info' argument 1 names different: declaration 'info_buf' definition 'sql_info'.
static char *make_sql_info (char *info_buf, char *start_p, int diff_time, int buf_size);
                                  ^
src/broker/broker_log_replay.c:1065:22: note: Function 'make_sql_info' argument 1 names different: declaration 'info_buf' definition 'sql_info'.
make_sql_info (char *sql_info, char *start_p, int diff_time, int buf_size)
                     ^
src/broker/broker_log_replay.c:1394:77: style:inconclusive: Function 'print_result' argument 4 names different: declaration 'tmp_line_len_max' definition 'temp_line_len_max'. [funcArgNamesDifferent]
print_result (FILE * outfp, double max_diff_time, double min_diff_time, int temp_line_len_max)
                                                                            ^
src/broker/broker_log_replay.c:119:89: note: Function 'print_result' argument 4 names different: declaration 'tmp_line_len_max' definition 'temp_line_len_max'.
static void print_result (FILE * outfp, double max_diff_time, double min_diff_time, int tmp_line_len_max);
                                                                                        ^
src/broker/broker_log_replay.c:1394:77: note: Function 'print_result' argument 4 names different: declaration 'tmp_line_len_max' definition 'temp_line_len_max'.
print_result (FILE * outfp, double max_diff_time, double min_diff_time, int temp_line_len_max)
                                                                            ^
src/broker/broker_log_replay.c:825:11: style: Variable 'res' is assigned a value that is never used. [unreadVariable]
      res = cci_bind_param (req, bind_idx, CCI_A_TYPE_BIT, (void *) &(vptr), (T_CCI_U_TYPE) type, CCI_BIND_PTR);
          ^
src/broker/broker_log_replay.c:1076:7: style: Variable 'res' is assigned a value that is never used. [unreadVariable]
  res = str_to_int32 (&sql_log_time, &endp, p, 10);
      ^
src/broker/broker_log_replay.c:1198:11: style: Variable 'res' is assigned a value that is never used. [unreadVariable]
  int res = 0;
          ^
src/broker/broker_log_sql_list.c:136:23: style:inconclusive: Function 'sql_info_write' argument 1 names different: declaration 'sql_org' definition 'src_sql'. [funcArgNamesDifferent]
sql_info_write (char *src_sql, char *q_name, FILE * fp)
                      ^
src/broker/broker_log_sql_list.h:38:34: note: Function 'sql_info_write' argument 1 names different: declaration 'sql_org' definition 'src_sql'.
extern int sql_info_write (char *sql_org, char *q_name, FILE * fp);
                                 ^
src/broker/broker_log_sql_list.c:136:23: note: Function 'sql_info_write' argument 1 names different: declaration 'sql_org' definition 'src_sql'.
sql_info_write (char *src_sql, char *q_name, FILE * fp)
                      ^
src/broker/broker_log_top.c:825:8: style: The scope of the variable 'is_bind_value' can be reduced. [variableScope]
  char is_bind_value;
       ^
src/broker/broker_log_top.c:1055:7: style: The scope of the variable 'token_len' can be reduced. [variableScope]
  int token_len = 0;
      ^
src/broker/broker_log_top.c:1059:8: style: The scope of the variable 'need_copy_token' can be reduced. [variableScope]
  bool need_copy_token = true;
       ^
src/broker/broker_log_top.c:352:13: style: Variable 'error' is assigned a value that is never used. [unreadVariable]
  int error = 0;
            ^
src/broker/broker_log_top.c:903:15: style: Variable 'tuple_count' is assigned a value that is never used. [unreadVariable]
  tuple_count = val;
              ^
src/broker/broker_log_top.c:1055:17: style: Variable 'token_len' is assigned a value that is never used. [unreadVariable]
  int token_len = 0;
                ^
src/broker/broker_log_top.c:1059:24: style: Variable 'need_copy_token' is assigned a value that is never used. [unreadVariable]
  bool need_copy_token = true;
                       ^
src/broker/broker_log_top.c:370:11: warning: Size of pointer 'work_msg' used instead of size of its data. [pointerSize]
  memset (work_msg, 0, sizeof (T_WORK_MSG *) * num_thread);
          ^
src/broker/broker_log_top_tran.c:59:13: style: Variable 'error' is assigned a value that is never used. [unreadVariable]
  int error = 0;
            ^
src/broker/broker_log_util.c:226:8: warning: Either the condition 'len>(int)sizeof(size)' is redundant or the array 'size[256]' is accessed at index 256, which is out of bounds. [arrayIndexOutOfBoundsCond]
   size[len] = '\0';
       ^
src/broker/broker_log_util.c:219:15: note: Assuming that condition 'len>(int)sizeof(size)' is not redundant
      if (len > (int) sizeof (size))
              ^
src/broker/broker_log_util.c:226:8: note: Array index out of bounds
   size[len] = '\0';
       ^
src/broker/broker_log_util.c:257:8: style: The scope of the variable 'position' can be reduced. [variableScope]
  long position;
       ^
src/broker/broker_log_util.c:228:29: error: Uninitialized variable: size [uninitvar]
      *tot_val_size = atoi (size);
                            ^
src/broker/broker_log_util.c:296:9: style: Variable 'rlen' is assigned a value that is never used. [unreadVariable]
   rlen = fread ((void *) value, sizeof (char), info_size + tot_val_size, fp);
        ^
src/broker/broker_log_util.c:378:14: style: Variable 'result' is assigned a value that is never used. [unreadVariable]
  int result = 0;
             ^
src/broker/broker_monitor.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 26 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/broker/broker_monitor.c:1134:12: style: Condition 'shm_appl' is always true [knownConditionTrueFalse]
       if (shm_appl)
           ^
src/broker/broker_monitor.c:1098:17: note: Assuming that condition 'shm_appl==NULL' is not redundant
   if (shm_appl == NULL)
                ^
src/broker/broker_monitor.c:1134:12: note: Condition 'shm_appl' is always true
       if (shm_appl)
           ^
src/broker/broker_monitor.c:1359:7: warning: Either the condition 'if(shm_appl)' is redundant or there is possible null pointer dereference: shm_appl. [nullPointerRedundantCheck]
  if (shm_appl->shard_flag == OFF)
      ^
src/broker/broker_monitor.c:1758:10: note: Assuming that condition 'if(shm_appl)' is not redundant
      if (shm_appl)
         ^
src/broker/broker_monitor.c:1752:54: note: Calling function 'set_monitor_items', 3rd argument 'shm_appl' value is 0
      set_monitor_items (mnt_items_cur_p, br_info_p, shm_appl, shm_proxy_p, mnt_type);
                                                     ^
src/broker/broker_monitor.c:1359:7: note: Null pointer dereference
  if (shm_appl->shard_flag == OFF)
      ^
src/broker/broker_monitor.c:392:8: style: The scope of the variable 'out_buf' can be reduced. [variableScope]
  char out_buf[1024];
       ^
src/broker/broker_monitor.c:1277:68: style:inconclusive: Function 'set_monitor_items' argument 2 names different: declaration 'br_info' definition 'br_info_p'. [funcArgNamesDifferent]
set_monitor_items (BR_MONITORING_ITEM * mnt_items, T_BROKER_INFO * br_info_p, T_SHM_APPL_SERVER * shm_appl,
                                                                   ^
src/broker/broker_monitor.c:325:80: note: Function 'set_monitor_items' argument 2 names different: declaration 'br_info' definition 'br_info_p'.
static void set_monitor_items (BR_MONITORING_ITEM * mnt_items, T_BROKER_INFO * br_info, T_SHM_APPL_SERVER * shm_appl,
                                                                               ^
src/broker/broker_monitor.c:1277:68: note: Function 'set_monitor_items' argument 2 names different: declaration 'br_info' definition 'br_info_p'.
set_monitor_items (BR_MONITORING_ITEM * mnt_items, T_BROKER_INFO * br_info_p, T_SHM_APPL_SERVER * shm_appl,
                                                                   ^
src/broker/broker_monitor.c:2586:43: style:inconclusive: Function 'print_value' argument 2 names different: declaration 'value' definition 'value_p'. [funcArgNamesDifferent]
print_value (FIELD_NAME name, const void *value_p, FIELD_TYPE type)
                                          ^
src/broker/broker_monitor.c:341:55: note: Function 'print_value' argument 2 names different: declaration 'value' definition 'value_p'.
static void print_value (FIELD_NAME name, const void *value, FIELD_TYPE type);
                                                      ^
src/broker/broker_monitor.c:2586:43: note: Function 'print_value' argument 2 names different: declaration 'value' definition 'value_p'.
print_value (FIELD_NAME name, const void *value_p, FIELD_TYPE type)
                                          ^
src/broker/broker_monitor.c:522:11: style: Variable 'win' is assigned a value that is never used. [unreadVariable]
      win = initscr ();
          ^
src/broker/broker_monitor.c:932:11: style: Variable 'col_len' is assigned a value that is never used. [unreadVariable]
  col_len = 0;
          ^
src/broker/broker_monitor.c:2484:14: style: Variable 'buf_offset' is assigned a value that is never used. [unreadVariable]
  buf_offset = print_title (buf, buf_offset, FIELD_UNUSABLE_DATABASES, NULL);
             ^
src/broker/broker_monitor.c:1059:12: style: Unused variable: proc_info [unusedVariable]
  T_PSINFO proc_info;
           ^
src/broker/broker_monitor.c:1060:8: style: Unused variable: time_str [unusedVariable]
  char time_str[32];
       ^
src/broker/broker_process_info.c:123:33: style:inconclusive: Function 'get_psinfo' argument 2 names different: declaration 'ps_info' definition 'ps'. [funcArgNamesDifferent]
get_psinfo (int pid, T_PSINFO * ps)
                                ^
src/broker/broker_process_info.h:43:37: note: Function 'get_psinfo' argument 2 names different: declaration 'ps_info' definition 'ps'.
int get_psinfo (int pid, T_PSINFO * ps_info);
                                    ^
src/broker/broker_process_info.c:123:33: note: Function 'get_psinfo' argument 2 names different: declaration 'ps_info' definition 'ps'.
get_psinfo (int pid, T_PSINFO * ps)
                                ^
src/broker/broker_process_info.c:60:33: style:inconclusive: Function 'get_psinfo' argument 2 names different: declaration 'ps_info' definition 'ps'. [funcArgNamesDifferent]
get_psinfo (int pid, T_PSINFO * ps)
                                ^
src/broker/broker_process_info.h:43:37: note: Function 'get_psinfo' argument 2 names different: declaration 'ps_info' definition 'ps'.
int get_psinfo (int pid, T_PSINFO * ps_info);
                                    ^
src/broker/broker_process_info.c:60:33: note: Function 'get_psinfo' argument 2 names different: declaration 'ps_info' definition 'ps'.
get_psinfo (int pid, T_PSINFO * ps)
                                ^
src/broker/broker_process_info.c:104:33: style:inconclusive: Function 'get_psinfo' argument 2 names different: declaration 'ps_info' definition 'ps'. [funcArgNamesDifferent]
get_psinfo (int pid, T_PSINFO * ps)
                                ^
src/broker/broker_process_info.h:43:37: note: Function 'get_psinfo' argument 2 names different: declaration 'ps_info' definition 'ps'.
int get_psinfo (int pid, T_PSINFO * ps_info);
                                    ^
src/broker/broker_process_info.c:104:33: note: Function 'get_psinfo' argument 2 names different: declaration 'ps_info' definition 'ps'.
get_psinfo (int pid, T_PSINFO * ps)
                                ^
src/broker/broker_process_size.c:469:3: error: Common realloc mistake: 'cntvalue_pid' nulled but not freed upon failure [memleakOnRealloc]
  ALLOC_COUNTER_VALUE ();
  ^
src/broker/broker_process_size.c:469:3: error: Common realloc mistake: 'cntvalue_workset' nulled but not freed upon failure [memleakOnRealloc]
  ALLOC_COUNTER_VALUE ();
  ^
src/broker/broker_process_size.c:469:3: error: Common realloc mistake: 'cntvalue_pct_cpu' nulled but not freed upon failure [memleakOnRealloc]
  ALLOC_COUNTER_VALUE ();
  ^
src/broker/broker_process_size.c:469:3: error: Common realloc mistake: 'cntvalue_num_thr' nulled but not freed upon failure [memleakOnRealloc]
  ALLOC_COUNTER_VALUE ();
  ^
src/broker/broker_process_size.c:492:7: error: Common realloc mistake: 'cntvalue_pid' nulled but not freed upon failure [memleakOnRealloc]
      ALLOC_COUNTER_VALUE ();
      ^
src/broker/broker_process_size.c:492:7: error: Common realloc mistake: 'cntvalue_workset' nulled but not freed upon failure [memleakOnRealloc]
      ALLOC_COUNTER_VALUE ();
      ^
src/broker/broker_process_size.c:492:7: error: Common realloc mistake: 'cntvalue_pct_cpu' nulled but not freed upon failure [memleakOnRealloc]
      ALLOC_COUNTER_VALUE ();
      ^
src/broker/broker_process_size.c:492:7: error: Common realloc mistake: 'cntvalue_num_thr' nulled but not freed upon failure [memleakOnRealloc]
      ALLOC_COUNTER_VALUE ();
      ^
src/broker/broker_process_size.c:512:8: error: Common realloc mistake: 'cntvalue_pid' nulled but not freed upon failure [memleakOnRealloc]
       ALLOC_COUNTER_VALUE ();
       ^
src/broker/broker_process_size.c:512:8: error: Common realloc mistake: 'cntvalue_workset' nulled but not freed upon failure [memleakOnRealloc]
       ALLOC_COUNTER_VALUE ();
       ^
src/broker/broker_process_size.c:512:8: error: Common realloc mistake: 'cntvalue_pct_cpu' nulled but not freed upon failure [memleakOnRealloc]
       ALLOC_COUNTER_VALUE ();
       ^
src/broker/broker_process_size.c:512:8: error: Common realloc mistake: 'cntvalue_num_thr' nulled but not freed upon failure [memleakOnRealloc]
       ALLOC_COUNTER_VALUE ();
       ^
src/broker/broker_proxy_conn.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/broker/broker_shm.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/broker/broker_shm.c:657:22: style: The scope of the variable 'shard_conn_info_p' can be reduced. [variableScope]
  T_SHARD_CONN_INFO *shard_conn_info_p;
                     ^
src/broker/broker_shm.c:834:22: style:inconclusive: Function 'uw_sem_init' argument 1 names different: declaration 'sem_t' definition 'sem'. [funcArgNamesDifferent]
uw_sem_init (sem_t * sem)
                     ^
src/broker/broker_shm.h:685:26: note: Function 'uw_sem_init' argument 1 names different: declaration 'sem_t' definition 'sem'.
int uw_sem_init (sem_t * sem_t);
                         ^
src/broker/broker_shm.c:834:22: note: Function 'uw_sem_init' argument 1 names different: declaration 'sem_t' definition 'sem'.
uw_sem_init (sem_t * sem)
                     ^
src/broker/broker_shm.c:867:22: style:inconclusive: Function 'uw_sem_wait' argument 1 names different: declaration 'sem_t' definition 'sem'. [funcArgNamesDifferent]
uw_sem_wait (sem_t * sem)
                     ^
src/broker/broker_shm.h:686:26: note: Function 'uw_sem_wait' argument 1 names different: declaration 'sem_t' definition 'sem'.
int uw_sem_wait (sem_t * sem_t);
                         ^
src/broker/broker_shm.c:867:22: note: Function 'uw_sem_wait' argument 1 names different: declaration 'sem_t' definition 'sem'.
uw_sem_wait (sem_t * sem)
                     ^
src/broker/broker_shm.c:893:22: style:inconclusive: Function 'uw_sem_post' argument 1 names different: declaration 'sem_t' definition 'sem'. [funcArgNamesDifferent]
uw_sem_post (sem_t * sem)
                     ^
src/broker/broker_shm.h:687:26: note: Function 'uw_sem_post' argument 1 names different: declaration 'sem_t' definition 'sem'.
int uw_sem_post (sem_t * sem_t);
                         ^
src/broker/broker_shm.c:893:22: note: Function 'uw_sem_post' argument 1 names different: declaration 'sem_t' definition 'sem'.
uw_sem_post (sem_t * sem)
                     ^
src/broker/broker_shm.c:919:25: style:inconclusive: Function 'uw_sem_destroy' argument 1 names different: declaration 'sem_t' definition 'sem'. [funcArgNamesDifferent]
uw_sem_destroy (sem_t * sem)
                        ^
src/broker/broker_shm.h:688:29: note: Function 'uw_sem_destroy' argument 1 names different: declaration 'sem_t' definition 'sem'.
int uw_sem_destroy (sem_t * sem_t);
                            ^
src/broker/broker_shm.c:919:25: note: Function 'uw_sem_destroy' argument 1 names different: declaration 'sem_t' definition 'sem'.
uw_sem_destroy (sem_t * sem)
                        ^
src/broker/broker_tester.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/broker/broker_tester.c:839:3: warning: %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed int'. [invalidPrintfArgType_uint]
  snprintf (conn_url, sizeof (conn_url), "cci:cubrid:localhost:%u:%s:::", br_tester_info.broker_port,
  ^
src/broker/broker_tester.c:453:9: style: The scope of the variable 'p' can be reduced. [variableScope]
  char *p;
        ^
src/broker/broker_tester.c:397:8: style: Local variable 'ret' shadows outer variable [shadowVariable]
   int ret;
       ^
src/broker/broker_tester.c:352:7: note: Shadowed declaration
  int ret, req, col_count;
      ^
src/broker/broker_tester.c:397:8: note: Shadow variable
   int ret;
       ^
src/broker/broker_util.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 13 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/broker/broker_util.c:599:17: warning: Either the condition 'size_str==NULL' is redundant or there is possible null pointer dereference: size_str. [nullPointerRedundantCheck]
  val = strtod (size_str, &end);
                ^
src/broker/broker_util.c:594:16: note: Assuming that condition 'size_str==NULL' is not redundant
  if (size_str == NULL || default_unit == NULL)
               ^
src/broker/broker_util.c:599:17: note: Null pointer dereference
  val = strtod (size_str, &end);
                ^
src/broker/broker_util.c:658:17: warning: Either the condition 'time_str==NULL' is redundant or there is possible null pointer dereference: time_str. [nullPointerRedundantCheck]
  val = strtod (time_str, &end);
                ^
src/broker/broker_util.c:653:16: note: Assuming that condition 'time_str==NULL' is not redundant
  if (time_str == NULL || default_unit == NULL)
               ^
src/broker/broker_util.c:658:17: note: Null pointer dereference
  val = strtod (time_str, &end);
                ^
src/broker/broker_util.c:196:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/broker/broker_util.c:223:40: style:inconclusive: Function 'ut_kill_broker_process' argument 2 names different: declaration 'br_name' definition 'broker_name'. [funcArgNamesDifferent]
ut_kill_broker_process (int pid, char *broker_name)
                                       ^
src/broker/broker_util.h:69:51: note: Function 'ut_kill_broker_process' argument 2 names different: declaration 'br_name' definition 'broker_name'.
extern int ut_kill_broker_process (int pid, char *br_name);
                                                  ^
src/broker/broker_util.c:223:40: note: Function 'ut_kill_broker_process' argument 2 names different: declaration 'br_name' definition 'broker_name'.
ut_kill_broker_process (int pid, char *broker_name)
                                       ^
src/broker/broker_util.c:241:39: style:inconclusive: Function 'ut_kill_proxy_process' argument 2 names different: declaration 'br_name' definition 'broker_name'. [funcArgNamesDifferent]
ut_kill_proxy_process (int pid, char *broker_name, int proxy_id)
                                      ^
src/broker/broker_util.h:70:50: note: Function 'ut_kill_proxy_process' argument 2 names different: declaration 'br_name' definition 'broker_name'.
extern int ut_kill_proxy_process (int pid, char *br_name, int proxy_id);
                                                 ^
src/broker/broker_util.c:241:39: note: Function 'ut_kill_proxy_process' argument 2 names different: declaration 'br_name' definition 'broker_name'.
ut_kill_proxy_process (int pid, char *broker_name, int proxy_id)
                                      ^
src/broker/broker_util.c:259:36: style:inconclusive: Function 'ut_kill_as_process' argument 2 names different: declaration 'br_name' definition 'broker_name'. [funcArgNamesDifferent]
ut_kill_as_process (int pid, char *broker_name, int as_index, int shard_flag)
                                   ^
src/broker/broker_util.h:71:47: note: Function 'ut_kill_as_process' argument 2 names different: declaration 'br_name' definition 'broker_name'.
extern int ut_kill_as_process (int pid, char *br_name, int as_id, int shard_flag);
                                              ^
src/broker/broker_util.c:259:36: note: Function 'ut_kill_as_process' argument 2 names different: declaration 'br_name' definition 'broker_name'.
ut_kill_as_process (int pid, char *broker_name, int as_index, int shard_flag)
                                   ^
src/broker/broker_util.c:259:53: style:inconclusive: Function 'ut_kill_as_process' argument 3 names different: declaration 'as_id' definition 'as_index'. [funcArgNamesDifferent]
ut_kill_as_process (int pid, char *broker_name, int as_index, int shard_flag)
                                                    ^
src/broker/broker_util.h:71:60: note: Function 'ut_kill_as_process' argument 3 names different: declaration 'as_id' definition 'as_index'.
extern int ut_kill_as_process (int pid, char *br_name, int as_id, int shard_flag);
                                                           ^
src/broker/broker_util.c:259:53: note: Function 'ut_kill_as_process' argument 3 names different: declaration 'as_id' definition 'as_index'.
ut_kill_as_process (int pid, char *broker_name, int as_index, int shard_flag)
                                                    ^
src/broker/broker_util.c:420:44: style:inconclusive: Function 'ut_time_string' argument 2 names different: declaration 'log_time' definition 'time_val'. [funcArgNamesDifferent]
ut_time_string (char *buf, struct timeval *time_val)
                                           ^
src/broker/broker_util.h:88:55: note: Function 'ut_time_string' argument 2 names different: declaration 'log_time' definition 'time_val'.
extern int ut_time_string (char *buf, struct timeval *log_time);
                                                      ^
src/broker/broker_util.c:420:44: note: Function 'ut_time_string' argument 2 names different: declaration 'log_time' definition 'time_val'.
ut_time_string (char *buf, struct timeval *time_val)
                                           ^
src/broker/broker_util.c:446:8: style: Variable 'tm_p' is assigned a value that is never used. [unreadVariable]
  tm_p = localtime_r (&sec, &tm);
       ^
src/broker/broker_util.c:67:63: style:inconclusive: Function 'ut_access_log' argument 3 names different: declaration 'err_flag' definition 'error_flag'. [funcArgNamesDifferent]
ut_access_log (int as_index, struct timeval *start_time, char error_flag, int error_log_offset)
                                                              ^
src/broker/broker_util.h:66:74: note: Function 'ut_access_log' argument 3 names different: declaration 'err_flag' definition 'error_flag'.
extern int ut_access_log (int as_index, struct timeval *start_time, char err_flag, int e_offset);
                                                                         ^
src/broker/broker_util.c:67:63: note: Function 'ut_access_log' argument 3 names different: declaration 'err_flag' definition 'error_flag'.
ut_access_log (int as_index, struct timeval *start_time, char error_flag, int error_log_offset)
                                                              ^
src/broker/broker_util.c:67:79: style:inconclusive: Function 'ut_access_log' argument 4 names different: declaration 'e_offset' definition 'error_log_offset'. [funcArgNamesDifferent]
ut_access_log (int as_index, struct timeval *start_time, char error_flag, int error_log_offset)
                                                                              ^
src/broker/broker_util.h:66:88: note: Function 'ut_access_log' argument 4 names different: declaration 'e_offset' definition 'error_log_offset'.
extern int ut_access_log (int as_index, struct timeval *start_time, char err_flag, int e_offset);
                                                                                       ^
src/broker/broker_util.c:67:79: note: Function 'ut_access_log' argument 4 names different: declaration 'e_offset' definition 'error_log_offset'.
ut_access_log (int as_index, struct timeval *start_time, char error_flag, int error_log_offset)
                                                                              ^
src/broker/cas.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 35 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/broker/cas.c:2243:3: warning:inconclusive: The buffer 'broker_name' may not be null-terminated after the call to strncpy(). [terminateStrncpy]
  strncpy (broker_name, shm_appl->broker_name, BROKER_NAME_LEN);
  ^
src/broker/cas.c:2863:3: style:inconclusive: Statements following return, break, continue, goto or throw will never be executed. [unreachableCode]
  as_info->cur_keep_con = 1;
  ^
src/broker/cas.c:1513:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i, u_index;
      ^
src/broker/cas.c:1513:10: style: The scope of the variable 'u_index' can be reduced. [variableScope]
  int i, u_index;
         ^
src/broker/cas.c:1514:9: style: The scope of the variable 'unusable_db_name' can be reduced. [variableScope]
  char *unusable_db_name;
        ^
src/broker/cas.c:1515:9: style: The scope of the variable 'unusable_db_host' can be reduced. [variableScope]
  char *unusable_db_host;
        ^
src/broker/cas.c:360:17: style: Variable 'id' is assigned a value that is never used. [unreadVariable]
  SESSION_ID id = DB_EMPTY_SESSION;
                ^
src/broker/cas.c:1581:7: style: Unused variable: max_process_size [unusedVariable]
  int max_process_size;
      ^
src/broker/cas.c:2753:15: style: Variable 'Success' is assigned a value that is never used. [unreadVariable]
      Success =
              ^
src/broker/cas_dbms_util.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/broker/cas_dbms_util.c:100:17: error: Uninitialized variable: filename [uninitvar]
  file = fopen (filename, "r");
                ^
src/broker/cas_dbms_util.c:164:17: error: Uninitialized variable: filename [uninitvar]
  file = fopen (filename, "r");
                ^
src/broker/cas_dbms_util.c:187:8: style: Variable 'str' is assigned a value that is never used. [unreadVariable]
   str = cfg_pop_token (str, &db->alias);
       ^
src/broker/cas_dbms_util.c:201:9: style: Variable 'last' is assigned a value that is never used. [unreadVariable]
   last = db;
        ^
src/broker/cas_error.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 25 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/broker/cas_error_log.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/broker/cas_error_log.c:217:3: warning: %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed int'. [invalidPrintfArgType_uint]
  snprintf (buf_p, 32, ", EID = %u", eid);
  ^
src/broker/cas_error_log.c:197:28: style: Checking if unsigned expression 'bufsz' is less than zero. [unsignedLessThanZero]
  if (buf == NULL || bufsz <= 0)
                           ^
src/broker/cas_execute.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 27 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/broker/cas_execute.c:5808:3: error: Code 'std::string' is invalid C code. Use --std or --language to configure the language. [syntaxError]
  std::string arg_str;
  ^
src/broker/cas_function.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 27 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/broker/cas_function.c:1897:16: style: Condition 'sql_stmt!=NULL' is always false [knownConditionTrueFalse]
  if (sql_stmt != NULL)
               ^
src/broker/cas_function.c:1879:20: note: Assignment 'sql_stmt=NULL', assigned value is 0
  char *sql_stmt = NULL;
                   ^
src/broker/cas_function.c:1883:12: note: Assuming condition is false
  if (argc < 2)
           ^
src/broker/cas_function.c:1897:16: note: Condition 'sql_stmt!=NULL' is always false
  if (sql_stmt != NULL)
               ^
src/broker/cas_function.c:273:3: style:inconclusive: Consecutive return, break, continue, goto or throw statements are unnecessary. [duplicateBreak]
  return FN_CLOSE_CONN;
  ^
src/broker/cas_function.c:2162:9: style: The scope of the variable 'net_value' can be reduced. [variableScope]
  void *net_value;
        ^
src/broker/cas_function.c:2163:15: style: The scope of the variable 'param_mode_str' can be reduced. [variableScope]
  const char *param_mode_str;
              ^
src/broker/cas_function.c:1621:7: style: Local variable 'query_timeout' shadows outer variable [shadowVariable]
  int query_timeout;
      ^
src/broker/cas.h:109:12: note: Shadowed declaration
extern int query_timeout;
           ^
src/broker/cas_function.c:1621:7: note: Shadow variable
  int query_timeout;
      ^
src/broker/cas_function.c:450:18: style: Variable 'stmt_type' is assigned a value that is never used. [unreadVariable]
  char stmt_type = -1;
                 ^
src/broker/cas_function.c:329:48: warning: Either the condition 'if(sql_stmt)' is redundant or there is possible null pointer dereference: sql_stmt. [nullPointerRedundantCheck]
  logddl_set_sql_text (sql_stmt, (int) strlen (sql_stmt));
                                               ^
src/broker/cas_function.c:369:6: note: Assuming that condition 'if(sql_stmt)' is not redundant
  if (sql_stmt)
     ^
src/broker/cas_function.c:329:48: note: Null pointer dereference
  logddl_set_sql_text (sql_stmt, (int) strlen (sql_stmt));
                                               ^
src/broker/cas_handle.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/broker/cas_handle.c:228:17: style: The scope of the variable 'srv_handle' can be reduced. [variableScope]
  T_SRV_HANDLE *srv_handle;
                ^
src/broker/cas_log.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 29 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/broker/cas_log.c:159:3: style:inconclusive: Consecutive return, break, continue, goto or throw statements are unnecessary. [duplicateBreak]
  return NULL;
  ^
src/broker/cas_log.c:470:15: style: The scope of the variable 'fmt' can be reduced. [variableScope]
  const char *fmt;
              ^
src/broker/cas_log.c:689:8: style: The scope of the variable 'client_ip_str' can be reduced. [variableScope]
  char client_ip_str[16];
       ^
src/broker/cas_net_buf.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/broker/cas_net_buf.c:172:9: warning: Redundant assignment of 'value' to itself. [selfAssignment]
  value = net_htoni64 (value);
        ^
src/broker/cas_net_buf.c:205:9: warning: Redundant assignment of 'value' to itself. [selfAssignment]
  value = net_htonf (value);
        ^
src/broker/cas_net_buf.c:219:9: warning: Redundant assignment of 'value' to itself. [selfAssignment]
  value = net_htond (value);
        ^
src/broker/cas_net_buf.c:83:65: style:inconclusive: Function 'net_buf_cp_post_send_file' argument 3 names different: declaration 'str' definition 'filename'. [funcArgNamesDifferent]
net_buf_cp_post_send_file (T_NET_BUF * net_buf, int size, char *filename)
                                                                ^
src/broker/cas_net_buf.h:109:71: note: Function 'net_buf_cp_post_send_file' argument 3 names different: declaration 'str' definition 'filename'.
extern int net_buf_cp_post_send_file (T_NET_BUF * net_buf, int, char *str);
                                                                      ^
src/broker/cas_net_buf.c:83:65: note: Function 'net_buf_cp_post_send_file' argument 3 names different: declaration 'str' definition 'filename'.
net_buf_cp_post_send_file (T_NET_BUF * net_buf, int size, char *filename)
                                                                ^
src/broker/cas_net_buf.c:277:49: style:inconclusive: Function 'net_buf_error_msg_set' argument 2 names different: declaration 'errindicator' definition 'err_indicator'. [funcArgNamesDifferent]
net_buf_error_msg_set (T_NET_BUF * net_buf, int err_indicator, int err_code, char *err_str, const char *file, int line)
                                                ^
src/broker/cas_net_buf.h:124:61: note: Function 'net_buf_error_msg_set' argument 2 names different: declaration 'errindicator' definition 'err_indicator'.
extern void net_buf_error_msg_set (T_NET_BUF * net_buf, int errindicator, int errcode, char *errstr, const char *file,
                                                            ^
src/broker/cas_net_buf.c:277:49: note: Function 'net_buf_error_msg_set' argument 2 names different: declaration 'errindicator' definition 'err_indicator'.
net_buf_error_msg_set (T_NET_BUF * net_buf, int err_indicator, int err_code, char *err_str, const char *file, int line)
                                                ^
src/broker/cas_net_buf.c:277:68: style:inconclusive: Function 'net_buf_error_msg_set' argument 3 names different: declaration 'errcode' definition 'err_code'. [funcArgNamesDifferent]
net_buf_error_msg_set (T_NET_BUF * net_buf, int err_indicator, int err_code, char *err_str, const char *file, int line)
                                                                   ^
src/broker/cas_net_buf.h:124:79: note: Function 'net_buf_error_msg_set' argument 3 names different: declaration 'errcode' definition 'err_code'.
extern void net_buf_error_msg_set (T_NET_BUF * net_buf, int errindicator, int errcode, char *errstr, const char *file,
                                                                              ^
src/broker/cas_net_buf.c:277:68: note: Function 'net_buf_error_msg_set' argument 3 names different: declaration 'errcode' definition 'err_code'.
net_buf_error_msg_set (T_NET_BUF * net_buf, int err_indicator, int err_code, char *err_str, const char *file, int line)
                                                                   ^
src/broker/cas_net_buf.c:277:84: style:inconclusive: Function 'net_buf_error_msg_set' argument 4 names different: declaration 'errstr' definition 'err_str'. [funcArgNamesDifferent]
net_buf_error_msg_set (T_NET_BUF * net_buf, int err_indicator, int err_code, char *err_str, const char *file, int line)
                                                                                   ^
src/broker/cas_net_buf.h:124:94: note: Function 'net_buf_error_msg_set' argument 4 names different: declaration 'errstr' definition 'err_str'.
extern void net_buf_error_msg_set (T_NET_BUF * net_buf, int errindicator, int errcode, char *errstr, const char *file,
                                                                                             ^
src/broker/cas_net_buf.c:277:84: note: Function 'net_buf_error_msg_set' argument 4 names different: declaration 'errstr' definition 'err_str'.
net_buf_error_msg_set (T_NET_BUF * net_buf, int err_indicator, int err_code, char *err_str, const char *file, int line)
                                                                                   ^
src/broker/cas_net_buf.c:365:11: error: The address of local variable 'from' is accessed at non-zero index. [objectIndex]
  q[0] = p[3];
          ^
src/broker/cas_net_buf.c:362:16: note: Address of variable taken here.
  p = (char *) &from;
               ^
src/broker/cas_net_buf.c:365:11: note: The address of local variable 'from' is accessed at non-zero index.
  q[0] = p[3];
          ^
src/broker/cas_net_buf.c:366:4: error: The address of local variable 'to' is accessed at non-zero index. [objectIndex]
  q[1] = p[2];
   ^
src/broker/cas_net_buf.c:363:16: note: Address of variable taken here.
  q = (char *) &to;
               ^
src/broker/cas_net_buf.c:366:4: note: The address of local variable 'to' is accessed at non-zero index.
  q[1] = p[2];
   ^
src/broker/cas_net_buf.c:366:11: error: The address of local variable 'from' is accessed at non-zero index. [objectIndex]
  q[1] = p[2];
          ^
src/broker/cas_net_buf.c:362:16: note: Address of variable taken here.
  p = (char *) &from;
               ^
src/broker/cas_net_buf.c:366:11: note: The address of local variable 'from' is accessed at non-zero index.
  q[1] = p[2];
          ^
src/broker/cas_net_buf.c:367:4: error: The address of local variable 'to' is accessed at non-zero index. [objectIndex]
  q[2] = p[1];
   ^
src/broker/cas_net_buf.c:363:16: note: Address of variable taken here.
  q = (char *) &to;
               ^
src/broker/cas_net_buf.c:367:4: note: The address of local variable 'to' is accessed at non-zero index.
  q[2] = p[1];
   ^
src/broker/cas_net_buf.c:367:11: error: The address of local variable 'from' is accessed at non-zero index. [objectIndex]
  q[2] = p[1];
          ^
src/broker/cas_net_buf.c:362:16: note: Address of variable taken here.
  p = (char *) &from;
               ^
src/broker/cas_net_buf.c:367:11: note: The address of local variable 'from' is accessed at non-zero index.
  q[2] = p[1];
          ^
src/broker/cas_net_buf.c:368:4: error: The address of local variable 'to' is accessed at non-zero index. [objectIndex]
  q[3] = p[0];
   ^
src/broker/cas_net_buf.c:363:16: note: Address of variable taken here.
  q = (char *) &to;
               ^
src/broker/cas_net_buf.c:368:4: note: The address of local variable 'to' is accessed at non-zero index.
  q[3] = p[0];
   ^
src/broker/cas_net_buf.c:382:11: error: The address of local variable 'from' is accessed at non-zero index. [objectIndex]
  q[0] = p[7];
          ^
src/broker/cas_net_buf.c:379:16: note: Address of variable taken here.
  p = (char *) &from;
               ^
src/broker/cas_net_buf.c:382:11: note: The address of local variable 'from' is accessed at non-zero index.
  q[0] = p[7];
          ^
src/broker/cas_net_buf.c:383:4: error: The address of local variable 'to' is accessed at non-zero index. [objectIndex]
  q[1] = p[6];
   ^
src/broker/cas_net_buf.c:380:16: note: Address of variable taken here.
  q = (char *) &to;
               ^
src/broker/cas_net_buf.c:383:4: note: The address of local variable 'to' is accessed at non-zero index.
  q[1] = p[6];
   ^
src/broker/cas_net_buf.c:383:11: error: The address of local variable 'from' is accessed at non-zero index. [objectIndex]
  q[1] = p[6];
          ^
src/broker/cas_net_buf.c:379:16: note: Address of variable taken here.
  p = (char *) &from;
               ^
src/broker/cas_net_buf.c:383:11: note: The address of local variable 'from' is accessed at non-zero index.
  q[1] = p[6];
          ^
src/broker/cas_net_buf.c:384:4: error: The address of local variable 'to' is accessed at non-zero index. [objectIndex]
  q[2] = p[5];
   ^
src/broker/cas_net_buf.c:380:16: note: Address of variable taken here.
  q = (char *) &to;
               ^
src/broker/cas_net_buf.c:384:4: note: The address of local variable 'to' is accessed at non-zero index.
  q[2] = p[5];
   ^
src/broker/cas_net_buf.c:384:11: error: The address of local variable 'from' is accessed at non-zero index. [objectIndex]
  q[2] = p[5];
          ^
src/broker/cas_net_buf.c:379:16: note: Address of variable taken here.
  p = (char *) &from;
               ^
src/broker/cas_net_buf.c:384:11: note: The address of local variable 'from' is accessed at non-zero index.
  q[2] = p[5];
          ^
src/broker/cas_net_buf.c:385:4: error: The address of local variable 'to' is accessed at non-zero index. [objectIndex]
  q[3] = p[4];
   ^
src/broker/cas_net_buf.c:380:16: note: Address of variable taken here.
  q = (char *) &to;
               ^
src/broker/cas_net_buf.c:385:4: note: The address of local variable 'to' is accessed at non-zero index.
  q[3] = p[4];
   ^
src/broker/cas_net_buf.c:385:11: error: The address of local variable 'from' is accessed at non-zero index. [objectIndex]
  q[3] = p[4];
          ^
src/broker/cas_net_buf.c:379:16: note: Address of variable taken here.
  p = (char *) &from;
               ^
src/broker/cas_net_buf.c:385:11: note: The address of local variable 'from' is accessed at non-zero index.
  q[3] = p[4];
          ^
src/broker/cas_net_buf.c:386:4: error: The address of local variable 'to' is accessed at non-zero index. [objectIndex]
  q[4] = p[3];
   ^
src/broker/cas_net_buf.c:380:16: note: Address of variable taken here.
  q = (char *) &to;
               ^
src/broker/cas_net_buf.c:386:4: note: The address of local variable 'to' is accessed at non-zero index.
  q[4] = p[3];
   ^
src/broker/cas_net_buf.c:386:11: error: The address of local variable 'from' is accessed at non-zero index. [objectIndex]
  q[4] = p[3];
          ^
src/broker/cas_net_buf.c:379:16: note: Address of variable taken here.
  p = (char *) &from;
               ^
src/broker/cas_net_buf.c:386:11: note: The address of local variable 'from' is accessed at non-zero index.
  q[4] = p[3];
          ^
src/broker/cas_net_buf.c:387:4: error: The address of local variable 'to' is accessed at non-zero index. [objectIndex]
  q[5] = p[2];
   ^
src/broker/cas_net_buf.c:380:16: note: Address of variable taken here.
  q = (char *) &to;
               ^
src/broker/cas_net_buf.c:387:4: note: The address of local variable 'to' is accessed at non-zero index.
  q[5] = p[2];
   ^
src/broker/cas_net_buf.c:387:11: error: The address of local variable 'from' is accessed at non-zero index. [objectIndex]
  q[5] = p[2];
          ^
src/broker/cas_net_buf.c:379:16: note: Address of variable taken here.
  p = (char *) &from;
               ^
src/broker/cas_net_buf.c:387:11: note: The address of local variable 'from' is accessed at non-zero index.
  q[5] = p[2];
          ^
src/broker/cas_net_buf.c:388:4: error: The address of local variable 'to' is accessed at non-zero index. [objectIndex]
  q[6] = p[1];
   ^
src/broker/cas_net_buf.c:380:16: note: Address of variable taken here.
  q = (char *) &to;
               ^
src/broker/cas_net_buf.c:388:4: note: The address of local variable 'to' is accessed at non-zero index.
  q[6] = p[1];
   ^
src/broker/cas_net_buf.c:388:11: error: The address of local variable 'from' is accessed at non-zero index. [objectIndex]
  q[6] = p[1];
          ^
src/broker/cas_net_buf.c:379:16: note: Address of variable taken here.
  p = (char *) &from;
               ^
src/broker/cas_net_buf.c:388:11: note: The address of local variable 'from' is accessed at non-zero index.
  q[6] = p[1];
          ^
src/broker/cas_net_buf.c:389:4: error: The address of local variable 'to' is accessed at non-zero index. [objectIndex]
  q[7] = p[0];
   ^
src/broker/cas_net_buf.c:380:16: note: Address of variable taken here.
  q = (char *) &to;
               ^
src/broker/cas_net_buf.c:389:4: note: The address of local variable 'to' is accessed at non-zero index.
  q[7] = p[0];
   ^
src/broker/cas_net_buf.c:362:7: portability:inconclusive: Casting from float * to signed char * is not portable due to different binary data representations on different platforms. [invalidPointerCast]
  p = (char *) &from;
      ^
src/broker/cas_net_buf.c:363:7: portability:inconclusive: Casting from float * to signed char * is not portable due to different binary data representations on different platforms. [invalidPointerCast]
  q = (char *) &to;
      ^
src/broker/cas_net_buf.c:379:7: portability:inconclusive: Casting from double * to signed char * is not portable due to different binary data representations on different platforms. [invalidPointerCast]
  p = (char *) &from;
      ^
src/broker/cas_net_buf.c:380:7: portability:inconclusive: Casting from double * to signed char * is not portable due to different binary data representations on different platforms. [invalidPointerCast]
  q = (char *) &to;
      ^
src/broker/cas_network.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 27 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/broker/cas_network.c:227:17: style: Condition 'port_name==NULL' is always false [knownConditionTrueFalse]
  if (port_name == NULL)
                ^
src/broker/cas_network.c:223:8: warning: Either the condition 'port_name==NULL' is redundant or there is possible null pointer dereference: port_name. [nullPointerRedundantCheck]
  char port_name[BROKER_PATH_MAX];
       ^
src/broker/cas_network.c:227:17: note: Assuming that condition 'port_name==NULL' is not redundant
  if (port_name == NULL)
                ^
src/broker/cas_network.c:223:8: note: Null pointer dereference
  char port_name[BROKER_PATH_MAX];
       ^
src/broker/cas_network.c:352:10: style: Variable 'retval' is assigned a value that is never used. [unreadVariable]
  retval = net_write_stream (sock_fd, header->buf, MSG_HEADER_SIZE);
         ^
src/broker/cas_network.c:530:23: style: Variable 'ssl_data_ready' is assigned a value that is never used. [unreadVariable]
  bool ssl_data_ready = false;
                      ^
src/broker/cas_query_info.c:68:33: style:inconclusive: Function 'query_info_init' argument 1 names different: declaration 'query_info' definition 'qi'. [funcArgNamesDifferent]
query_info_init (T_QUERY_INFO * qi)
                                ^
src/broker/cas_query_info.h:51:45: note: Function 'query_info_init' argument 1 names different: declaration 'query_info' definition 'qi'.
extern void query_info_init (T_QUERY_INFO * query_info);
                                            ^
src/broker/cas_query_info.c:68:33: note: Function 'query_info_init' argument 1 names different: declaration 'query_info' definition 'qi'.
query_info_init (T_QUERY_INFO * qi)
                                ^
src/broker/cas_runner.c:377:9: style: The scope of the variable 'buf' can be reduced. [variableScope]
   char buf[1024];
        ^
src/broker/cas_runner.c:379:11: style: The scope of the variable 'readlen' can be reduced. [variableScope]
   size_t readlen;
          ^
src/broker/cas_runner.c:1233:15: style: The scope of the variable 'res' can be reduced. [variableScope]
  int req_id, res;
              ^
src/broker/cas_runner.c:1258:7: style: The scope of the variable 'res' can be reduced. [variableScope]
  int res, i;
      ^
src/broker/cas_runner.c:1262:10: style: The scope of the variable 'commit_time' can be reduced. [variableScope]
  double commit_time;
         ^
src/broker/cas_runner.c:1089:21: style:inconclusive: Function 'process_bind' argument 1 names different: declaration 'msg' definition 'linebuf'. [funcArgNamesDifferent]
process_bind (char *linebuf, int *num_bind_p, T_BIND_INFO * bind_info)
                    ^
src/broker/cas_runner.c:150:32: note: Function 'process_bind' argument 1 names different: declaration 'msg' definition 'linebuf'.
static int process_bind (char *msg, int *num_bind_p, T_BIND_INFO * bind_info);
                               ^
src/broker/cas_runner.c:1089:21: note: Function 'process_bind' argument 1 names different: declaration 'msg' definition 'linebuf'.
process_bind (char *linebuf, int *num_bind_p, T_BIND_INFO * bind_info)
                    ^
src/broker/cas_runner.c:1138:24: style:inconclusive: Function 'process_execute' argument 1 names different: declaration 'msg' definition 'linebuf'. [funcArgNamesDifferent]
process_execute (char *linebuf, int *req_h, int num_bind, T_BIND_INFO * bind_info, FILE * result_fp,
                       ^
src/broker/cas_runner.c:148:35: note: Function 'process_execute' argument 1 names different: declaration 'msg' definition 'linebuf'.
static int process_execute (char *msg, int *req_h, int num_bind, T_BIND_INFO * bind_info, FILE * result_fp,
                                  ^
src/broker/cas_runner.c:1138:24: note: Function 'process_execute' argument 1 names different: declaration 'msg' definition 'linebuf'.
process_execute (char *linebuf, int *req_h, int num_bind, T_BIND_INFO * bind_info, FILE * result_fp,
                       ^
src/broker/cas_runner.c:1292:47: style:inconclusive: Function 'print_result' argument 3 names different: declaration 'fp' definition 'result_fp'. [funcArgNamesDifferent]
print_result (int cci_res, int req_id, FILE * result_fp)
                                              ^
src/broker/cas_runner.c:153:59: note: Function 'print_result' argument 3 names different: declaration 'fp' definition 'result_fp'.
static void print_result (int cci_res, int req_id, FILE * fp);
                                                          ^
src/broker/cas_runner.c:1292:47: note: Function 'print_result' argument 3 names different: declaration 'fp' definition 'result_fp'.
print_result (int cci_res, int req_id, FILE * result_fp)
                                              ^
src/broker/cas_runner.c:264:18: style: Condition 'num_thread<1' is always false [knownConditionTrueFalse]
  if (num_thread < 1)
                 ^
src/broker/cas_runner.c:259:16: note: Assignment 'num_thread=1', assigned value is 1
  num_thread = 1;
               ^
src/broker/cas_runner.c:264:18: note: Condition 'num_thread<1' is always false
  if (num_thread < 1)
                 ^
src/broker/cas_schema_info.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 17 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/broker/cas_sql_log2.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 25 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/broker/cas_sql_log2.c:89:25: style: Condition 'sql_log2_file==NULL' is always false [knownConditionTrueFalse]
  return (sql_log2_file == NULL) ? (char *) "" : (char *) sql_log2_file;
                        ^
src/broker/cas_sql_log2.c:143:11: style: The scope of the variable 'ap' can be reduced. [variableScope]
  va_list ap;
          ^
src/broker/cas_sql_log2.c:53:46: style:inconclusive: Function 'sql_log2_init' argument 3 names different: declaration 'sql_log2_value' definition 'sql_log_value'. [funcArgNamesDifferent]
sql_log2_init (char *br_name, int index, int sql_log_value, bool log_reuse_flag)
                                             ^
src/broker/cas_sql_log2.h:85:58: note: Function 'sql_log2_init' argument 3 names different: declaration 'sql_log2_value' definition 'sql_log_value'.
extern void sql_log2_init (char *br_name, int index, int sql_log2_value, bool log_reuse_flag);
                                                         ^
src/broker/cas_sql_log2.c:53:46: note: Function 'sql_log2_init' argument 3 names different: declaration 'sql_log2_value' definition 'sql_log_value'.
sql_log2_init (char *br_name, int index, int sql_log_value, bool log_reuse_flag)
                                             ^
src/broker/cas_ssl.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 23 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/broker/cas_util.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 17 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/broker/cas_xa.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 23 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/broker/cas_xa.c:109:10: style: The scope of the variable 'err_code' can be reduced. [variableScope]
  int i, err_code;
         ^
src/broker/shard_admin_pub.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 26 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/broker/shard_admin_pub.c:460:17: style: The scope of the variable 'shard_info_p' can be reduced. [variableScope]
  T_SHARD_INFO *shard_info_p;
                ^
src/broker/shard_admin_pub.c:679:60: style:inconclusive: Function 'shard_process_activate' argument 2 names different: declaration 'br_info' definition 'br_info_p'. [funcArgNamesDifferent]
shard_process_activate (int master_shm_id, T_BROKER_INFO * br_info_p, T_SHM_APPL_SERVER * shm_as_p,
                                                           ^
src/broker/shard_admin_pub.h:43:71: note: Function 'shard_process_activate' argument 2 names different: declaration 'br_info' definition 'br_info_p'.
extern int shard_process_activate (int master_shm_id, T_BROKER_INFO * br_info, T_SHM_APPL_SERVER * shm_as_p,
                                                                      ^
src/broker/shard_admin_pub.c:679:60: note: Function 'shard_process_activate' argument 2 names different: declaration 'br_info' definition 'br_info_p'.
shard_process_activate (int master_shm_id, T_BROKER_INFO * br_info_p, T_SHM_APPL_SERVER * shm_as_p,
                                                           ^
src/broker/shard_admin_pub.c:329:7: style: Unused variable: fd_cnt [unusedVariable]
  int fd_cnt;
      ^
src/broker/shard_key_func.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/broker/shard_metadata.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/broker/shard_metadata.c:190:12: warning: sscanf() without field width limits can crash with huge input data. [invalidscanf]
   nargs = sscanf (line, "[%%%[^]]", section);
           ^
src/broker/shard_metadata.c:314:15: warning: sscanf() without field width limits can crash with huge input data. [invalidscanf]
      nargs = sscanf (line, "%d %s %[^\n]", &conn_p->shard_id, conn_p->db_name, conn_p->db_conn_info);
              ^
src/broker/shard_metadata.c:448:7: style: Variable 'res' is reassigned a value before the old one has been used. [redundantAssignment]
  res = shard_metadata_read_key (br_info->shard_key_file, shm_proxy_p);
      ^
src/broker/shard_metadata.c:445:7: note: res is assigned
  res =
      ^
src/broker/shard_metadata.c:448:7: note: res is overwritten
  res = shard_metadata_read_key (br_info->shard_key_file, shm_proxy_p);
      ^
src/broker/shard_metadata.c:383:16: style: The scope of the variable 'key_p' can be reduced. [variableScope]
  T_SHARD_KEY *key_p;
               ^
src/broker/shard_metadata.c:489:17: style: The scope of the variable 'user_p' can be reduced. [variableScope]
  T_SHARD_USER *user_p;
                ^
src/broker/shard_metadata.c:514:16: style: The scope of the variable 'key_p' can be reduced. [variableScope]
  T_SHARD_KEY *key_p;
               ^
src/broker/shard_metadata.c:545:17: style: The scope of the variable 'conn_p' can be reduced. [variableScope]
  T_SHARD_CONN *conn_p;
                ^
src/broker/shard_metadata.c:727:7: style: The scope of the variable 'error' can be reduced. [variableScope]
  int error, i;
      ^
src/broker/shard_metadata.c:800:12: style: The scope of the variable 'mid' can be reduced. [variableScope]
  int min, mid, max;
           ^
src/broker/shard_metadata.c:801:7: style: The scope of the variable 'result' can be reduced. [variableScope]
  int result;
      ^
src/broker/shard_metadata.c:802:16: style: The scope of the variable 'key_p' can be reduced. [variableScope]
  T_SHARD_KEY *key_p;
               ^
src/broker/shard_metadata.c:834:12: style: The scope of the variable 'mid' can be reduced. [variableScope]
  int min, mid, max;
           ^
src/broker/shard_metadata.c:835:22: style: The scope of the variable 'range_p' can be reduced. [variableScope]
  T_SHARD_KEY_RANGE *range_p;
                     ^
src/broker/shard_metadata.c:669:16: style: Variable 'j' is assigned a value that is never used. [unreadVariable]
  int i = 0, j = 0;
               ^
src/broker/shard_metadata.c:680:7: error: fprintf format string requires 3 parameters but only 2 are given. [wrongPrintfScanfArgNum]
      SHARD_ERR ("%s: num shard connection is invalid.\n");
      ^
src/broker/shard_metadata.c:708:4: warning: %s in format string (no. 3) requires 'char *' but the argument type is 'signed int'. [invalidPrintfArgType_s]
   SHARD_ERR ("%s: shard range shard_id (%d) is invalid.\n", range_p->shard_id);
   ^
src/broker/shard_metadata.c:708:4: error: fprintf format string requires 4 parameters but only 3 are given. [wrongPrintfScanfArgNum]
   SHARD_ERR ("%s: shard range shard_id (%d) is invalid.\n", range_p->shard_id);
   ^
src/broker/shard_metadata.c:717:7: warning: %s in format string (no. 3) requires 'char *' but the argument type is 'signed int'. [invalidPrintfArgType_s]
      SHARD_ERR ("%s: shard range max (%d, modular %d) is invalid.\n", range_p->max, modular);
      ^
src/broker/shard_metadata.c:717:7: error: fprintf format string requires 5 parameters but only 4 are given. [wrongPrintfScanfArgNum]
      SHARD_ERR ("%s: shard range max (%d, modular %d) is invalid.\n", range_p->max, modular);
      ^
src/broker/shard_parser.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 15 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/broker/shard_parser.c:631:5: style: Variable 'q' is assigned a value that is never used. [unreadVariable]
  q = p = sql;
    ^
src/broker/shard_proxy.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 20 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/broker/shard_proxy.c:88:3: style:inconclusive: Consecutive return, break, continue, goto or throw statements are unnecessary. [duplicateBreak]
  return;
  ^
src/broker/shard_proxy.c:182:7: error: syntax error [syntaxError]
      PROXY_LOG (PROXY_LOG_MODE_ERROR, "Failed to register shard hashing function.");
      ^
src/broker/shard_proxy_function.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/broker/shard_proxy_function.c:162:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  event_p = NULL;
  ^
src/broker/shard_proxy_function.c:881:7: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
      event_p = NULL;
      ^
src/broker/shard_proxy_function.c:1294:7: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
      event_p = NULL;
      ^
src/broker/shard_proxy_function.c:1933:7: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
      event_p = NULL;
      ^
src/broker/shard_proxy_function.c:2023:7: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
      event_p = NULL;
      ^
src/broker/shard_proxy_function.c:2112:7: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
      event_p = NULL;
      ^
src/broker/shard_proxy_function.c:2244:7: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
      event_p = NULL;
      ^
src/broker/shard_proxy_function.c:2336:7: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
      event_p = NULL;
      ^
src/broker/shard_proxy_function.c:2404:7: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
      event_p = NULL;
      ^
src/broker/shard_proxy_function.c:2456:7: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
      event_p = NULL;
      ^
src/broker/shard_proxy_function.c:2546:7: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
      event_p = NULL;
      ^
src/broker/shard_proxy_function.c:2606:7: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
      event_p = NULL;
      ^
src/broker/shard_proxy_function.c:2927:7: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
      event_p = NULL;
      ^
src/broker/shard_proxy_function.c:2947:7: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
      event_p = NULL;
      ^
src/broker/shard_proxy_function.c:3008:7: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
      event_p = NULL;
      ^
src/broker/shard_proxy_function.c:3269:7: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
      event_p = NULL;
      ^
src/broker/shard_proxy_function.c:3392:7: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
      event_p = NULL;
      ^
src/broker/shard_proxy_function.c:3457:7: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
      event_p = NULL;
      ^
src/broker/shard_proxy_function.c:3574:7: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
      event_p = NULL;
      ^
src/broker/shard_proxy_function.c:3729:7: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
      event_p = NULL;
      ^
src/broker/shard_proxy_function.c:3824:7: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
      event_p = NULL;
      ^
src/broker/shard_proxy_function.c:3860:7: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
      event_p = NULL;
      ^
src/broker/shard_proxy_function.c:2887:22: warning: Either the condition 'if(stmt_p)' is redundant or there is possible null pointer dereference: stmt_p. [nullPointerRedundantCheck]
  ctx_p->stmt_h_id = stmt_p->stmt_h_id;
                     ^
src/broker/shard_proxy_function.c:2892:10: note: Assuming that condition 'if(stmt_p)' is not redundant
      if (stmt_p)
         ^
src/broker/shard_proxy_function.c:2887:22: note: Null pointer dereference
  ctx_p->stmt_h_id = stmt_p->stmt_h_id;
                     ^
src/broker/shard_proxy_function.c:3758:16: warning: Either the condition 'if(event_p)' is redundant or there is possible null pointer dereference: event_p. [nullPointerRedundantCheck]
  response_p = event_p->buffer.data;
               ^
src/broker/shard_proxy_function.c:3792:10: note: Assuming that condition 'if(event_p)' is not redundant
      if (event_p)
         ^
src/broker/shard_proxy_function.c:3758:16: note: Null pointer dereference
  response_p = event_p->buffer.data;
               ^
src/broker/shard_proxy_function.c:673:7: style: The scope of the variable 'type_idx' can be reduced. [variableScope]
  int type_idx, val_idx;
      ^
src/broker/shard_proxy_function.c:673:17: style: The scope of the variable 'val_idx' can be reduced. [variableScope]
  int type_idx, val_idx;
                ^
src/broker/shard_proxy_function.c:675:8: style: The scope of the variable 'type' can be reduced. [variableScope]
  char type;
       ^
src/broker/shard_proxy_function.c:677:9: style: The scope of the variable 'net_type' can be reduced. [variableScope]
  void *net_type, *net_value;
        ^
src/broker/shard_proxy_function.c:677:20: style: The scope of the variable 'net_value' can be reduced. [variableScope]
  void *net_type, *net_value;
                   ^
src/broker/shard_proxy_function.c:1306:7: style: Local variable 'query_timeout' shadows outer variable [shadowVariable]
  int query_timeout;
      ^
src/broker/cas.h:109:12: note: Shadowed declaration
extern int query_timeout;
           ^
src/broker/shard_proxy_function.c:1306:7: note: Shadow variable
  int query_timeout;
      ^
src/broker/shard_proxy_function.c:2558:7: style: Local variable 'query_timeout' shadows outer variable [shadowVariable]
  int query_timeout;
      ^
src/broker/cas.h:109:12: note: Shadowed declaration
extern int query_timeout;
           ^
src/broker/shard_proxy_function.c:2558:7: note: Shadow variable
  int query_timeout;
      ^
src/broker/shard_proxy_function.c:2621:7: style: Local variable 'query_timeout' shadows outer variable [shadowVariable]
  int query_timeout;
      ^
src/broker/cas.h:109:12: note: Shadowed declaration
extern int query_timeout;
           ^
src/broker/shard_proxy_function.c:2621:7: note: Shadow variable
  int query_timeout;
      ^
src/broker/shard_proxy_function.c:1644:15: style: Variable 'event_p' is assigned a value that is never used. [unreadVariable]
      event_p = new_event_p = NULL;
              ^
src/broker/shard_proxy_function.c:3873:13: style: Variable 'error' is assigned a value that is never used. [unreadVariable]
  int error = 0;
            ^
src/broker/shard_proxy_function.c:386:7: error: syntax error [syntaxError]
      PROXY_LOG (PROXY_LOG_MODE_ERROR, "Not enough virtual memory. " "failed to duplicate prepare request. ");
      ^
src/broker/shard_proxy_handler.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/broker/shard_proxy_handler.c:590:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  event_p = NULL;
  ^
src/broker/shard_proxy_handler.c:776:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  event_p = NULL;
  ^
src/broker/shard_proxy_handler.c:838:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  event_p = NULL;
  ^
src/broker/shard_proxy_handler.c:871:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  event_p = NULL;
  ^
src/broker/shard_proxy_handler.c:201:20: style: The scope of the variable 'ctx_p' can be reduced. [variableScope]
  T_PROXY_CONTEXT *ctx_p;
                   ^
src/broker/shard_proxy_handler.c:202:19: style: The scope of the variable 'waiter_p' can be reduced. [variableScope]
  T_WAIT_CONTEXT *waiter_p;
                  ^
src/broker/shard_proxy_handler.c:1413:17: style: The scope of the variable 'stmt_p' can be reduced. [variableScope]
  T_SHARD_STMT *stmt_p;
                ^
src/broker/shard_proxy_handler.c:258:23: style: Local variable 'as_info' shadows outer variable [shadowVariable]
  T_APPL_SERVER_INFO *as_info = NULL;
                      ^
src/broker/cas.h:104:28: note: Shadowed declaration
extern T_APPL_SERVER_INFO *as_info;
                           ^
src/broker/shard_proxy_handler.c:258:23: note: Shadow variable
  T_APPL_SERVER_INFO *as_info = NULL;
                      ^
src/broker/shard_proxy_handler.c:584:7: error: syntax error [syntaxError]
      PROXY_DEBUG_LOG ("context is out_tran status.");
      ^
src/broker/shard_proxy_io.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/broker/shard_proxy_io.c:1774:34: warning: Either the condition 'db_user' is redundant or there is possible null pointer dereference: db_user. [nullPointerRedundantCheck]
  strncpy (ctx_p->database_user, db_user, SRV_CON_DBUSER_SIZE - 1);
                                 ^
src/broker/shard_proxy_io.c:1857:9: note: Assuming that condition 'db_user' is not redundant
       (db_user) ? (const char *) db_user : "-", true);
        ^
src/broker/shard_proxy_io.c:1774:34: note: Null pointer dereference
  strncpy (ctx_p->database_user, db_user, SRV_CON_DBUSER_SIZE - 1);
                                 ^
src/broker/shard_proxy_io.c:1038:7: style: The scope of the variable 'length' can be reduced. [variableScope]
  int length;
      ^
src/broker/shard_proxy_io.c:1041:17: style: The scope of the variable 'shard_conn_p' can be reduced. [variableScope]
  T_SHARD_CONN *shard_conn_p;
                ^
src/broker/shard_proxy_io.c:2513:18: style: The scope of the variable 'client_info_p' can be reduced. [variableScope]
  T_CLIENT_INFO *client_info_p;
                 ^
src/broker/shard_proxy_io.c:2700:9: style: The scope of the variable 'driver_info' can be reduced. [variableScope]
  char *driver_info;
        ^
src/broker/shard_proxy_io.c:3175:13: style: The scope of the variable 'cas_io_p' can be reduced. [variableScope]
  T_CAS_IO *cas_io_p;
            ^
src/broker/shard_proxy_io.c:3818:7: style: The scope of the variable 'error' can be reduced. [variableScope]
  int error;
      ^
src/broker/shard_proxy_io.c:4549:19: style: The scope of the variable 'waiter_p' can be reduced. [variableScope]
  T_WAIT_CONTEXT *waiter_p;
                  ^
src/broker/shard_proxy_io.c:4765:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i = 0;
      ^
src/broker/shard_proxy_io.c:4768:14: style: The scope of the variable 'last_shard_id' can be reduced. [variableScope]
  static int last_shard_id = -1;
             ^
src/broker/shard_proxy_io.c:927:7: style: Local variable 'cas_info_size' shadows outer variable [shadowVariable]
  int cas_info_size;
      ^
src/broker/cas.h:125:12: note: Shadowed declaration
extern int cas_info_size;
           ^
src/broker/shard_proxy_io.c:927:7: note: Shadow variable
  int cas_info_size;
      ^
src/broker/shard_proxy_io.c:3902:7: style: Unused variable: error [unusedVariable]
  int error;
      ^
src/broker/shard_proxy_io.c:4040:13: style: Variable 'error' is assigned a value that is never used. [unreadVariable]
  int error = 0;
            ^
src/broker/shard_proxy_io.c:4765:9: style: Variable 'i' is assigned a value that is never used. [unreadVariable]
  int i = 0;
        ^
src/broker/shard_proxy_io.c:1657:7: error: syntax error [syntaxError]
      PROXY_DEBUG_LOG ("Incoming health check request from client.");
      ^
src/broker/shard_proxy_log.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 20 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/broker/shard_proxy_log.c:324:14: style: Condition 'script==NULL' is always true [knownConditionTrueFalse]
  if (script == NULL)
             ^
src/broker/shard_proxy_log.c:278:18: note: Assignment 'script=NULL', assigned value is 0
  char *script = NULL;
                 ^
src/broker/shard_proxy_log.c:296:39: note: Assuming condition is false
  if (localtime_r (&t1, &ct1) == NULL || localtime_r (&t2, &ct2) == NULL)
                                      ^
src/broker/shard_proxy_log.c:324:14: note: Condition 'script==NULL' is always true
  if (script == NULL)
             ^
src/broker/shard_proxy_log.c:326:16: style: Condition 'clt_appl==NULL' is always true [knownConditionTrueFalse]
  if (clt_appl == NULL || clt_appl[0] == '\0')
               ^
src/broker/shard_proxy_log.c:280:20: note: Assignment 'clt_appl=NULL', assigned value is 0
  char *clt_appl = NULL;
                   ^
src/broker/shard_proxy_log.c:296:39: note: Assuming condition is false
  if (localtime_r (&t1, &ct1) == NULL || localtime_r (&t2, &ct2) == NULL)
                                      ^
src/broker/shard_proxy_log.c:326:16: note: Condition 'clt_appl==NULL' is always true
  if (clt_appl == NULL || clt_appl[0] == '\0')
               ^
src/broker/shard_proxy_log.c:370:7: style: The scope of the variable 'ret' can be reduced. [variableScope]
  int ret;
      ^
src/broker/shard_proxy_log.c:371:9: style: The scope of the variable 'tmp_dirname' can be reduced. [variableScope]
  char *tmp_dirname;
        ^
src/broker/shard_proxy_log.c:372:9: style: The scope of the variable 'tmp_filename' can be reduced. [variableScope]
  char *tmp_filename;
        ^
src/broker/shard_proxy_log.c:47:0: information: Skipping configuration 'BROKER_PATH_MAX' since the value of 'BROKER_PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
static char log_filepath[BROKER_PATH_MAX];
^
src/broker/shard_proxy_log.c:67:0: information: Skipping configuration 'BROKER_PATH_MAX' since the value of 'BROKER_PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char dirname[BROKER_PATH_MAX];
^
src/broker/shard_proxy_log.c:92:0: information: Skipping configuration 'BROKER_PATH_MAX' since the value of 'BROKER_PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   make_proxy_log_filename (log_filepath, BROKER_PATH_MAX, br_name, proxy_id);
^
src/broker/shard_proxy_log.c:141:0: information: Skipping configuration 'BROKER_PATH_MAX' since the value of 'BROKER_PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  char backup_filepath[BROKER_PATH_MAX];
^
src/broker/shard_proxy_log.c:145:0: information: Skipping configuration 'BROKER_PATH_MAX' since the value of 'BROKER_PATH_MAX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  if (snprintf (backup_filepath, BROKER_PATH_MAX - 1, "%s.bak", log_filepath) < 0)
^
src/broker/shard_proxy_queue.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/broker/shard_proxy_queue.c:96:29: style: The scope of the variable 'prev' can be reduced. [variableScope]
  T_SHARD_QUEUE_ENT *curr, *prev;
                            ^
src/broker/shard_proxy_queue.c:221:40: style:inconclusive: Function 'shard_cqueue_enqueue' argument 1 names different: declaration 'cq' definition 'q'. [funcArgNamesDifferent]
shard_cqueue_enqueue (T_SHARD_CQUEUE * q, void *e)
                                       ^
src/broker/shard_proxy_queue.h:76:51: note: Function 'shard_cqueue_enqueue' argument 1 names different: declaration 'cq' definition 'q'.
extern int shard_cqueue_enqueue (T_SHARD_CQUEUE * cq, void *e);
                                                  ^
src/broker/shard_proxy_queue.c:221:40: note: Function 'shard_cqueue_enqueue' argument 1 names different: declaration 'cq' definition 'q'.
shard_cqueue_enqueue (T_SHARD_CQUEUE * q, void *e)
                                       ^
src/broker/shard_proxy_queue.c:242:40: style:inconclusive: Function 'shard_cqueue_dequeue' argument 1 names different: declaration 'cq' definition 'q'. [funcArgNamesDifferent]
shard_cqueue_dequeue (T_SHARD_CQUEUE * q)
                                       ^
src/broker/shard_proxy_queue.h:77:53: note: Function 'shard_cqueue_dequeue' argument 1 names different: declaration 'cq' definition 'q'.
extern void *shard_cqueue_dequeue (T_SHARD_CQUEUE * cq);
                                                    ^
src/broker/shard_proxy_queue.c:242:40: note: Function 'shard_cqueue_dequeue' argument 1 names different: declaration 'cq' definition 'q'.
shard_cqueue_dequeue (T_SHARD_CQUEUE * q)
                                       ^
src/broker/shard_proxy_queue.c:263:43: style:inconclusive: Function 'shard_cqueue_initialize' argument 1 names different: declaration 'cq' definition 'q'. [funcArgNamesDifferent]
shard_cqueue_initialize (T_SHARD_CQUEUE * q, int size)
                                          ^
src/broker/shard_proxy_queue.h:79:54: note: Function 'shard_cqueue_initialize' argument 1 names different: declaration 'cq' definition 'q'.
extern int shard_cqueue_initialize (T_SHARD_CQUEUE * cq, int size);
                                                     ^
src/broker/shard_proxy_queue.c:263:43: note: Function 'shard_cqueue_initialize' argument 1 names different: declaration 'cq' definition 'q'.
shard_cqueue_initialize (T_SHARD_CQUEUE * q, int size)
                                          ^
src/broker/shard_proxy_queue.c:289:40: style:inconclusive: Function 'shard_cqueue_destroy' argument 1 names different: declaration 'cq' definition 'q'. [funcArgNamesDifferent]
shard_cqueue_destroy (T_SHARD_CQUEUE * q)
                                       ^
src/broker/shard_proxy_queue.h:80:52: note: Function 'shard_cqueue_destroy' argument 1 names different: declaration 'cq' definition 'q'.
extern void shard_cqueue_destroy (T_SHARD_CQUEUE * cq);
                                                   ^
src/broker/shard_proxy_queue.c:289:40: note: Function 'shard_cqueue_destroy' argument 1 names different: declaration 'cq' definition 'q'.
shard_cqueue_destroy (T_SHARD_CQUEUE * q)
                                       ^
src/broker/shard_shm.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 20 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/broker/shard_shm.c:497:8: style: The scope of the variable 'last_access_time' can be reduced. [variableScope]
  char last_access_time[128];
       ^
src/broker/shard_shm.c:498:8: style: The scope of the variable 'last_connect_time' can be reduced. [variableScope]
  char last_connect_time[128];
       ^
src/broker/shard_shm.c:575:17: style: The scope of the variable 'shard_info_p' can be reduced. [variableScope]
  T_SHARD_INFO *shard_info_p;
                ^
src/broker/shard_shm.c:612:17: style: The scope of the variable 'proxy_info_p' can be reduced. [variableScope]
  T_PROXY_INFO *proxy_info_p;
                ^
src/broker/shard_shm.c:261:49: style:inconclusive: Function 'shard_shm_initialize_shm_proxy' argument 1 names different: declaration 'br_info' definition 'br_info_p'. [funcArgNamesDifferent]
shard_shm_initialize_shm_proxy (T_BROKER_INFO * br_info_p)
                                                ^
src/broker/shard_shm.h:49:69: note: Function 'shard_shm_initialize_shm_proxy' argument 1 names different: declaration 'br_info' definition 'br_info_p'.
extern T_SHM_PROXY *shard_shm_initialize_shm_proxy (T_BROKER_INFO * br_info);
                                                                    ^
src/broker/shard_shm.c:261:49: note: Function 'shard_shm_initialize_shm_proxy' argument 1 names different: declaration 'br_info' definition 'br_info_p'.
shard_shm_initialize_shm_proxy (T_BROKER_INFO * br_info_p)
                                                ^
src/broker/shard_shm.c:641:63: style:inconclusive: Function 'shard_shm_dump_appl_server_internal' argument 2 names different: declaration 'shm_as_p' definition 'shm_proxy_p'. [funcArgNamesDifferent]
shard_shm_dump_appl_server_internal (FILE * fp, T_SHM_PROXY * shm_proxy_p)
                                                              ^
src/broker/shard_shm.h:51:75: note: Function 'shard_shm_dump_appl_server_internal' argument 2 names different: declaration 'shm_as_p' definition 'shm_proxy_p'.
extern void shard_shm_dump_appl_server_internal (FILE * fp, T_SHM_PROXY * shm_as_p);
                                                                          ^
src/broker/shard_shm.c:641:63: note: Function 'shard_shm_dump_appl_server_internal' argument 2 names different: declaration 'shm_as_p' definition 'shm_proxy_p'.
shard_shm_dump_appl_server_internal (FILE * fp, T_SHM_PROXY * shm_proxy_p)
                                                              ^
src/broker/shard_statement.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 20 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/broker/shard_statement.c:1039:3: warning: %d in format string (no. 7) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
  snprintf (buffer, sizeof (buffer),
  ^
src/broker/shard_statement.c:370:7: style: The scope of the variable 'error' can be reduced. [variableScope]
  int error;
      ^
src/broker/shard_statement.c:415:7: style: The scope of the variable 'error' can be reduced. [variableScope]
  int error;
      ^
src/broker/shard_statement.c:416:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i, num_cas;
      ^
src/broker/shard_statement.c:560:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/broker/shard_statement.c:892:7: style: The scope of the variable 'orgzd_sql_size' can be reduced. [variableScope]
  int orgzd_sql_size, n_orgzd_sql_size;
      ^
src/broker/shard_statement.c:893:7: style: The scope of the variable 'req_msg_size' can be reduced. [variableScope]
  int req_msg_size;
      ^
src/broker/shard_statement.c:894:7: style: The scope of the variable 'remainder_size' can be reduced. [variableScope]
  int remainder_size;
      ^
src/broker/shard_statement.c:895:7: style: The scope of the variable 'expand_size' can be reduced. [variableScope]
  int expand_size;
      ^
src/broker/shard_statement.c:896:16: style: The scope of the variable 'offset' can be reduced. [variableScope]
  unsigned int offset;
               ^
src/broker/shard_statement.c:900:9: style: The scope of the variable 'cur_p' can be reduced. [variableScope]
  char *cur_p;
        ^
src/broker/shard_statement.c:1053:17: style: The scope of the variable 'stmt_p' can be reduced. [variableScope]
  T_SHARD_STMT *stmt_p;
                ^
src/broker/shard_statement.c:163:12: style: Variable 'srv_h_id' is assigned a value that is never used. [unreadVariable]
  srv_h_id = stmt_p->srv_h_id_ent[pos];
           ^
src/broker/shard_statement.c:1135:13: style: Variable 'error' is assigned a value that is never used. [unreadVariable]
  int error = NO_ERROR;
            ^
src/broker/shard_statement.c:452:4: error: syntax error [syntaxError]
   PROXY_LOG (PROXY_LOG_MODE_ERROR, "Exceeds max prepared statement. ");
   ^
src/cci/cas_cci.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 15 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/cci/cas_cci.c:3309:10: style: Condition 'qr!=NULL' is always true [knownConditionTrueFalse]
  if (qr != NULL)
         ^
src/cci/cas_cci.c:3293:10: note: Assuming that condition 'qr==NULL' is not redundant
  if (qr == NULL)
         ^
src/cci/cas_cci.c:3302:13: note: Assuming condition is false
  if (error != CCI_ER_NO_ERROR)
            ^
src/cci/cas_cci.c:3309:10: note: Condition 'qr!=NULL' is always true
  if (qr != NULL)
         ^
src/cci/cas_cci.c:524:6: warning: Either the condition 'property!=NULL' is redundant or there is possible null pointer dereference: property. [nullPointerRedundantCheck]
     property);
     ^
src/cci/cas_cci.c:526:16: note: Assuming that condition 'property!=NULL' is not redundant
  if (property != NULL)
               ^
src/cci/cas_cci.c:524:6: note: Null pointer dereference
     property);
     ^
src/cci/cas_cci.c:1895:26: warning: Either the condition 'con_handle!=NULL' is redundant or there is possible null pointer dereference: con_handle. [nullPointerRedundantCheck]
  no_backslash_escapes = con_handle->no_backslash_escapes;
                         ^
src/cci/cas_cci.c:1953:18: note: Assuming that condition 'con_handle!=NULL' is not redundant
  if (con_handle != NULL)
                 ^
src/cci/cas_cci.c:1895:26: note: Null pointer dereference
  no_backslash_escapes = con_handle->no_backslash_escapes;
                         ^
src/cci/cas_cci.c:2814:3: error: Null pointer dereference: (T_REQ_HANDLE*)(NULL) [nullPointer]
  SET_START_TIME_FOR_QUERY (con_handle, NULL);
  ^
src/cci/cas_cci.c:3223:3: error: Null pointer dereference: (T_REQ_HANDLE*)(NULL) [nullPointer]
  SET_START_TIME_FOR_QUERY (con_handle, NULL);
  ^
src/cci/cas_cci.c:4954:27: warning: Either the condition 'con_handle' is redundant or there is possible null pointer dereference: con_handle. [nullPointerRedundantCheck]
  if (!IS_INVALID_SOCKET (con_handle->sock_fd))
                          ^
src/cci/cas_cci.c:4934:7: note: Assuming that condition 'con_handle' is not redundant
  if (TIMEOUT_IS_SET (con_handle))
      ^
src/cci/cas_cci.c:4954:27: note: Null pointer dereference
  if (!IS_INVALID_SOCKET (con_handle->sock_fd))
                          ^
src/cci/cas_cci.c:4858:7: style: The scope of the variable 'result_set_index' can be reduced. [variableScope]
  int result_set_index = 0;
      ^
src/cci/cas_cci.c:6028:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/cci/cas_cci.c:6216:11: style: The scope of the variable 'r' can be reduced. [variableScope]
      int r;
          ^
src/cci/cas_cci.c:662:21: style:inconclusive: Function 'cci_disconnect' argument 1 names different: declaration 'con_handle' definition 'mapped_conn_id'. [funcArgNamesDifferent]
cci_disconnect (int mapped_conn_id, T_CCI_ERROR * err_buf)
                    ^
src/cci/cas_cci.h:801:34: note: Function 'cci_disconnect' argument 1 names different: declaration 'con_handle' definition 'mapped_conn_id'.
  extern int cci_disconnect (int con_handle, T_CCI_ERROR * err_buf);
                                 ^
src/cci/cas_cci.c:662:21: note: Function 'cci_disconnect' argument 1 names different: declaration 'con_handle' definition 'mapped_conn_id'.
cci_disconnect (int mapped_conn_id, T_CCI_ERROR * err_buf)
                    ^
src/cci/cas_cci.c:729:17: style:inconclusive: Function 'cci_cancel' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'. [funcArgNamesDifferent]
cci_cancel (int mapped_conn_id)
                ^
src/cci/cas_cci.h:903:30: note: Function 'cci_cancel' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
  extern int cci_cancel (int con_h_id);
                             ^
src/cci/cas_cci.c:729:17: note: Function 'cci_cancel' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
cci_cancel (int mapped_conn_id)
                ^
src/cci/cas_cci.c:780:19: style:inconclusive: Function 'cci_end_tran' argument 1 names different: declaration 'con_handle' definition 'mapped_conn_id'. [funcArgNamesDifferent]
cci_end_tran (int mapped_conn_id, char type, T_CCI_ERROR * err_buf)
                  ^
src/cci/cas_cci.h:802:32: note: Function 'cci_end_tran' argument 1 names different: declaration 'con_handle' definition 'mapped_conn_id'.
  extern int cci_end_tran (int con_handle, char type, T_CCI_ERROR * err_buf);
                               ^
src/cci/cas_cci.c:780:19: note: Function 'cci_end_tran' argument 1 names different: declaration 'con_handle' definition 'mapped_conn_id'.
cci_end_tran (int mapped_conn_id, char type, T_CCI_ERROR * err_buf)
                  ^
src/cci/cas_cci.c:850:18: style:inconclusive: Function 'cci_prepare' argument 1 names different: declaration 'con_handle' definition 'mapped_conn_id'. [funcArgNamesDifferent]
cci_prepare (int mapped_conn_id, const char *sql_stmt, char flag, T_CCI_ERROR * err_buf)
                 ^
src/cci/cas_cci.h:803:31: note: Function 'cci_prepare' argument 1 names different: declaration 'con_handle' definition 'mapped_conn_id'.
  extern int cci_prepare (int con_handle, const char *sql_stmt, char flag, T_CCI_ERROR * err_buf);
                              ^
src/cci/cas_cci.c:850:18: note: Function 'cci_prepare' argument 1 names different: declaration 'con_handle' definition 'mapped_conn_id'.
cci_prepare (int mapped_conn_id, const char *sql_stmt, char flag, T_CCI_ERROR * err_buf)
                 ^
src/cci/cas_cci.c:985:23: style:inconclusive: Function 'cci_get_bind_num' argument 1 names different: declaration 'req_handle' definition 'mapped_stmt_id'. [funcArgNamesDifferent]
cci_get_bind_num (int mapped_stmt_id)
                      ^
src/cci/cas_cci.h:804:36: note: Function 'cci_get_bind_num' argument 1 names different: declaration 'req_handle' definition 'mapped_stmt_id'.
  extern int cci_get_bind_num (int req_handle);
                                   ^
src/cci/cas_cci.c:985:23: note: Function 'cci_get_bind_num' argument 1 names different: declaration 'req_handle' definition 'mapped_stmt_id'.
cci_get_bind_num (int mapped_stmt_id)
                      ^
src/cci/cas_cci.c:1007:23: style:inconclusive: Function 'cci_is_updatable' argument 1 names different: declaration 'req_h_id' definition 'mapped_stmt_id'. [funcArgNamesDifferent]
cci_is_updatable (int mapped_stmt_id)
                      ^
src/cci/cas_cci.h:854:36: note: Function 'cci_is_updatable' argument 1 names different: declaration 'req_h_id' definition 'mapped_stmt_id'.
  extern int cci_is_updatable (int req_h_id);
                                   ^
src/cci/cas_cci.c:1007:23: note: Function 'cci_is_updatable' argument 1 names different: declaration 'req_h_id' definition 'mapped_stmt_id'.
cci_is_updatable (int mapped_stmt_id)
                      ^
src/cci/cas_cci.c:1029:22: style:inconclusive: Function 'cci_is_holdable' argument 1 names different: declaration 'req_h_id' definition 'mapped_stmt_id'. [funcArgNamesDifferent]
cci_is_holdable (int mapped_stmt_id)
                     ^
src/cci/cas_cci.h:855:35: note: Function 'cci_is_holdable' argument 1 names different: declaration 'req_h_id' definition 'mapped_stmt_id'.
  extern int cci_is_holdable (int req_h_id);
                                  ^
src/cci/cas_cci.c:1029:22: note: Function 'cci_is_holdable' argument 1 names different: declaration 'req_h_id' definition 'mapped_stmt_id'.
cci_is_holdable (int mapped_stmt_id)
                     ^
src/cci/cas_cci.c:1051:26: style:inconclusive: Function 'cci_get_result_info' argument 1 names different: declaration 'req_handle' definition 'mapped_stmt_id'. [funcArgNamesDifferent]
cci_get_result_info (int mapped_stmt_id, T_CCI_CUBRID_STMT * cmd_type, int *num)
                         ^
src/cci/cas_cci.h:805:51: note: Function 'cci_get_result_info' argument 1 names different: declaration 'req_handle' definition 'mapped_stmt_id'.
  extern T_CCI_COL_INFO *cci_get_result_info (int req_handle, T_CCI_CUBRID_STMT * cmd_type, int *num);
                                                  ^
src/cci/cas_cci.c:1051:26: note: Function 'cci_get_result_info' argument 1 names different: declaration 'req_handle' definition 'mapped_stmt_id'.
cci_get_result_info (int mapped_stmt_id, T_CCI_CUBRID_STMT * cmd_type, int *num)
                         ^
src/cci/cas_cci.c:1116:21: style:inconclusive: Function 'cci_bind_param' argument 1 names different: declaration 'req_handle' definition 'mapped_stmt_id'. [funcArgNamesDifferent]
cci_bind_param (int mapped_stmt_id, int index, T_CCI_A_TYPE a_type, void *value, T_CCI_U_TYPE u_type, char flag)
                    ^
src/cci/cas_cci.h:806:34: note: Function 'cci_bind_param' argument 1 names different: declaration 'req_handle' definition 'mapped_stmt_id'.
  extern int cci_bind_param (int req_handle, int index, T_CCI_A_TYPE a_type,
                                 ^
src/cci/cas_cci.c:1116:21: note: Function 'cci_bind_param' argument 1 names different: declaration 'req_handle' definition 'mapped_stmt_id'.
cci_bind_param (int mapped_stmt_id, int index, T_CCI_A_TYPE a_type, void *value, T_CCI_U_TYPE u_type, char flag)
                    ^
src/cci/cas_cci.c:1163:29: style:inconclusive: Function 'cci_register_out_param' argument 1 names different: declaration 'req_h_id' definition 'mapped_stmt_id'. [funcArgNamesDifferent]
cci_register_out_param (int mapped_stmt_id, int index)
                            ^
src/cci/cas_cci.h:901:42: note: Function 'cci_register_out_param' argument 1 names different: declaration 'req_h_id' definition 'mapped_stmt_id'.
  extern int cci_register_out_param (int req_h_id, int index);
                                         ^
src/cci/cas_cci.c:1163:29: note: Function 'cci_register_out_param' argument 1 names different: declaration 'req_h_id' definition 'mapped_stmt_id'.
cci_register_out_param (int mapped_stmt_id, int index)
                            ^
src/cci/cas_cci.c:1169:32: style:inconclusive: Function 'cci_register_out_param_ex' argument 1 names different: declaration 'req_h_id' definition 'mapped_stmt_id'. [funcArgNamesDifferent]
cci_register_out_param_ex (int mapped_stmt_id, int index, T_CCI_U_TYPE u_type)
                               ^
src/cci/cas_cci.h:902:45: note: Function 'cci_register_out_param_ex' argument 1 names different: declaration 'req_h_id' definition 'mapped_stmt_id'.
  extern int cci_register_out_param_ex (int req_h_id, int index, T_CCI_U_TYPE u_type);
                                            ^
src/cci/cas_cci.c:1169:32: note: Function 'cci_register_out_param_ex' argument 1 names different: declaration 'req_h_id' definition 'mapped_stmt_id'.
cci_register_out_param_ex (int mapped_stmt_id, int index, T_CCI_U_TYPE u_type)
                               ^
src/cci/cas_cci.c:1203:32: style:inconclusive: Function 'cci_bind_param_array_size' argument 1 names different: declaration 'req_h_id' definition 'mapped_stmt_id'. [funcArgNamesDifferent]
cci_bind_param_array_size (int mapped_stmt_id, int array_size)
                               ^
src/cci/cas_cci.h:857:45: note: Function 'cci_bind_param_array_size' argument 1 names different: declaration 'req_h_id' definition 'mapped_stmt_id'.
  extern int cci_bind_param_array_size (int req_h_id, int array_size);
                                            ^
src/cci/cas_cci.c:1203:32: note: Function 'cci_bind_param_array_size' argument 1 names different: declaration 'req_h_id' definition 'mapped_stmt_id'.
cci_bind_param_array_size (int mapped_stmt_id, int array_size)
                               ^
src/cci/cas_cci.c:1228:27: style:inconclusive: Function 'cci_bind_param_array' argument 1 names different: declaration 'req_h_id' definition 'mapped_stmt_id'. [funcArgNamesDifferent]
cci_bind_param_array (int mapped_stmt_id, int index, T_CCI_A_TYPE a_type, void *value, int *null_ind,
                          ^
src/cci/cas_cci.h:858:40: note: Function 'cci_bind_param_array' argument 1 names different: declaration 'req_h_id' definition 'mapped_stmt_id'.
  extern int cci_bind_param_array (int req_h_id, int index,
                                       ^
src/cci/cas_cci.c:1228:27: note: Function 'cci_bind_param_array' argument 1 names different: declaration 'req_h_id' definition 'mapped_stmt_id'.
cci_bind_param_array (int mapped_stmt_id, int index, T_CCI_A_TYPE a_type, void *value, int *null_ind,
                          ^
src/cci/cas_cci.c:1280:18: style:inconclusive: Function 'cci_execute' argument 1 names different: declaration 'req_handle' definition 'mapped_stmt_id'. [funcArgNamesDifferent]
cci_execute (int mapped_stmt_id, char flag, int max_col_size, T_CCI_ERROR * err_buf)
                 ^
src/cci/cas_cci.h:810:31: note: Function 'cci_execute' argument 1 names different: declaration 'req_handle' definition 'mapped_stmt_id'.
  extern int cci_execute (int req_handle, char flag, int max_col_size, T_CCI_ERROR * err_buf);
                              ^
src/cci/cas_cci.c:1280:18: note: Function 'cci_execute' argument 1 names different: declaration 'req_handle' definition 'mapped_stmt_id'.
cci_execute (int mapped_stmt_id, char flag, int max_col_size, T_CCI_ERROR * err_buf)
                 ^
src/cci/cas_cci.c:1446:30: style:inconclusive: Function 'cci_prepare_and_execute' argument 1 names different: declaration 'con_handle' definition 'mapped_conn_id'. [funcArgNamesDifferent]
cci_prepare_and_execute (int mapped_conn_id, char *sql_stmt, int max_col_size, int *exec_retval, T_CCI_ERROR * err_buf)
                             ^
src/cci/cas_cci.h:811:43: note: Function 'cci_prepare_and_execute' argument 1 names different: declaration 'con_handle' definition 'mapped_conn_id'.
  extern int cci_prepare_and_execute (int con_handle, char *sql_stmt,
                                          ^
src/cci/cas_cci.c:1446:30: note: Function 'cci_prepare_and_execute' argument 1 names different: declaration 'con_handle' definition 'mapped_conn_id'.
cci_prepare_and_execute (int mapped_conn_id, char *sql_stmt, int max_col_size, int *exec_retval, T_CCI_ERROR * err_buf)
                             ^
src/cci/cas_cci.c:1598:22: style:inconclusive: Function 'cci_next_result' argument 1 names different: declaration 'req_h_id' definition 'mapped_stmt_id'. [funcArgNamesDifferent]
cci_next_result (int mapped_stmt_id, T_CCI_ERROR * err_buf)
                     ^
src/cci/cas_cci.h:856:35: note: Function 'cci_next_result' argument 1 names different: declaration 'req_h_id' definition 'mapped_stmt_id'.
  extern int cci_next_result (int req_h_id, T_CCI_ERROR * err_buf);
                                  ^
src/cci/cas_cci.c:1598:22: note: Function 'cci_next_result' argument 1 names different: declaration 'req_h_id' definition 'mapped_stmt_id'.
cci_next_result (int mapped_stmt_id, T_CCI_ERROR * err_buf)
                     ^
src/cci/cas_cci.c:1645:24: style:inconclusive: Function 'cci_execute_array' argument 1 names different: declaration 'req_h_id' definition 'mapped_stmt_id'. [funcArgNamesDifferent]
cci_execute_array (int mapped_stmt_id, T_CCI_QUERY_RESULT ** qr, T_CCI_ERROR * err_buf)
                       ^
src/cci/cas_cci.h:860:37: note: Function 'cci_execute_array' argument 1 names different: declaration 'req_h_id' definition 'mapped_stmt_id'.
  extern int cci_execute_array (int req_h_id, T_CCI_QUERY_RESULT ** qr, T_CCI_ERROR * err_buf);
                                    ^
src/cci/cas_cci.c:1645:24: note: Function 'cci_execute_array' argument 1 names different: declaration 'req_h_id' definition 'mapped_stmt_id'.
cci_execute_array (int mapped_stmt_id, T_CCI_QUERY_RESULT ** qr, T_CCI_ERROR * err_buf)
                       ^
src/cci/cas_cci.c:1768:27: style:inconclusive: Function 'cci_get_db_parameter' argument 1 names different: declaration 'con_handle' definition 'mapped_conn_id'. [funcArgNamesDifferent]
cci_get_db_parameter (int mapped_conn_id, T_CCI_DB_PARAM param_name, void *value, T_CCI_ERROR * err_buf)
                          ^
src/cci/cas_cci.h:813:40: note: Function 'cci_get_db_parameter' argument 1 names different: declaration 'con_handle' definition 'mapped_conn_id'.
  extern int cci_get_db_parameter (int con_handle, T_CCI_DB_PARAM param_name, void *value, T_CCI_ERROR * err_buf);
                                       ^
src/cci/cas_cci.c:1768:27: note: Function 'cci_get_db_parameter' argument 1 names different: declaration 'con_handle' definition 'mapped_conn_id'.
cci_get_db_parameter (int mapped_conn_id, T_CCI_DB_PARAM param_name, void *value, T_CCI_ERROR * err_buf)
                          ^
src/cci/cas_cci.c:1835:24: style:inconclusive: Function 'cci_escape_string' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'. [funcArgNamesDifferent]
cci_escape_string (int mapped_conn_id, char *to, const char *from, unsigned long length, T_CCI_ERROR * err_buf)
                       ^
src/cci/cas_cci.h:816:38: note: Function 'cci_escape_string' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
  extern long cci_escape_string (int con_h_id, char *to, const char *from, unsigned long length, T_CCI_ERROR * err_buf);
                                     ^
src/cci/cas_cci.c:1835:24: note: Function 'cci_escape_string' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
cci_escape_string (int mapped_conn_id, char *to, const char *from, unsigned long length, T_CCI_ERROR * err_buf)
                       ^
src/cci/cas_cci.c:1973:27: style:inconclusive: Function 'cci_set_db_parameter' argument 1 names different: declaration 'con_handle' definition 'mapped_conn_id'. [funcArgNamesDifferent]
cci_set_db_parameter (int mapped_conn_id, T_CCI_DB_PARAM param_name, void *value, T_CCI_ERROR * err_buf)
                          ^
src/cci/cas_cci.h:814:40: note: Function 'cci_set_db_parameter' argument 1 names different: declaration 'con_handle' definition 'mapped_conn_id'.
  extern int cci_set_db_parameter (int con_handle, T_CCI_DB_PARAM param_name, void *value, T_CCI_ERROR * err_buf);
                                       ^
src/cci/cas_cci.c:1973:27: note: Function 'cci_set_db_parameter' argument 1 names different: declaration 'con_handle' definition 'mapped_conn_id'.
cci_set_db_parameter (int mapped_conn_id, T_CCI_DB_PARAM param_name, void *value, T_CCI_ERROR * err_buf)
                          ^
src/cci/cas_cci.c:2091:50: style:inconclusive: Function 'cci_set_cas_change_mode' argument 2 names different: declaration 'mode' definition 'driver_mode'. [funcArgNamesDifferent]
cci_set_cas_change_mode (int mapped_conn_id, int driver_mode, T_CCI_ERROR * err_buf)
                                                 ^
src/cci/cas_cci.h:815:63: note: Function 'cci_set_cas_change_mode' argument 2 names different: declaration 'mode' definition 'driver_mode'.
  extern int cci_set_cas_change_mode (int mapped_conn_id, int mode, T_CCI_ERROR * err_buf);
                                                              ^
src/cci/cas_cci.c:2091:50: note: Function 'cci_set_cas_change_mode' argument 2 names different: declaration 'mode' definition 'driver_mode'.
cci_set_cas_change_mode (int mapped_conn_id, int driver_mode, T_CCI_ERROR * err_buf)
                                                 ^
src/cci/cas_cci.c:2162:29: style:inconclusive: Function 'cci_close_query_result' argument 1 names different: declaration 'req_handle' definition 'mapped_stmt_id'. [funcArgNamesDifferent]
cci_close_query_result (int mapped_stmt_id, T_CCI_ERROR * err_buf)
                            ^
src/cci/cas_cci.h:817:42: note: Function 'cci_close_query_result' argument 1 names different: declaration 'req_handle' definition 'mapped_stmt_id'.
  extern int cci_close_query_result (int req_handle, T_CCI_ERROR * err_buf);
                                         ^
src/cci/cas_cci.c:2162:29: note: Function 'cci_close_query_result' argument 1 names different: declaration 'req_handle' definition 'mapped_stmt_id'.
cci_close_query_result (int mapped_stmt_id, T_CCI_ERROR * err_buf)
                            ^
src/cci/cas_cci.c:2203:27: style:inconclusive: Function 'cci_close_req_handle' argument 1 names different: declaration 'req_handle' definition 'mapped_stmt_id'. [funcArgNamesDifferent]
cci_close_req_handle (int mapped_stmt_id)
                          ^
src/cci/cas_cci.h:818:40: note: Function 'cci_close_req_handle' argument 1 names different: declaration 'req_handle' definition 'mapped_stmt_id'.
  extern int cci_close_req_handle (int req_handle);
                                       ^
src/cci/cas_cci.c:2203:27: note: Function 'cci_close_req_handle' argument 1 names different: declaration 'req_handle' definition 'mapped_stmt_id'.
cci_close_req_handle (int mapped_stmt_id)
                          ^
src/cci/cas_cci.c:2274:17: style:inconclusive: Function 'cci_cursor' argument 1 names different: declaration 'req_handle' definition 'mapped_stmt_id'. [funcArgNamesDifferent]
cci_cursor (int mapped_stmt_id, int offset, T_CCI_CURSOR_POS origin, T_CCI_ERROR * err_buf)
                ^
src/cci/cas_cci.h:819:30: note: Function 'cci_cursor' argument 1 names different: declaration 'req_handle' definition 'mapped_stmt_id'.
  extern int cci_cursor (int req_handle, int offset, T_CCI_CURSOR_POS origin, T_CCI_ERROR * err_buf);
                             ^
src/cci/cas_cci.c:2274:17: note: Function 'cci_cursor' argument 1 names different: declaration 'req_handle' definition 'mapped_stmt_id'.
cci_cursor (int mapped_stmt_id, int offset, T_CCI_CURSOR_POS origin, T_CCI_ERROR * err_buf)
                ^
src/cci/cas_cci.c:2305:21: style:inconclusive: Function 'cci_fetch_size' argument 1 names different: declaration 'req_handle' definition 'mapped_stmt_id'. [funcArgNamesDifferent]
cci_fetch_size (int mapped_stmt_id, int fetch_size)
                    ^
src/cci/cas_cci.h:820:34: note: Function 'cci_fetch_size' argument 1 names different: declaration 'req_handle' definition 'mapped_stmt_id'.
  extern int cci_fetch_size (int req_handle, int fetch_size);
                                 ^
src/cci/cas_cci.c:2305:21: note: Function 'cci_fetch_size' argument 1 names different: declaration 'req_handle' definition 'mapped_stmt_id'.
cci_fetch_size (int mapped_stmt_id, int fetch_size)
                    ^
src/cci/cas_cci.c:2329:16: style:inconclusive: Function 'cci_fetch' argument 1 names different: declaration 'req_handle' definition 'mapped_stmt_id'. [funcArgNamesDifferent]
cci_fetch (int mapped_stmt_id, T_CCI_ERROR * err_buf)
               ^
src/cci/cas_cci.h:821:29: note: Function 'cci_fetch' argument 1 names different: declaration 'req_handle' definition 'mapped_stmt_id'.
  extern int cci_fetch (int req_handle, T_CCI_ERROR * err_buf);
                            ^
src/cci/cas_cci.c:2329:16: note: Function 'cci_fetch' argument 1 names different: declaration 'req_handle' definition 'mapped_stmt_id'.
cci_fetch (int mapped_stmt_id, T_CCI_ERROR * err_buf)
               ^
src/cci/cas_cci.c:2339:26: style:inconclusive: Function 'cci_fetch_sensitive' argument 1 names different: declaration 'req_h_id' definition 'mapped_stmt_id'. [funcArgNamesDifferent]
cci_fetch_sensitive (int mapped_stmt_id, T_CCI_ERROR * err_buf)
                         ^
src/cci/cas_cci.h:862:39: note: Function 'cci_fetch_sensitive' argument 1 names different: declaration 'req_h_id' definition 'mapped_stmt_id'.
  extern int cci_fetch_sensitive (int req_h_id, T_CCI_ERROR * err_buf);
                                      ^
src/cci/cas_cci.c:2339:26: note: Function 'cci_fetch_sensitive' argument 1 names different: declaration 'req_h_id' definition 'mapped_stmt_id'.
cci_fetch_sensitive (int mapped_stmt_id, T_CCI_ERROR * err_buf)
                         ^
src/cci/cas_cci.c:2349:19: style:inconclusive: Function 'cci_get_data' argument 1 names different: declaration 'req_handle' definition 'mapped_stmt_id'. [funcArgNamesDifferent]
cci_get_data (int mapped_stmt_id, int col_no, int a_type, void *value, int *indicator)
                  ^
src/cci/cas_cci.h:822:32: note: Function 'cci_get_data' argument 1 names different: declaration 'req_handle' definition 'mapped_stmt_id'.
  extern int cci_get_data (int req_handle, int col_no, int type, void *value, int *indicator);
                               ^
src/cci/cas_cci.c:2349:19: note: Function 'cci_get_data' argument 1 names different: declaration 'req_handle' definition 'mapped_stmt_id'.
cci_get_data (int mapped_stmt_id, int col_no, int a_type, void *value, int *indicator)
                  ^
src/cci/cas_cci.c:2349:51: style:inconclusive: Function 'cci_get_data' argument 3 names different: declaration 'type' definition 'a_type'. [funcArgNamesDifferent]
cci_get_data (int mapped_stmt_id, int col_no, int a_type, void *value, int *indicator)
                                                  ^
src/cci/cas_cci.h:822:60: note: Function 'cci_get_data' argument 3 names different: declaration 'type' definition 'a_type'.
  extern int cci_get_data (int req_handle, int col_no, int type, void *value, int *indicator);
                                                           ^
src/cci/cas_cci.c:2349:51: note: Function 'cci_get_data' argument 3 names different: declaration 'type' definition 'a_type'.
cci_get_data (int mapped_stmt_id, int col_no, int a_type, void *value, int *indicator)
                                                  ^
src/cci/cas_cci.c:2451:22: style:inconclusive: Function 'cci_schema_info' argument 1 names different: declaration 'con_handle' definition 'mapped_conn_id'. [funcArgNamesDifferent]
cci_schema_info (int mapped_conn_id, T_CCI_SCH_TYPE type, char *arg1, char *arg2, char flag, T_CCI_ERROR * err_buf)
                     ^
src/cci/cas_cci.h:823:35: note: Function 'cci_schema_info' argument 1 names different: declaration 'con_handle' definition 'mapped_conn_id'.
  extern int cci_schema_info (int con_handle, T_CCI_SCH_TYPE type, char *arg1,
                                  ^
src/cci/cas_cci.c:2451:22: note: Function 'cci_schema_info' argument 1 names different: declaration 'con_handle' definition 'mapped_conn_id'.
cci_schema_info (int mapped_conn_id, T_CCI_SCH_TYPE type, char *arg1, char *arg2, char flag, T_CCI_ERROR * err_buf)
                     ^
src/cci/cas_cci.c:2460:28: style:inconclusive: Function 'cci_shard_schema_info' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'. [funcArgNamesDifferent]
cci_shard_schema_info (int mapped_conn_id, int shard_id, T_CCI_SCH_TYPE type, char *class_name, char *attr_name,
                           ^
src/cci/cas_cci.h:950:41: note: Function 'cci_shard_schema_info' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
  extern int cci_shard_schema_info (int con_h_id, int shard_id,
                                        ^
src/cci/cas_cci.c:2460:28: note: Function 'cci_shard_schema_info' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
cci_shard_schema_info (int mapped_conn_id, int shard_id, T_CCI_SCH_TYPE type, char *class_name, char *attr_name,
                           ^
src/cci/cas_cci.c:2479:19: style:inconclusive: Function 'cci_is_shard' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'. [funcArgNamesDifferent]
cci_is_shard (int mapped_conn_id, T_CCI_ERROR * err_buf)
                  ^
src/cci/cas_cci.h:953:32: note: Function 'cci_is_shard' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
  extern int cci_is_shard (int con_h_id, T_CCI_ERROR * err_buf);
                               ^
src/cci/cas_cci.c:2479:19: note: Function 'cci_is_shard' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
cci_is_shard (int mapped_conn_id, T_CCI_ERROR * err_buf)
                  ^
src/cci/cas_cci.c:2498:22: style:inconclusive: Function 'cci_get_cur_oid' argument 1 names different: declaration 'req_handle' definition 'mapped_stmt_id'. [funcArgNamesDifferent]
cci_get_cur_oid (int mapped_stmt_id, char *oid_str_buf)
                     ^
src/cci/cas_cci.h:825:35: note: Function 'cci_get_cur_oid' argument 1 names different: declaration 'req_handle' definition 'mapped_stmt_id'.
  extern int cci_get_cur_oid (int req_handle, char *oid_str_buf);
                                  ^
src/cci/cas_cci.c:2498:22: note: Function 'cci_get_cur_oid' argument 1 names different: declaration 'req_handle' definition 'mapped_stmt_id'.
cci_get_cur_oid (int mapped_stmt_id, char *oid_str_buf)
                     ^
src/cci/cas_cci.c:2525:18: style:inconclusive: Function 'cci_oid_get' argument 1 names different: declaration 'con_handle' definition 'mapped_conn_id'. [funcArgNamesDifferent]
cci_oid_get (int mapped_conn_id, char *oid_str, char **attr_name, T_CCI_ERROR * err_buf)
                 ^
src/cci/cas_cci.h:826:31: note: Function 'cci_oid_get' argument 1 names different: declaration 'con_handle' definition 'mapped_conn_id'.
  extern int cci_oid_get (int con_handle, char *oid_str, char **attr_name, T_CCI_ERROR * err_buf);
                              ^
src/cci/cas_cci.c:2525:18: note: Function 'cci_oid_get' argument 1 names different: declaration 'con_handle' definition 'mapped_conn_id'.
cci_oid_get (int mapped_conn_id, char *oid_str, char **attr_name, T_CCI_ERROR * err_buf)
                 ^
src/cci/cas_cci.c:2592:18: style:inconclusive: Function 'cci_oid_put' argument 1 names different: declaration 'con_handle' definition 'mapped_conn_id'. [funcArgNamesDifferent]
cci_oid_put (int mapped_conn_id, char *oid_str, char **attr_name, char **new_val, T_CCI_ERROR * err_buf)
                 ^
src/cci/cas_cci.h:827:31: note: Function 'cci_oid_put' argument 1 names different: declaration 'con_handle' definition 'mapped_conn_id'.
  extern int cci_oid_put (int con_handle, char *oid_str, char **attr_name, char **new_val, T_CCI_ERROR * err_buf);
                              ^
src/cci/cas_cci.c:2592:18: note: Function 'cci_oid_put' argument 1 names different: declaration 'con_handle' definition 'mapped_conn_id'.
cci_oid_put (int mapped_conn_id, char *oid_str, char **attr_name, char **new_val, T_CCI_ERROR * err_buf)
                 ^
src/cci/cas_cci.c:2641:19: style:inconclusive: Function 'cci_oid_put2' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'. [funcArgNamesDifferent]
cci_oid_put2 (int mapped_conn_id, char *oid_str, char **attr_name, void **new_val, int *a_type, T_CCI_ERROR * err_buf)
                  ^
src/cci/cas_cci.h:828:32: note: Function 'cci_oid_put2' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
  extern int cci_oid_put2 (int con_h_id, char *oid_str, char **attr_name,
                               ^
src/cci/cas_cci.c:2641:19: note: Function 'cci_oid_put2' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
cci_oid_put2 (int mapped_conn_id, char *oid_str, char **attr_name, void **new_val, int *a_type, T_CCI_ERROR * err_buf)
                  ^
src/cci/cas_cci.c:2690:25: style:inconclusive: Function 'cci_set_autocommit' argument 1 names different: declaration 'con_handle' definition 'mapped_conn_id'. [funcArgNamesDifferent]
cci_set_autocommit (int mapped_conn_id, CCI_AUTOCOMMIT_MODE autocommit_mode)
                        ^
src/cci/cas_cci.h:832:38: note: Function 'cci_set_autocommit' argument 1 names different: declaration 'con_handle' definition 'mapped_conn_id'.
  extern int cci_set_autocommit (int con_handle, CCI_AUTOCOMMIT_MODE autocommit_mode);
                                     ^
src/cci/cas_cci.c:2690:25: note: Function 'cci_set_autocommit' argument 1 names different: declaration 'con_handle' definition 'mapped_conn_id'.
cci_set_autocommit (int mapped_conn_id, CCI_AUTOCOMMIT_MODE autocommit_mode)
                        ^
src/cci/cas_cci.c:2721:25: style:inconclusive: Function 'cci_get_autocommit' argument 1 names different: declaration 'con_handle' definition 'mapped_conn_id'. [funcArgNamesDifferent]
cci_get_autocommit (int mapped_conn_id)
                        ^
src/cci/cas_cci.h:831:54: note: Function 'cci_get_autocommit' argument 1 names different: declaration 'con_handle' definition 'mapped_conn_id'.
  extern CCI_AUTOCOMMIT_MODE cci_get_autocommit (int con_handle);
                                                     ^
src/cci/cas_cci.c:2721:25: note: Function 'cci_get_autocommit' argument 1 names different: declaration 'con_handle' definition 'mapped_conn_id'.
cci_get_autocommit (int mapped_conn_id)
                        ^
src/cci/cas_cci.c:2743:26: style:inconclusive: Function 'cci_set_holdability' argument 1 names different: declaration 'con_handle_id' definition 'mapped_conn_id'. [funcArgNamesDifferent]
cci_set_holdability (int mapped_conn_id, int holdable)
                         ^
src/cci/cas_cci.h:833:39: note: Function 'cci_set_holdability' argument 1 names different: declaration 'con_handle_id' definition 'mapped_conn_id'.
  extern int cci_set_holdability (int con_handle_id, int holdable);
                                      ^
src/cci/cas_cci.c:2743:26: note: Function 'cci_set_holdability' argument 1 names different: declaration 'con_handle_id' definition 'mapped_conn_id'.
cci_set_holdability (int mapped_conn_id, int holdable)
                         ^
src/cci/cas_cci.c:2771:26: style:inconclusive: Function 'cci_get_holdability' argument 1 names different: declaration 'con_handle_id' definition 'mapped_conn_id'. [funcArgNamesDifferent]
cci_get_holdability (int mapped_conn_id)
                         ^
src/cci/cas_cci.h:834:39: note: Function 'cci_get_holdability' argument 1 names different: declaration 'con_handle_id' definition 'mapped_conn_id'.
  extern int cci_get_holdability (int con_handle_id);
                                      ^
src/cci/cas_cci.c:2771:26: note: Function 'cci_get_holdability' argument 1 names different: declaration 'con_handle_id' definition 'mapped_conn_id'.
cci_get_holdability (int mapped_conn_id)
                         ^
src/cci/cas_cci.c:2792:25: style:inconclusive: Function 'cci_get_db_version' argument 1 names different: declaration 'con_handle' definition 'mapped_conn_id'. [funcArgNamesDifferent]
cci_get_db_version (int mapped_conn_id, char *out_buf, int buf_size)
                        ^
src/cci/cas_cci.h:830:38: note: Function 'cci_get_db_version' argument 1 names different: declaration 'con_handle' definition 'mapped_conn_id'.
  extern int cci_get_db_version (int con_handle, char *out_buf, int buf_size);
                                     ^
src/cci/cas_cci.c:2792:25: note: Function 'cci_get_db_version' argument 1 names different: declaration 'con_handle' definition 'mapped_conn_id'.
cci_get_db_version (int mapped_conn_id, char *out_buf, int buf_size)
                        ^
src/cci/cas_cci.c:2840:29: style:inconclusive: Function 'cci_get_class_num_objs' argument 1 names different: declaration 'conn_handle' definition 'mapped_conn_id'. [funcArgNamesDifferent]
cci_get_class_num_objs (int mapped_conn_id, char *class_name, int flag, int *num_objs, int *num_pages,
                            ^
src/cci/cas_cci.h:838:42: note: Function 'cci_get_class_num_objs' argument 1 names different: declaration 'conn_handle' definition 'mapped_conn_id'.
  extern int cci_get_class_num_objs (int conn_handle, char *class_name,
                                         ^
src/cci/cas_cci.c:2840:29: note: Function 'cci_get_class_num_objs' argument 1 names different: declaration 'conn_handle' definition 'mapped_conn_id'.
cci_get_class_num_objs (int mapped_conn_id, char *class_name, int flag, int *num_objs, int *num_pages,
                            ^
src/cci/cas_cci.c:2889:14: style:inconclusive: Function 'cci_oid' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'. [funcArgNamesDifferent]
cci_oid (int mapped_conn_id, T_CCI_OID_CMD cmd, char *oid_str, T_CCI_ERROR * err_buf)
             ^
src/cci/cas_cci.h:840:27: note: Function 'cci_oid' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
  extern int cci_oid (int con_h_id, T_CCI_OID_CMD cmd, char *oid_str, T_CCI_ERROR * err_buf);
                          ^
src/cci/cas_cci.c:2889:14: note: Function 'cci_oid' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
cci_oid (int mapped_conn_id, T_CCI_OID_CMD cmd, char *oid_str, T_CCI_ERROR * err_buf)
             ^
src/cci/cas_cci.c:2931:29: style:inconclusive: Function 'cci_oid_get_class_name' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'. [funcArgNamesDifferent]
cci_oid_get_class_name (int mapped_conn_id, char *oid_str, char *out_buf, int out_buf_size, T_CCI_ERROR * err_buf)
                            ^
src/cci/cas_cci.h:841:42: note: Function 'cci_oid_get_class_name' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
  extern int cci_oid_get_class_name (int con_h_id, char *oid_str,
                                         ^
src/cci/cas_cci.c:2931:29: note: Function 'cci_oid_get_class_name' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
cci_oid_get_class_name (int mapped_conn_id, char *oid_str, char *out_buf, int out_buf_size, T_CCI_ERROR * err_buf)
                            ^
src/cci/cas_cci.c:2931:79: style:inconclusive: Function 'cci_oid_get_class_name' argument 4 names different: declaration 'out_buf_len' definition 'out_buf_size'. [funcArgNamesDifferent]
cci_oid_get_class_name (int mapped_conn_id, char *oid_str, char *out_buf, int out_buf_size, T_CCI_ERROR * err_buf)
                                                                              ^
src/cci/cas_cci.h:842:29: note: Function 'cci_oid_get_class_name' argument 4 names different: declaration 'out_buf_len' definition 'out_buf_size'.
         char *out_buf, int out_buf_len, T_CCI_ERROR * err_buf);
                            ^
src/cci/cas_cci.c:2931:79: note: Function 'cci_oid_get_class_name' argument 4 names different: declaration 'out_buf_len' definition 'out_buf_size'.
cci_oid_get_class_name (int mapped_conn_id, char *oid_str, char *out_buf, int out_buf_size, T_CCI_ERROR * err_buf)
                                                                              ^
src/cci/cas_cci.c:2974:18: style:inconclusive: Function 'cci_col_get' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'. [funcArgNamesDifferent]
cci_col_get (int mapped_conn_id, char *oid_str, char *col_attr, int *col_size, int *col_type, T_CCI_ERROR * err_buf)
                 ^
src/cci/cas_cci.h:843:31: note: Function 'cci_col_get' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
  extern int cci_col_get (int con_h_id, char *oid_str, char *col_attr,
                              ^
src/cci/cas_cci.c:2974:18: note: Function 'cci_col_get' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
cci_col_get (int mapped_conn_id, char *oid_str, char *col_attr, int *col_size, int *col_type, T_CCI_ERROR * err_buf)
                 ^
src/cci/cas_cci.c:3038:19: style:inconclusive: Function 'cci_col_size' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'. [funcArgNamesDifferent]
cci_col_size (int mapped_conn_id, char *oid_str, char *col_attr, int *col_size, T_CCI_ERROR * err_buf)
                  ^
src/cci/cas_cci.h:845:32: note: Function 'cci_col_size' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
  extern int cci_col_size (int con_h_id, char *oid_str, char *col_attr, int *col_size, T_CCI_ERROR * err_buf);
                               ^
src/cci/cas_cci.c:3038:19: note: Function 'cci_col_size' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
cci_col_size (int mapped_conn_id, char *oid_str, char *col_attr, int *col_size, T_CCI_ERROR * err_buf)
                  ^
src/cci/cas_cci.c:3080:23: style:inconclusive: Function 'cci_col_set_drop' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'. [funcArgNamesDifferent]
cci_col_set_drop (int mapped_conn_id, char *oid_str, char *col_attr, char *value, T_CCI_ERROR * err_buf)
                      ^
src/cci/cas_cci.h:846:36: note: Function 'cci_col_set_drop' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
  extern int cci_col_set_drop (int con_h_id, char *oid_str, char *col_attr, char *value, T_CCI_ERROR * err_buf);
                                   ^
src/cci/cas_cci.c:3080:23: note: Function 'cci_col_set_drop' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
cci_col_set_drop (int mapped_conn_id, char *oid_str, char *col_attr, char *value, T_CCI_ERROR * err_buf)
                      ^
src/cci/cas_cci.c:3090:22: style:inconclusive: Function 'cci_col_set_add' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'. [funcArgNamesDifferent]
cci_col_set_add (int mapped_conn_id, char *oid_str, char *col_attr, char *value, T_CCI_ERROR * err_buf)
                     ^
src/cci/cas_cci.h:847:35: note: Function 'cci_col_set_add' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
  extern int cci_col_set_add (int con_h_id, char *oid_str, char *col_attr, char *value, T_CCI_ERROR * err_buf);
                                  ^
src/cci/cas_cci.c:3090:22: note: Function 'cci_col_set_add' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
cci_col_set_add (int mapped_conn_id, char *oid_str, char *col_attr, char *value, T_CCI_ERROR * err_buf)
                     ^
src/cci/cas_cci.c:3100:23: style:inconclusive: Function 'cci_col_seq_drop' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'. [funcArgNamesDifferent]
cci_col_seq_drop (int mapped_conn_id, char *oid_str, char *col_attr, int index, T_CCI_ERROR * err_buf)
                      ^
src/cci/cas_cci.h:848:36: note: Function 'cci_col_seq_drop' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
  extern int cci_col_seq_drop (int con_h_id, char *oid_str, char *col_attr, int index, T_CCI_ERROR * err_buf);
                                   ^
src/cci/cas_cci.c:3100:23: note: Function 'cci_col_seq_drop' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
cci_col_seq_drop (int mapped_conn_id, char *oid_str, char *col_attr, int index, T_CCI_ERROR * err_buf)
                      ^
src/cci/cas_cci.c:3110:25: style:inconclusive: Function 'cci_col_seq_insert' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'. [funcArgNamesDifferent]
cci_col_seq_insert (int mapped_conn_id, char *oid_str, char *col_attr, int index, char *value, T_CCI_ERROR * err_buf)
                        ^
src/cci/cas_cci.h:849:38: note: Function 'cci_col_seq_insert' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
  extern int cci_col_seq_insert (int con_h_id, char *oid_str, char *col_attr,
                                     ^
src/cci/cas_cci.c:3110:25: note: Function 'cci_col_seq_insert' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
cci_col_seq_insert (int mapped_conn_id, char *oid_str, char *col_attr, int index, char *value, T_CCI_ERROR * err_buf)
                        ^
src/cci/cas_cci.c:3120:22: style:inconclusive: Function 'cci_col_seq_put' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'. [funcArgNamesDifferent]
cci_col_seq_put (int mapped_conn_id, char *oid_str, char *col_attr, int index, char *value, T_CCI_ERROR * err_buf)
                     ^
src/cci/cas_cci.h:851:35: note: Function 'cci_col_seq_put' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
  extern int cci_col_seq_put (int con_h_id, char *oid_str, char *col_attr,
                                  ^
src/cci/cas_cci.c:3120:22: note: Function 'cci_col_seq_put' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
cci_col_seq_put (int mapped_conn_id, char *oid_str, char *col_attr, int index, char *value, T_CCI_ERROR * err_buf)
                     ^
src/cci/cas_cci.c:3142:24: style:inconclusive: Function 'cci_cursor_update' argument 1 names different: declaration 'req_h_id' definition 'mapped_stmt_id'. [funcArgNamesDifferent]
cci_cursor_update (int mapped_stmt_id, int cursor_pos, int index, T_CCI_A_TYPE a_type, void *value,
                       ^
src/cci/cas_cci.h:863:37: note: Function 'cci_cursor_update' argument 1 names different: declaration 'req_h_id' definition 'mapped_stmt_id'.
  extern int cci_cursor_update (int req_h_id, int cursor_pos, int index,
                                    ^
src/cci/cas_cci.c:3142:24: note: Function 'cci_cursor_update' argument 1 names different: declaration 'req_h_id' definition 'mapped_stmt_id'.
cci_cursor_update (int mapped_stmt_id, int cursor_pos, int index, T_CCI_A_TYPE a_type, void *value,
                       ^
src/cci/cas_cci.c:3188:24: style:inconclusive: Function 'cci_execute_batch' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'. [funcArgNamesDifferent]
cci_execute_batch (int mapped_conn_id, int num_query, char **sql_stmt, T_CCI_QUERY_RESULT ** qr, T_CCI_ERROR * err_buf)
                       ^
src/cci/cas_cci.h:865:37: note: Function 'cci_execute_batch' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
  extern int cci_execute_batch (int con_h_id, int num_query, char **sql_stmt,
                                    ^
src/cci/cas_cci.c:3188:24: note: Function 'cci_execute_batch' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
cci_execute_batch (int mapped_conn_id, int num_query, char **sql_stmt, T_CCI_QUERY_RESULT ** qr, T_CCI_ERROR * err_buf)
                       ^
src/cci/cas_cci.c:3260:29: style:inconclusive: Function 'cci_fetch_buffer_clear' argument 1 names different: declaration 'req_h_id' definition 'mapped_stmt_id'. [funcArgNamesDifferent]
cci_fetch_buffer_clear (int mapped_stmt_id)
                            ^
src/cci/cas_cci.h:867:42: note: Function 'cci_fetch_buffer_clear' argument 1 names different: declaration 'req_h_id' definition 'mapped_stmt_id'.
  extern int cci_fetch_buffer_clear (int req_h_id);
                                         ^
src/cci/cas_cci.c:3260:29: note: Function 'cci_fetch_buffer_clear' argument 1 names different: declaration 'req_h_id' definition 'mapped_stmt_id'.
cci_fetch_buffer_clear (int mapped_stmt_id)
                            ^
src/cci/cas_cci.c:3283:25: style:inconclusive: Function 'cci_execute_result' argument 1 names different: declaration 'req_h_id' definition 'mapped_stmt_id'. [funcArgNamesDifferent]
cci_execute_result (int mapped_stmt_id, T_CCI_QUERY_RESULT ** qr, T_CCI_ERROR * err_buf)
                        ^
src/cci/cas_cci.h:868:38: note: Function 'cci_execute_result' argument 1 names different: declaration 'req_h_id' definition 'mapped_stmt_id'.
  extern int cci_execute_result (int req_h_id, T_CCI_QUERY_RESULT ** qr, T_CCI_ERROR * err_buf);
                                     ^
src/cci/cas_cci.c:3283:25: note: Function 'cci_execute_result' argument 1 names different: declaration 'req_h_id' definition 'mapped_stmt_id'.
cci_execute_result (int mapped_stmt_id, T_CCI_QUERY_RESULT ** qr, T_CCI_ERROR * err_buf)
                        ^
src/cci/cas_cci.c:3351:49: style:inconclusive: Function 'cci_get_login_timeout' argument 2 names different: declaration 'timeout' definition 'val'. [funcArgNamesDifferent]
cci_get_login_timeout (int mapped_conn_id, int *val, T_CCI_ERROR * err_buf)
                                                ^
src/cci/cas_cci.h:836:62: note: Function 'cci_get_login_timeout' argument 2 names different: declaration 'timeout' definition 'val'.
  extern int cci_get_login_timeout (int mapped_conn_id, int *timeout, T_CCI_ERROR * err_buf);
                                                             ^
src/cci/cas_cci.c:3351:49: note: Function 'cci_get_login_timeout' argument 2 names different: declaration 'timeout' definition 'val'.
cci_get_login_timeout (int mapped_conn_id, int *val, T_CCI_ERROR * err_buf)
                                                ^
src/cci/cas_cci.c:3379:30: style:inconclusive: Function 'cci_set_isolation_level' argument 1 names different: declaration 'con_id' definition 'mapped_conn_id'. [funcArgNamesDifferent]
cci_set_isolation_level (int mapped_conn_id, T_CCI_TRAN_ISOLATION val, T_CCI_ERROR * err_buf)
                             ^
src/cci/cas_cci.h:869:43: note: Function 'cci_set_isolation_level' argument 1 names different: declaration 'con_id' definition 'mapped_conn_id'.
  extern int cci_set_isolation_level (int con_id, T_CCI_TRAN_ISOLATION val, T_CCI_ERROR * err_buf);
                                          ^
src/cci/cas_cci.c:3379:30: note: Function 'cci_set_isolation_level' argument 1 names different: declaration 'con_id' definition 'mapped_conn_id'.
cci_set_isolation_level (int mapped_conn_id, T_CCI_TRAN_ISOLATION val, T_CCI_ERROR * err_buf)
                             ^
src/cci/cas_cci.c:3385:27: style:inconclusive: Function 'cci_set_lock_timeout' argument 1 names different: declaration 'con_id' definition 'mapped_conn_id'. [funcArgNamesDifferent]
cci_set_lock_timeout (int mapped_conn_id, int val, T_CCI_ERROR * err_buf)
                          ^
src/cci/cas_cci.h:870:40: note: Function 'cci_set_lock_timeout' argument 1 names different: declaration 'con_id' definition 'mapped_conn_id'.
  extern int cci_set_lock_timeout (int con_id, int val, T_CCI_ERROR * err_buf);
                                       ^
src/cci/cas_cci.c:3385:27: note: Function 'cci_set_lock_timeout' argument 1 names different: declaration 'con_id' definition 'mapped_conn_id'.
cci_set_lock_timeout (int mapped_conn_id, int val, T_CCI_ERROR * err_buf)
                          ^
src/cci/cas_cci.c:3421:79: style:inconclusive: Function 'cci_set_get' argument 5 names different: declaration 'indicator' definition 'ind'. [funcArgNamesDifferent]
cci_set_get (T_CCI_SET set, int index, T_CCI_A_TYPE a_type, void *value, int *ind)
                                                                              ^
src/cci/cas_cci.h:875:92: note: Function 'cci_set_get' argument 5 names different: declaration 'indicator' definition 'ind'.
  extern int cci_set_get (T_CCI_SET set, int index, T_CCI_A_TYPE a_type, void *value, int *indicator);
                                                                                           ^
src/cci/cas_cci.c:3421:79: note: Function 'cci_set_get' argument 5 names different: declaration 'indicator' definition 'ind'.
cci_set_get (T_CCI_SET set, int index, T_CCI_A_TYPE a_type, void *value, int *ind)
                                                                              ^
src/cci/cas_cci.c:3435:81: style:inconclusive: Function 'cci_set_make' argument 5 names different: declaration 'indicator' definition 'ind'. [funcArgNamesDifferent]
cci_set_make (T_CCI_SET * set, T_CCI_U_TYPE u_type, int size, void *value, int *ind)
                                                                                ^
src/cci/cas_cci.h:876:94: note: Function 'cci_set_make' argument 5 names different: declaration 'indicator' definition 'ind'.
  extern int cci_set_make (T_CCI_SET * set, T_CCI_U_TYPE u_type, int size, void *value, int *indicator);
                                                                                             ^
src/cci/cas_cci.c:3435:81: note: Function 'cci_set_make' argument 5 names different: declaration 'indicator' definition 'ind'.
cci_set_make (T_CCI_SET * set, T_CCI_U_TYPE u_type, int size, void *value, int *ind)
                                                                                ^
src/cci/cas_cci.c:3466:28: style:inconclusive: Function 'cci_get_attr_type_str' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'. [funcArgNamesDifferent]
cci_get_attr_type_str (int mapped_conn_id, char *class_name, char *attr_name, char *buf, int buf_size,
                           ^
src/cci/cas_cci.h:877:41: note: Function 'cci_get_attr_type_str' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
  extern int cci_get_attr_type_str (int con_h_id, char *class_name,
                                        ^
src/cci/cas_cci.c:3466:28: note: Function 'cci_get_attr_type_str' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
cci_get_attr_type_str (int mapped_conn_id, char *class_name, char *attr_name, char *buf, int buf_size,
                           ^
src/cci/cas_cci.c:3515:25: style:inconclusive: Function 'cci_get_query_plan' argument 1 names different: declaration 'req_h_id' definition 'mapped_stmt_id'. [funcArgNamesDifferent]
cci_get_query_plan (int mapped_stmt_id, char **out_buf)
                        ^
src/cci/cas_cci.h:879:38: note: Function 'cci_get_query_plan' argument 1 names different: declaration 'req_h_id' definition 'mapped_stmt_id'.
  extern int cci_get_query_plan (int req_h_id, char **out_buf);
                                     ^
src/cci/cas_cci.c:3515:25: note: Function 'cci_get_query_plan' argument 1 names different: declaration 'req_h_id' definition 'mapped_stmt_id'.
cci_get_query_plan (int mapped_stmt_id, char **out_buf)
                        ^
src/cci/cas_cci.c:3550:22: style:inconclusive: Function 'cci_set_max_row' argument 1 names different: declaration 'req_h_id' definition 'mapped_stmt_id'. [funcArgNamesDifferent]
cci_set_max_row (int mapped_stmt_id, int max_row)
                     ^
src/cci/cas_cci.h:881:35: note: Function 'cci_set_max_row' argument 1 names different: declaration 'req_h_id' definition 'mapped_stmt_id'.
  extern int cci_set_max_row (int req_h_id, int max_row);
                                  ^
src/cci/cas_cci.c:3550:22: note: Function 'cci_set_max_row' argument 1 names different: declaration 'req_h_id' definition 'mapped_stmt_id'.
cci_set_max_row (int mapped_stmt_id, int max_row)
                     ^
src/cci/cas_cci.c:3577:20: style:inconclusive: Function 'cci_savepoint' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'. [funcArgNamesDifferent]
cci_savepoint (int mapped_conn_id, T_CCI_SAVEPOINT_CMD cmd, char *savepoint_name, T_CCI_ERROR * err_buf)
                   ^
src/cci/cas_cci.h:882:33: note: Function 'cci_savepoint' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
  extern int cci_savepoint (int con_h_id, T_CCI_SAVEPOINT_CMD cmd, char *savepoint_name, T_CCI_ERROR * err_buf);
                                ^
src/cci/cas_cci.c:3577:20: note: Function 'cci_savepoint' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
cci_savepoint (int mapped_conn_id, T_CCI_SAVEPOINT_CMD cmd, char *savepoint_name, T_CCI_ERROR * err_buf)
                   ^
src/cci/cas_cci.c:3619:25: style:inconclusive: Function 'cci_get_param_info' argument 1 names different: declaration 'req_handle' definition 'mapped_stmt_id'. [funcArgNamesDifferent]
cci_get_param_info (int mapped_stmt_id, T_CCI_PARAM_INFO ** param, T_CCI_ERROR * err_buf)
                        ^
src/cci/cas_cci.h:883:38: note: Function 'cci_get_param_info' argument 1 names different: declaration 'req_handle' definition 'mapped_stmt_id'.
  extern int cci_get_param_info (int req_handle, T_CCI_PARAM_INFO ** param, T_CCI_ERROR * err_buf);
                                     ^
src/cci/cas_cci.c:3619:25: note: Function 'cci_get_param_info' argument 1 names different: declaration 'req_handle' definition 'mapped_stmt_id'.
cci_get_param_info (int mapped_stmt_id, T_CCI_PARAM_INFO ** param, T_CCI_ERROR * err_buf)
                        ^
src/cci/cas_cci.c:3664:28: style:inconclusive: Function 'cci_set_query_timeout' argument 1 names different: declaration 'req_h_id' definition 'mapped_stmt_id'. [funcArgNamesDifferent]
cci_set_query_timeout (int mapped_stmt_id, int timeout)
                           ^
src/cci/cas_cci.h:941:41: note: Function 'cci_set_query_timeout' argument 1 names different: declaration 'req_h_id' definition 'mapped_stmt_id'.
  extern int cci_set_query_timeout (int req_h_id, int timeout);
                                        ^
src/cci/cas_cci.c:3664:28: note: Function 'cci_set_query_timeout' argument 1 names different: declaration 'req_h_id' definition 'mapped_stmt_id'.
cci_set_query_timeout (int mapped_stmt_id, int timeout)
                           ^
src/cci/cas_cci.c:3695:28: style:inconclusive: Function 'cci_get_query_timeout' argument 1 names different: declaration 'req_h_id' definition 'mapped_stmt_id'. [funcArgNamesDifferent]
cci_get_query_timeout (int mapped_stmt_id)
                           ^
src/cci/cas_cci.h:942:41: note: Function 'cci_get_query_timeout' argument 1 names different: declaration 'req_h_id' definition 'mapped_stmt_id'.
  extern int cci_get_query_timeout (int req_h_id);
                                        ^
src/cci/cas_cci.c:3695:28: note: Function 'cci_get_query_timeout' argument 1 names different: declaration 'req_h_id' definition 'mapped_stmt_id'.
cci_get_query_timeout (int mapped_stmt_id)
                           ^
src/cci/cas_cci.c:3780:19: style:inconclusive: Function 'cci_blob_new' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'. [funcArgNamesDifferent]
cci_blob_new (int mapped_conn_id, T_CCI_BLOB * blob, T_CCI_ERROR * err_buf)
                  ^
src/cci/cas_cci.h:886:32: note: Function 'cci_blob_new' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
  extern int cci_blob_new (int con_h_id, T_CCI_BLOB * blob, T_CCI_ERROR * err_buf);
                               ^
src/cci/cas_cci.c:3780:19: note: Function 'cci_blob_new' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
cci_blob_new (int mapped_conn_id, T_CCI_BLOB * blob, T_CCI_ERROR * err_buf)
                  ^
src/cci/cas_cci.c:3790:19: style:inconclusive: Function 'cci_clob_new' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'. [funcArgNamesDifferent]
cci_clob_new (int mapped_conn_id, T_CCI_CLOB * clob, T_CCI_ERROR * err_buf)
                  ^
src/cci/cas_cci.h:893:32: note: Function 'cci_clob_new' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
  extern int cci_clob_new (int con_h_id, T_CCI_CLOB * clob, T_CCI_ERROR * err_buf);
                               ^
src/cci/cas_cci.c:3790:19: note: Function 'cci_clob_new' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
cci_clob_new (int mapped_conn_id, T_CCI_CLOB * clob, T_CCI_ERROR * err_buf)
                  ^
src/cci/cas_cci.c:3899:21: style:inconclusive: Function 'cci_blob_write' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'. [funcArgNamesDifferent]
cci_blob_write (int mapped_conn_id, T_CCI_BLOB blob, long long start_pos, int length, const char *buf,
                    ^
src/cci/cas_cci.h:888:34: note: Function 'cci_blob_write' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
  extern int cci_blob_write (int con_h_id, T_CCI_BLOB blob,
                                 ^
src/cci/cas_cci.c:3899:21: note: Function 'cci_blob_write' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
cci_blob_write (int mapped_conn_id, T_CCI_BLOB blob, long long start_pos, int length, const char *buf,
                    ^
src/cci/cas_cci.c:3911:21: style:inconclusive: Function 'cci_clob_write' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'. [funcArgNamesDifferent]
cci_clob_write (int mapped_conn_id, T_CCI_CLOB clob, long long start_pos, int length, const char *buf,
                    ^
src/cci/cas_cci.h:895:34: note: Function 'cci_clob_write' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
  extern int cci_clob_write (int con_h_id, T_CCI_CLOB clob,
                                 ^
src/cci/cas_cci.c:3911:21: note: Function 'cci_clob_write' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
cci_clob_write (int mapped_conn_id, T_CCI_CLOB clob, long long start_pos, int length, const char *buf,
                    ^
src/cci/cas_cci.c:4000:20: style:inconclusive: Function 'cci_blob_read' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'. [funcArgNamesDifferent]
cci_blob_read (int mapped_conn_id, T_CCI_BLOB blob, long long start_pos, int length, char *buf, T_CCI_ERROR * err_buf)
                   ^
src/cci/cas_cci.h:890:33: note: Function 'cci_blob_read' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
  extern int cci_blob_read (int con_h_id, T_CCI_BLOB blob,
                                ^
src/cci/cas_cci.c:4000:20: note: Function 'cci_blob_read' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
cci_blob_read (int mapped_conn_id, T_CCI_BLOB blob, long long start_pos, int length, char *buf, T_CCI_ERROR * err_buf)
                   ^
src/cci/cas_cci.c:4012:20: style:inconclusive: Function 'cci_clob_read' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'. [funcArgNamesDifferent]
cci_clob_read (int mapped_conn_id, T_CCI_CLOB clob, long long start_pos, int length, char *buf, T_CCI_ERROR * err_buf)
                   ^
src/cci/cas_cci.h:897:33: note: Function 'cci_clob_read' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
  extern int cci_clob_read (int con_h_id, T_CCI_CLOB clob,
                                ^
src/cci/cas_cci.c:4012:20: note: Function 'cci_clob_read' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
cci_clob_read (int mapped_conn_id, T_CCI_CLOB clob, long long start_pos, int length, char *buf, T_CCI_ERROR * err_buf)
                   ^
src/cci/cas_cci.c:4181:24: style:inconclusive: Function 'cci_get_dbms_type' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'. [funcArgNamesDifferent]
cci_get_dbms_type (int mapped_conn_id)
                       ^
src/cci/cas_cci.h:900:37: note: Function 'cci_get_dbms_type' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
  extern int cci_get_dbms_type (int con_h_id);
                                    ^
src/cci/cas_cci.c:4181:24: note: Function 'cci_get_dbms_type' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
cci_get_dbms_type (int mapped_conn_id)
                       ^
src/cci/cas_cci.c:4198:22: style:inconclusive: Function 'cci_set_charset' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'. [funcArgNamesDifferent]
cci_set_charset (int mapped_conn_id, char *charset)
                     ^
src/cci/cas_cci.h:906:35: note: Function 'cci_set_charset' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
  extern int cci_set_charset (int con_h_id, char *charset);
                                  ^
src/cci/cas_cci.c:4198:22: note: Function 'cci_set_charset' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
cci_set_charset (int mapped_conn_id, char *charset)
                     ^
src/cci/cas_cci.c:4230:20: style:inconclusive: Function 'cci_row_count' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'. [funcArgNamesDifferent]
cci_row_count (int mapped_conn_id, int *row_count, T_CCI_ERROR * err_buf)
                   ^
src/cci/cas_cci.h:907:33: note: Function 'cci_row_count' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
  extern int cci_row_count (int con_h_id, int *row_count, T_CCI_ERROR * err_buf);
                                ^
src/cci/cas_cci.c:4230:20: note: Function 'cci_row_count' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
cci_row_count (int mapped_conn_id, int *row_count, T_CCI_ERROR * err_buf)
                   ^
src/cci/cas_cci.c:4284:39: style:inconclusive: Function 'cci_get_shard_id_with_con_handle' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'. [funcArgNamesDifferent]
cci_get_shard_id_with_con_handle (int mapped_conn_id, int *shard_id, T_CCI_ERROR * err_buf)
                                      ^
src/cci/cas_cci.h:909:52: note: Function 'cci_get_shard_id_with_con_handle' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
  extern int cci_get_shard_id_with_con_handle (int con_h_id, int *shard_id, T_CCI_ERROR * err_buf);
                                                   ^
src/cci/cas_cci.c:4284:39: note: Function 'cci_get_shard_id_with_con_handle' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
cci_get_shard_id_with_con_handle (int mapped_conn_id, int *shard_id, T_CCI_ERROR * err_buf)
                                      ^
src/cci/cas_cci.c:4306:39: style:inconclusive: Function 'cci_get_shard_id_with_req_handle' argument 1 names different: declaration 'req_h_id' definition 'mapped_stmt_id'. [funcArgNamesDifferent]
cci_get_shard_id_with_req_handle (int mapped_stmt_id, int *shard_id, T_CCI_ERROR * err_buf)
                                      ^
src/cci/cas_cci.h:910:52: note: Function 'cci_get_shard_id_with_req_handle' argument 1 names different: declaration 'req_h_id' definition 'mapped_stmt_id'.
  extern int cci_get_shard_id_with_req_handle (int req_h_id, int *shard_id, T_CCI_ERROR * err_buf);
                                                   ^
src/cci/cas_cci.c:4306:39: note: Function 'cci_get_shard_id_with_req_handle' argument 1 names different: declaration 'req_h_id' definition 'mapped_stmt_id'.
cci_get_shard_id_with_req_handle (int mapped_stmt_id, int *shard_id, T_CCI_ERROR * err_buf)
                                      ^
src/cci/cas_cci.c:4344:25: style:inconclusive: Function 'cci_last_insert_id' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'. [funcArgNamesDifferent]
cci_last_insert_id (int mapped_conn_id, void *value, T_CCI_ERROR * err_buf)
                        ^
src/cci/cas_cci.h:927:38: note: Function 'cci_last_insert_id' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
  extern int cci_last_insert_id (int con_h_id, void *value, T_CCI_ERROR * err_buf);
                                     ^
src/cci/cas_cci.c:4344:25: note: Function 'cci_last_insert_id' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
cci_last_insert_id (int mapped_conn_id, void *value, T_CCI_ERROR * err_buf)
                        ^
src/cci/cas_cci.c:4376:29: style:inconclusive: Function 'cci_get_last_insert_id' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'. [funcArgNamesDifferent]
cci_get_last_insert_id (int mapped_conn_id, void *value, T_CCI_ERROR * err_buf)
                            ^
src/cci/cas_cci.h:929:42: note: Function 'cci_get_last_insert_id' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
  extern int cci_get_last_insert_id (int con_h_id, void *value, T_CCI_ERROR * err_buf);
                                         ^
src/cci/cas_cci.c:4376:29: note: Function 'cci_get_last_insert_id' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
cci_get_last_insert_id (int mapped_conn_id, void *value, T_CCI_ERROR * err_buf)
                            ^
src/cci/cas_cci.c:4690:24: style:inconclusive: Function 'cci_get_error_msg' argument 1 names different: declaration 'err_code' definition 'error'. [funcArgNamesDifferent]
cci_get_error_msg (int error, T_CCI_ERROR * cci_err, char *buf, int bufsize)
                       ^
src/cci/cas_cci.h:904:37: note: Function 'cci_get_error_msg' argument 1 names different: declaration 'err_code' definition 'error'.
  extern int cci_get_error_msg (int err_code, T_CCI_ERROR * err_buf, char *out_buf, int out_buf_size);
                                    ^
src/cci/cas_cci.c:4690:24: note: Function 'cci_get_error_msg' argument 1 names different: declaration 'err_code' definition 'error'.
cci_get_error_msg (int error, T_CCI_ERROR * cci_err, char *buf, int bufsize)
                       ^
src/cci/cas_cci.c:4690:45: style:inconclusive: Function 'cci_get_error_msg' argument 2 names different: declaration 'err_buf' definition 'cci_err'. [funcArgNamesDifferent]
cci_get_error_msg (int error, T_CCI_ERROR * cci_err, char *buf, int bufsize)
                                            ^
src/cci/cas_cci.h:904:61: note: Function 'cci_get_error_msg' argument 2 names different: declaration 'err_buf' definition 'cci_err'.
  extern int cci_get_error_msg (int err_code, T_CCI_ERROR * err_buf, char *out_buf, int out_buf_size);
                                                            ^
src/cci/cas_cci.c:4690:45: note: Function 'cci_get_error_msg' argument 2 names different: declaration 'err_buf' definition 'cci_err'.
cci_get_error_msg (int error, T_CCI_ERROR * cci_err, char *buf, int bufsize)
                                            ^
src/cci/cas_cci.c:4690:60: style:inconclusive: Function 'cci_get_error_msg' argument 3 names different: declaration 'out_buf' definition 'buf'. [funcArgNamesDifferent]
cci_get_error_msg (int error, T_CCI_ERROR * cci_err, char *buf, int bufsize)
                                                           ^
src/cci/cas_cci.h:904:76: note: Function 'cci_get_error_msg' argument 3 names different: declaration 'out_buf' definition 'buf'.
  extern int cci_get_error_msg (int err_code, T_CCI_ERROR * err_buf, char *out_buf, int out_buf_size);
                                                                           ^
src/cci/cas_cci.c:4690:60: note: Function 'cci_get_error_msg' argument 3 names different: declaration 'out_buf' definition 'buf'.
cci_get_error_msg (int error, T_CCI_ERROR * cci_err, char *buf, int bufsize)
                                                           ^
src/cci/cas_cci.c:4690:69: style:inconclusive: Function 'cci_get_error_msg' argument 4 names different: declaration 'out_buf_size' definition 'bufsize'. [funcArgNamesDifferent]
cci_get_error_msg (int error, T_CCI_ERROR * cci_err, char *buf, int bufsize)
                                                                    ^
src/cci/cas_cci.h:904:89: note: Function 'cci_get_error_msg' argument 4 names different: declaration 'out_buf_size' definition 'bufsize'.
  extern int cci_get_error_msg (int err_code, T_CCI_ERROR * err_buf, char *out_buf, int out_buf_size);
                                                                                        ^
src/cci/cas_cci.c:4690:69: note: Function 'cci_get_error_msg' argument 4 names different: declaration 'out_buf_size' definition 'bufsize'.
cci_get_error_msg (int error, T_CCI_ERROR * cci_err, char *buf, int bufsize)
                                                                    ^
src/cci/cas_cci.c:4735:22: style:inconclusive: Function 'cci_get_err_msg' argument 1 names different: declaration 'err_code' definition 'error'. [funcArgNamesDifferent]
cci_get_err_msg (int error, char *buf, int bufsize)
                     ^
src/cci/cas_cci.h:905:35: note: Function 'cci_get_err_msg' argument 1 names different: declaration 'err_code' definition 'error'.
  extern int cci_get_err_msg (int err_code, char *buf, int bufsize);
                                  ^
src/cci/cas_cci.c:4735:22: note: Function 'cci_get_err_msg' argument 1 names different: declaration 'err_code' definition 'error'.
cci_get_err_msg (int error, char *buf, int bufsize)
                     ^
src/cci/cas_cci.c:4853:16: style:inconclusive: Function 'fetch_cmd' argument 1 names different: declaration 'reg_h_id' definition 'mapped_stmt_id'. [funcArgNamesDifferent]
fetch_cmd (int mapped_stmt_id, char flag, T_CCI_ERROR * err_buf)
               ^
src/cci/cas_cci.c:155:27: note: Function 'fetch_cmd' argument 1 names different: declaration 'reg_h_id' definition 'mapped_stmt_id'.
static int fetch_cmd (int reg_h_id, char flag, T_CCI_ERROR * err_buf);
                          ^
src/cci/cas_cci.c:4853:16: note: Function 'fetch_cmd' argument 1 names different: declaration 'reg_h_id' definition 'mapped_stmt_id'.
fetch_cmd (int mapped_stmt_id, char flag, T_CCI_ERROR * err_buf)
               ^
src/cci/cas_cci.c:5805:43: style:inconclusive: Function 'cci_datasource_create' argument 1 names different: declaration 'properties' definition 'prop'. [funcArgNamesDifferent]
cci_datasource_create (T_CCI_PROPERTIES * prop, T_CCI_ERROR * err_buf)
                                          ^
src/cci/cas_cci.h:935:70: note: Function 'cci_datasource_create' argument 1 names different: declaration 'properties' definition 'prop'.
  extern T_CCI_DATASOURCE *cci_datasource_create (T_CCI_PROPERTIES * properties, T_CCI_ERROR * err_buf);
                                                                     ^
src/cci/cas_cci.c:5805:43: note: Function 'cci_datasource_create' argument 1 names different: declaration 'properties' definition 'prop'.
cci_datasource_create (T_CCI_PROPERTIES * prop, T_CCI_ERROR * err_buf)
                                          ^
src/cci/cas_cci.c:6026:44: style:inconclusive: Function 'cci_datasource_destroy' argument 1 names different: declaration 'data_source' definition 'ds'. [funcArgNamesDifferent]
cci_datasource_destroy (T_CCI_DATASOURCE * ds)
                                           ^
src/cci/cas_cci.h:936:58: note: Function 'cci_datasource_destroy' argument 1 names different: declaration 'data_source' definition 'ds'.
  extern void cci_datasource_destroy (T_CCI_DATASOURCE * data_source);
                                                         ^
src/cci/cas_cci.c:6026:44: note: Function 'cci_datasource_destroy' argument 1 names different: declaration 'data_source' definition 'ds'.
cci_datasource_destroy (T_CCI_DATASOURCE * ds)
                                           ^
src/cci/cas_cci.c:6196:43: style:inconclusive: Function 'cci_datasource_borrow' argument 1 names different: declaration 'date_source' definition 'ds'. [funcArgNamesDifferent]
cci_datasource_borrow (T_CCI_DATASOURCE * ds, T_CCI_ERROR * err_buf)
                                          ^
src/cci/cas_cci.h:937:63: note: Function 'cci_datasource_borrow' argument 1 names different: declaration 'date_source' definition 'ds'.
  extern T_CCI_CONN cci_datasource_borrow (T_CCI_DATASOURCE * date_source, T_CCI_ERROR * err_buf);
                                                              ^
src/cci/cas_cci.c:6196:43: note: Function 'cci_datasource_borrow' argument 1 names different: declaration 'date_source' definition 'ds'.
cci_datasource_borrow (T_CCI_DATASOURCE * ds, T_CCI_ERROR * err_buf)
                                          ^
src/cci/cas_cci.c:6342:44: style:inconclusive: Function 'cci_datasource_release' argument 1 names different: declaration 'date_source' definition 'ds'. [funcArgNamesDifferent]
cci_datasource_release (T_CCI_DATASOURCE * ds, T_CCI_CONN mapped_conn_id, T_CCI_ERROR * err_buf)
                                           ^
src/cci/cas_cci.h:938:57: note: Function 'cci_datasource_release' argument 1 names different: declaration 'date_source' definition 'ds'.
  extern int cci_datasource_release (T_CCI_DATASOURCE * date_source, T_CCI_CONN conn, T_CCI_ERROR * err_buf);
                                                        ^
src/cci/cas_cci.c:6342:44: note: Function 'cci_datasource_release' argument 1 names different: declaration 'date_source' definition 'ds'.
cci_datasource_release (T_CCI_DATASOURCE * ds, T_CCI_CONN mapped_conn_id, T_CCI_ERROR * err_buf)
                                           ^
src/cci/cas_cci.c:6342:59: style:inconclusive: Function 'cci_datasource_release' argument 2 names different: declaration 'conn' definition 'mapped_conn_id'. [funcArgNamesDifferent]
cci_datasource_release (T_CCI_DATASOURCE * ds, T_CCI_CONN mapped_conn_id, T_CCI_ERROR * err_buf)
                                                          ^
src/cci/cas_cci.h:938:81: note: Function 'cci_datasource_release' argument 2 names different: declaration 'conn' definition 'mapped_conn_id'.
  extern int cci_datasource_release (T_CCI_DATASOURCE * date_source, T_CCI_CONN conn, T_CCI_ERROR * err_buf);
                                                                                ^
src/cci/cas_cci.c:6342:59: note: Function 'cci_datasource_release' argument 2 names different: declaration 'conn' definition 'mapped_conn_id'.
cci_datasource_release (T_CCI_DATASOURCE * ds, T_CCI_CONN mapped_conn_id, T_CCI_ERROR * err_buf)
                                                          ^
src/cci/cas_cci.c:6416:25: style:inconclusive: Function 'cci_get_shard_info' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'. [funcArgNamesDifferent]
cci_get_shard_info (int mapped_conn_id, T_CCI_SHARD_INFO ** shard_info, T_CCI_ERROR * err_buf)
                        ^
src/cci/cas_cci.h:948:38: note: Function 'cci_get_shard_info' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
  extern int cci_get_shard_info (int con_h_id, T_CCI_SHARD_INFO ** shard_info, T_CCI_ERROR * err_buf);
                                     ^
src/cci/cas_cci.c:6416:25: note: Function 'cci_get_shard_info' argument 1 names different: declaration 'con_h_id' definition 'mapped_conn_id'.
cci_get_shard_info (int mapped_conn_id, T_CCI_SHARD_INFO ** shard_info, T_CCI_ERROR * err_buf)
                        ^
src/cci/cas_cci.c:399:3: style: Clarify calculation precedence for '&' and '?'. [clarifyCalculation]
  SET_AUTOCOMMIT_FROM_CASINFO (con_handle);
  ^
src/cci/cas_cci.c:574:3: style: Clarify calculation precedence for '&' and '?'. [clarifyCalculation]
  SET_AUTOCOMMIT_FROM_CASINFO (con_handle);
  ^
src/cci/cci_common.c:262:35: style: Array index 'middle' is used before limits check. [arrayIndexThenCheck]
      if (ht_size > cci_mht_Primes[middle] && middle < (NPRIMES - 1))
                                  ^
src/cci/cci_common.c:227:7: style: The scope of the variable 'left' can be reduced. [variableScope]
  int left, right, middle; /* indices for binary search */
      ^
src/cci/cci_common.c:227:13: style: The scope of the variable 'right' can be reduced. [variableScope]
  int left, right, middle; /* indices for binary search */
            ^
src/cci/cci_common.c:227:20: style: The scope of the variable 'middle' can be reduced. [variableScope]
  int left, right, middle; /* indices for binary search */
                   ^
src/cci/cci_handle_mng.c:175:26: warning: Either the condition 'con<0' is redundant or the array 'con_handle_table[2048]' is accessed at index -1, which is out of bounds. [negativeIndex]
  return con_handle_table[con - 1];
                         ^
src/cci/cci_handle_mng.c:170:11: note: Assuming that condition 'con<0' is not redundant
  if (con < 0)
          ^
src/cci/cci_handle_mng.c:175:26: note: Negative array index
  return con_handle_table[con - 1];
                         ^
src/cci/cci_handle_mng.c:1205:6: style: Variable 'rv' is reassigned a value before the old one has been used. [redundantAssignment]
  rv = pthread_attr_setdetachstate (&thread_attr, PTHREAD_CREATE_DETACHED);
     ^
src/cci/cci_handle_mng.c:1204:6: note: rv is assigned
  rv = pthread_attr_init (&thread_attr);
     ^
src/cci/cci_handle_mng.c:1205:6: note: rv is overwritten
  rv = pthread_attr_setdetachstate (&thread_attr, PTHREAD_CREATE_DETACHED);
     ^
src/cci/cci_handle_mng.c:1206:6: style: Variable 'rv' is reassigned a value before the old one has been used. [redundantAssignment]
  rv = pthread_attr_setscope (&thread_attr, PTHREAD_SCOPE_SYSTEM);
     ^
src/cci/cci_handle_mng.c:1205:6: note: rv is assigned
  rv = pthread_attr_setdetachstate (&thread_attr, PTHREAD_CREATE_DETACHED);
     ^
src/cci/cci_handle_mng.c:1206:6: note: rv is overwritten
  rv = pthread_attr_setscope (&thread_attr, PTHREAD_SCOPE_SYSTEM);
     ^
src/cci/cci_handle_mng.c:1208:6: style: Variable 'rv' is reassigned a value before the old one has been used. [redundantAssignment]
  rv = pthread_create (&health_check_th, &thread_attr, hm_thread_health_checker, (void *) useSSL);
     ^
src/cci/cci_handle_mng.c:1206:6: note: rv is assigned
  rv = pthread_attr_setscope (&thread_attr, PTHREAD_SCOPE_SYSTEM);
     ^
src/cci/cci_handle_mng.c:1208:6: note: rv is overwritten
  rv = pthread_create (&health_check_th, &thread_attr, hm_thread_health_checker, (void *) useSSL);
     ^
src/cci/cci_handle_mng.c:888:17: style: The scope of the variable 'curr_req_handle' can be reduced. [variableScope]
  T_REQ_HANDLE *curr_req_handle;
                ^
src/cci/cci_handle_mng.c:919:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/cci/cci_handle_mng.c:1174:10: style: The scope of the variable 'cur_time' can be reduced. [variableScope]
  time_t cur_time, failure_time;
         ^
src/cci/cci_handle_mng.c:1174:20: style: The scope of the variable 'failure_time' can be reduced. [variableScope]
  time_t cur_time, failure_time;
                   ^
src/cci/cci_handle_mng.c:1477:10: style: The scope of the variable 'start_time' can be reduced. [variableScope]
  time_t start_time;
         ^
src/cci/cci_handle_mng.c:1478:10: style: The scope of the variable 'elapsed_time' can be reduced. [variableScope]
  time_t elapsed_time;
         ^
src/cci/cci_handle_mng.c:255:36: style:inconclusive: Function 'hm_con_handle_free' argument 1 names different: declaration 'connection' definition 'con_handle'. [funcArgNamesDifferent]
hm_con_handle_free (T_CON_HANDLE * con_handle)
                                   ^
src/cci/cci_handle_mng.h:294:47: note: Function 'hm_con_handle_free' argument 1 names different: declaration 'connection' definition 'con_handle'.
extern int hm_con_handle_free (T_CON_HANDLE * connection);
                                              ^
src/cci/cci_handle_mng.c:255:36: note: Function 'hm_con_handle_free' argument 1 names different: declaration 'connection' definition 'con_handle'.
hm_con_handle_free (T_CON_HANDLE * con_handle)
                                   ^
src/cci/cci_handle_mng.c:433:37: style:inconclusive: Function 'hm_req_handle_alloc' argument 1 names different: declaration 'connection' definition 'con_handle'. [funcArgNamesDifferent]
hm_req_handle_alloc (T_CON_HANDLE * con_handle, T_REQ_HANDLE ** ret_req_handle)
                                    ^
src/cci/cci_handle_mng.h:288:48: note: Function 'hm_req_handle_alloc' argument 1 names different: declaration 'connection' definition 'con_handle'.
extern int hm_req_handle_alloc (T_CON_HANDLE * connection, T_REQ_HANDLE ** statement);
                                               ^
src/cci/cci_handle_mng.c:433:37: note: Function 'hm_req_handle_alloc' argument 1 names different: declaration 'connection' definition 'con_handle'.
hm_req_handle_alloc (T_CON_HANDLE * con_handle, T_REQ_HANDLE ** ret_req_handle)
                                    ^
src/cci/cci_handle_mng.c:433:65: style:inconclusive: Function 'hm_req_handle_alloc' argument 2 names different: declaration 'statement' definition 'ret_req_handle'. [funcArgNamesDifferent]
hm_req_handle_alloc (T_CON_HANDLE * con_handle, T_REQ_HANDLE ** ret_req_handle)
                                                                ^
src/cci/cci_handle_mng.h:288:76: note: Function 'hm_req_handle_alloc' argument 2 names different: declaration 'statement' definition 'ret_req_handle'.
extern int hm_req_handle_alloc (T_CON_HANDLE * connection, T_REQ_HANDLE ** statement);
                                                                           ^
src/cci/cci_handle_mng.c:433:65: note: Function 'hm_req_handle_alloc' argument 2 names different: declaration 'statement' definition 'ret_req_handle'.
hm_req_handle_alloc (T_CON_HANDLE * con_handle, T_REQ_HANDLE ** ret_req_handle)
                                                                ^
src/cci/cci_handle_mng.c:468:56: style:inconclusive: Function 'hm_req_add_to_pool' argument 3 names different: declaration 'req_id' definition 'mapped_statement_id'. [funcArgNamesDifferent]
hm_req_add_to_pool (T_CON_HANDLE * con, char *sql, int mapped_statement_id, T_REQ_HANDLE * statement)
                                                       ^
src/cci/cci_handle_mng.h:329:67: note: Function 'hm_req_add_to_pool' argument 3 names different: declaration 'req_id' definition 'mapped_statement_id'.
extern int hm_req_add_to_pool (T_CON_HANDLE * con, char *sql, int req_id, T_REQ_HANDLE * req);
                                                                  ^
src/cci/cci_handle_mng.c:468:56: note: Function 'hm_req_add_to_pool' argument 3 names different: declaration 'req_id' definition 'mapped_statement_id'.
hm_req_add_to_pool (T_CON_HANDLE * con, char *sql, int mapped_statement_id, T_REQ_HANDLE * statement)
                                                       ^
src/cci/cci_handle_mng.c:468:92: style:inconclusive: Function 'hm_req_add_to_pool' argument 4 names different: declaration 'req' definition 'statement'. [funcArgNamesDifferent]
hm_req_add_to_pool (T_CON_HANDLE * con, char *sql, int mapped_statement_id, T_REQ_HANDLE * statement)
                                                                                           ^
src/cci/cci_handle_mng.h:329:90: note: Function 'hm_req_add_to_pool' argument 4 names different: declaration 'req' definition 'statement'.
extern int hm_req_add_to_pool (T_CON_HANDLE * con, char *sql, int req_id, T_REQ_HANDLE * req);
                                                                                         ^
src/cci/cci_handle_mng.c:468:92: note: Function 'hm_req_add_to_pool' argument 4 names different: declaration 'req' definition 'statement'.
hm_req_add_to_pool (T_CON_HANDLE * con, char *sql, int mapped_statement_id, T_REQ_HANDLE * statement)
                                                                                           ^
src/cci/cci_handle_mng.c:615:24: style:inconclusive: Function 'hm_get_connection' argument 1 names different: declaration 'connection_id' definition 'mapped_id'. [funcArgNamesDifferent]
hm_get_connection (int mapped_id, T_CON_HANDLE ** connection)
                       ^
src/cci/cci_handle_mng.h:298:48: note: Function 'hm_get_connection' argument 1 names different: declaration 'connection_id' definition 'mapped_id'.
extern T_CCI_ERROR_CODE hm_get_connection (int connection_id, T_CON_HANDLE ** connection);
                                               ^
src/cci/cci_handle_mng.c:615:24: note: Function 'hm_get_connection' argument 1 names different: declaration 'connection_id' definition 'mapped_id'.
hm_get_connection (int mapped_id, T_CON_HANDLE ** connection)
                       ^
src/cci/cci_handle_mng.c:621:23: style:inconclusive: Function 'hm_get_statement' argument 1 names different: declaration 'statement_id' definition 'mapped_id'. [funcArgNamesDifferent]
hm_get_statement (int mapped_id, T_CON_HANDLE ** connection, T_REQ_HANDLE ** statement)
                      ^
src/cci/cci_handle_mng.h:299:47: note: Function 'hm_get_statement' argument 1 names different: declaration 'statement_id' definition 'mapped_id'.
extern T_CCI_ERROR_CODE hm_get_statement (int statement_id, T_CON_HANDLE ** connection, T_REQ_HANDLE ** statement);
                                              ^
src/cci/cci_handle_mng.c:621:23: note: Function 'hm_get_statement' argument 1 names different: declaration 'statement_id' definition 'mapped_id'.
hm_get_statement (int mapped_id, T_CON_HANDLE ** connection, T_REQ_HANDLE ** statement)
                      ^
src/cci/cci_handle_mng.c:694:28: style:inconclusive: Function 'hm_release_connection' argument 1 names different: declaration 'connection_id' definition 'mapped_id'. [funcArgNamesDifferent]
hm_release_connection (int mapped_id, T_CON_HANDLE ** connection)
                           ^
src/cci/cci_handle_mng.h:300:52: note: Function 'hm_release_connection' argument 1 names different: declaration 'connection_id' definition 'mapped_id'.
extern T_CCI_ERROR_CODE hm_release_connection (int connection_id, T_CON_HANDLE ** connection);
                                                   ^
src/cci/cci_handle_mng.c:694:28: note: Function 'hm_release_connection' argument 1 names different: declaration 'connection_id' definition 'mapped_id'.
hm_release_connection (int mapped_id, T_CON_HANDLE ** connection)
                           ^
src/cci/cci_handle_mng.c:700:27: style:inconclusive: Function 'hm_delete_connection' argument 1 names different: declaration 'connection_id' definition 'mapped_id'. [funcArgNamesDifferent]
hm_delete_connection (int mapped_id, T_CON_HANDLE ** connection)
                          ^
src/cci/cci_handle_mng.h:301:51: note: Function 'hm_delete_connection' argument 1 names different: declaration 'connection_id' definition 'mapped_id'.
extern T_CCI_ERROR_CODE hm_delete_connection (int connection_id, T_CON_HANDLE ** connection);
                                                  ^
src/cci/cci_handle_mng.c:700:27: note: Function 'hm_delete_connection' argument 1 names different: declaration 'connection_id' definition 'mapped_id'.
hm_delete_connection (int mapped_id, T_CON_HANDLE ** connection)
                          ^
src/cci/cci_handle_mng.c:706:27: style:inconclusive: Function 'hm_release_statement' argument 1 names different: declaration 'statement_id' definition 'mapped_id'. [funcArgNamesDifferent]
hm_release_statement (int mapped_id, T_CON_HANDLE ** connection, T_REQ_HANDLE ** statement)
                          ^
src/cci/cci_handle_mng.h:302:51: note: Function 'hm_release_statement' argument 1 names different: declaration 'statement_id' definition 'mapped_id'.
extern T_CCI_ERROR_CODE hm_release_statement (int statement_id, T_CON_HANDLE ** connection, T_REQ_HANDLE ** statement);
                                                  ^
src/cci/cci_handle_mng.c:706:27: note: Function 'hm_release_statement' argument 1 names different: declaration 'statement_id' definition 'mapped_id'.
hm_release_statement (int mapped_id, T_CON_HANDLE ** connection, T_REQ_HANDLE ** statement)
                          ^
src/cci/cci_handle_mng.c:1208:6: style: Variable 'rv' is assigned a value that is never used. [unreadVariable]
  rv = pthread_create (&health_check_th, &thread_attr, hm_thread_health_checker, (void *) useSSL);
     ^
src/cci/cci_log.cpp:133:10: style: Unused private function: '_PostFixAppender::checkFileIsOpen' [unusedPrivateFunction]
    void checkFileIsOpen();
         ^
src/cci/cci_log.cpp:108:17: style:inconclusive: Technically the member function '_LogAppenderBase::getCurrDate' can be const. [functionConst]
    std::string getCurrDate();
                ^
src/cci/cci_log.cpp:332:31: note: Technically the member function '_LogAppenderBase::getCurrDate' can be const.
std::string _LogAppenderBase::getCurrDate()
                              ^
src/cci/cci_log.cpp:108:17: note: Technically the member function '_LogAppenderBase::getCurrDate' can be const.
    std::string getCurrDate();
                ^
src/cci/cci_log.cpp:109:17: style:inconclusive: Technically the member function '_LogAppenderBase::getCurrDateTime' can be const. [functionConst]
    std::string getCurrDateTime();
                ^
src/cci/cci_log.cpp:351:31: note: Technically the member function '_LogAppenderBase::getCurrDateTime' can be const.
std::string _LogAppenderBase::getCurrDateTime()
                              ^
src/cci/cci_log.cpp:109:17: note: Technically the member function '_LogAppenderBase::getCurrDateTime' can be const.
    std::string getCurrDateTime();
                ^
src/cci/cci_log.cpp:110:10: style:inconclusive: Technically the member function '_LogAppenderBase::makeLogDir' can be const. [functionConst]
    void makeLogDir();
         ^
src/cci/cci_log.cpp:371:24: note: Technically the member function '_LogAppenderBase::makeLogDir' can be const.
void _LogAppenderBase::makeLogDir()
                       ^
src/cci/cci_log.cpp:110:10: note: Technically the member function '_LogAppenderBase::makeLogDir' can be const.
    void makeLogDir();
         ^
src/cci/cci_log.cpp:577:3: warning: Class '_Logger' does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s). [noCopyConstructor]
  logAppender = new _DailyLogAppender (context);
  ^
src/cci/cci_log.cpp:577:3: warning: Class '_Logger' does not have a operator= which is recommended since it has dynamic memory/resource allocation(s). [noOperatorEq]
  logAppender = new _DailyLogAppender (context);
  ^
src/cci/cci_log.cpp:162:5: style: Class '_DailyLogAppender' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    _DailyLogAppender (const _LoggerContext &context);
    ^
src/cci/cci_log.cpp:182:5: style: Class '_Logger' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    _Logger (const char *path);
    ^
src/cci/cci_log.cpp:97:18: style: The function 'open' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
    virtual void open();
                 ^
src/cci/cci_log.cpp:82:18: note: Virtual function in base class
    virtual void open() = 0;
                 ^
src/cci/cci_log.cpp:97:18: note: Function in derived class
    virtual void open();
                 ^
src/cci/cci_log.cpp:98:18: style: The function 'close' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
    virtual void close();
                 ^
src/cci/cci_log.cpp:83:18: note: Virtual function in base class
    virtual void close() = 0;
                 ^
src/cci/cci_log.cpp:98:18: note: Function in derived class
    virtual void close();
                 ^
src/cci/cci_log.cpp:99:18: style: The function 'write' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
    virtual void write (const char *msg);
                 ^
src/cci/cci_log.cpp:84:18: note: Virtual function in base class
    virtual void write (const char *msg) = 0;
                 ^
src/cci/cci_log.cpp:99:18: note: Function in derived class
    virtual void write (const char *msg);
                 ^
src/cci/cci_log.cpp:100:18: style: The function 'flush' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
    virtual void flush();
                 ^
src/cci/cci_log.cpp:85:18: note: Virtual function in base class
    virtual void flush() = 0;
                 ^
src/cci/cci_log.cpp:100:18: note: Function in derived class
    virtual void flush();
                 ^
src/cci/cci_log.cpp:126:18: style: The function 'open' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
    virtual void open();
                 ^
src/cci/cci_log.cpp:97:18: note: Virtual function in base class
    virtual void open();
                 ^
src/cci/cci_log.cpp:126:18: note: Function in derived class
    virtual void open();
                 ^
src/cci/cci_log.cpp:129:18: style: The function 'roll' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
    virtual void roll();
                 ^
src/cci/cci_log.cpp:103:18: note: Virtual function in base class
    virtual void roll() = 0;
                 ^
src/cci/cci_log.cpp:129:18: note: Function in derived class
    virtual void roll();
                 ^
src/cci/cci_log.cpp:130:18: style: The function 'isRolling' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
    virtual bool isRolling();
                 ^
src/cci/cci_log.cpp:104:18: note: Virtual function in base class
    virtual bool isRolling() = 0;
                 ^
src/cci/cci_log.cpp:130:18: note: Function in derived class
    virtual bool isRolling();
                 ^
src/cci/cci_log.cpp:149:18: style: The function 'roll' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
    virtual void roll();
                 ^
src/cci/cci_log.cpp:103:18: note: Virtual function in base class
    virtual void roll() = 0;
                 ^
src/cci/cci_log.cpp:149:18: note: Function in derived class
    virtual void roll();
                 ^
src/cci/cci_log.cpp:150:18: style: The function 'isRolling' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
    virtual bool isRolling();
                 ^
src/cci/cci_log.cpp:104:18: note: Virtual function in base class
    virtual bool isRolling() = 0;
                 ^
src/cci/cci_log.cpp:150:18: note: Function in derived class
    virtual bool isRolling();
                 ^
src/cci/cci_log.cpp:166:18: style: The function 'roll' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
    virtual void roll();
                 ^
src/cci/cci_log.cpp:103:18: note: Virtual function in base class
    virtual void roll() = 0;
                 ^
src/cci/cci_log.cpp:166:18: note: Function in derived class
    virtual void roll();
                 ^
src/cci/cci_log.cpp:167:18: style: The function 'isRolling' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
    virtual bool isRolling();
                 ^
src/cci/cci_log.cpp:104:18: note: Virtual function in base class
    virtual bool isRolling() = 0;
                 ^
src/cci/cci_log.cpp:167:18: note: Function in derived class
    virtual bool isRolling();
                 ^
src/cci/cci_log.cpp:812:16: style: C-style pointer casting [cstyleCast]
  _Logger *l = (_Logger *) logger;
               ^
src/cci/cci_log.cpp:831:16: style: C-style pointer casting [cstyleCast]
  _Logger *l = (_Logger *) logger;
               ^
src/cci/cci_log.cpp:848:16: style: C-style pointer casting [cstyleCast]
  _Logger *l = (_Logger *) logger;
               ^
src/cci/cci_log.cpp:860:16: style: C-style pointer casting [cstyleCast]
  _Logger *l = (_Logger *) logger;
               ^
src/cci/cci_log.cpp:872:16: style: C-style pointer casting [cstyleCast]
  _Logger *l = (_Logger *) logger;
               ^
src/cci/cci_log.cpp:884:16: style: C-style pointer casting [cstyleCast]
  _Logger *l = (_Logger *) logger;
               ^
src/cci/cci_log.cpp:896:16: style: C-style pointer casting [cstyleCast]
  _Logger *l = (_Logger *) logger;
               ^
src/cci/cci_log.cpp:909:16: style: C-style pointer casting [cstyleCast]
  _Logger *l = (_Logger *) logger;
               ^
src/cci/cci_log.cpp:927:16: style: C-style pointer casting [cstyleCast]
  _Logger *l = (_Logger *) logger;
               ^
src/cci/cci_log.cpp:785:27: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
  for (; it != map.end(); it++)
                          ^
src/cci/cci_map.cpp:148:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/cci/cci_map.cpp:160:22: style: The scope of the variable 'statement_array' can be reduced. [variableScope]
      T_REQ_HANDLE **statement_array;
                     ^
src/cci/cci_net_buf.c:134:9: warning: Redundant assignment of 'value' to itself. [selfAssignment]
  value = htoni64 (value);
        ^
src/cci/cci_net_buf.c:177:9: warning: Redundant assignment of 'value' to itself. [selfAssignment]
  value = htonf (value);
        ^
src/cci/cci_net_buf.c:191:9: warning: Redundant assignment of 'value' to itself. [selfAssignment]
  value = htond (value);
        ^
src/cci/cci_net_buf.c:280:7: style: The scope of the variable 'new_alloc_size' can be reduced. [variableScope]
  int new_alloc_size;
      ^
src/cci/cci_net_buf.c:243:11: error: The address of local variable 'from' is accessed at non-zero index. [objectIndex]
  q[0] = p[3];
          ^
src/cci/cci_net_buf.c:240:16: note: Address of variable taken here.
  p = (char *) &from;
               ^
src/cci/cci_net_buf.c:243:11: note: The address of local variable 'from' is accessed at non-zero index.
  q[0] = p[3];
          ^
src/cci/cci_net_buf.c:244:4: error: The address of local variable 'to' is accessed at non-zero index. [objectIndex]
  q[1] = p[2];
   ^
src/cci/cci_net_buf.c:241:16: note: Address of variable taken here.
  q = (char *) &to;
               ^
src/cci/cci_net_buf.c:244:4: note: The address of local variable 'to' is accessed at non-zero index.
  q[1] = p[2];
   ^
src/cci/cci_net_buf.c:244:11: error: The address of local variable 'from' is accessed at non-zero index. [objectIndex]
  q[1] = p[2];
          ^
src/cci/cci_net_buf.c:240:16: note: Address of variable taken here.
  p = (char *) &from;
               ^
src/cci/cci_net_buf.c:244:11: note: The address of local variable 'from' is accessed at non-zero index.
  q[1] = p[2];
          ^
src/cci/cci_net_buf.c:245:4: error: The address of local variable 'to' is accessed at non-zero index. [objectIndex]
  q[2] = p[1];
   ^
src/cci/cci_net_buf.c:241:16: note: Address of variable taken here.
  q = (char *) &to;
               ^
src/cci/cci_net_buf.c:245:4: note: The address of local variable 'to' is accessed at non-zero index.
  q[2] = p[1];
   ^
src/cci/cci_net_buf.c:245:11: error: The address of local variable 'from' is accessed at non-zero index. [objectIndex]
  q[2] = p[1];
          ^
src/cci/cci_net_buf.c:240:16: note: Address of variable taken here.
  p = (char *) &from;
               ^
src/cci/cci_net_buf.c:245:11: note: The address of local variable 'from' is accessed at non-zero index.
  q[2] = p[1];
          ^
src/cci/cci_net_buf.c:246:4: error: The address of local variable 'to' is accessed at non-zero index. [objectIndex]
  q[3] = p[0];
   ^
src/cci/cci_net_buf.c:241:16: note: Address of variable taken here.
  q = (char *) &to;
               ^
src/cci/cci_net_buf.c:246:4: note: The address of local variable 'to' is accessed at non-zero index.
  q[3] = p[0];
   ^
src/cci/cci_net_buf.c:260:11: error: The address of local variable 'from' is accessed at non-zero index. [objectIndex]
  q[0] = p[7];
          ^
src/cci/cci_net_buf.c:257:16: note: Address of variable taken here.
  p = (char *) &from;
               ^
src/cci/cci_net_buf.c:260:11: note: The address of local variable 'from' is accessed at non-zero index.
  q[0] = p[7];
          ^
src/cci/cci_net_buf.c:261:4: error: The address of local variable 'to' is accessed at non-zero index. [objectIndex]
  q[1] = p[6];
   ^
src/cci/cci_net_buf.c:258:16: note: Address of variable taken here.
  q = (char *) &to;
               ^
src/cci/cci_net_buf.c:261:4: note: The address of local variable 'to' is accessed at non-zero index.
  q[1] = p[6];
   ^
src/cci/cci_net_buf.c:261:11: error: The address of local variable 'from' is accessed at non-zero index. [objectIndex]
  q[1] = p[6];
          ^
src/cci/cci_net_buf.c:257:16: note: Address of variable taken here.
  p = (char *) &from;
               ^
src/cci/cci_net_buf.c:261:11: note: The address of local variable 'from' is accessed at non-zero index.
  q[1] = p[6];
          ^
src/cci/cci_net_buf.c:262:4: error: The address of local variable 'to' is accessed at non-zero index. [objectIndex]
  q[2] = p[5];
   ^
src/cci/cci_net_buf.c:258:16: note: Address of variable taken here.
  q = (char *) &to;
               ^
src/cci/cci_net_buf.c:262:4: note: The address of local variable 'to' is accessed at non-zero index.
  q[2] = p[5];
   ^
src/cci/cci_net_buf.c:262:11: error: The address of local variable 'from' is accessed at non-zero index. [objectIndex]
  q[2] = p[5];
          ^
src/cci/cci_net_buf.c:257:16: note: Address of variable taken here.
  p = (char *) &from;
               ^
src/cci/cci_net_buf.c:262:11: note: The address of local variable 'from' is accessed at non-zero index.
  q[2] = p[5];
          ^
src/cci/cci_net_buf.c:263:4: error: The address of local variable 'to' is accessed at non-zero index. [objectIndex]
  q[3] = p[4];
   ^
src/cci/cci_net_buf.c:258:16: note: Address of variable taken here.
  q = (char *) &to;
               ^
src/cci/cci_net_buf.c:263:4: note: The address of local variable 'to' is accessed at non-zero index.
  q[3] = p[4];
   ^
src/cci/cci_net_buf.c:263:11: error: The address of local variable 'from' is accessed at non-zero index. [objectIndex]
  q[3] = p[4];
          ^
src/cci/cci_net_buf.c:257:16: note: Address of variable taken here.
  p = (char *) &from;
               ^
src/cci/cci_net_buf.c:263:11: note: The address of local variable 'from' is accessed at non-zero index.
  q[3] = p[4];
          ^
src/cci/cci_net_buf.c:264:4: error: The address of local variable 'to' is accessed at non-zero index. [objectIndex]
  q[4] = p[3];
   ^
src/cci/cci_net_buf.c:258:16: note: Address of variable taken here.
  q = (char *) &to;
               ^
src/cci/cci_net_buf.c:264:4: note: The address of local variable 'to' is accessed at non-zero index.
  q[4] = p[3];
   ^
src/cci/cci_net_buf.c:264:11: error: The address of local variable 'from' is accessed at non-zero index. [objectIndex]
  q[4] = p[3];
          ^
src/cci/cci_net_buf.c:257:16: note: Address of variable taken here.
  p = (char *) &from;
               ^
src/cci/cci_net_buf.c:264:11: note: The address of local variable 'from' is accessed at non-zero index.
  q[4] = p[3];
          ^
src/cci/cci_net_buf.c:265:4: error: The address of local variable 'to' is accessed at non-zero index. [objectIndex]
  q[5] = p[2];
   ^
src/cci/cci_net_buf.c:258:16: note: Address of variable taken here.
  q = (char *) &to;
               ^
src/cci/cci_net_buf.c:265:4: note: The address of local variable 'to' is accessed at non-zero index.
  q[5] = p[2];
   ^
src/cci/cci_net_buf.c:265:11: error: The address of local variable 'from' is accessed at non-zero index. [objectIndex]
  q[5] = p[2];
          ^
src/cci/cci_net_buf.c:257:16: note: Address of variable taken here.
  p = (char *) &from;
               ^
src/cci/cci_net_buf.c:265:11: note: The address of local variable 'from' is accessed at non-zero index.
  q[5] = p[2];
          ^
src/cci/cci_net_buf.c:266:4: error: The address of local variable 'to' is accessed at non-zero index. [objectIndex]
  q[6] = p[1];
   ^
src/cci/cci_net_buf.c:258:16: note: Address of variable taken here.
  q = (char *) &to;
               ^
src/cci/cci_net_buf.c:266:4: note: The address of local variable 'to' is accessed at non-zero index.
  q[6] = p[1];
   ^
src/cci/cci_net_buf.c:266:11: error: The address of local variable 'from' is accessed at non-zero index. [objectIndex]
  q[6] = p[1];
          ^
src/cci/cci_net_buf.c:257:16: note: Address of variable taken here.
  p = (char *) &from;
               ^
src/cci/cci_net_buf.c:266:11: note: The address of local variable 'from' is accessed at non-zero index.
  q[6] = p[1];
          ^
src/cci/cci_net_buf.c:267:4: error: The address of local variable 'to' is accessed at non-zero index. [objectIndex]
  q[7] = p[0];
   ^
src/cci/cci_net_buf.c:258:16: note: Address of variable taken here.
  q = (char *) &to;
               ^
src/cci/cci_net_buf.c:267:4: note: The address of local variable 'to' is accessed at non-zero index.
  q[7] = p[0];
   ^
src/cci/cci_net_buf.c:240:7: portability:inconclusive: Casting from float * to signed char * is not portable due to different binary data representations on different platforms. [invalidPointerCast]
  p = (char *) &from;
      ^
src/cci/cci_net_buf.c:241:7: portability:inconclusive: Casting from float * to signed char * is not portable due to different binary data representations on different platforms. [invalidPointerCast]
  q = (char *) &to;
      ^
src/cci/cci_net_buf.c:257:7: portability:inconclusive: Casting from double * to signed char * is not portable due to different binary data representations on different platforms. [invalidPointerCast]
  p = (char *) &from;
      ^
src/cci/cci_net_buf.c:258:7: portability:inconclusive: Casting from double * to signed char * is not portable due to different binary data representations on different platforms. [invalidPointerCast]
  q = (char *) &to;
      ^
src/cci/cci_network.c:237:7: warning: %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed int'. [invalidPrintfArgType_uint]
      snprintf (info, DRIVER_SESSION_SIZE, "%u", 0);
      ^
src/cci/cci_network.c:789:8: style: The scope of the variable 'err_msg_size' can be reduced. [variableScope]
   int err_msg_size;
       ^
src/cci/cci_network.c:1393:7: style: The scope of the variable 'write_len' can be reduced. [variableScope]
  int write_len = 0;
      ^
src/cci/cci_network.c:852:59: style:inconclusive: Function 'net_recv_msg' argument 3 names different: declaration 'size' definition 'msg_size'. [funcArgNamesDifferent]
net_recv_msg (T_CON_HANDLE * con_handle, char **msg, int *msg_size, T_CCI_ERROR * err_buf)
                                                          ^
src/cci/cci_network.h:87:70: note: Function 'net_recv_msg' argument 3 names different: declaration 'size' definition 'msg_size'.
extern int net_recv_msg (T_CON_HANDLE * con_handle, char **msg, int *size, T_CCI_ERROR * err_buf);
                                                                     ^
src/cci/cci_network.c:852:59: note: Function 'net_recv_msg' argument 3 names different: declaration 'size' definition 'msg_size'.
net_recv_msg (T_CON_HANDLE * con_handle, char **msg, int *msg_size, T_CCI_ERROR * err_buf)
                                                          ^
src/cci/cci_network.c:1391:51: style:inconclusive: Function 'net_send_stream' argument 2 names different: declaration 'buf' definition 'msg'. [funcArgNamesDifferent]
net_send_stream (T_CON_HANDLE * con_handle, char *msg, int size)
                                                  ^
src/cci/cci_network.c:124:62: note: Function 'net_send_stream' argument 2 names different: declaration 'buf' definition 'msg'.
static int net_send_stream (T_CON_HANDLE * con_handle, char *buf, int size);
                                                             ^
src/cci/cci_network.c:1391:51: note: Function 'net_send_stream' argument 2 names different: declaration 'buf' definition 'msg'.
net_send_stream (T_CON_HANDLE * con_handle, char *msg, int size)
                                                  ^
src/cci/cci_network.c:1393:17: style: Variable 'write_len' is assigned a value that is never used. [unreadVariable]
  int write_len = 0;
                ^
src/cci/cci_network.c:1189:7: style: The scope of the variable 'read_len' can be reduced. [variableScope]
  int read_len;
      ^
src/cci/cci_properties.c:247:9: style: The scope of the variable 'token' can be reduced. [variableScope]
  char *token, *save_data = NULL, *end;
        ^
src/cci/cci_query_execute.c:4075:42: warning: Either the condition 'result_msg!=NULL' is redundant or there is pointer arithmetic with NULL pointer. [nullPointerArithmeticRedundantCheck]
  error = out_rs_info_decode (result_msg + 4, &result_msg_size, out_req_handle);
                                         ^
src/cci/cci_query_execute.c:4081:18: note: Assuming that condition 'result_msg!=NULL' is not redundant
  if (result_msg != NULL)
                 ^
src/cci/cci_query_execute.c:4075:42: note: Null pointer addition
  error = out_rs_info_decode (result_msg + 4, &result_msg_size, out_req_handle);
                                         ^
src/cci/cci_query_execute.c:3529:2: portability:inconclusive: Casting from double * to signed char * is not portable due to different binary data representations on different platforms. [invalidPointerCast]
 NET_STR_TO_DOUBLE (d_val, col_value_p);
 ^
src/cci/cci_query_execute.c:3536:2: portability:inconclusive: Casting from float * to signed char * is not portable due to different binary data representations on different platforms. [invalidPointerCast]
 NET_STR_TO_FLOAT (f_val, col_value_p);
 ^
src/cci/cci_query_execute.c:3604:2: portability:inconclusive: Casting from double * to signed char * is not portable due to different binary data representations on different platforms. [invalidPointerCast]
 NET_STR_TO_DOUBLE (d_val, col_value_p);
 ^
src/cci/cci_query_execute.c:3611:2: portability:inconclusive: Casting from float * to signed char * is not portable due to different binary data representations on different platforms. [invalidPointerCast]
 NET_STR_TO_FLOAT (f_val, col_value_p);
 ^
src/cci/cci_query_execute.c:3678:2: portability:inconclusive: Casting from double * to signed char * is not portable due to different binary data representations on different platforms. [invalidPointerCast]
 NET_STR_TO_DOUBLE (d_val, col_value_p);
 ^
src/cci/cci_query_execute.c:3685:2: portability:inconclusive: Casting from float * to signed char * is not portable due to different binary data representations on different platforms. [invalidPointerCast]
 NET_STR_TO_FLOAT (f_val, col_value_p);
 ^
src/cci/cci_query_execute.c:3752:2: portability:inconclusive: Casting from double * to signed char * is not portable due to different binary data representations on different platforms. [invalidPointerCast]
 NET_STR_TO_DOUBLE (d_val, col_value_p);
 ^
src/cci/cci_query_execute.c:3759:2: portability:inconclusive: Casting from float * to signed char * is not portable due to different binary data representations on different platforms. [invalidPointerCast]
 NET_STR_TO_FLOAT (f_val, col_value_p);
 ^
src/cci/cci_query_execute.c:3837:2: portability:inconclusive: Casting from double * to signed char * is not portable due to different binary data representations on different platforms. [invalidPointerCast]
 NET_STR_TO_DOUBLE (d_val, col_value_p);
 ^
src/cci/cci_query_execute.c:3843:2: portability:inconclusive: Casting from float * to signed char * is not portable due to different binary data representations on different platforms. [invalidPointerCast]
 NET_STR_TO_FLOAT (data, col_value_p);
 ^
src/cci/cci_query_execute.c:3917:2: portability:inconclusive: Casting from double * to signed char * is not portable due to different binary data representations on different platforms. [invalidPointerCast]
 NET_STR_TO_DOUBLE (data, col_value_p);
 ^
src/cci/cci_query_execute.c:3923:2: portability:inconclusive: Casting from float * to signed char * is not portable due to different binary data representations on different platforms. [invalidPointerCast]
 NET_STR_TO_FLOAT (f_val, col_value_p);
 ^
src/cci/cci_query_execute.c:6320:15: portability:inconclusive: Casting from float * to signed char * is not portable due to different binary data representations on different platforms. [invalidPointerCast]
      memcpy ((char *) &f_value, value, sizeof (float));
              ^
src/cci/cci_query_execute.c:6388:15: portability:inconclusive: Casting from double * to signed char * is not portable due to different binary data representations on different platforms. [invalidPointerCast]
      memcpy ((char *) &d_value, value, sizeof (double));
              ^
src/cci/cci_query_execute.c:1752:24: style: The scope of the variable 'set_type' can be reduced. [variableScope]
      char basic_type, set_type;
                       ^
src/cci/cci_query_execute.c:1854:7: style: The scope of the variable 'index' can be reduced. [variableScope]
  int index;
      ^
src/cci/cci_query_execute.c:1955:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/cci/cci_query_execute.c:2060:9: style: The scope of the variable 'value' can be reduced. [variableScope]
  void *value;
        ^
src/cci/cci_query_execute.c:2814:9: style: The scope of the variable 'msg' can be reduced. [variableScope]
  char *msg;
        ^
src/cci/cci_query_execute.c:2818:7: style: The scope of the variable 'shard_id' can be reduced. [variableScope]
  int shard_id;
      ^
src/cci/cci_query_execute.c:3051:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/cci/cci_query_execute.c:3103:8: style: The scope of the variable 'u_type' can be reduced. [variableScope]
  char u_type;
       ^
src/cci/cci_query_execute.c:3181:9: style: The scope of the variable 'msg' can be reduced. [variableScope]
  char *msg;
        ^
src/cci/cci_query_execute.c:3183:7: style: The scope of the variable 'sql_len' can be reduced. [variableScope]
  int sql_len;
      ^
src/cci/cci_query_execute.c:3187:7: style: The scope of the variable 'shard_id' can be reduced. [variableScope]
  int shard_id;
      ^
src/cci/cci_query_execute.c:5735:7: style: The scope of the variable 'err_code' can be reduced. [variableScope]
  int err_code;
      ^
src/cci/cci_query_execute.c:6824:8: style: The scope of the variable 'client_cache_reusable' can be reduced. [variableScope]
  char client_cache_reusable;
       ^
src/cci/cci_query_execute.c:1081:82: style:inconclusive: Function 'qe_get_db_parameter' argument 3 names different: declaration 'value' definition 'ret_val'. [funcArgNamesDifferent]
qe_get_db_parameter (T_CON_HANDLE * con_handle, T_CCI_DB_PARAM param_name, void *ret_val, T_CCI_ERROR * err_buf)
                                                                                 ^
src/cci/cci_query_execute.h:404:93: note: Function 'qe_get_db_parameter' argument 3 names different: declaration 'value' definition 'ret_val'.
extern int qe_get_db_parameter (T_CON_HANDLE * con_handle, T_CCI_DB_PARAM param_name, void *value,
                                                                                            ^
src/cci/cci_query_execute.c:1081:82: note: Function 'qe_get_db_parameter' argument 3 names different: declaration 'value' definition 'ret_val'.
qe_get_db_parameter (T_CON_HANDLE * con_handle, T_CCI_DB_PARAM param_name, void *ret_val, T_CCI_ERROR * err_buf)
                                                                                 ^
src/cci/cci_query_execute.c:2588:83: style:inconclusive: Function 'qe_col_size' argument 4 names different: declaration 'col_size' definition 'set_size'. [funcArgNamesDifferent]
qe_col_size (T_CON_HANDLE * con_handle, char *oid_str, const char *col_attr, int *set_size, T_CCI_ERROR * err_buf)
                                                                                  ^
src/cci/cci_query_execute.h:438:94: note: Function 'qe_col_size' argument 4 names different: declaration 'col_size' definition 'set_size'.
extern int qe_col_size (T_CON_HANDLE * con_handle, char *oid_str, const char *col_attr, int *col_size,
                                                                                             ^
src/cci/cci_query_execute.c:2588:83: note: Function 'qe_col_size' argument 4 names different: declaration 'col_size' definition 'set_size'.
qe_col_size (T_CON_HANDLE * con_handle, char *oid_str, const char *col_attr, int *set_size, T_CCI_ERROR * err_buf)
                                                                                  ^
src/cci/cci_query_execute.c:4261:94: style:inconclusive: Function 'qe_get_param_info' argument 3 names different: declaration 'param' definition 'res_param'. [funcArgNamesDifferent]
qe_get_param_info (T_REQ_HANDLE * req_handle, T_CON_HANDLE * con_handle, T_CCI_PARAM_INFO ** res_param,
                                                                                             ^
src/cci/cci_query_execute.h:473:105: note: Function 'qe_get_param_info' argument 3 names different: declaration 'param' definition 'res_param'.
extern int qe_get_param_info (T_REQ_HANDLE * req_handle, T_CON_HANDLE * con_handle, T_CCI_PARAM_INFO ** param,
                                                                                                        ^
src/cci/cci_query_execute.c:4261:94: note: Function 'qe_get_param_info' argument 3 names different: declaration 'param' definition 'res_param'.
qe_get_param_info (T_REQ_HANDLE * req_handle, T_CON_HANDLE * con_handle, T_CCI_PARAM_INFO ** res_param,
                                                                                             ^
src/cci/cci_query_execute.c:5265:36: style:inconclusive: Function 'get_column_info' argument 2 names different: declaration 'remain_size' definition 'size'. [funcArgNamesDifferent]
get_column_info (char *buf_p, int *size, T_CCI_COL_INFO ** ret_col_info, char **next_buf_p, bool is_prepare)
                                   ^
src/cci/cci_query_execute.c:187:47: note: Function 'get_column_info' argument 2 names different: declaration 'remain_size' definition 'size'.
static int get_column_info (char *buf_p, int *remain_size, T_CCI_COL_INFO ** ret_col_info, char **next_buf_p,
                                              ^
src/cci/cci_query_execute.c:5265:36: note: Function 'get_column_info' argument 2 names different: declaration 'remain_size' definition 'size'.
get_column_info (char *buf_p, int *size, T_CCI_COL_INFO ** ret_col_info, char **next_buf_p, bool is_prepare)
                                   ^
src/cci/cci_query_execute.c:6815:82: style:inconclusive: Function 'execute_array_info_decode' argument 4 names different: declaration 'qr' definition 'res_qr'. [funcArgNamesDifferent]
execute_array_info_decode (char *buf, int size, char flag, T_CCI_QUERY_RESULT ** res_qr, int *res_remain_size)
                                                                                 ^
src/cci/cci_query_execute.c:199:93: note: Function 'execute_array_info_decode' argument 4 names different: declaration 'qr' definition 'res_qr'.
static int execute_array_info_decode (char *buf, int size, char flag, T_CCI_QUERY_RESULT ** qr, int *res_remain_size);
                                                                                            ^
src/cci/cci_query_execute.c:6815:82: note: Function 'execute_array_info_decode' argument 4 names different: declaration 'qr' definition 'res_qr'.
execute_array_info_decode (char *buf, int size, char flag, T_CCI_QUERY_RESULT ** res_qr, int *res_remain_size)
                                                                                 ^
src/cci/cci_query_execute.c:7171:78: style:inconclusive: Function 'shard_info_decode' argument 4 names different: declaration 'shard_info' definition 'res_shard_info'. [funcArgNamesDifferent]
shard_info_decode (char *buf_p, int size, int num_shard, T_CCI_SHARD_INFO ** res_shard_info)
                                                                             ^
src/cci/cci_query_execute.c:214:89: note: Function 'shard_info_decode' argument 4 names different: declaration 'shard_info' definition 'res_shard_info'.
static int shard_info_decode (char *buf_p, int size, int num_shard, T_CCI_SHARD_INFO ** shard_info);
                                                                                        ^
src/cci/cci_query_execute.c:7171:78: note: Function 'shard_info_decode' argument 4 names different: declaration 'shard_info' definition 'res_shard_info'.
shard_info_decode (char *buf_p, int size, int num_shard, T_CCI_SHARD_INFO ** res_shard_info)
                                                                             ^
src/cci/cci_query_execute.c:5071:15: warning: Size of pointer 'tmp_tuple_value' used instead of size of its data. [pointerSize]
      memset (tmp_tuple_value[i].column_ptr, '\0', sizeof (char *) * num_cols);
              ^
src/cci/cci_query_execute.c:4840:3: style: Variable 'result_cache_lifetime' is assigned a value that is never used. [unreadVariable]
  NET_STR_TO_INT (result_cache_lifetime, cur_p);
  ^
src/cci/cci_query_execute.c:4993:16: style: Variable 'err_code' is assigned a value that is never used. [unreadVariable]
  int err_code = 0;
               ^
src/cci/cci_query_execute.c:5030:16: style: Variable 'remain_size' is assigned a value that is never used. [unreadVariable]
   remain_size -= NET_SIZE_BYTE;
               ^
src/cci/cci_query_execute.c:5157:19: style: Variable 'remain_size' is assigned a value that is never used. [unreadVariable]
      remain_size -= NET_SIZE_BYTE;
                  ^
src/cci/cci_query_execute.c:5550:14: style: Variable 'class_name' is assigned a value that is never used. [unreadVariable]
  class_name = cur_p;
             ^
src/cci/cci_query_execute.c:6832:29: style: Variable 'client_cache_reusable' is assigned a value that is never used. [unreadVariable]
      client_cache_reusable = *cur_p;
                            ^
src/cci/cci_query_execute.c:4322:50: style:inconclusive: Function 'qe_set_charset' argument 2 names different: declaration 'str' definition 'charset'. [funcArgNamesDifferent]
qe_set_charset (T_CON_HANDLE * con_handle, char *charset)
                                                 ^
src/cci/cci_query_execute.h:478:61: note: Function 'qe_set_charset' argument 2 names different: declaration 'str' definition 'charset'.
extern int qe_set_charset (T_CON_HANDLE * con_handle, char *str);
                                                            ^
src/cci/cci_query_execute.c:4322:50: note: Function 'qe_set_charset' argument 2 names different: declaration 'str' definition 'charset'.
qe_set_charset (T_CON_HANDLE * con_handle, char *charset)
                                                 ^
src/cci/cci_query_execute.c:5080:15: warning: Size of pointer 'tmp_tuple_value' used instead of size of its data. [pointerSize]
      memset (tmp_tuple_value[i].decoded_ptr, '\0', sizeof (char *) * num_cols);
              ^
src/cci/cci_t_lob.c:107:12: warning: Redundant assignment of 'new_size' to itself. [selfAssignment]
  new_size = htoni64 (new_size);
           ^
src/cci/cci_t_set.c:420:7: style: The scope of the variable 'err_code' can be reduced. [variableScope]
  int err_code;
      ^
src/cci/cci_t_set.c:122:75: style:inconclusive: Function 't_set_get' argument 5 names different: declaration 'ind' definition 'indicator'. [funcArgNamesDifferent]
t_set_get (T_SET * set, int index, T_CCI_A_TYPE a_type, void *value, int *indicator)
                                                                          ^
src/cci/cci_t_set.h:77:86: note: Function 't_set_get' argument 5 names different: declaration 'ind' definition 'indicator'.
extern int t_set_get (T_SET * set, int index, T_CCI_A_TYPE a_type, void *value, int *ind);
                                                                                     ^
src/cci/cci_t_set.c:122:75: note: Function 't_set_get' argument 5 names different: declaration 'ind' definition 'indicator'.
t_set_get (T_SET * set, int index, T_CCI_A_TYPE a_type, void *value, int *indicator)
                                                                          ^
src/cci/cci_t_set.c:198:69: style:inconclusive: Function 't_set_make' argument 5 names different: declaration 'ind' definition 'indicator'. [funcArgNamesDifferent]
t_set_make (T_SET * set, char ele_type, int size, void *value, int *indicator)
                                                                    ^
src/cci/cci_t_set.h:79:80: note: Function 't_set_make' argument 5 names different: declaration 'ind' definition 'indicator'.
extern int t_set_make (T_SET * set, char ele_type, int size, void *value, int *ind);
                                                                               ^
src/cci/cci_t_set.c:198:69: note: Function 't_set_make' argument 5 names different: declaration 'ind' definition 'indicator'.
t_set_make (T_SET * set, char ele_type, int size, void *value, int *indicator)
                                                                    ^
src/cci/cci_util.c:990:7: error: Code 'std::cmatch' is invalid C code. Use --std or --language to configure the language. [syntaxError]
      std::cmatch match;
      ^
src/cm_common/cm_broker_admin.c:207:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/cm_common/cm_broker_admin.c:208:18: style: The scope of the variable 'as_info' can be reduced. [variableScope]
  T_CM_CAS_INFO *as_info;
                 ^
src/cm_common/cm_broker_admin.c:273:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/cm_common/cm_broker_admin.c:274:21: style: The scope of the variable 'br_info' can be reduced. [variableScope]
  T_CM_BROKER_INFO *br_info;
                    ^
src/cm_common/cm_broker_admin.c:363:9: style: The scope of the variable 'p' can be reduced. [variableScope]
  char *p;
        ^
src/cm_common/cm_broker_jni.c:112:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/cm_common/cm_class_info_sa.c:111:11: style: Variable 'ver_str' is assigned a value that is never used. [unreadVariable]
  ver_str = (ver_str) ? ver_str : "";
          ^
src/cm_common/cm_dep_tasks.c:222:10: warning: Identical condition and return expression 'p==(void*)-1', return value is always 0 [identicalConditionAfterEarlyExit]
  return p;
         ^
src/cm_common/cm_dep_tasks.c:217:9: note: If condition 'p==(void*)-1' is true, the function will return/exit
  if (p == (void *) -1)
        ^
src/cm_common/cm_dep_tasks.c:222:10: note: Returning identical expression 'p==(void*)-1'
  return p;
         ^
src/cm_common/cm_dep_tasks.c:2945:7: error: Resource leak: fdkey_file [resourceLeak]
      return -1;
      ^
src/cm_common/cm_dep_tasks.c:2951:7: error: Resource leak: fdkey_file [resourceLeak]
      return -1;
      ^
src/cm_common/cm_dep_tasks.c:233:8: style: The scope of the variable 'dbname_at_hostname' can be reduced. [variableScope]
  char dbname_at_hostname[CUB_MAXHOSTNAMELEN + DB_NAME_LEN];
       ^
src/cm_common/cm_dep_tasks.c:277:11: style: The scope of the variable 'server_shmid' can be reduced. [variableScope]
      int server_shmid;
          ^
src/cm_common/cm_dep_tasks.c:386:21: style: The scope of the variable 'obj' can be reduced. [variableScope]
  DB_OBJECT *user, *obj;
                    ^
src/cm_common/cm_dep_tasks.c:392:8: style: The scope of the variable 'dbname_at_hostname' can be reduced. [variableScope]
  char dbname_at_hostname[CUB_MAXHOSTNAMELEN + DB_NAME_LEN];
       ^
src/cm_common/cm_dep_tasks.c:676:14: style: The scope of the variable 'p_trigger' can be reduced. [variableScope]
  DB_OBJECT *p_trigger;
             ^
src/cm_common/cm_dep_tasks.c:1615:14: style: The scope of the variable 'classobj' can be reduced. [variableScope]
  DB_OBJECT *classobj;
             ^
src/cm_common/cm_dep_tasks.c:1649:14: style: The scope of the variable 'classobj' can be reduced. [variableScope]
  DB_OBJECT *classobj;
             ^
src/cm_common/cm_dep_tasks.c:1875:8: style: The scope of the variable 'query' can be reduced. [variableScope]
  char query[QUERY_BUFFER_MAX], attr_name[128], order[10];
       ^
src/cm_common/cm_dep_tasks.c:1875:33: style: The scope of the variable 'attr_name' can be reduced. [variableScope]
  char query[QUERY_BUFFER_MAX], attr_name[128], order[10];
                                ^
src/cm_common/cm_dep_tasks.c:1875:49: style: The scope of the variable 'order' can be reduced. [variableScope]
  char query[QUERY_BUFFER_MAX], attr_name[128], order[10];
                                                ^
src/cm_common/cm_dep_tasks.c:1876:10: style: The scope of the variable 'end' can be reduced. [variableScope]
  int i, end, con_type;
         ^
src/cm_common/cm_dep_tasks.c:2098:9: style: The scope of the variable 'type_name' can be reduced. [variableScope]
  char *type_name;
        ^
src/cm_common/cm_dep_tasks.c:2099:14: style: The scope of the variable 'd' can be reduced. [variableScope]
  DB_DOMAIN *d;
             ^
src/cm_common/cm_dep_tasks.c:2816:14: style: The scope of the variable 'obj' can be reduced. [variableScope]
  DB_OBJECT *obj;
             ^
src/cm_common/cm_dep_tasks.c:2858:14: style: The scope of the variable 'obj' can be reduced. [variableScope]
  DB_OBJECT *obj;
             ^
src/cm_common/cm_dep_tasks.c:2532:67: style:inconclusive: Function 'trigger_info_sa' argument 3 names different: declaration 'password' definition 'passwd'. [funcArgNamesDifferent]
trigger_info_sa (const char *dbname, const char *uid, const char *passwd, nvplist * out, char *_dbmt_error)
                                                                  ^
src/cm_common/cm_dep_tasks.c:143:78: note: Function 'trigger_info_sa' argument 3 names different: declaration 'password' definition 'passwd'.
static int trigger_info_sa (const char *dbname, const char *uid, const char *password, nvplist * res,
                                                                             ^
src/cm_common/cm_dep_tasks.c:2532:67: note: Function 'trigger_info_sa' argument 3 names different: declaration 'password' definition 'passwd'.
trigger_info_sa (const char *dbname, const char *uid, const char *passwd, nvplist * out, char *_dbmt_error)
                                                                  ^
src/cm_common/cm_dep_tasks.c:2532:85: style:inconclusive: Function 'trigger_info_sa' argument 4 names different: declaration 'res' definition 'out'. [funcArgNamesDifferent]
trigger_info_sa (const char *dbname, const char *uid, const char *passwd, nvplist * out, char *_dbmt_error)
                                                                                    ^
src/cm_common/cm_dep_tasks.c:143:98: note: Function 'trigger_info_sa' argument 4 names different: declaration 'res' definition 'out'.
static int trigger_info_sa (const char *dbname, const char *uid, const char *password, nvplist * res,
                                                                                                 ^
src/cm_common/cm_dep_tasks.c:2532:85: note: Function 'trigger_info_sa' argument 4 names different: declaration 'res' definition 'out'.
trigger_info_sa (const char *dbname, const char *uid, const char *passwd, nvplist * out, char *_dbmt_error)
                                                                                    ^
src/cm_common/cm_dep_tasks.c:878:8: style: Local variable 'errcode' shadows outer variable [shadowVariable]
   int errcode;
       ^
src/cm_common/cm_dep_tasks.c:750:7: note: Shadowed declaration
  int errcode, is_class, flag;
      ^
src/cm_common/cm_dep_tasks.c:878:8: note: Shadow variable
   int errcode;
       ^
src/cm_common/cm_dep_tasks.c:569:12: style: Variable 'dbstatus' is assigned a value that is never used. [unreadVariable]
  dbstatus = nv_get_val (in, "dbstatus");
           ^
src/cm_common/cm_mem_cpu_stat.c:814:3: warning: %lu in format string (no. 1) requires 'unsigned long *' but the argument type is 'signed long *'. [invalidScanfArgType_int]
  fscanf (memfp, "%lu%lu", &vmem_pages, &rmem_pages); /* 'size' and 'resident' in stat file */
  ^
src/cm_common/cm_mem_cpu_stat.c:814:3: warning: %lu in format string (no. 2) requires 'unsigned long *' but the argument type is 'signed long *'. [invalidScanfArgType_int]
  fscanf (memfp, "%lu%lu", &vmem_pages, &rmem_pages); /* 'size' and 'resident' in stat file */
  ^
src/cm_common/cm_mem_cpu_stat.c:1383:17: error: Width 20 given in format string (no. 3) is larger than destination buffer 'pid_t[20]', use %19s to prevent overflowing it. [invalidScanfFormatWidth]
      tok_num = sscanf (linebuf, "%511s %511s %*s %*s %*s %20s", cmd_name, db_name, pid_t);
                ^
src/cm_common/cm_mem_cpu_stat.c:349:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/cm_common/cm_mem_cpu_stat.c:192:38: style:inconclusive: Function 'cm_get_broker_proc_stat' argument 1 names different: declaration 'broker_name' definition 'bname'. [funcArgNamesDifferent]
cm_get_broker_proc_stat (const char *bname, T_CM_ERROR * err_buf)
                                     ^
src/cm_common/cm_stat.h:515:63: note: Function 'cm_get_broker_proc_stat' argument 1 names different: declaration 'broker_name' definition 'bname'.
  T_CM_BROKER_PROC_STAT *cm_get_broker_proc_stat (const char *broker_name, T_CM_ERROR * err_buf);
                                                              ^
src/cm_common/cm_mem_cpu_stat.c:192:38: note: Function 'cm_get_broker_proc_stat' argument 1 names different: declaration 'broker_name' definition 'bname'.
cm_get_broker_proc_stat (const char *bname, T_CM_ERROR * err_buf)
                                     ^
src/cm_common/cm_mem_cpu_stat.c:1298:99: style:inconclusive: Function 'cm_get_command_result' argument 4 names different: declaration 'func_arg2' definition 'err_buf'. [funcArgNamesDifferent]
cm_get_command_result (const char *argv[], EXTRACT_FUNC func, const char *func_arg1, T_CM_ERROR * err_buf)
                                                                                                  ^
src/cm_common/cm_mem_cpu_stat.c:58:22: note: Function 'cm_get_command_result' argument 4 names different: declaration 'func_arg2' definition 'err_buf'.
        T_CM_ERROR * func_arg2);
                     ^
src/cm_common/cm_mem_cpu_stat.c:1298:99: note: Function 'cm_get_command_result' argument 4 names different: declaration 'func_arg2' definition 'err_buf'.
cm_get_command_result (const char *argv[], EXTRACT_FUNC func, const char *func_arg1, T_CM_ERROR * err_buf)
                                                                                                  ^
src/cm_common/cm_mem_cpu_stat.c:435:19: style: Variable 'lk.HighPart' is assigned a value that is never used. [unreadVariable]
      lk.HighPart = kernel_time.dwHighDateTime;
                  ^
src/cm_common/cm_mem_cpu_stat.c:436:18: style: Variable 'lk.LowPart' is assigned a value that is never used. [unreadVariable]
      lk.LowPart = kernel_time.dwLowDateTime;
                 ^
src/cm_common/cm_mem_cpu_stat.c:437:19: style: Variable 'lu.HighPart' is assigned a value that is never used. [unreadVariable]
      lu.HighPart = user_time.dwHighDateTime;
                  ^
src/cm_common/cm_mem_cpu_stat.c:438:18: style: Variable 'lu.LowPart' is assigned a value that is never used. [unreadVariable]
      lu.LowPart = user_time.dwLowDateTime;
                 ^
src/cm_common/cm_mem_cpu_stat.c:439:19: style: Variable 'li.HighPart' is assigned a value that is never used. [unreadVariable]
      li.HighPart = idle_time.dwHighDateTime;
                  ^
src/cm_common/cm_mem_cpu_stat.c:440:18: style: Variable 'li.LowPart' is assigned a value that is never used. [unreadVariable]
      li.LowPart = idle_time.dwLowDateTime;
                 ^
src/cm_common/cm_nameval.c:164:37: style: Condition 'name==NULL' is always false [knownConditionTrueFalse]
  dst_append (nv->name, name, (name == NULL) ? 0 : (int) strlen (name));
                                    ^
src/cm_common/cm_nameval.c:151:30: note: Assuming that condition 'name==NULL' is not redundant
  if ((ref == NULL) || (name == NULL))
                             ^
src/cm_common/cm_nameval.c:158:10: note: Assuming condition is false
  if (nv == NULL)
         ^
src/cm_common/cm_nameval.c:164:37: note: Condition 'name==NULL' is always false
  dst_append (nv->name, name, (name == NULL) ? 0 : (int) strlen (name));
                                    ^
src/cm_common/cm_nameval.c:421:16: warning: Either the condition 'next==NULL' is redundant or there is pointer arithmetic with NULL pointer. [nullPointerArithmeticRedundantCheck]
      p = next + 1;
               ^
src/cm_common/cm_nameval.c:404:16: note: Assuming that condition 'next==NULL' is not redundant
      if (next == NULL)
               ^
src/cm_common/cm_nameval.c:421:16: note: Null pointer addition
      p = next + 1;
               ^
src/cm_common/cm_nameval.c:80:9: style: The scope of the variable 'nbuf' can be reduced. [variableScope]
  char *nbuf, *vbuf;
        ^
src/cm_common/cm_nameval.c:207:8: style: The scope of the variable 'strbuf' can be reduced. [variableScope]
  char strbuf[64];
       ^
src/cm_common/cm_nameval.c:356:20: style: The scope of the variable 'read_len' can be reduced. [variableScope]
  int remain_read, read_len;
                   ^
src/cm_common/cm_nameval.c:205:82: style:inconclusive: Function 'nv_add_nvp_time' argument 5 names different: declaration 'flat' definition 'type'. [funcArgNamesDifferent]
nv_add_nvp_time (nvplist * ref, const char *name, time_t t, const char *fmt, int type)
                                                                                 ^
src/cm_common/cm_dep.h:102:88: note: Function 'nv_add_nvp_time' argument 5 names different: declaration 'flat' definition 'type'.
  int nv_add_nvp_time (nvplist * ref, const char *name, time_t t, const char *fmt, int flat);
                                                                                       ^
src/cm_common/cm_nameval.c:205:82: note: Function 'nv_add_nvp_time' argument 5 names different: declaration 'flat' definition 'type'.
nv_add_nvp_time (nvplist * ref, const char *name, time_t t, const char *fmt, int type)
                                                                                 ^
src/cm_common/cm_trigger_info_sa.c:87:7: error: Resource leak: fp [resourceLeak]
      return 0;
      ^
src/cm_common/cm_trigger_info_sa.c:140:32: warning: Either the condition 'trigger_name!=NULL' is redundant or there is possible null pointer dereference: trigger_name. [nullPointerRedundantCheck]
  fprintf (fp, MSGFMT, "name", trigger_name);
                               ^
src/cm_common/cm_trigger_info_sa.c:141:20: note: Assuming that condition 'trigger_name!=NULL' is not redundant
  if (trigger_name != NULL)
                   ^
src/cm_common/cm_trigger_info_sa.c:140:32: note: Null pointer dereference
  fprintf (fp, MSGFMT, "name", trigger_name);
                               ^
src/cm_common/cm_trigger_info_sa.c:201:38: warning: Either the condition 'action!=NULL' is redundant or there is possible null pointer dereference: action. [nullPointerRedundantCheck]
      fprintf (fp, MSGFMT, "action", action);
                                     ^
src/cm_common/cm_trigger_info_sa.c:202:18: note: Assuming that condition 'action!=NULL' is not redundant
      if (action != NULL)
                 ^
src/cm_common/cm_trigger_info_sa.c:201:38: note: Null pointer dereference
      fprintf (fp, MSGFMT, "action", action);
                                     ^
src/cm_common/cm_trigger_info_sa.c:51:14: style: The scope of the variable 'trigger_obj' can be reduced. [variableScope]
  DB_OBJECT *trigger_obj;
             ^
src/cm_common/cm_trigger_info_sa.c:125:49: style:inconclusive: Function 'get_trigger_information' argument 2 names different: declaration 'trigger_obj' definition 'triggerobj'. [funcArgNamesDifferent]
get_trigger_information (FILE * fp, DB_OBJECT * triggerobj)
                                                ^
src/cm_common/cm_trigger_info_sa.c:43:61: note: Function 'get_trigger_information' argument 2 names different: declaration 'trigger_obj' definition 'triggerobj'.
static void get_trigger_information (FILE * fp, DB_OBJECT * trigger_obj);
                                                            ^
src/cm_common/cm_trigger_info_sa.c:125:49: note: Function 'get_trigger_information' argument 2 names different: declaration 'trigger_obj' definition 'triggerobj'.
get_trigger_information (FILE * fp, DB_OBJECT * triggerobj)
                                                ^
src/cm_common/cm_utils.c:515:4: error: Common realloc mistake: 'info' nulled but not freed upon failure [memleakOnRealloc]
   info = (T_SERVER_STATUS_INFO *) realloc (info, sizeof (T_SERVER_STATUS_INFO) * num_alloc);
   ^
src/communication/network_cl.c:992:7: style: Condition 'rc' is always true [knownConditionTrueFalse]
  if (rc)
      ^
src/communication/network_cl.c:986:10: note: Assuming that condition 'rc==0' is not redundant
  if (rc == 0)
         ^
src/communication/network_cl.c:992:7: note: Condition 'rc' is always true
  if (rc)
      ^
src/communication/network_cl.c:4066:17: style: Condition 'reply!=NULL' is always true [knownConditionTrueFalse]
      if (reply != NULL)
                ^
src/communication/network_cl.c:4052:34: note: Assuming that condition 'reply==NULL' is not redundant
  if (error != NO_ERROR || reply == NULL)
                                 ^
src/communication/network_cl.c:4066:17: note: Condition 'reply!=NULL' is always true
      if (reply != NULL)
                ^
src/communication/network_cl.c:1865:10: style: Variable 'error' is reassigned a value before the old one has been used. [redundantAssignment]
   error =
         ^
src/communication/network_cl.c:1857:10: note: error is assigned
   error = COMPARE_SIZE_AND_BUFFER (&methoddata_size, size, &methoddata, reply);
         ^
src/communication/network_cl.c:1865:10: note: error is overwritten
   error =
         ^
src/communication/network_cl.c:2297:12: style: Variable 'error' is reassigned a value before the old one has been used. [redundantAssignment]
     error = css_receive_data_from_server (rc, &reply_logpg, &fillsize);
           ^
src/communication/network_cl.c:2287:9: note: error is assigned
  error = ER_NET_SERVER_CRASHED;
        ^
src/communication/network_cl.c:2297:12: note: error is overwritten
     error = css_receive_data_from_server (rc, &reply_logpg, &fillsize);
           ^
src/communication/network_cl.c:2297:12: style: Variable 'error' is reassigned a value before the old one has been used. [redundantAssignment]
     error = css_receive_data_from_server (rc, &reply_logpg, &fillsize);
           ^
src/communication/network_cl.c:2294:9: note: error is assigned
  error = ER_OUT_OF_VIRTUAL_MEMORY;
        ^
src/communication/network_cl.c:2297:12: note: error is overwritten
     error = css_receive_data_from_server (rc, &reply_logpg, &fillsize);
           ^
src/communication/network_cl.c:2461:14: style: Variable 'error' is reassigned a value before the old one has been used. [redundantAssignment]
       error = ER_NET_SERVER_DATA_RECEIVE;
             ^
src/communication/network_cl.c:2456:15: note: error is assigned
        error = logwr_write_log_pages ();
              ^
src/communication/network_cl.c:2461:14: note: error is overwritten
       error = ER_NET_SERVER_DATA_RECEIVE;
             ^
src/communication/network_cl.c:2620:9: style: Variable 'error' is reassigned a value before the old one has been used. [redundantAssignment]
  error = css_receive_data_from_server (rc, &reply, &size);
        ^
src/communication/network_cl.c:2595:9: note: error is assigned
  error = NO_ERROR;
        ^
src/communication/network_cl.c:2620:9: note: error is overwritten
  error = css_receive_data_from_server (rc, &reply, &size);
        ^
src/communication/network_cl.c:2809:9: style: Variable 'error' is reassigned a value before the old one has been used. [redundantAssignment]
  error = css_receive_data_from_server (rc, &reply, &size);
        ^
src/communication/network_cl.c:2782:9: note: error is assigned
  error = NO_ERROR;
        ^
src/communication/network_cl.c:2809:9: note: error is overwritten
  error = css_receive_data_from_server (rc, &reply, &size);
        ^
src/communication/network_cl.c:3042:9: style: Variable 'error' is reassigned a value before the old one has been used. [redundantAssignment]
  error = css_receive_data_from_server (rid, &reply, &size);
        ^
src/communication/network_cl.c:3019:9: note: error is assigned
  error = NO_ERROR;
        ^
src/communication/network_cl.c:3042:9: note: error is overwritten
  error = css_receive_data_from_server (rid, &reply, &size);
        ^
src/communication/network_cl.c:3200:9: style: Variable 'error' is reassigned a value before the old one has been used. [redundantAssignment]
  error = css_receive_data_from_server (rc, &reply, &size);
        ^
src/communication/network_cl.c:3180:9: note: error is assigned
  error = NO_ERROR;
        ^
src/communication/network_cl.c:3200:9: note: error is overwritten
  error = css_receive_data_from_server (rc, &reply, &size);
        ^
src/communication/network_cl.c:3432:9: style: Variable 'error' is reassigned a value before the old one has been used. [redundantAssignment]
  error = css_receive_data_from_server (rc, &reply, &size);
        ^
src/communication/network_cl.c:3405:9: note: error is assigned
  error = NO_ERROR;
        ^
src/communication/network_cl.c:3432:9: note: error is overwritten
  error = css_receive_data_from_server (rc, &reply, &size);
        ^
src/communication/network_cl.c:3655:9: style: Variable 'error' is reassigned a value before the old one has been used. [redundantAssignment]
  error = css_receive_data_from_server (rc, &reply, &size);
        ^
src/communication/network_cl.c:3601:9: note: error is assigned
  error = NO_ERROR;
        ^
src/communication/network_cl.c:3655:9: note: error is overwritten
  error = css_receive_data_from_server (rc, &reply, &size);
        ^
src/communication/network_cl.c:3756:9: style: Variable 'error' is reassigned a value before the old one has been used. [redundantAssignment]
  error = css_receive_data_from_server_with_timeout (eid, &reply, &reply_size, timeout);
        ^
src/communication/network_cl.c:3737:9: note: error is assigned
  error = NO_ERROR;
        ^
src/communication/network_cl.c:3756:9: note: error is overwritten
  error = css_receive_data_from_server_with_timeout (eid, &reply, &reply_size, timeout);
        ^
src/communication/network_cl.c:4051:9: style: Variable 'error' is reassigned a value before the old one has been used. [redundantAssignment]
  error = css_receive_data_from_server (rc, &reply, &size);
        ^
src/communication/network_cl.c:4043:9: note: error is assigned
  error = NO_ERROR;
        ^
src/communication/network_cl.c:4051:9: note: error is overwritten
  error = css_receive_data_from_server (rc, &reply, &size);
        ^
src/communication/network_cl.c:700:9: style: The scope of the variable 'avg_response_time' can be reduced. [variableScope]
  float avg_response_time, avg_client_time;
        ^
src/communication/network_cl.c:700:28: style: The scope of the variable 'avg_client_time' can be reduced. [variableScope]
  float avg_response_time, avg_client_time;
                           ^
src/communication/network_cl.c:1928:7: style: The scope of the variable 'pr_len' can be reduced. [variableScope]
  int pr_len = 0;
      ^
src/communication/network_cl.c:1929:8: style: The scope of the variable 'response_needed' can be reduced. [variableScope]
  bool response_needed = false;
       ^
src/communication/network_cl.c:1930:8: style: The scope of the variable 'retry_in' can be reduced. [variableScope]
  bool retry_in = true;
       ^
src/communication/network_cl.c:1933:9: style: The scope of the variable 'display_string' can be reduced. [variableScope]
  char *display_string;
        ^
src/communication/network_cl.c:1939:7: style: The scope of the variable 'error2' can be reduced. [variableScope]
  int error2;
      ^
src/communication/network_cl.c:1940:7: style: The scope of the variable 'result' can be reduced. [variableScope]
  int result = 0;
      ^
src/communication/network_cl.c:2218:16: style: The scope of the variable 'rc' can be reduced. [variableScope]
  unsigned int rc;
               ^
src/communication/network_cl.c:2220:9: style: The scope of the variable 'ptr' can be reduced. [variableScope]
  char *ptr;
        ^
src/communication/network_cl.c:4011:7: style: The scope of the variable 'error' can be reduced. [variableScope]
  int error;
      ^
src/communication/network_cl.c:1490:28: style:inconclusive: Function 'net_client_request_3_data' argument 8 names different: declaration 'replydata0' definition 'reply0'. [funcArgNamesDifferent]
      int datasize2, char *reply0, int replysize0, char *reply1, int replysize1, char *reply2,
                           ^
src/communication/network_interface_cl.h:318:48: note: Function 'net_client_request_3_data' argument 8 names different: declaration 'replydata0' definition 'reply0'.
          char *databuf2, int datasize2, char *replydata0, int replydatasize0,
                                               ^
src/communication/network_cl.c:1490:28: note: Function 'net_client_request_3_data' argument 8 names different: declaration 'replydata0' definition 'reply0'.
      int datasize2, char *reply0, int replysize0, char *reply1, int replysize1, char *reply2,
                           ^
src/communication/network_cl.c:1490:40: style:inconclusive: Function 'net_client_request_3_data' argument 9 names different: declaration 'replydatasize0' definition 'replysize0'. [funcArgNamesDifferent]
      int datasize2, char *reply0, int replysize0, char *reply1, int replysize1, char *reply2,
                                       ^
src/communication/network_interface_cl.h:318:64: note: Function 'net_client_request_3_data' argument 9 names different: declaration 'replydatasize0' definition 'replysize0'.
          char *databuf2, int datasize2, char *replydata0, int replydatasize0,
                                                               ^
src/communication/network_cl.c:1490:40: note: Function 'net_client_request_3_data' argument 9 names different: declaration 'replydatasize0' definition 'replysize0'.
      int datasize2, char *reply0, int replysize0, char *reply1, int replysize1, char *reply2,
                                       ^
src/communication/network_cl.c:1490:58: style:inconclusive: Function 'net_client_request_3_data' argument 10 names different: declaration 'replydata1' definition 'reply1'. [funcArgNamesDifferent]
      int datasize2, char *reply0, int replysize0, char *reply1, int replysize1, char *reply2,
                                                         ^
src/communication/network_interface_cl.h:319:17: note: Function 'net_client_request_3_data' argument 10 names different: declaration 'replydata1' definition 'reply1'.
          char *replydata1, int replydatasize1, char *replydata2, int replydatasize2);
                ^
src/communication/network_cl.c:1490:58: note: Function 'net_client_request_3_data' argument 10 names different: declaration 'replydata1' definition 'reply1'.
      int datasize2, char *reply0, int replysize0, char *reply1, int replysize1, char *reply2,
                                                         ^
src/communication/network_cl.c:1490:70: style:inconclusive: Function 'net_client_request_3_data' argument 11 names different: declaration 'replydatasize1' definition 'replysize1'. [funcArgNamesDifferent]
      int datasize2, char *reply0, int replysize0, char *reply1, int replysize1, char *reply2,
                                                                     ^
src/communication/network_interface_cl.h:319:33: note: Function 'net_client_request_3_data' argument 11 names different: declaration 'replydatasize1' definition 'replysize1'.
          char *replydata1, int replydatasize1, char *replydata2, int replydatasize2);
                                ^
src/communication/network_cl.c:1490:70: note: Function 'net_client_request_3_data' argument 11 names different: declaration 'replydatasize1' definition 'replysize1'.
      int datasize2, char *reply0, int replysize0, char *reply1, int replysize1, char *reply2,
                                                                     ^
src/communication/network_cl.c:1490:88: style:inconclusive: Function 'net_client_request_3_data' argument 12 names different: declaration 'replydata2' definition 'reply2'. [funcArgNamesDifferent]
      int datasize2, char *reply0, int replysize0, char *reply1, int replysize1, char *reply2,
                                                                                       ^
src/communication/network_interface_cl.h:319:55: note: Function 'net_client_request_3_data' argument 12 names different: declaration 'replydata2' definition 'reply2'.
          char *replydata1, int replydatasize1, char *replydata2, int replydatasize2);
                                                      ^
src/communication/network_cl.c:1490:88: note: Function 'net_client_request_3_data' argument 12 names different: declaration 'replydata2' definition 'reply2'.
      int datasize2, char *reply0, int replysize0, char *reply1, int replysize1, char *reply2,
                                                                                       ^
src/communication/network_cl.c:1491:11: style:inconclusive: Function 'net_client_request_3_data' argument 13 names different: declaration 'replydatasize2' definition 'replysize2'. [funcArgNamesDifferent]
      int replysize2)
          ^
src/communication/network_interface_cl.h:319:71: note: Function 'net_client_request_3_data' argument 13 names different: declaration 'replydatasize2' definition 'replysize2'.
          char *replydata1, int replydatasize1, char *replydata2, int replydatasize2);
                                                                      ^
src/communication/network_cl.c:1491:11: note: Function 'net_client_request_3_data' argument 13 names different: declaration 'replydatasize2' definition 'replysize2'.
      int replysize2)
          ^
src/communication/network_cl.c:1611:60: style:inconclusive: Function 'net_client_request_with_callback' argument 10 names different: declaration 'replydata_ptr1' definition 'replydata_listid'. [funcArgNamesDifferent]
      int datasize1, char *databuf2, int datasize2, char **replydata_listid,
                                                           ^
src/communication/network_interface_cl.h:322:18: note: Function 'net_client_request_with_callback' argument 10 names different: declaration 'replydata_ptr1' definition 'replydata_listid'.
          char **replydata_ptr1, int *replydatasize_ptr1, char **replydata_ptr2,
                 ^
src/communication/network_cl.c:1611:60: note: Function 'net_client_request_with_callback' argument 10 names different: declaration 'replydata_ptr1' definition 'replydata_listid'.
      int datasize1, char *databuf2, int datasize2, char **replydata_listid,
                                                           ^
src/communication/network_cl.c:1612:12: style:inconclusive: Function 'net_client_request_with_callback' argument 11 names different: declaration 'replydatasize_ptr1' definition 'replydatasize_listid'. [funcArgNamesDifferent]
      int *replydatasize_listid, char **replydata_page, int *replydatasize_page,
           ^
src/communication/network_interface_cl.h:322:39: note: Function 'net_client_request_with_callback' argument 11 names different: declaration 'replydatasize_ptr1' definition 'replydatasize_listid'.
          char **replydata_ptr1, int *replydatasize_ptr1, char **replydata_ptr2,
                                      ^
src/communication/network_cl.c:1612:12: note: Function 'net_client_request_with_callback' argument 11 names different: declaration 'replydatasize_ptr1' definition 'replydatasize_listid'.
      int *replydatasize_listid, char **replydata_page, int *replydatasize_page,
           ^
src/communication/network_cl.c:1612:41: style:inconclusive: Function 'net_client_request_with_callback' argument 12 names different: declaration 'replydata_ptr2' definition 'replydata_page'. [funcArgNamesDifferent]
      int *replydatasize_listid, char **replydata_page, int *replydatasize_page,
                                        ^
src/communication/network_interface_cl.h:322:66: note: Function 'net_client_request_with_callback' argument 12 names different: declaration 'replydata_ptr2' definition 'replydata_page'.
          char **replydata_ptr1, int *replydatasize_ptr1, char **replydata_ptr2,
                                                                 ^
src/communication/network_cl.c:1612:41: note: Function 'net_client_request_with_callback' argument 12 names different: declaration 'replydata_ptr2' definition 'replydata_page'.
      int *replydatasize_listid, char **replydata_page, int *replydatasize_page,
                                        ^
src/communication/network_cl.c:1612:62: style:inconclusive: Function 'net_client_request_with_callback' argument 13 names different: declaration 'replydatasize_ptr2' definition 'replydatasize_page'. [funcArgNamesDifferent]
      int *replydatasize_listid, char **replydata_page, int *replydatasize_page,
                                                             ^
src/communication/network_interface_cl.h:323:16: note: Function 'net_client_request_with_callback' argument 13 names different: declaration 'replydatasize_ptr2' definition 'replydatasize_page'.
          int *replydatasize_ptr2, char **replydata_ptr3, int *replydatasize_ptr3);
               ^
src/communication/network_cl.c:1612:62: note: Function 'net_client_request_with_callback' argument 13 names different: declaration 'replydatasize_ptr2' definition 'replydatasize_page'.
      int *replydatasize_listid, char **replydata_page, int *replydatasize_page,
                                                             ^
src/communication/network_cl.c:1613:14: style:inconclusive: Function 'net_client_request_with_callback' argument 14 names different: declaration 'replydata_ptr3' definition 'replydata_plan'. [funcArgNamesDifferent]
      char **replydata_plan, int *replydatasize_plan)
             ^
src/communication/network_interface_cl.h:323:43: note: Function 'net_client_request_with_callback' argument 14 names different: declaration 'replydata_ptr3' definition 'replydata_plan'.
          int *replydatasize_ptr2, char **replydata_ptr3, int *replydatasize_ptr3);
                                          ^
src/communication/network_cl.c:1613:14: note: Function 'net_client_request_with_callback' argument 14 names different: declaration 'replydata_ptr3' definition 'replydata_plan'.
      char **replydata_plan, int *replydatasize_plan)
             ^
src/communication/network_cl.c:1613:35: style:inconclusive: Function 'net_client_request_with_callback' argument 15 names different: declaration 'replydatasize_ptr3' definition 'replydatasize_plan'. [funcArgNamesDifferent]
      char **replydata_plan, int *replydatasize_plan)
                                  ^
src/communication/network_interface_cl.h:323:64: note: Function 'net_client_request_with_callback' argument 15 names different: declaration 'replydatasize_ptr3' definition 'replydatasize_plan'.
          int *replydatasize_ptr2, char **replydata_ptr3, int *replydatasize_ptr3);
                                                               ^
src/communication/network_cl.c:1613:35: note: Function 'net_client_request_with_callback' argument 15 names different: declaration 'replydatasize_ptr3' definition 'replydatasize_plan'.
      char **replydata_plan, int *replydatasize_plan)
                                  ^
src/communication/network_cl.c:3169:42: style:inconclusive: Function 'net_client_recv_copyarea' argument 7 names different: declaration 'eid' definition 'rc'. [funcArgNamesDifferent]
     LC_COPYAREA ** reply_copy_area, int rc)
                                         ^
src/communication/network_interface_cl.h:349:46: note: Function 'net_client_recv_copyarea' argument 7 names different: declaration 'eid' definition 'rc'.
         LC_COPYAREA ** reply_copy_area, int eid);
                                             ^
src/communication/network_cl.c:3169:42: note: Function 'net_client_recv_copyarea' argument 7 names different: declaration 'eid' definition 'rc'.
     LC_COPYAREA ** reply_copy_area, int rc)
                                         ^
src/communication/network_cl.c:1499:9: style: Variable 'error' is assigned a value that is never used. [unreadVariable]
  error = rc = 0;
        ^
src/communication/network_cl.c:1114:7: style: Condition 'rc' is always true [knownConditionTrueFalse]
  if (rc)
      ^
src/communication/network_cl.c:1108:10: note: Assuming that condition 'rc==0' is not redundant
  if (rc == 0)
         ^
src/communication/network_cl.c:1114:7: note: Condition 'rc' is always true
  if (rc)
      ^
src/communication/network_cl.c:1219:11: style: Variable 'ptr' is assigned a value that is never used. [unreadVariable]
      ptr = or_unpack_int64 (reply, &reply_datasize);
          ^
src/communication/network_interface_cl.c:8042:29: style: The statement 'if (stat_info->pkeys_size!=0) stat_info->pkeys_size=0' is logically equivalent to 'stat_info->pkeys_size=0'. [duplicateConditionalAssign]
  if (stat_info->pkeys_size != 0)
                            ^
src/communication/network_interface_cl.c:8044:29: note: Assignment 'stat_info->pkeys_size=0'
      stat_info->pkeys_size = 0; /* do not request pkeys info */
                            ^
src/communication/network_interface_cl.c:8042:29: note: Condition 'stat_info->pkeys_size!=0' is redundant
  if (stat_info->pkeys_size != 0)
                            ^
src/communication/network_interface_cl.c:258:70: style:inconclusive: Function 'locator_fetch' argument 4 names different: declaration 'fetch_type' definition 'fetch_version_type'. [funcArgNamesDifferent]
locator_fetch (OID * oidp, int chn, LOCK lock, LC_FETCH_VERSION_TYPE fetch_version_type, OID * class_oid, int class_chn,
                                                                     ^
src/communication/network_interface_cl.h:83:81: note: Function 'locator_fetch' argument 4 names different: declaration 'fetch_type' definition 'fetch_version_type'.
extern int locator_fetch (OID * oidp, int chn, LOCK lock, LC_FETCH_VERSION_TYPE fetch_type, OID * class_oid,
                                                                                ^
src/communication/network_interface_cl.c:258:70: note: Function 'locator_fetch' argument 4 names different: declaration 'fetch_type' definition 'fetch_version_type'.
locator_fetch (OID * oidp, int chn, LOCK lock, LC_FETCH_VERSION_TYPE fetch_version_type, OID * class_oid, int class_chn,
                                                                     ^
src/communication/network_interface_cl.c:1516:72: style:inconclusive: Function 'locator_fetch_lockhint_classes' argument 2 names different: declaration 'fetch_area' definition 'fetch_copyarea'. [funcArgNamesDifferent]
locator_fetch_lockhint_classes (LC_LOCKHINT * lockhint, LC_COPYAREA ** fetch_copyarea)
                                                                       ^
src/communication/network_interface_cl.h:114:83: note: Function 'locator_fetch_lockhint_classes' argument 2 names different: declaration 'fetch_area' definition 'fetch_copyarea'.
extern int locator_fetch_lockhint_classes (LC_LOCKHINT * lockhint, LC_COPYAREA ** fetch_area);
                                                                                  ^
src/communication/network_interface_cl.c:1516:72: note: Function 'locator_fetch_lockhint_classes' argument 2 names different: declaration 'fetch_area' definition 'fetch_copyarea'.
locator_fetch_lockhint_classes (LC_LOCKHINT * lockhint, LC_COPYAREA ** fetch_copyarea)
                                                                       ^
src/communication/network_interface_cl.c:3966:77: style:inconclusive: Function 'boot_check_db_consistency' argument 4 names different: declaration 'idx_btid' definition 'index_btid'. [funcArgNamesDifferent]
boot_check_db_consistency (int check_flag, OID * oids, int num_oids, BTID * index_btid)
                                                                            ^
src/communication/network_interface_cl.h:201:88: note: Function 'boot_check_db_consistency' argument 4 names different: declaration 'idx_btid' definition 'index_btid'.
extern int boot_check_db_consistency (int check_flag, OID * oids, int num_oids, BTID * idx_btid);
                                                                                       ^
src/communication/network_interface_cl.c:3966:77: note: Function 'boot_check_db_consistency' argument 4 names different: declaration 'idx_btid' definition 'index_btid'.
boot_check_db_consistency (int check_flag, OID * oids, int num_oids, BTID * index_btid)
                                                                            ^
src/communication/network_interface_cl.c:5251:10: style:inconclusive: Function 'boot_soft_rename' argument 8 names different: declaration 'newdb_overwrite' definition 'new_db_overwrite'. [funcArgNamesDifferent]
    bool new_db_overwrite, bool extern_rename, bool force_delete)
         ^
src/communication/network_interface_cl.h:213:55: note: Function 'boot_soft_rename' argument 8 names different: declaration 'newdb_overwrite' definition 'new_db_overwrite'.
        const char *fileof_vols_and_renamepaths, bool newdb_overwrite, bool extern_rename,
                                                      ^
src/communication/network_interface_cl.c:5251:10: note: Function 'boot_soft_rename' argument 8 names different: declaration 'newdb_overwrite' definition 'new_db_overwrite'.
    bool new_db_overwrite, bool extern_rename, bool force_delete)
         ^
src/communication/network_interface_cl.c:5295:78: style:inconclusive: Function 'boot_copy' argument 9 names different: declaration 'newdb_overwrite' definition 'new_db_overwrite'. [funcArgNamesDifferent]
    const char *new_volext_path, const char *fileof_vols_and_copypaths, bool new_db_overwrite)
                                                                             ^
src/communication/network_interface_cl.h:218:53: note: Function 'boot_copy' argument 9 names different: declaration 'newdb_overwrite' definition 'new_db_overwrite'.
        const char *fileof_vols_and_copypaths, bool newdb_overwrite);
                                                    ^
src/communication/network_interface_cl.c:5295:78: note: Function 'boot_copy' argument 9 names different: declaration 'newdb_overwrite' definition 'new_db_overwrite'.
    const char *new_volext_path, const char *fileof_vols_and_copypaths, bool new_db_overwrite)
                                                                             ^
src/communication/network_interface_cl.c:6823:85: style:inconclusive: Function 'qmgr_prepare_and_execute_query' argument 3 names different: declaration 'query_id' definition 'query_idp'. [funcArgNamesDifferent]
qmgr_prepare_and_execute_query (char *xasl_stream, int xasl_stream_size, QUERY_ID * query_idp, int dbval_cnt,
                                                                                    ^
src/communication/network_interface_cl.h:248:107: note: Function 'qmgr_prepare_and_execute_query' argument 3 names different: declaration 'query_id' definition 'query_idp'.
extern QFILE_LIST_ID *qmgr_prepare_and_execute_query (char *xasl_stream, int xasl_stream_size, QUERY_ID * query_id,
                                                                                                          ^
src/communication/network_interface_cl.c:6823:85: note: Function 'qmgr_prepare_and_execute_query' argument 3 names different: declaration 'query_id' definition 'query_idp'.
qmgr_prepare_and_execute_query (char *xasl_stream, int xasl_stream_size, QUERY_ID * query_idp, int dbval_cnt,
                                                                                    ^
src/communication/network_interface_cl.c:8134:37: style:inconclusive: Function 'db_local_transaction_id' argument 1 names different: declaration 'trid' definition 'result_trid'. [funcArgNamesDifferent]
db_local_transaction_id (DB_VALUE * result_trid)
                                    ^
src/communication/network_interface_cl.h:281:48: note: Function 'db_local_transaction_id' argument 1 names different: declaration 'trid' definition 'result_trid'.
extern int db_local_transaction_id (DB_VALUE * trid);
                                               ^
src/communication/network_interface_cl.c:8134:37: note: Function 'db_local_transaction_id' argument 1 names different: declaration 'trid' definition 'result_trid'.
db_local_transaction_id (DB_VALUE * result_trid)
                                    ^
src/communication/network_interface_cl.c:3689:3: error: Code 'cubmem::extensible_block' is invalid C code. Use --std or --language to configure the language. [syntaxError]
  cubmem::extensible_block ext_blk;
  ^
src/communication/network_interface_sr.c:9909:3: error: Code 'cubload::load_args' is invalid C code. Use --std or --language to configure the language. [syntaxError]
  cubload::load_args args;
  ^
src/communication/network_sr.c:1304:3: error: Code 'cubthread::initialize' is invalid C code. Use --std or --language to configure the language. [syntaxError]
  cubthread::initialize (thread_p);
  ^
src/compat/cnv.c:7814:15: style: Condition 'hrs==12' is always false [knownConditionTrueFalse]
      if (hrs == 12 && new_hour && (hour > 12 || hour < 1))
              ^
src/compat/cnv.c:7733:13: note: Assignment 'hrs=24', assigned value is 24
  int hrs = 24;
            ^
src/compat/cnv.c:7814:15: note: Condition 'hrs==12' is always false
      if (hrs == 12 && new_hour && (hour > 12 || hour < 1))
              ^
src/compat/cnv.c:7821:34: style: Condition 'hrs==12' is always false [knownConditionTrueFalse]
   db_time_encode (the_time, hrs == 12 && pm ? hour % 12 + 12 : hour, min, sec);
                                 ^
src/compat/cnv.c:7733:13: note: Assignment 'hrs=24', assigned value is 24
  int hrs = 24;
            ^
src/compat/cnv.c:7821:34: note: Condition 'hrs==12' is always false
   db_time_encode (the_time, hrs == 12 && pm ? hour % 12 + 12 : hour, min, sec);
                                 ^
src/compat/cnv.c:8387:65: style: Condition 'hrs==12' is always false [knownConditionTrueFalse]
      db_datetime_encode (&tmp_datetime, month, day, year, (hrs == 12 && pm ? hour % 12 + 12 : hour), min, sec, msec);
                                                                ^
src/compat/cnv.c:8281:13: note: Assignment 'hrs=24', assigned value is 24
  int hrs = 24;
            ^
src/compat/cnv.c:8387:65: note: Condition 'hrs==12' is always false
      db_datetime_encode (&tmp_datetime, month, day, year, (hrs == 12 && pm ? hour % 12 + 12 : hour), min, sec, msec);
                                                                ^
src/compat/cnv.c:8396:20: style: Condition 'hrs==12' is always false [knownConditionTrueFalse]
      else if (hrs == 12 && new_hour && (hour > 12 || hour < 1))
                   ^
src/compat/cnv.c:8281:13: note: Assignment 'hrs=24', assigned value is 24
  int hrs = 24;
            ^
src/compat/cnv.c:8396:20: note: Condition 'hrs==12' is always false
      else if (hrs == 12 && new_hour && (hour > 12 || hour < 1))
                   ^
src/compat/cnv.c:5948:7: style: The scope of the variable 'bit_index' can be reduced. [variableScope]
  int bit_index;
      ^
src/compat/dbtype_function.i:1998:55: style:inconclusive: Function 'db_make_collection' argument 2 names different: declaration 'set' definition 'col'. [funcArgNamesDifferent]
db_make_collection (DB_VALUE * value, DB_COLLECTION * col)
                                                      ^
src/compat/dbtype_function.i:123:68: note: Function 'db_make_collection' argument 2 names different: declaration 'set' definition 'col'.
STATIC_INLINE int db_make_collection (DB_VALUE * value, DB_C_SET * set) __attribute__ ((ALWAYS_INLINE));
                                                                   ^
src/compat/dbtype_function.i:1998:55: note: Function 'db_make_collection' argument 2 names different: declaration 'set' definition 'col'.
db_make_collection (DB_VALUE * value, DB_COLLECTION * col)
                                                      ^
src/compat/dbtype_function.i:2067:59: style:inconclusive: Function 'db_make_time' argument 3 names different: declaration 'minute' definition 'min'. [funcArgNamesDifferent]
db_make_time (DB_VALUE * value, const int hour, const int min, const int sec)
                                                          ^
src/compat/dbtype_function.i:127:77: note: Function 'db_make_time' argument 3 names different: declaration 'minute' definition 'min'.
STATIC_INLINE int db_make_time (DB_VALUE * value, const int hour, const int minute, const int second)
                                                                            ^
src/compat/dbtype_function.i:2067:59: note: Function 'db_make_time' argument 3 names different: declaration 'minute' definition 'min'.
db_make_time (DB_VALUE * value, const int hour, const int min, const int sec)
                                                          ^
src/compat/dbtype_function.i:2067:74: style:inconclusive: Function 'db_make_time' argument 4 names different: declaration 'second' definition 'sec'. [funcArgNamesDifferent]
db_make_time (DB_VALUE * value, const int hour, const int min, const int sec)
                                                                         ^
src/compat/dbtype_function.i:127:95: note: Function 'db_make_time' argument 4 names different: declaration 'second' definition 'sec'.
STATIC_INLINE int db_make_time (DB_VALUE * value, const int hour, const int minute, const int second)
                                                                                              ^
src/compat/dbtype_function.i:2067:74: note: Function 'db_make_time' argument 4 names different: declaration 'second' definition 'sec'.
db_make_time (DB_VALUE * value, const int hour, const int min, const int sec)
                                                                         ^
src/compat/dbtype_function.i:2088:43: style:inconclusive: Function 'db_make_date' argument 2 names different: declaration 'month' definition 'mon'. [funcArgNamesDifferent]
db_make_date (DB_VALUE * value, const int mon, const int day, const int year)
                                          ^
src/compat/dbtype_function.i:129:61: note: Function 'db_make_date' argument 2 names different: declaration 'month' definition 'mon'.
STATIC_INLINE int db_make_date (DB_VALUE * value, const int month, const int day, const int year)
                                                            ^
src/compat/dbtype_function.i:2088:43: note: Function 'db_make_date' argument 2 names different: declaration 'month' definition 'mon'.
db_make_date (DB_VALUE * value, const int mon, const int day, const int year)
                                          ^
src/compat/cnv.c:2732:34: style:inconclusive: Function 'fmt_integral_value' argument 1 names different: declaration 'type' definition 'digit_type'. [funcArgNamesDifferent]
fmt_integral_value (FORMAT_DIGIT digit_type, int ndigits, bool sign_required, bool thousands, double *the_value)
                                 ^
src/compat/cnv.c:288:45: note: Function 'fmt_integral_value' argument 1 names different: declaration 'type' definition 'digit_type'.
static int fmt_integral_value (FORMAT_DIGIT type, int ndigits, bool sign_required, bool thousands, double *the_value);
                                            ^
src/compat/cnv.c:2732:34: note: Function 'fmt_integral_value' argument 1 names different: declaration 'type' definition 'digit_type'.
fmt_integral_value (FORMAT_DIGIT digit_type, int ndigits, bool sign_required, bool thousands, double *the_value)
                                 ^
src/compat/cnv.c:2901:37: style:inconclusive: Function 'fmt_fractional_digits' argument 1 names different: declaration 'type' definition 'digit_type'. [funcArgNamesDifferent]
fmt_fractional_digits (FORMAT_DIGIT digit_type, int ndigits, double *the_value, int *nfound)
                                    ^
src/compat/cnv.c:290:48: note: Function 'fmt_fractional_digits' argument 1 names different: declaration 'type' definition 'digit_type'.
static int fmt_fractional_digits (FORMAT_DIGIT type, int ndigits, double *the_value, int *nfound);
                                               ^
src/compat/cnv.c:2901:37: note: Function 'fmt_fractional_digits' argument 1 names different: declaration 'type' definition 'digit_type'.
fmt_fractional_digits (FORMAT_DIGIT digit_type, int ndigits, double *the_value, int *nfound)
                                    ^
src/compat/cnv.c:2967:36: style:inconclusive: Function 'fmt_fractional_value' argument 1 names different: declaration 'type' definition 'digit_type'. [funcArgNamesDifferent]
fmt_fractional_value (FORMAT_DIGIT digit_type, int ndigits, double *the_value)
                                   ^
src/compat/cnv.c:289:47: note: Function 'fmt_fractional_value' argument 1 names different: declaration 'type' definition 'digit_type'.
static int fmt_fractional_value (FORMAT_DIGIT type, int ndigits, double *the_value);
                                              ^
src/compat/cnv.c:2967:36: note: Function 'fmt_fractional_value' argument 1 names different: declaration 'type' definition 'digit_type'.
fmt_fractional_value (FORMAT_DIGIT digit_type, int ndigits, double *the_value)
                                   ^
src/compat/cnv.c:5321:31: style:inconclusive: Function 'bifmt_value' argument 1 names different: declaration 'bifmt' definition 'ifmt'. [funcArgNamesDifferent]
bifmt_value (INTEGER_FORMAT * ifmt, const char *string, DB_BIGINT * the_bigint)
                              ^
src/compat/cnv.c:346:50: note: Function 'bifmt_value' argument 1 names different: declaration 'bifmt' definition 'ifmt'.
static const char *bifmt_value (INTEGER_FORMAT * bifmt, const char *string, DB_BIGINT * the_bigint);
                                                 ^
src/compat/cnv.c:5321:31: note: Function 'bifmt_value' argument 1 names different: declaration 'bifmt' definition 'ifmt'.
bifmt_value (INTEGER_FORMAT * ifmt, const char *string, DB_BIGINT * the_bigint)
                              ^
src/compat/cnv.c:7945:97: style:inconclusive: Function 'db_string_timestamp' argument 3 names different: declaration 'the_time' definition 'the_timestamp'. [funcArgNamesDifferent]
db_string_timestamp (const char *timestamp_string, const char *timestamp_format, DB_TIMESTAMP * the_timestamp)
                                                                                                ^
src/compat/cnv.h:61:21: note: Function 'db_string_timestamp' argument 3 names different: declaration 'the_time' definition 'the_timestamp'.
     DB_TIMESTAMP * the_time);
                    ^
src/compat/cnv.c:7945:97: note: Function 'db_string_timestamp' argument 3 names different: declaration 'the_time' definition 'the_timestamp'.
db_string_timestamp (const char *timestamp_string, const char *timestamp_format, DB_TIMESTAMP * the_timestamp)
                                                                                                ^
src/compat/cnv.c:8544:28: style:inconclusive: Function 'db_string_bit' argument 1 names different: declaration 'string' definition 'bit_char_string'. [funcArgNamesDifferent]
db_string_bit (const char *bit_char_string, const char *bit_format, DB_VALUE * the_db_bit)
                           ^
src/compat/cnv.h:68:47: note: Function 'db_string_bit' argument 1 names different: declaration 'string' definition 'bit_char_string'.
extern const char *db_string_bit (const char *string, const char *bit_format, DB_VALUE * the_db_bit);
                                              ^
src/compat/cnv.c:8544:28: note: Function 'db_string_bit' argument 1 names different: declaration 'string' definition 'bit_char_string'.
db_string_bit (const char *bit_char_string, const char *bit_format, DB_VALUE * the_db_bit)
                           ^
src/compat/cnv.c:5751:14: style: Variable 'ttype' is assigned a value that is never used. [unreadVariable]
  if ((ttype = cnv_fmt_lex (&token)) == FT_HEX_DIGITS)
             ^
src/compat/cnv.c:6236:67: style: Condition 'last==FT_ZEROES' is always false [knownConditionTrueFalse]
   co_signal (CNV_ERR_BAD_TRAILING, CNV_ER_FMT_BAD_TRAILING, last == FT_ZEROES ? LOCAL_0 : LOCAL_STAR);
                                                                  ^
src/compat/cnv.c:6233:16: note: Assuming that condition 'last==FT_STARS' is not redundant
      if (last == FT_STARS && digit_type != DIGIT_STAR)
               ^
src/compat/cnv.c:6236:67: note: Condition 'last==FT_ZEROES' is always false
   co_signal (CNV_ERR_BAD_TRAILING, CNV_ER_FMT_BAD_TRAILING, last == FT_ZEROES ? LOCAL_0 : LOCAL_STAR);
                                                                  ^
src/compat/cnv.c:6992:12: error: Common realloc mistake: 'buffer' nulled but not freed upon failure [memleakOnRealloc]
      if ((buffer = (char *) realloc (buffer, max_size)) == NULL)
           ^
src/compat/cnv.c:6300:7: style: The scope of the variable 'precision' can be reduced. [variableScope]
  int precision;
      ^
src/compat/cnv.c:6799:11: style: The scope of the variable 'args' can be reduced. [variableScope]
  va_list args;
          ^
src/compat/cnv.c:2278:44: style:inconclusive: Function 'local_datetime_string' argument 1 names different: declaration 'the_timestamp' definition 'the_datetime'. [funcArgNamesDifferent]
local_datetime_string (const DB_DATETIME * the_datetime)
                                           ^
src/compat/cnv.c:267:63: note: Function 'local_datetime_string' argument 1 names different: declaration 'the_timestamp' definition 'the_datetime'.
static const char *local_datetime_string (const DB_DATETIME * the_timestamp);
                                                              ^
src/compat/cnv.c:2278:44: note: Function 'local_datetime_string' argument 1 names different: declaration 'the_timestamp' definition 'the_datetime'.
local_datetime_string (const DB_DATETIME * the_datetime)
                                           ^
src/compat/cnv.c:2702:69: style:inconclusive: Function 'fmt_validate' argument 3 names different: declaration 'token_type' definition 'fmt_type'. [funcArgNamesDifferent]
fmt_validate (const char *format, FMT_LEX_MODE mode, FMT_TOKEN_TYPE fmt_type, DB_TYPE data_type)
                                                                    ^
src/compat/cnv.c:282:80: note: Function 'fmt_validate' argument 3 names different: declaration 'token_type' definition 'fmt_type'.
static int fmt_validate (const char *format, FMT_LEX_MODE mode, FMT_TOKEN_TYPE token_type, DB_TYPE data_type);
                                                                               ^
src/compat/cnv.c:2702:69: note: Function 'fmt_validate' argument 3 names different: declaration 'token_type' definition 'fmt_type'.
fmt_validate (const char *format, FMT_LEX_MODE mode, FMT_TOKEN_TYPE fmt_type, DB_TYPE data_type)
                                                                    ^
src/compat/cnv.c:3136:45: style:inconclusive: Function 'fmt_drop_integral' argument 2 names different: declaration 'pos' definition 'position'. [funcArgNamesDifferent]
fmt_drop_integral (ADJ_ARRAY * string, int *position, int ndigits, FMT_LEX_MODE mode)
                                            ^
src/compat/cnv.c:295:57: note: Function 'fmt_drop_integral' argument 2 names different: declaration 'pos' definition 'position'.
static void fmt_drop_integral (ADJ_ARRAY * string, int *pos, int ndigits, FMT_LEX_MODE mode);
                                                        ^
src/compat/cnv.c:3136:45: note: Function 'fmt_drop_integral' argument 2 names different: declaration 'pos' definition 'position'.
fmt_drop_integral (ADJ_ARRAY * string, int *position, int ndigits, FMT_LEX_MODE mode)
                                            ^
src/compat/cnv.c:5498:55: style:inconclusive: Function 'ifmt_text_numeric' argument 2 names different: declaration 'string' definition 'text_string'. [funcArgNamesDifferent]
ifmt_text_numeric (INTEGER_FORMAT * ifmt, ADJ_ARRAY * text_string)
                                                      ^
src/compat/cnv.c:350:66: note: Function 'ifmt_text_numeric' argument 2 names different: declaration 'string' definition 'text_string'.
static int ifmt_text_numeric (INTEGER_FORMAT * ifmt, ADJ_ARRAY * string);
                                                                 ^
src/compat/cnv.c:5498:55: note: Function 'ifmt_text_numeric' argument 2 names different: declaration 'string' definition 'text_string'.
ifmt_text_numeric (INTEGER_FORMAT * ifmt, ADJ_ARRAY * text_string)
                                                      ^
src/compat/cnv.c:7286:32: style:inconclusive: Function 'db_string_numeric' argument 1 names different: declaration 'string' definition 'numeric_string'. [funcArgNamesDifferent]
db_string_numeric (const char *numeric_string, const char *numeric_format, DB_VALUE * the_numeric)
                               ^
src/compat/cnv.h:70:51: note: Function 'db_string_numeric' argument 1 names different: declaration 'string' definition 'numeric_string'.
extern const char *db_string_numeric (const char *string, const char *numeric_format, DB_VALUE * the_numeric);
                                                  ^
src/compat/cnv.c:7286:32: note: Function 'db_string_numeric' argument 1 names different: declaration 'string' definition 'numeric_string'.
db_string_numeric (const char *numeric_string, const char *numeric_format, DB_VALUE * the_numeric)
                               ^
src/compat/cnv.c:3389:14: style: The scope of the variable 'buffer' can be reduced. [variableScope]
  ADJ_ARRAY *buffer;
             ^
src/compat/cnvlex.c:1499:14: style: Variable 'num_to_read' is assigned a value that is never used. [unreadVariable]
 num_to_read = YY_READ_BUF_SIZE;
             ^
src/compat/cnvlex.c:1583:42: style:inconclusive: Function 'yy_try_NUL_trans' argument 1 names different: declaration 'current_state' definition 'yy_current_state'. [funcArgNamesDifferent]
yy_try_NUL_trans (register yy_state_type yy_current_state)
                                         ^
src/compat/cnvlex.c:750:39: note: Function 'yy_try_NUL_trans' argument 1 names different: declaration 'current_state' definition 'yy_current_state'.
static yy_state_type yy_try_NUL_trans YY_PROTO ((yy_state_type current_state));
                                      ^
src/compat/cnvlex.c:1583:42: note: Function 'yy_try_NUL_trans' argument 1 names different: declaration 'current_state' definition 'yy_current_state'.
yy_try_NUL_trans (register yy_state_type yy_current_state)
                                         ^
src/compat/cnvlex.c:1615:40: style:inconclusive: Function 'dbcnvunput' argument 2 names different: declaration 'buf_ptr' definition 'yy_bp'. [funcArgNamesDifferent]
yyunput (YY_CHAR c, register YY_CHAR * yy_bp)
                                       ^
src/compat/cnvlex.c:752:21: note: Function 'dbcnvunput' argument 2 names different: declaration 'buf_ptr' definition 'yy_bp'.
static void yyunput YY_PROTO ((YY_CHAR c, YY_CHAR * buf_ptr));
                    ^
src/compat/cnvlex.c:1615:40: note: Function 'dbcnvunput' argument 2 names different: declaration 'buf_ptr' definition 'yy_bp'.
yyunput (YY_CHAR c, register YY_CHAR * yy_bp)
                                       ^
src/compat/db_admin.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/compat/db_admin.c:272:26: style: Condition 'more_vol_info_file!=NULL' is always false [knownConditionTrueFalse]
  if (more_vol_info_file != NULL)
                         ^
src/compat/db_admin.c:174:36: note: Assignment 'more_vol_info_file=NULL', assigned value is 0
  const char *more_vol_info_file = NULL;
                                   ^
src/compat/db_admin.c:272:26: note: Condition 'more_vol_info_file!=NULL' is always false
  if (more_vol_info_file != NULL)
                         ^
src/compat/db_admin.c:601:19: style: The scope of the variable 'host_status' can be reduced. [variableScope]
  DB_HOST_STATUS *host_status;
                  ^
src/compat/db_admin.c:712:19: style: The scope of the variable 'host_status' can be reduced. [variableScope]
  DB_HOST_STATUS *host_status;
                  ^
src/compat/db_admin.c:2257:15: style: The scope of the variable 'object_array' can be reduced. [variableScope]
  DB_OBJECT **object_array;
              ^
src/compat/db_admin.c:2259:12: style: The scope of the variable 'i' can be reduced. [variableScope]
  int len, i;
           ^
src/compat/db_admin.c:2307:12: style: The scope of the variable 'cnt' can be reduced. [variableScope]
  int max, cnt, i;
           ^
src/compat/db_admin.c:2307:17: style: The scope of the variable 'i' can be reduced. [variableScope]
  int max, cnt, i;
                ^
src/compat/db_admin.c:2308:15: style: The scope of the variable 'mops' can be reduced. [variableScope]
  DB_OBJECT **mops;
              ^
src/compat/db_admin.c:2309:10: style: The scope of the variable 'buf_size' can be reduced. [variableScope]
  size_t buf_size;
         ^
src/compat/db_admin.c:2481:7: style: The scope of the variable 'op' can be reduced. [variableScope]
  MOP op;
      ^
src/compat/db_admin.c:2525:19: style: The scope of the variable 'method_link' can be reduced. [variableScope]
  DB_METHOD_LINK *method_link;
                  ^
src/compat/db_admin.c:2548:19: style: The scope of the variable 'method_link' can be reduced. [variableScope]
  DB_METHOD_LINK *method_link;
                  ^
src/compat/db_admin.c:1262:37: style:inconclusive: Function 'db_set_global_transaction_info' argument 1 names different: declaration 'gtrid' definition 'global_transaction_id'. [funcArgNamesDifferent]
db_set_global_transaction_info (int global_transaction_id, void *info, int size)
                                    ^
src/compat/dbi.h:92:50: note: Function 'db_set_global_transaction_info' argument 1 names different: declaration 'gtrid' definition 'global_transaction_id'.
  extern int db_set_global_transaction_info (int gtrid, void *info, int size);
                                                 ^
src/compat/db_admin.c:1262:37: note: Function 'db_set_global_transaction_info' argument 1 names different: declaration 'gtrid' definition 'global_transaction_id'.
db_set_global_transaction_info (int global_transaction_id, void *info, int size)
                                    ^
src/compat/db_admin.c:1295:37: style:inconclusive: Function 'db_get_global_transaction_info' argument 1 names different: declaration 'gtrid' definition 'global_transaction_id'. [funcArgNamesDifferent]
db_get_global_transaction_info (int global_transaction_id, void *buffer, int size)
                                    ^
src/compat/dbi.h:93:50: note: Function 'db_get_global_transaction_info' argument 1 names different: declaration 'gtrid' definition 'global_transaction_id'.
  extern int db_get_global_transaction_info (int gtrid, void *buffer, int size);
                                                 ^
src/compat/db_admin.c:1295:37: note: Function 'db_get_global_transaction_info' argument 1 names different: declaration 'gtrid' definition 'global_transaction_id'.
db_get_global_transaction_info (int global_transaction_id, void *buffer, int size)
                                    ^
src/compat/db_admin.c:1403:32: style:inconclusive: Function 'db_2pc_attach_transaction' argument 1 names different: declaration 'gtrid' definition 'global_transaction_id'. [funcArgNamesDifferent]
db_2pc_attach_transaction (int global_transaction_id)
                               ^
src/compat/dbi.h:98:45: note: Function 'db_2pc_attach_transaction' argument 1 names different: declaration 'gtrid' definition 'global_transaction_id'.
  extern int db_2pc_attach_transaction (int gtrid);
                                            ^
src/compat/db_admin.c:1403:32: note: Function 'db_2pc_attach_transaction' argument 1 names different: declaration 'gtrid' definition 'global_transaction_id'.
db_2pc_attach_transaction (int global_transaction_id)
                               ^
src/compat/db_admin.c:1426:43: style:inconclusive: Function 'db_2pc_prepare_to_commit_transaction' argument 1 names different: declaration 'gtrid' definition 'global_transaction_id'. [funcArgNamesDifferent]
db_2pc_prepare_to_commit_transaction (int global_transaction_id)
                                          ^
src/compat/dbi.h:97:56: note: Function 'db_2pc_prepare_to_commit_transaction' argument 1 names different: declaration 'gtrid' definition 'global_transaction_id'.
  extern int db_2pc_prepare_to_commit_transaction (int gtrid);
                                                       ^
src/compat/db_admin.c:1426:43: note: Function 'db_2pc_prepare_to_commit_transaction' argument 1 names different: declaration 'gtrid' definition 'global_transaction_id'.
db_2pc_prepare_to_commit_transaction (int global_transaction_id)
                                          ^
src/compat/db_admin.c:1743:48: style:inconclusive: Function 'db_set_password' argument 2 names different: declaration 'oldpass' definition 'old_passwd'. [funcArgNamesDifferent]
db_set_password (DB_OBJECT * user, const char *old_passwd, const char *new_passwd)
                                               ^
src/compat/dbi.h:144:61: note: Function 'db_set_password' argument 2 names different: declaration 'oldpass' definition 'old_passwd'.
  extern int db_set_password (DB_OBJECT * user, const char *oldpass, const char *newpass);
                                                            ^
src/compat/db_admin.c:1743:48: note: Function 'db_set_password' argument 2 names different: declaration 'oldpass' definition 'old_passwd'.
db_set_password (DB_OBJECT * user, const char *old_passwd, const char *new_passwd)
                                               ^
src/compat/db_admin.c:1743:72: style:inconclusive: Function 'db_set_password' argument 3 names different: declaration 'newpass' definition 'new_passwd'. [funcArgNamesDifferent]
db_set_password (DB_OBJECT * user, const char *old_passwd, const char *new_passwd)
                                                                       ^
src/compat/dbi.h:144:82: note: Function 'db_set_password' argument 3 names different: declaration 'newpass' definition 'new_passwd'.
  extern int db_set_password (DB_OBJECT * user, const char *oldpass, const char *newpass);
                                                                                 ^
src/compat/db_admin.c:1743:72: note: Function 'db_set_password' argument 3 names different: declaration 'newpass' definition 'new_passwd'.
db_set_password (DB_OBJECT * user, const char *old_passwd, const char *new_passwd)
                                                                       ^
src/compat/db_admin.c:1794:25: style:inconclusive: Function 'db_grant' argument 2 names different: declaration 'classobj' definition 'class_'. [funcArgNamesDifferent]
db_grant (MOP user, MOP class_, AU_TYPE auth, int grant_option)
                        ^
src/compat/dbi.h:146:54: note: Function 'db_grant' argument 2 names different: declaration 'classobj' definition 'class_'.
  extern int db_grant (DB_OBJECT * user, DB_OBJECT * classobj, DB_AUTH auth, int grant_option);
                                                     ^
src/compat/db_admin.c:1794:25: note: Function 'db_grant' argument 2 names different: declaration 'classobj' definition 'class_'.
db_grant (MOP user, MOP class_, AU_TYPE auth, int grant_option)
                        ^
src/compat/db_admin.c:1821:26: style:inconclusive: Function 'db_revoke' argument 2 names different: declaration 'classobj' definition 'class_mop'. [funcArgNamesDifferent]
db_revoke (MOP user, MOP class_mop, AU_TYPE auth)
                         ^
src/compat/dbi.h:147:55: note: Function 'db_revoke' argument 2 names different: declaration 'classobj' definition 'class_mop'.
  extern int db_revoke (DB_OBJECT * user, DB_OBJECT * classobj, DB_AUTH auth);
                                                      ^
src/compat/db_admin.c:1821:26: note: Function 'db_revoke' argument 2 names different: declaration 'classobj' definition 'class_mop'.
db_revoke (MOP user, MOP class_mop, AU_TYPE auth)
                         ^
src/compat/db_admin.c:1892:27: style:inconclusive: Function 'db_get_owner' argument 1 names different: declaration 'classobj' definition 'class_obj'. [funcArgNamesDifferent]
db_get_owner (DB_OBJECT * class_obj)
                          ^
src/compat/dbi.h:135:47: note: Function 'db_get_owner' argument 1 names different: declaration 'classobj' definition 'class_obj'.
  extern DB_OBJECT *db_get_owner (DB_OBJECT * classobj);
                                              ^
src/compat/db_admin.c:1892:27: note: Function 'db_get_owner' argument 1 names different: declaration 'classobj' definition 'class_obj'.
db_get_owner (DB_OBJECT * class_obj)
                          ^
src/compat/db_admin.c:2054:25: style:inconclusive: Function 'db_freepgs' argument 1 names different: declaration 'vlabel' definition 'volume_label'. [funcArgNamesDifferent]
db_freepgs (const char *volume_label)
                        ^
src/compat/dbi.h:102:38: note: Function 'db_freepgs' argument 1 names different: declaration 'vlabel' definition 'volume_label'.
  extern int db_freepgs (const char *vlabel);
                                     ^
src/compat/db_admin.c:2054:25: note: Function 'db_freepgs' argument 1 names different: declaration 'vlabel' definition 'volume_label'.
db_freepgs (const char *volume_label)
                        ^
src/compat/db_admin.c:2073:26: style:inconclusive: Function 'db_totalpgs' argument 1 names different: declaration 'vlabel' definition 'volume_label'. [funcArgNamesDifferent]
db_totalpgs (const char *volume_label)
                         ^
src/compat/dbi.h:103:39: note: Function 'db_totalpgs' argument 1 names different: declaration 'vlabel' definition 'volume_label'.
  extern int db_totalpgs (const char *vlabel);
                                      ^
src/compat/db_admin.c:2073:26: note: Function 'db_totalpgs' argument 1 names different: declaration 'vlabel' definition 'volume_label'.
db_totalpgs (const char *volume_label)
                         ^
src/compat/db_admin.c:2216:53: style:inconclusive: Function 'db_fetch_array' argument 2 names different: declaration 'mode' definition 'purpose'. [funcArgNamesDifferent]
db_fetch_array (DB_OBJECT ** objects, DB_FETCH_MODE purpose, int quit_on_error)
                                                    ^
src/compat/dbi.h:184:66: note: Function 'db_fetch_array' argument 2 names different: declaration 'mode' definition 'purpose'.
  extern int db_fetch_array (DB_OBJECT ** objects, DB_FETCH_MODE mode, int quit_on_error);
                                                                 ^
src/compat/db_admin.c:2216:53: note: Function 'db_fetch_array' argument 2 names different: declaration 'mode' definition 'purpose'.
db_fetch_array (DB_OBJECT ** objects, DB_FETCH_MODE purpose, int quit_on_error)
                                                    ^
src/compat/db_admin.c:2254:52: style:inconclusive: Function 'db_fetch_list' argument 2 names different: declaration 'mode' definition 'purpose'. [funcArgNamesDifferent]
db_fetch_list (DB_OBJLIST * objects, DB_FETCH_MODE purpose, int quit_on_error)
                                                   ^
src/compat/dbi.h:185:65: note: Function 'db_fetch_list' argument 2 names different: declaration 'mode' definition 'purpose'.
  extern int db_fetch_list (DB_OBJLIST * objects, DB_FETCH_MODE mode, int quit_on_error);
                                                                ^
src/compat/db_admin.c:2254:52: note: Function 'db_fetch_list' argument 2 names different: declaration 'mode' definition 'purpose'.
db_fetch_list (DB_OBJLIST * objects, DB_FETCH_MODE purpose, int quit_on_error)
                                                   ^
src/compat/db_admin.c:2372:43: style:inconclusive: Function 'db_fetch_set' argument 2 names different: declaration 'mode' definition 'purpose'. [funcArgNamesDifferent]
db_fetch_set (DB_SET * set, DB_FETCH_MODE purpose, int quit_on_error)
                                          ^
src/compat/dbi.h:186:63: note: Function 'db_fetch_set' argument 2 names different: declaration 'mode' definition 'purpose'.
  extern int db_fetch_set (DB_COLLECTION * set, DB_FETCH_MODE mode, int quit_on_error);
                                                              ^
src/compat/db_admin.c:2372:43: note: Function 'db_fetch_set' argument 2 names different: declaration 'mode' definition 'purpose'.
db_fetch_set (DB_SET * set, DB_FETCH_MODE purpose, int quit_on_error)
                                          ^
src/compat/db_admin.c:2388:24: style:inconclusive: Function 'db_fetch_seq' argument 1 names different: declaration 'set' definition 'seq'. [funcArgNamesDifferent]
db_fetch_seq (DB_SEQ * seq, DB_FETCH_MODE purpose, int quit_on_error)
                       ^
src/compat/dbi.h:187:37: note: Function 'db_fetch_seq' argument 1 names different: declaration 'set' definition 'seq'.
  extern int db_fetch_seq (DB_SEQ * set, DB_FETCH_MODE mode, int quit_on_error);
                                    ^
src/compat/db_admin.c:2388:24: note: Function 'db_fetch_seq' argument 1 names different: declaration 'set' definition 'seq'.
db_fetch_seq (DB_SEQ * seq, DB_FETCH_MODE purpose, int quit_on_error)
                       ^
src/compat/db_admin.c:2388:43: style:inconclusive: Function 'db_fetch_seq' argument 2 names different: declaration 'mode' definition 'purpose'. [funcArgNamesDifferent]
db_fetch_seq (DB_SEQ * seq, DB_FETCH_MODE purpose, int quit_on_error)
                                          ^
src/compat/dbi.h:187:56: note: Function 'db_fetch_seq' argument 2 names different: declaration 'mode' definition 'purpose'.
  extern int db_fetch_seq (DB_SEQ * set, DB_FETCH_MODE mode, int quit_on_error);
                                                       ^
src/compat/db_admin.c:2388:43: note: Function 'db_fetch_seq' argument 2 names different: declaration 'mode' definition 'purpose'.
db_fetch_seq (DB_SEQ * seq, DB_FETCH_MODE purpose, int quit_on_error)
                                          ^
src/compat/db_admin.c:2407:57: style:inconclusive: Function 'db_fetch_composition' argument 2 names different: declaration 'mode' definition 'purpose'. [funcArgNamesDifferent]
db_fetch_composition (DB_OBJECT * object, DB_FETCH_MODE purpose, int max_level, int quit_on_error)
                                                        ^
src/compat/dbi.h:188:70: note: Function 'db_fetch_composition' argument 2 names different: declaration 'mode' definition 'purpose'.
  extern int db_fetch_composition (DB_OBJECT * object, DB_FETCH_MODE mode, int max_level, int quit_on_error);
                                                                     ^
src/compat/db_admin.c:2407:57: note: Function 'db_fetch_composition' argument 2 names different: declaration 'mode' definition 'purpose'.
db_fetch_composition (DB_OBJECT * object, DB_FETCH_MODE purpose, int max_level, int quit_on_error)
                                                        ^
src/compat/db_admin.c:2452:27: style:inconclusive: Function 'db_warnspace' argument 1 names different: declaration 'vlabel' definition 'volume_label'. [funcArgNamesDifferent]
db_warnspace (const char *volume_label)
                          ^
src/compat/dbi.h:105:41: note: Function 'db_warnspace' argument 1 names different: declaration 'vlabel' definition 'volume_label'.
  extern void db_warnspace (const char *vlabel);
                                        ^
src/compat/db_admin.c:2452:27: note: Function 'db_warnspace' argument 1 names different: declaration 'vlabel' definition 'volume_label'.
db_warnspace (const char *volume_label)
                          ^
src/compat/db_class.c:1349:16: style: The scope of the variable 'def' can be reduced. [variableScope]
  SM_TEMPLATE *def;
               ^
src/compat/db_class.c:1402:16: style: The scope of the variable 'def' can be reduced. [variableScope]
  SM_TEMPLATE *def;
               ^
src/compat/db_class.c:110:20: style:inconclusive: Function 'db_drop_class' argument 1 names different: declaration 'classobj' definition 'class_'. [funcArgNamesDifferent]
db_drop_class (MOP class_)
                   ^
src/compat/dbi.h:193:41: note: Function 'db_drop_class' argument 1 names different: declaration 'classobj' definition 'class_'.
  extern int db_drop_class (DB_OBJECT * classobj);
                                        ^
src/compat/db_class.c:110:20: note: Function 'db_drop_class' argument 1 names different: declaration 'classobj' definition 'class_'.
db_drop_class (MOP class_)
                   ^
src/compat/db_class.c:122:23: style:inconclusive: Function 'db_drop_class_ex' argument 1 names different: declaration 'classobj' definition 'class_'. [funcArgNamesDifferent]
db_drop_class_ex (MOP class_, bool is_cascade_constraints)
                      ^
src/compat/dbi.h:194:44: note: Function 'db_drop_class_ex' argument 1 names different: declaration 'classobj' definition 'class_'.
  extern int db_drop_class_ex (DB_OBJECT * classobj, bool is_cascade_constraints);
                                           ^
src/compat/db_class.c:122:23: note: Function 'db_drop_class_ex' argument 1 names different: declaration 'classobj' definition 'class_'.
db_drop_class_ex (MOP class_, bool is_cascade_constraints)
                      ^
src/compat/db_class.c:151:22: style:inconclusive: Function 'db_rename_class' argument 1 names different: declaration 'classobj' definition 'classop'. [funcArgNamesDifferent]
db_rename_class (MOP classop, const char *new_name)
                     ^
src/compat/dbi.h:195:43: note: Function 'db_rename_class' argument 1 names different: declaration 'classobj' definition 'classop'.
  extern int db_rename_class (DB_OBJECT * classobj, const char *new_name);
                                          ^
src/compat/db_class.c:151:22: note: Function 'db_rename_class' argument 1 names different: declaration 'classobj' definition 'classop'.
db_rename_class (MOP classop, const char *new_name)
                     ^
src/compat/db_class.c:354:24: style:inconclusive: Function 'db_drop_attribute' argument 1 names different: declaration 'classobj' definition 'class_'. [funcArgNamesDifferent]
db_drop_attribute (MOP class_, const char *name)
                       ^
src/compat/dbi.h:212:45: note: Function 'db_drop_attribute' argument 1 names different: declaration 'classobj' definition 'class_'.
  extern int db_drop_attribute (DB_OBJECT * classobj, const char *name);
                                            ^
src/compat/db_class.c:354:24: note: Function 'db_drop_attribute' argument 1 names different: declaration 'classobj' definition 'class_'.
db_drop_attribute (MOP class_, const char *name)
                       ^
src/compat/db_class.c:380:33: style:inconclusive: Function 'db_drop_attribute_internal' argument 1 names different: declaration 'classobj' definition 'class_'. [funcArgNamesDifferent]
db_drop_attribute_internal (MOP class_, const char *name)
                                ^
src/compat/db.h:264:52: note: Function 'db_drop_attribute_internal' argument 1 names different: declaration 'classobj' definition 'class_'.
extern int db_drop_attribute_internal (DB_OBJECT * classobj, const char *name);
                                                   ^
src/compat/db_class.c:380:33: note: Function 'db_drop_attribute_internal' argument 1 names different: declaration 'classobj' definition 'class_'.
db_drop_attribute_internal (MOP class_, const char *name)
                                ^
src/compat/db_class.c:404:31: style:inconclusive: Function 'db_drop_shared_attribute' argument 1 names different: declaration 'classobj' definition 'class_'. [funcArgNamesDifferent]
db_drop_shared_attribute (MOP class_, const char *name)
                              ^
src/compat/dbi.h:659:52: note: Function 'db_drop_shared_attribute' argument 1 names different: declaration 'classobj' definition 'class_'.
  extern int db_drop_shared_attribute (DB_OBJECT * classobj, const char *name);
                                                   ^
src/compat/db_class.c:404:31: note: Function 'db_drop_shared_attribute' argument 1 names different: declaration 'classobj' definition 'class_'.
db_drop_shared_attribute (MOP class_, const char *name)
                              ^
src/compat/db_class.c:421:30: style:inconclusive: Function 'db_drop_class_attribute' argument 1 names different: declaration 'classobj' definition 'class_'. [funcArgNamesDifferent]
db_drop_class_attribute (MOP class_, const char *name)
                             ^
src/compat/dbi.h:213:51: note: Function 'db_drop_class_attribute' argument 1 names different: declaration 'classobj' definition 'class_'.
  extern int db_drop_class_attribute (DB_OBJECT * classobj, const char *name);
                                                  ^
src/compat/db_class.c:421:30: note: Function 'db_drop_class_attribute' argument 1 names different: declaration 'classobj' definition 'class_'.
db_drop_class_attribute (MOP class_, const char *name)
                             ^
src/compat/db_class.c:444:34: style:inconclusive: Function 'db_add_set_attribute_domain' argument 1 names different: declaration 'classobj' definition 'class_'. [funcArgNamesDifferent]
db_add_set_attribute_domain (MOP class_, const char *name, int class_attribute, const char *domain)
                                 ^
src/compat/dbi.h:210:55: note: Function 'db_add_set_attribute_domain' argument 1 names different: declaration 'classobj' definition 'class_'.
  extern int db_add_set_attribute_domain (DB_OBJECT * classobj, const char *name, int class_attribute,
                                                      ^
src/compat/db_class.c:444:34: note: Function 'db_add_set_attribute_domain' argument 1 names different: declaration 'classobj' definition 'class_'.
db_add_set_attribute_domain (MOP class_, const char *name, int class_attribute, const char *domain)
                                 ^
src/compat/db_class.c:490:28: style:inconclusive: Function 'db_add_element_domain' argument 1 names different: declaration 'classobj' definition 'class_'. [funcArgNamesDifferent]
db_add_element_domain (MOP class_, const char *name, const char *domain)
                           ^
src/compat/dbi.h:661:49: note: Function 'db_add_element_domain' argument 1 names different: declaration 'classobj' definition 'class_'.
  extern int db_add_element_domain (DB_OBJECT * classobj, const char *name, const char *domain);
                                                ^
src/compat/db_class.c:490:28: note: Function 'db_add_element_domain' argument 1 names different: declaration 'classobj' definition 'class_'.
db_add_element_domain (MOP class_, const char *name, const char *domain)
                           ^
src/compat/db_class.c:559:29: style:inconclusive: Function 'db_drop_element_domain' argument 1 names different: declaration 'classobj' definition 'class_'. [funcArgNamesDifferent]
db_drop_element_domain (MOP class_, const char *name, const char *domain)
                            ^
src/compat/dbi.h:662:50: note: Function 'db_drop_element_domain' argument 1 names different: declaration 'classobj' definition 'class_'.
  extern int db_drop_element_domain (DB_OBJECT * classobj, const char *name, const char *domain);
                                                 ^
src/compat/db_class.c:559:29: note: Function 'db_drop_element_domain' argument 1 names different: declaration 'classobj' definition 'class_'.
db_drop_element_domain (MOP class_, const char *name, const char *domain)
                            ^
src/compat/db_class.c:584:24: style:inconclusive: Function 'db_change_default' argument 1 names different: declaration 'classobj' definition 'class_'. [funcArgNamesDifferent]
db_change_default (MOP class_, const char *name, DB_VALUE * value)
                       ^
src/compat/dbi.h:214:45: note: Function 'db_change_default' argument 1 names different: declaration 'classobj' definition 'class_'.
  extern int db_change_default (DB_OBJECT * classobj, const char *name, DB_VALUE * value);
                                            ^
src/compat/db_class.c:584:24: note: Function 'db_change_default' argument 1 names different: declaration 'classobj' definition 'class_'.
db_change_default (MOP class_, const char *name, DB_VALUE * value)
                       ^
src/compat/db_class.c:628:16: style:inconclusive: Function 'db_rename' argument 1 names different: declaration 'classobj' definition 'class_'. [funcArgNamesDifferent]
db_rename (MOP class_, const char *name, int class_namespace, const char *newname)
               ^
src/compat/dbi.h:205:37: note: Function 'db_rename' argument 1 names different: declaration 'classobj' definition 'class_'.
  extern int db_rename (DB_OBJECT * classobj, const char *name, int class_namespace, const char *newname);
                                    ^
src/compat/db_class.c:628:16: note: Function 'db_rename' argument 1 names different: declaration 'classobj' definition 'class_'.
db_rename (MOP class_, const char *name, int class_namespace, const char *newname)
               ^
src/compat/db_class.c:654:25: style:inconclusive: Function 'db_rename_internal' argument 1 names different: declaration 'classobj' definition 'class_'. [funcArgNamesDifferent]
db_rename_internal (MOP class_, const char *name, int class_namespace, const char *newname)
                        ^
src/compat/db.h:263:44: note: Function 'db_rename_internal' argument 1 names different: declaration 'classobj' definition 'class_'.
extern int db_rename_internal (DB_OBJECT * classobj, const char *name, int class_namespace, const char *newname);
                                           ^
src/compat/db_class.c:654:25: note: Function 'db_rename_internal' argument 1 names different: declaration 'classobj' definition 'class_'.
db_rename_internal (MOP class_, const char *name, int class_namespace, const char *newname)
                        ^
src/compat/db_class.c:701:26: style:inconclusive: Function 'db_rename_attribute' argument 1 names different: declaration 'classobj' definition 'class_'. [funcArgNamesDifferent]
db_rename_attribute (MOP class_, const char *name, int class_attribute, const char *newname)
                         ^
src/compat/dbi.h:663:47: note: Function 'db_rename_attribute' argument 1 names different: declaration 'classobj' definition 'class_'.
  extern int db_rename_attribute (DB_OBJECT * classobj, const char *name, int class_attribute, const char *newname);
                                              ^
src/compat/db_class.c:701:26: note: Function 'db_rename_attribute' argument 1 names different: declaration 'classobj' definition 'class_'.
db_rename_attribute (MOP class_, const char *name, int class_attribute, const char *newname)
                         ^
src/compat/db_class.c:726:23: style:inconclusive: Function 'db_rename_method' argument 1 names different: declaration 'classobj' definition 'class_'. [funcArgNamesDifferent]
db_rename_method (MOP class_, const char *name, int class_method, const char *newname)
                      ^
src/compat/dbi.h:664:44: note: Function 'db_rename_method' argument 1 names different: declaration 'classobj' definition 'class_'.
  extern int db_rename_method (DB_OBJECT * classobj, const char *name, int class_method, const char *newname);
                                           ^
src/compat/db_class.c:726:23: note: Function 'db_rename_method' argument 1 names different: declaration 'classobj' definition 'class_'.
db_rename_method (MOP class_, const char *name, int class_method, const char *newname)
                      ^
src/compat/db_class.c:797:20: style:inconclusive: Function 'db_add_method' argument 1 names different: declaration 'classobj' definition 'class_'. [funcArgNamesDifferent]
db_add_method (MOP class_, const char *name, const char *implementation)
                   ^
src/compat/dbi.h:218:41: note: Function 'db_add_method' argument 1 names different: declaration 'classobj' definition 'class_'.
  extern int db_add_method (DB_OBJECT * classobj, const char *name, const char *implementation);
                                        ^
src/compat/db_class.c:797:20: note: Function 'db_add_method' argument 1 names different: declaration 'classobj' definition 'class_'.
db_add_method (MOP class_, const char *name, const char *implementation)
                   ^
src/compat/db_class.c:819:26: style:inconclusive: Function 'db_add_class_method' argument 1 names different: declaration 'classobj' definition 'class_'. [funcArgNamesDifferent]
db_add_class_method (MOP class_, const char *name, const char *implementation)
                         ^
src/compat/dbi.h:219:47: note: Function 'db_add_class_method' argument 1 names different: declaration 'classobj' definition 'class_'.
  extern int db_add_class_method (DB_OBJECT * classobj, const char *name, const char *implementation);
                                              ^
src/compat/db_class.c:819:26: note: Function 'db_add_class_method' argument 1 names different: declaration 'classobj' definition 'class_'.
db_add_class_method (MOP class_, const char *name, const char *implementation)
                         ^
src/compat/db_class.c:835:21: style:inconclusive: Function 'db_drop_method' argument 1 names different: declaration 'classobj' definition 'class_'. [funcArgNamesDifferent]
db_drop_method (MOP class_, const char *name)
                    ^
src/compat/dbi.h:220:42: note: Function 'db_drop_method' argument 1 names different: declaration 'classobj' definition 'class_'.
  extern int db_drop_method (DB_OBJECT * classobj, const char *name);
                                         ^
src/compat/db_class.c:835:21: note: Function 'db_drop_method' argument 1 names different: declaration 'classobj' definition 'class_'.
db_drop_method (MOP class_, const char *name)
                    ^
src/compat/db_class.c:852:27: style:inconclusive: Function 'db_drop_class_method' argument 1 names different: declaration 'classobj' definition 'class_'. [funcArgNamesDifferent]
db_drop_class_method (MOP class_, const char *name)
                          ^
src/compat/dbi.h:221:48: note: Function 'db_drop_class_method' argument 1 names different: declaration 'classobj' definition 'class_'.
  extern int db_drop_class_method (DB_OBJECT * classobj, const char *name);
                                               ^
src/compat/db_class.c:852:27: note: Function 'db_drop_class_method' argument 1 names different: declaration 'classobj' definition 'class_'.
db_drop_class_method (MOP class_, const char *name)
                          ^
src/compat/db_class.c:871:38: style:inconclusive: Function 'db_change_method_implementation' argument 1 names different: declaration 'classobj' definition 'class_'. [funcArgNamesDifferent]
db_change_method_implementation (MOP class_, const char *name, int class_method, const char *newname)
                                     ^
src/compat/dbi.h:226:59: note: Function 'db_change_method_implementation' argument 1 names different: declaration 'classobj' definition 'class_'.
  extern int db_change_method_implementation (DB_OBJECT * classobj, const char *name, int class_method,
                                                          ^
src/compat/db_class.c:871:38: note: Function 'db_change_method_implementation' argument 1 names different: declaration 'classobj' definition 'class_'.
db_change_method_implementation (MOP class_, const char *name, int class_method, const char *newname)
                                     ^
src/compat/db_class.c:988:30: style:inconclusive: Function 'db_add_argument' argument 1 names different: declaration 'classobj' definition 'class_'. [funcArgNamesDifferent]
db_add_argument (DB_OBJECT * class_, const char *name, int class_method, int index, const char *domain)
                             ^
src/compat/dbi.h:222:43: note: Function 'db_add_argument' argument 1 names different: declaration 'classobj' definition 'class_'.
  extern int db_add_argument (DB_OBJECT * classobj, const char *name, int class_method, int arg_index,
                                          ^
src/compat/db_class.c:988:30: note: Function 'db_add_argument' argument 1 names different: declaration 'classobj' definition 'class_'.
db_add_argument (DB_OBJECT * class_, const char *name, int class_method, int index, const char *domain)
                             ^
src/compat/db_class.c:988:78: style:inconclusive: Function 'db_add_argument' argument 4 names different: declaration 'arg_index' definition 'index'. [funcArgNamesDifferent]
db_add_argument (DB_OBJECT * class_, const char *name, int class_method, int index, const char *domain)
                                                                             ^
src/compat/dbi.h:222:93: note: Function 'db_add_argument' argument 4 names different: declaration 'arg_index' definition 'index'.
  extern int db_add_argument (DB_OBJECT * classobj, const char *name, int class_method, int arg_index,
                                                                                            ^
src/compat/db_class.c:988:78: note: Function 'db_add_argument' argument 4 names different: declaration 'arg_index' definition 'index'.
db_add_argument (DB_OBJECT * class_, const char *name, int class_method, int index, const char *domain)
                                                                             ^
src/compat/db_class.c:1006:39: style:inconclusive: Function 'db_set_method_arg_domain' argument 1 names different: declaration 'classobj' definition 'class_'. [funcArgNamesDifferent]
db_set_method_arg_domain (DB_OBJECT * class_, const char *name, int index, const char *domain)
                                      ^
src/compat/dbi.h:667:52: note: Function 'db_set_method_arg_domain' argument 1 names different: declaration 'classobj' definition 'class_'.
  extern int db_set_method_arg_domain (DB_OBJECT * classobj, const char *name, int arg_index, const char *domain);
                                                   ^
src/compat/db_class.c:1006:39: note: Function 'db_set_method_arg_domain' argument 1 names different: declaration 'classobj' definition 'class_'.
db_set_method_arg_domain (DB_OBJECT * class_, const char *name, int index, const char *domain)
                                      ^
src/compat/db_class.c:1006:69: style:inconclusive: Function 'db_set_method_arg_domain' argument 3 names different: declaration 'arg_index' definition 'index'. [funcArgNamesDifferent]
db_set_method_arg_domain (DB_OBJECT * class_, const char *name, int index, const char *domain)
                                                                    ^
src/compat/dbi.h:667:84: note: Function 'db_set_method_arg_domain' argument 3 names different: declaration 'arg_index' definition 'index'.
  extern int db_set_method_arg_domain (DB_OBJECT * classobj, const char *name, int arg_index, const char *domain);
                                                                                   ^
src/compat/db_class.c:1006:69: note: Function 'db_set_method_arg_domain' argument 3 names different: declaration 'arg_index' definition 'index'.
db_set_method_arg_domain (DB_OBJECT * class_, const char *name, int index, const char *domain)
                                                                    ^
src/compat/db_class.c:1024:45: style:inconclusive: Function 'db_set_class_method_arg_domain' argument 1 names different: declaration 'classobj' definition 'class_'. [funcArgNamesDifferent]
db_set_class_method_arg_domain (DB_OBJECT * class_, const char *name, int index, const char *domain)
                                            ^
src/compat/dbi.h:668:58: note: Function 'db_set_class_method_arg_domain' argument 1 names different: declaration 'classobj' definition 'class_'.
  extern int db_set_class_method_arg_domain (DB_OBJECT * classobj, const char *name, int arg_index, const char *domain);
                                                         ^
src/compat/db_class.c:1024:45: note: Function 'db_set_class_method_arg_domain' argument 1 names different: declaration 'classobj' definition 'class_'.
db_set_class_method_arg_domain (DB_OBJECT * class_, const char *name, int index, const char *domain)
                                            ^
src/compat/db_class.c:1024:75: style:inconclusive: Function 'db_set_class_method_arg_domain' argument 3 names different: declaration 'arg_index' definition 'index'. [funcArgNamesDifferent]
db_set_class_method_arg_domain (DB_OBJECT * class_, const char *name, int index, const char *domain)
                                                                          ^
src/compat/dbi.h:668:90: note: Function 'db_set_class_method_arg_domain' argument 3 names different: declaration 'arg_index' definition 'index'.
  extern int db_set_class_method_arg_domain (DB_OBJECT * classobj, const char *name, int arg_index, const char *domain);
                                                                                         ^
src/compat/db_class.c:1024:75: note: Function 'db_set_class_method_arg_domain' argument 3 names different: declaration 'arg_index' definition 'index'.
db_set_class_method_arg_domain (DB_OBJECT * class_, const char *name, int index, const char *domain)
                                                                          ^
src/compat/db_class.c:1049:41: style:inconclusive: Function 'db_add_set_argument_domain' argument 1 names different: declaration 'classobj' definition 'class_'. [funcArgNamesDifferent]
db_add_set_argument_domain (DB_OBJECT * class_, const char *name, int class_method, int index, const char *domain)
                                        ^
src/compat/dbi.h:224:54: note: Function 'db_add_set_argument_domain' argument 1 names different: declaration 'classobj' definition 'class_'.
  extern int db_add_set_argument_domain (DB_OBJECT * classobj, const char *name, int class_method, int arg_index,
                                                     ^
src/compat/db_class.c:1049:41: note: Function 'db_add_set_argument_domain' argument 1 names different: declaration 'classobj' definition 'class_'.
db_add_set_argument_domain (DB_OBJECT * class_, const char *name, int class_method, int index, const char *domain)
                                        ^
src/compat/db_class.c:1049:89: style:inconclusive: Function 'db_add_set_argument_domain' argument 4 names different: declaration 'arg_index' definition 'index'. [funcArgNamesDifferent]
db_add_set_argument_domain (DB_OBJECT * class_, const char *name, int class_method, int index, const char *domain)
                                                                                        ^
src/compat/dbi.h:224:104: note: Function 'db_add_set_argument_domain' argument 4 names different: declaration 'arg_index' definition 'index'.
  extern int db_add_set_argument_domain (DB_OBJECT * classobj, const char *name, int class_method, int arg_index,
                                                                                                       ^
src/compat/db_class.c:1049:89: note: Function 'db_add_set_argument_domain' argument 4 names different: declaration 'arg_index' definition 'index'.
db_add_set_argument_domain (DB_OBJECT * class_, const char *name, int class_method, int index, const char *domain)
                                                                                        ^
src/compat/db_class.c:1075:29: style:inconclusive: Function 'db_set_loader_commands' argument 1 names different: declaration 'classobj' definition 'class_'. [funcArgNamesDifferent]
db_set_loader_commands (MOP class_, const char *commands)
                            ^
src/compat/dbi.h:228:50: note: Function 'db_set_loader_commands' argument 1 names different: declaration 'classobj' definition 'class_'.
  extern int db_set_loader_commands (DB_OBJECT * classobj, const char *commands);
                                                 ^
src/compat/db_class.c:1075:29: note: Function 'db_set_loader_commands' argument 1 names different: declaration 'classobj' definition 'class_'.
db_set_loader_commands (MOP class_, const char *commands)
                            ^
src/compat/db_class.c:1127:25: style:inconclusive: Function 'db_add_method_file' argument 1 names different: declaration 'classobj' definition 'class_'. [funcArgNamesDifferent]
db_add_method_file (MOP class_, const char *name)
                        ^
src/compat/dbi.h:229:46: note: Function 'db_add_method_file' argument 1 names different: declaration 'classobj' definition 'class_'.
  extern int db_add_method_file (DB_OBJECT * classobj, const char *name);
                                             ^
src/compat/db_class.c:1127:25: note: Function 'db_add_method_file' argument 1 names different: declaration 'classobj' definition 'class_'.
db_add_method_file (MOP class_, const char *name)
                        ^
src/compat/db_class.c:1174:26: style:inconclusive: Function 'db_drop_method_file' argument 1 names different: declaration 'classobj' definition 'class_'. [funcArgNamesDifferent]
db_drop_method_file (MOP class_, const char *name)
                         ^
src/compat/dbi.h:230:47: note: Function 'db_drop_method_file' argument 1 names different: declaration 'classobj' definition 'class_'.
  extern int db_drop_method_file (DB_OBJECT * classobj, const char *name);
                                              ^
src/compat/db_class.c:1174:26: note: Function 'db_drop_method_file' argument 1 names different: declaration 'classobj' definition 'class_'.
db_drop_method_file (MOP class_, const char *name)
                         ^
src/compat/db_class.c:1218:27: style:inconclusive: Function 'db_drop_method_files' argument 1 names different: declaration 'classobj' definition 'class_'. [funcArgNamesDifferent]
db_drop_method_files (MOP class_)
                          ^
src/compat/dbi.h:231:48: note: Function 'db_drop_method_files' argument 1 names different: declaration 'classobj' definition 'class_'.
  extern int db_drop_method_files (DB_OBJECT * classobj);
                                               ^
src/compat/db_class.c:1218:27: note: Function 'db_drop_method_files' argument 1 names different: declaration 'classobj' definition 'class_'.
db_drop_method_files (MOP class_)
                          ^
src/compat/db_class.c:1267:19: style:inconclusive: Function 'db_add_super' argument 1 names different: declaration 'classobj' definition 'class_'. [funcArgNamesDifferent]
db_add_super (MOP class_, MOP super)
                  ^
src/compat/dbi.h:201:40: note: Function 'db_add_super' argument 1 names different: declaration 'classobj' definition 'class_'.
  extern int db_add_super (DB_OBJECT * classobj, DB_OBJECT * super);
                                       ^
src/compat/db_class.c:1267:19: note: Function 'db_add_super' argument 1 names different: declaration 'classobj' definition 'class_'.
db_add_super (MOP class_, MOP super)
                  ^
src/compat/db_class.c:1295:28: style:inconclusive: Function 'db_add_super_internal' argument 1 names different: declaration 'classobj' definition 'class_'. [funcArgNamesDifferent]
db_add_super_internal (MOP class_, MOP super)
                           ^
src/compat/db.h:260:47: note: Function 'db_add_super_internal' argument 1 names different: declaration 'classobj' definition 'class_'.
extern int db_add_super_internal (DB_OBJECT * classobj, DB_OBJECT * super);
                                              ^
src/compat/db_class.c:1295:28: note: Function 'db_add_super_internal' argument 1 names different: declaration 'classobj' definition 'class_'.
db_add_super_internal (MOP class_, MOP super)
                           ^
src/compat/db_class.c:1346:20: style:inconclusive: Function 'db_drop_super' argument 1 names different: declaration 'classobj' definition 'class_'. [funcArgNamesDifferent]
db_drop_super (MOP class_, MOP super)
                   ^
src/compat/dbi.h:202:41: note: Function 'db_drop_super' argument 1 names different: declaration 'classobj' definition 'class_'.
  extern int db_drop_super (DB_OBJECT * classobj, DB_OBJECT * super);
                                        ^
src/compat/db_class.c:1346:20: note: Function 'db_drop_super' argument 1 names different: declaration 'classobj' definition 'class_'.
db_drop_super (MOP class_, MOP super)
                   ^
src/compat/db_class.c:1399:28: style:inconclusive: Function 'db_drop_super_connect' argument 1 names different: declaration 'classobj' definition 'class_'. [funcArgNamesDifferent]
db_drop_super_connect (MOP class_, MOP super)
                           ^
src/compat/dbi.h:203:49: note: Function 'db_drop_super_connect' argument 1 names different: declaration 'classobj' definition 'class_'.
  extern int db_drop_super_connect (DB_OBJECT * classobj, DB_OBJECT * super);
                                                ^
src/compat/db_class.c:1399:28: note: Function 'db_drop_super_connect' argument 1 names different: declaration 'classobj' definition 'class_'.
db_drop_super_connect (MOP class_, MOP super)
                           ^
src/compat/db_class.c:1455:28: style:inconclusive: Function 'db_constrain_non_null' argument 1 names different: declaration 'classobj' definition 'class_'. [funcArgNamesDifferent]
db_constrain_non_null (MOP class_, const char *name, int class_attribute, int on_or_off)
                           ^
src/compat/dbi.h:216:49: note: Function 'db_constrain_non_null' argument 1 names different: declaration 'classobj' definition 'class_'.
  extern int db_constrain_non_null (DB_OBJECT * classobj, const char *name, int class_attribute, int on_or_off);
                                                ^
src/compat/db_class.c:1455:28: note: Function 'db_constrain_non_null' argument 1 names different: declaration 'classobj' definition 'class_'.
db_constrain_non_null (MOP class_, const char *name, int class_attribute, int on_or_off)
                           ^
src/compat/db_class.c:1497:26: style:inconclusive: Function 'db_constrain_unique' argument 1 names different: declaration 'classobj' definition 'class_'. [funcArgNamesDifferent]
db_constrain_unique (MOP class_, const char *name, int on_or_off)
                         ^
src/compat/dbi.h:217:47: note: Function 'db_constrain_unique' argument 1 names different: declaration 'classobj' definition 'class_'.
  extern int db_constrain_unique (DB_OBJECT * classobj, const char *name, int on_or_off);
                                              ^
src/compat/db_class.c:1497:26: note: Function 'db_constrain_unique' argument 1 names different: declaration 'classobj' definition 'class_'.
db_constrain_unique (MOP class_, const char *name, int on_or_off)
                         ^
src/compat/db_class.c:1534:24: style:inconclusive: Function 'db_add_resolution' argument 1 names different: declaration 'classobj' definition 'class_'. [funcArgNamesDifferent]
db_add_resolution (MOP class_, MOP super, const char *name, const char *alias)
                       ^
src/compat/dbi.h:233:45: note: Function 'db_add_resolution' argument 1 names different: declaration 'classobj' definition 'class_'.
  extern int db_add_resolution (DB_OBJECT * classobj, DB_OBJECT * super, const char *name, const char *alias);
                                            ^
src/compat/db_class.c:1534:24: note: Function 'db_add_resolution' argument 1 names different: declaration 'classobj' definition 'class_'.
db_add_resolution (MOP class_, MOP super, const char *name, const char *alias)
                       ^
src/compat/db_class.c:1581:30: style:inconclusive: Function 'db_add_class_resolution' argument 1 names different: declaration 'classobj' definition 'class_'. [funcArgNamesDifferent]
db_add_class_resolution (MOP class_, MOP super, const char *name, const char *alias)
                             ^
src/compat/dbi.h:234:51: note: Function 'db_add_class_resolution' argument 1 names different: declaration 'classobj' definition 'class_'.
  extern int db_add_class_resolution (DB_OBJECT * classobj, DB_OBJECT * super, const char *name, const char *alias);
                                                  ^
src/compat/db_class.c:1581:30: note: Function 'db_add_class_resolution' argument 1 names different: declaration 'classobj' definition 'class_'.
db_add_class_resolution (MOP class_, MOP super, const char *name, const char *alias)
                             ^
src/compat/db_class.c:1625:25: style:inconclusive: Function 'db_drop_resolution' argument 1 names different: declaration 'classobj' definition 'class_'. [funcArgNamesDifferent]
db_drop_resolution (MOP class_, MOP super, const char *name)
                        ^
src/compat/dbi.h:235:46: note: Function 'db_drop_resolution' argument 1 names different: declaration 'classobj' definition 'class_'.
  extern int db_drop_resolution (DB_OBJECT * classobj, DB_OBJECT * super, const char *name);
                                             ^
src/compat/db_class.c:1625:25: note: Function 'db_drop_resolution' argument 1 names different: declaration 'classobj' definition 'class_'.
db_drop_resolution (MOP class_, MOP super, const char *name)
                        ^
src/compat/db_class.c:1668:31: style:inconclusive: Function 'db_drop_class_resolution' argument 1 names different: declaration 'classobj' definition 'class_'. [funcArgNamesDifferent]
db_drop_class_resolution (MOP class_, MOP super, const char *name)
                              ^
src/compat/dbi.h:236:52: note: Function 'db_drop_class_resolution' argument 1 names different: declaration 'classobj' definition 'class_'.
  extern int db_drop_class_resolution (DB_OBJECT * classobj, DB_OBJECT * super, const char *name);
                                                   ^
src/compat/db_class.c:1668:31: note: Function 'db_drop_class_resolution' argument 1 names different: declaration 'classobj' definition 'class_'.
db_drop_class_resolution (MOP class_, MOP super, const char *name)
                              ^
src/compat/db_class.c:1720:19: style:inconclusive: Function 'db_add_index' argument 1 names different: declaration 'classobj' definition 'classmop'. [funcArgNamesDifferent]
db_add_index (MOP classmop, const char *attname)
                  ^
src/compat/dbi.h:198:40: note: Function 'db_add_index' argument 1 names different: declaration 'classobj' definition 'classmop'.
  extern int db_add_index (DB_OBJECT * classobj, const char *attname);
                                       ^
src/compat/db_class.c:1720:19: note: Function 'db_add_index' argument 1 names different: declaration 'classobj' definition 'classmop'.
db_add_index (MOP classmop, const char *attname)
                  ^
src/compat/db_class.c:1745:20: style:inconclusive: Function 'db_drop_index' argument 1 names different: declaration 'classobj' definition 'classmop'. [funcArgNamesDifferent]
db_drop_index (MOP classmop, const char *attname)
                   ^
src/compat/dbi.h:199:41: note: Function 'db_drop_index' argument 1 names different: declaration 'classobj' definition 'classmop'.
  extern int db_drop_index (DB_OBJECT * classobj, const char *attname);
                                        ^
src/compat/db_class.c:1745:20: note: Function 'db_drop_index' argument 1 names different: declaration 'classobj' definition 'classmop'.
db_drop_index (MOP classmop, const char *attname)
                   ^
src/compat/db_class.c:1859:32: style:inconclusive: Function 'db_truncate_class' argument 1 names different: declaration 'classobj' definition 'class_'. [funcArgNamesDifferent]
db_truncate_class (DB_OBJECT * class_)
                               ^
src/compat/dbi.h:196:45: note: Function 'db_truncate_class' argument 1 names different: declaration 'classobj' definition 'class_'.
  extern int db_truncate_class (DB_OBJECT * classobj);
                                            ^
src/compat/db_class.c:1859:32: note: Function 'db_truncate_class' argument 1 names different: declaration 'classobj' definition 'class_'.
db_truncate_class (DB_OBJECT * class_)
                               ^
src/compat/db_date.c:1450:24: style: Condition 'part[0]==0' is always false [knownConditionTrueFalse]
      else if (part[0] == 0)
                       ^
src/compat/db_date.c:1446:19: note: Assuming that condition 'part[0]<12' is not redundant
      if (part[0] < 12)
                  ^
src/compat/db_date.c:1450:24: note: Condition 'part[0]==0' is always false
      else if (part[0] == 0)
                       ^
src/compat/db_date.c:1127:28: warning: Either the condition 'buf==NULL' is redundant or there is pointer arithmetic with NULL pointer. [nullPointerArithmeticRedundantCheck]
  const char *strend = buf + buf_len;
                           ^
src/compat/db_date.c:1129:11: note: Assuming that condition 'buf==NULL' is not redundant
  if (buf == NULL)
          ^
src/compat/db_date.c:1127:28: note: Null pointer addition
  const char *strend = buf + buf_len;
                           ^
src/compat/db_date.c:1358:28: warning: Either the condition 'buf==NULL' is redundant or there is pointer arithmetic with NULL pointer. [nullPointerArithmeticRedundantCheck]
  const char *strend = buf + buf_len;
                           ^
src/compat/db_date.c:1360:11: note: Assuming that condition 'buf==NULL' is not redundant
  if (buf == NULL)
          ^
src/compat/db_date.c:1358:28: note: Null pointer addition
  const char *strend = buf + buf_len;
                           ^
src/compat/db_date.c:2042:5: style: Variable 'q' is reassigned a value before the old one has been used. [redundantAssignment]
  q = p;   /* save p just in case there is no am/pm string */
    ^
src/compat/db_date.c:1872:5: note: q is assigned
  q = p;
    ^
src/compat/db_date.c:2042:5: note: q is overwritten
  q = p;   /* save p just in case there is no am/pm string */
    ^
src/compat/db_date.c:2042:5: style: Variable 'q' is reassigned a value before the old one has been used. [redundantAssignment]
  q = p;   /* save p just in case there is no am/pm string */
    ^
src/compat/db_date.c:1922:9: note: q is assigned
      q = p;
        ^
src/compat/db_date.c:2042:5: note: q is overwritten
  q = p;   /* save p just in case there is no am/pm string */
    ^
src/compat/db_date.c:2302:5: style: Redundant initialization for 'q'. The initialized value is overwritten before it is read. [redundantInitialization]
  q = p;
    ^
src/compat/db_date.c:2291:27: note: q is initialized
  char const *p = str, *q = str, *r = str;
                          ^
src/compat/db_date.c:2302:5: note: q is overwritten
  q = p;
    ^
src/compat/db_date.c:2303:5: style: Redundant initialization for 'r'. The initialized value is overwritten before it is read. [redundantInitialization]
  r = p;
    ^
src/compat/db_date.c:2291:37: note: r is initialized
  char const *p = str, *q = str, *r = str;
                                    ^
src/compat/db_date.c:2303:5: note: r is overwritten
  r = p;
    ^
src/compat/db_date.c:2562:5: style: Redundant initialization for 'q'. The initialized value is overwritten before it is read. [redundantInitialization]
  q = p;
    ^
src/compat/db_date.c:2553:27: note: q is initialized
  char const *p = str, *q = str;
                          ^
src/compat/db_date.c:2562:5: note: q is overwritten
  q = p;
    ^
src/compat/db_date.c:116:7: style: The scope of the variable 'ja' can be reduced. [variableScope]
  int ja, jy, jm;
      ^
src/compat/db_date.c:198:11: style: The scope of the variable 'jalpha' can be reduced. [variableScope]
  int ja, jalpha, jb, jc, jd, je;
          ^
src/compat/db_date.c:198:19: style: The scope of the variable 'jb' can be reduced. [variableScope]
  int ja, jalpha, jb, jc, jd, je;
                  ^
src/compat/db_date.c:198:23: style: The scope of the variable 'jc' can be reduced. [variableScope]
  int ja, jalpha, jb, jc, jd, je;
                      ^
src/compat/db_date.c:198:27: style: The scope of the variable 'jd' can be reduced. [variableScope]
  int ja, jalpha, jb, jc, jd, je;
                          ^
src/compat/db_date.c:198:31: style: The scope of the variable 'je' can be reduced. [variableScope]
  int ja, jalpha, jb, jc, jd, je;
                              ^
src/compat/db_date.c:277:11: style: The scope of the variable 'tmp' can be reduced. [variableScope]
  DB_DATE tmp;
          ^
src/compat/db_date.c:1593:11: style: The scope of the variable 'cdate' can be reduced. [variableScope]
  DB_DATE cdate;
          ^
src/compat/db_date.c:2292:7: style: The scope of the variable 'y' can be reduced. [variableScope]
  int y = 0, mo = 0, d = 0, h = 0, m = 0, s = 0, msec = 0;
      ^
src/compat/db_date.c:2292:14: style: The scope of the variable 'mo' can be reduced. [variableScope]
  int y = 0, mo = 0, d = 0, h = 0, m = 0, s = 0, msec = 0;
             ^
src/compat/db_date.c:2292:22: style: The scope of the variable 'd' can be reduced. [variableScope]
  int y = 0, mo = 0, d = 0, h = 0, m = 0, s = 0, msec = 0;
                     ^
src/compat/db_date.c:2292:29: style: The scope of the variable 'h' can be reduced. [variableScope]
  int y = 0, mo = 0, d = 0, h = 0, m = 0, s = 0, msec = 0;
                            ^
src/compat/db_date.c:2292:36: style: The scope of the variable 'm' can be reduced. [variableScope]
  int y = 0, mo = 0, d = 0, h = 0, m = 0, s = 0, msec = 0;
                                   ^
src/compat/db_date.c:2292:43: style: The scope of the variable 's' can be reduced. [variableScope]
  int y = 0, mo = 0, d = 0, h = 0, m = 0, s = 0, msec = 0;
                                          ^
src/compat/db_date.c:2292:50: style: The scope of the variable 'msec' can be reduced. [variableScope]
  int y = 0, mo = 0, d = 0, h = 0, m = 0, s = 0, msec = 0;
                                                 ^
src/compat/db_date.c:2293:7: style: The scope of the variable 'ndigits' can be reduced. [variableScope]
  int ndigits = 0;
      ^
src/compat/db_date.c:1303:53: style:inconclusive: Function 'parse_time' argument 3 names different: declaration 'mtime' definition 'time'. [funcArgNamesDifferent]
parse_time (const char *buf, int buf_len, DB_TIME * time)
                                                    ^
src/compat/db_date.c:82:72: note: Function 'parse_time' argument 3 names different: declaration 'mtime' definition 'time'.
static const char *parse_time (const char *buf, int buf_len, DB_TIME * mtime);
                                                                       ^
src/compat/db_date.c:1303:53: note: Function 'parse_time' argument 3 names different: declaration 'mtime' definition 'time'.
parse_time (const char *buf, int buf_len, DB_TIME * time)
                                                    ^
src/compat/db_date.c:2820:114: style:inconclusive: Function 'parse_timedate_separated' argument 5 names different: declaration 'syntax_check' definition 'syntax'. [funcArgNamesDifferent]
parse_timedate_separated (char const *str, char const *strend, DB_DATE * date, unsigned int *mtime, char const **syntax,
                                                                                                                 ^
src/compat/db_date.c:97:24: note: Function 'parse_timedate_separated' argument 5 names different: declaration 'syntax_check' definition 'syntax'.
          char const **syntax_check, bool * has_explicit_msec);
                       ^
src/compat/db_date.c:2820:114: note: Function 'parse_timedate_separated' argument 5 names different: declaration 'syntax_check' definition 'syntax'.
parse_timedate_separated (char const *str, char const *strend, DB_DATE * date, unsigned int *mtime, char const **syntax,
                                                                                                                 ^
src/compat/db_date.c:2933:72: style:inconclusive: Function 'db_date_parse_time' argument 4 names different: declaration 'milisec' definition 'millisecond'. [funcArgNamesDifferent]
db_date_parse_time (char const *str, int str_len, DB_TIME * time, int *millisecond)
                                                                       ^
src/compat/db_date.h:91:83: note: Function 'db_date_parse_time' argument 4 names different: declaration 'milisec' definition 'millisecond'.
extern int db_date_parse_time (char const *str, int str_len, DB_TIME * time, int *milisec);
                                                                                  ^
src/compat/db_date.c:2933:72: note: Function 'db_date_parse_time' argument 4 names different: declaration 'milisec' definition 'millisecond'.
db_date_parse_time (char const *str, int str_len, DB_TIME * time, int *millisecond)
                                                                       ^
src/compat/db_date.c:3176:75: style:inconclusive: Function 'db_date_parse_datetime_parts' argument 3 names different: declaration 'date' definition 'datetime'. [funcArgNamesDifferent]
db_date_parse_datetime_parts (char const *str, int str_len, DB_DATETIME * datetime, bool * has_explicit_time,
                                                                          ^
src/compat/db_date.h:56:86: note: Function 'db_date_parse_datetime_parts' argument 3 names different: declaration 'date' definition 'datetime'.
extern int db_date_parse_datetime_parts (char const *str, int str_len, DB_DATETIME * date, bool * is_explicit_time,
                                                                                     ^
src/compat/db_date.c:3176:75: note: Function 'db_date_parse_datetime_parts' argument 3 names different: declaration 'date' definition 'datetime'.
db_date_parse_datetime_parts (char const *str, int str_len, DB_DATETIME * datetime, bool * has_explicit_time,
                                                                          ^
src/compat/db_date.c:3176:92: style:inconclusive: Function 'db_date_parse_datetime_parts' argument 4 names different: declaration 'is_explicit_time' definition 'has_explicit_time'. [funcArgNamesDifferent]
db_date_parse_datetime_parts (char const *str, int str_len, DB_DATETIME * datetime, bool * has_explicit_time,
                                                                                           ^
src/compat/db_date.h:56:99: note: Function 'db_date_parse_datetime_parts' argument 4 names different: declaration 'is_explicit_time' definition 'has_explicit_time'.
extern int db_date_parse_datetime_parts (char const *str, int str_len, DB_DATETIME * date, bool * is_explicit_time,
                                                                                                  ^
src/compat/db_date.c:3176:92: note: Function 'db_date_parse_datetime_parts' argument 4 names different: declaration 'is_explicit_time' definition 'has_explicit_time'.
db_date_parse_datetime_parts (char const *str, int str_len, DB_DATETIME * datetime, bool * has_explicit_time,
                                                                                           ^
src/compat/db_date.c:3661:35: style:inconclusive: Function 'db_string_to_date_ex' argument 1 names different: declaration 'buf' definition 'str'. [funcArgNamesDifferent]
db_string_to_date_ex (const char *str, int str_len, DB_DATE * date)
                                  ^
src/compat/db_date.h:38:46: note: Function 'db_string_to_date_ex' argument 1 names different: declaration 'buf' definition 'str'.
extern int db_string_to_date_ex (const char *buf, int str_len, DB_DATE * date);
                                             ^
src/compat/db_date.c:3661:35: note: Function 'db_string_to_date_ex' argument 1 names different: declaration 'buf' definition 'str'.
db_string_to_date_ex (const char *str, int str_len, DB_DATE * date)
                                  ^
src/compat/db_date.c:3693:32: style:inconclusive: Function 'db_string_to_date' argument 1 names different: declaration 'buf' definition 'str'. [funcArgNamesDifferent]
db_string_to_date (const char *str, DB_DATE * date)
                               ^
src/compat/db_date.h:37:43: note: Function 'db_string_to_date' argument 1 names different: declaration 'buf' definition 'str'.
extern int db_string_to_date (const char *buf, DB_DATE * date);
                                          ^
src/compat/db_date.c:3693:32: note: Function 'db_string_to_date' argument 1 names different: declaration 'buf' definition 'str'.
db_string_to_date (const char *str, DB_DATE * date)
                               ^
src/compat/db_date.c:3708:35: style:inconclusive: Function 'db_string_to_time_ex' argument 1 names different: declaration 'buf' definition 'str'. [funcArgNamesDifferent]
db_string_to_time_ex (const char *str, int str_len, DB_TIME * time)
                                  ^
src/compat/db_date.h:90:46: note: Function 'db_string_to_time_ex' argument 1 names different: declaration 'buf' definition 'str'.
extern int db_string_to_time_ex (const char *buf, int buf_len, DB_TIME * dbtime);
                                             ^
src/compat/db_date.c:3708:35: note: Function 'db_string_to_time_ex' argument 1 names different: declaration 'buf' definition 'str'.
db_string_to_time_ex (const char *str, int str_len, DB_TIME * time)
                                  ^
src/compat/db_date.c:3708:44: style:inconclusive: Function 'db_string_to_time_ex' argument 2 names different: declaration 'buf_len' definition 'str_len'. [funcArgNamesDifferent]
db_string_to_time_ex (const char *str, int str_len, DB_TIME * time)
                                           ^
src/compat/db_date.h:90:55: note: Function 'db_string_to_time_ex' argument 2 names different: declaration 'buf_len' definition 'str_len'.
extern int db_string_to_time_ex (const char *buf, int buf_len, DB_TIME * dbtime);
                                                      ^
src/compat/db_date.c:3708:44: note: Function 'db_string_to_time_ex' argument 2 names different: declaration 'buf_len' definition 'str_len'.
db_string_to_time_ex (const char *str, int str_len, DB_TIME * time)
                                           ^
src/compat/db_date.c:3708:63: style:inconclusive: Function 'db_string_to_time_ex' argument 3 names different: declaration 'dbtime' definition 'time'. [funcArgNamesDifferent]
db_string_to_time_ex (const char *str, int str_len, DB_TIME * time)
                                                              ^
src/compat/db_date.h:90:74: note: Function 'db_string_to_time_ex' argument 3 names different: declaration 'dbtime' definition 'time'.
extern int db_string_to_time_ex (const char *buf, int buf_len, DB_TIME * dbtime);
                                                                         ^
src/compat/db_date.c:3708:63: note: Function 'db_string_to_time_ex' argument 3 names different: declaration 'dbtime' definition 'time'.
db_string_to_time_ex (const char *str, int str_len, DB_TIME * time)
                                                              ^
src/compat/db_date.c:3739:32: style:inconclusive: Function 'db_string_to_time' argument 1 names different: declaration 'buf' definition 'str'. [funcArgNamesDifferent]
db_string_to_time (const char *str, DB_TIME * time)
                               ^
src/compat/db_date.h:89:43: note: Function 'db_string_to_time' argument 1 names different: declaration 'buf' definition 'str'.
extern int db_string_to_time (const char *buf, DB_TIME * dbtime);
                                          ^
src/compat/db_date.c:3739:32: note: Function 'db_string_to_time' argument 1 names different: declaration 'buf' definition 'str'.
db_string_to_time (const char *str, DB_TIME * time)
                               ^
src/compat/db_date.c:3739:47: style:inconclusive: Function 'db_string_to_time' argument 2 names different: declaration 'dbtime' definition 'time'. [funcArgNamesDifferent]
db_string_to_time (const char *str, DB_TIME * time)
                                              ^
src/compat/db_date.h:89:58: note: Function 'db_string_to_time' argument 2 names different: declaration 'dbtime' definition 'time'.
extern int db_string_to_time (const char *buf, DB_TIME * dbtime);
                                                         ^
src/compat/db_date.c:3739:47: note: Function 'db_string_to_time' argument 2 names different: declaration 'dbtime' definition 'time'.
db_string_to_time (const char *str, DB_TIME * time)
                                              ^
src/compat/db_date.c:3755:40: style:inconclusive: Function 'db_string_to_timestamp_ex' argument 1 names different: declaration 'buf' definition 'str'. [funcArgNamesDifferent]
db_string_to_timestamp_ex (const char *str, int str_len, DB_TIMESTAMP * utime)
                                       ^
src/compat/db_date.h:78:51: note: Function 'db_string_to_timestamp_ex' argument 1 names different: declaration 'buf' definition 'str'.
extern int db_string_to_timestamp_ex (const char *buf, int buf_len, DB_TIMESTAMP * utime);
                                                  ^
src/compat/db_date.c:3755:40: note: Function 'db_string_to_timestamp_ex' argument 1 names different: declaration 'buf' definition 'str'.
db_string_to_timestamp_ex (const char *str, int str_len, DB_TIMESTAMP * utime)
                                       ^
src/compat/db_date.c:3755:49: style:inconclusive: Function 'db_string_to_timestamp_ex' argument 2 names different: declaration 'buf_len' definition 'str_len'. [funcArgNamesDifferent]
db_string_to_timestamp_ex (const char *str, int str_len, DB_TIMESTAMP * utime)
                                                ^
src/compat/db_date.h:78:60: note: Function 'db_string_to_timestamp_ex' argument 2 names different: declaration 'buf_len' definition 'str_len'.
extern int db_string_to_timestamp_ex (const char *buf, int buf_len, DB_TIMESTAMP * utime);
                                                           ^
src/compat/db_date.c:3755:49: note: Function 'db_string_to_timestamp_ex' argument 2 names different: declaration 'buf_len' definition 'str_len'.
db_string_to_timestamp_ex (const char *str, int str_len, DB_TIMESTAMP * utime)
                                                ^
src/compat/db_date.c:3802:37: style:inconclusive: Function 'db_string_to_timestamp' argument 1 names different: declaration 'buf' definition 'str'. [funcArgNamesDifferent]
db_string_to_timestamp (const char *str, DB_TIMESTAMP * utime)
                                    ^
src/compat/db_date.h:77:48: note: Function 'db_string_to_timestamp' argument 1 names different: declaration 'buf' definition 'str'.
extern int db_string_to_timestamp (const char *buf, DB_TIMESTAMP * utime);
                                               ^
src/compat/db_date.c:3802:37: note: Function 'db_string_to_timestamp' argument 1 names different: declaration 'buf' definition 'str'.
db_string_to_timestamp (const char *str, DB_TIMESTAMP * utime)
                                    ^
src/compat/db_date.c:3994:54: style:inconclusive: Function 'db_time_to_string' argument 3 names different: declaration 'dbtime' definition 'time'. [funcArgNamesDifferent]
db_time_to_string (char *buf, int bufsize, DB_TIME * time)
                                                     ^
src/compat/db_date.h:87:65: note: Function 'db_time_to_string' argument 3 names different: declaration 'dbtime' definition 'time'.
extern int db_time_to_string (char *buf, int bufsize, DB_TIME * dbtime);
                                                                ^
src/compat/db_date.c:3994:54: note: Function 'db_time_to_string' argument 3 names different: declaration 'dbtime' definition 'time'.
db_time_to_string (char *buf, int bufsize, DB_TIME * time)
                                                     ^
src/compat/db_date.c:4612:61: style:inconclusive: Function 'db_subtract_int_from_datetime' argument 2 names different: declaration 'i2' definition 'bi2'. [funcArgNamesDifferent]
db_subtract_int_from_datetime (DB_DATETIME * dt1, DB_BIGINT bi2, DB_DATETIME * result_datetime)
                                                            ^
src/compat/db_date.h:59:72: note: Function 'db_subtract_int_from_datetime' argument 2 names different: declaration 'i2' definition 'bi2'.
extern int db_subtract_int_from_datetime (DB_DATETIME * dt1, DB_BIGINT i2, DB_DATETIME * result_datetime);
                                                                       ^
src/compat/db_date.c:4612:61: note: Function 'db_subtract_int_from_datetime' argument 2 names different: declaration 'i2' definition 'bi2'.
db_subtract_int_from_datetime (DB_DATETIME * dt1, DB_BIGINT bi2, DB_DATETIME * result_datetime)
                                                            ^
src/compat/db_date.c:4656:59: style:inconclusive: Function 'db_add_int_to_datetime' argument 2 names different: declaration 'i2' definition 'bi2'. [funcArgNamesDifferent]
db_add_int_to_datetime (DB_DATETIME * datetime, DB_BIGINT bi2, DB_DATETIME * result_datetime)
                                                          ^
src/compat/db_date.h:60:70: note: Function 'db_add_int_to_datetime' argument 2 names different: declaration 'i2' definition 'bi2'.
extern int db_add_int_to_datetime (DB_DATETIME * datetime, DB_BIGINT i2, DB_DATETIME * result_datetime);
                                                                     ^
src/compat/db_date.c:4656:59: note: Function 'db_add_int_to_datetime' argument 2 names different: declaration 'i2' definition 'bi2'.
db_add_int_to_datetime (DB_DATETIME * datetime, DB_BIGINT bi2, DB_DATETIME * result_datetime)
                                                          ^
src/compat/db_date.c:66:8: style: struct member 'ampm_buf::str' is never used. [unusedStructMember]
  char str[10];
       ^
src/compat/db_date.c:67:7: style: struct member 'ampm_buf::len' is never used. [unusedStructMember]
  int len;
      ^
src/compat/db_date.c:715:11: style: Variable 'err' is assigned a value that is never used. [unreadVariable]
  int err = NO_ERROR;
          ^
src/compat/db_info.c:689:7: style: The scope of the variable 'has_instance' can be reduced. [variableScope]
  int has_instance;
      ^
src/compat/db_info.c:74:43: style:inconclusive: Function 'db_find_class_of_index' argument 1 names different: declaration 'index' definition 'index_name'. [funcArgNamesDifferent]
db_find_class_of_index (const char *const index_name, const DB_CONSTRAINT_TYPE index_type)
                                          ^
src/compat/dbi.h:268:63: note: Function 'db_find_class_of_index' argument 1 names different: declaration 'index' definition 'index_name'.
  extern DB_OBJECT *db_find_class_of_index (const char *const index, const DB_CONSTRAINT_TYPE type);
                                                              ^
src/compat/db_info.c:74:43: note: Function 'db_find_class_of_index' argument 1 names different: declaration 'index' definition 'index_name'.
db_find_class_of_index (const char *const index_name, const DB_CONSTRAINT_TYPE index_type)
                                          ^
src/compat/db_info.c:74:80: style:inconclusive: Function 'db_find_class_of_index' argument 2 names different: declaration 'type' definition 'index_type'. [funcArgNamesDifferent]
db_find_class_of_index (const char *const index_name, const DB_CONSTRAINT_TYPE index_type)
                                                                               ^
src/compat/dbi.h:268:95: note: Function 'db_find_class_of_index' argument 2 names different: declaration 'type' definition 'index_type'.
  extern DB_OBJECT *db_find_class_of_index (const char *const index, const DB_CONSTRAINT_TYPE type);
                                                                                              ^
src/compat/db_info.c:74:80: note: Function 'db_find_class_of_index' argument 2 names different: declaration 'type' definition 'index_type'.
db_find_class_of_index (const char *const index_name, const DB_CONSTRAINT_TYPE index_type)
                                                                               ^
src/compat/db_info.c:178:53: style:inconclusive: Function 'db_fetch_all_objects' argument 2 names different: declaration 'mode' definition 'purpose'. [funcArgNamesDifferent]
db_fetch_all_objects (DB_OBJECT * op, DB_FETCH_MODE purpose)
                                                    ^
src/compat/dbi.h:275:74: note: Function 'db_fetch_all_objects' argument 2 names different: declaration 'mode' definition 'purpose'.
  extern DB_OBJLIST *db_fetch_all_objects (DB_OBJECT * op, DB_FETCH_MODE mode);
                                                                         ^
src/compat/db_info.c:178:53: note: Function 'db_fetch_all_objects' argument 2 names different: declaration 'mode' definition 'purpose'.
db_fetch_all_objects (DB_OBJECT * op, DB_FETCH_MODE purpose)
                                                    ^
src/compat/db_info.c:203:37: style:inconclusive: Function 'db_fetch_all_classes' argument 1 names different: declaration 'mode' definition 'purpose'. [funcArgNamesDifferent]
db_fetch_all_classes (DB_FETCH_MODE purpose)
                                    ^
src/compat/dbi.h:276:58: note: Function 'db_fetch_all_classes' argument 1 names different: declaration 'mode' definition 'purpose'.
  extern DB_OBJLIST *db_fetch_all_classes (DB_FETCH_MODE mode);
                                                         ^
src/compat/db_info.c:203:37: note: Function 'db_fetch_all_classes' argument 1 names different: declaration 'mode' definition 'purpose'.
db_fetch_all_classes (DB_FETCH_MODE purpose)
                                    ^
src/compat/db_info.c:223:38: style:inconclusive: Function 'db_fetch_base_classes' argument 1 names different: declaration 'mode' definition 'purpose'. [funcArgNamesDifferent]
db_fetch_base_classes (DB_FETCH_MODE purpose)
                                     ^
src/compat/dbi.h:277:59: note: Function 'db_fetch_base_classes' argument 1 names different: declaration 'mode' definition 'purpose'.
  extern DB_OBJLIST *db_fetch_base_classes (DB_FETCH_MODE mode);
                                                          ^
src/compat/db_info.c:223:38: note: Function 'db_fetch_base_classes' argument 1 names different: declaration 'mode' definition 'purpose'.
db_fetch_base_classes (DB_FETCH_MODE purpose)
                                     ^
src/compat/db_info.c:246:33: style:inconclusive: Function 'db_get_all_objects' argument 1 names different: declaration 'classobj' definition 'op'. [funcArgNamesDifferent]
db_get_all_objects (DB_OBJECT * op)
                                ^
src/compat/dbi.h:272:54: note: Function 'db_get_all_objects' argument 1 names different: declaration 'classobj' definition 'op'.
  extern DB_OBJLIST *db_get_all_objects (DB_OBJECT * classobj);
                                                     ^
src/compat/db_info.c:246:33: note: Function 'db_get_all_objects' argument 1 names different: declaration 'classobj' definition 'op'.
db_get_all_objects (DB_OBJECT * op)
                                ^
src/compat/db_info.c:417:33: style:inconclusive: Function 'db_is_instance_of' argument 2 names different: declaration 'classobj' definition 'class_'. [funcArgNamesDifferent]
db_is_instance_of (MOP obj, MOP class_)
                                ^
src/compat/dbi.h:282:62: note: Function 'db_is_instance_of' argument 2 names different: declaration 'classobj' definition 'class_'.
  extern int db_is_instance_of (DB_OBJECT * obj, DB_OBJECT * classobj);
                                                             ^
src/compat/db_info.c:417:33: note: Function 'db_is_instance_of' argument 2 names different: declaration 'classobj' definition 'class_'.
db_is_instance_of (MOP obj, MOP class_)
                                ^
src/compat/db_info.c:445:21: style:inconclusive: Function 'db_is_subclass' argument 1 names different: declaration 'classobj' definition 'classmop'. [funcArgNamesDifferent]
db_is_subclass (MOP classmop, MOP supermop)
                    ^
src/compat/dbi.h:283:42: note: Function 'db_is_subclass' argument 1 names different: declaration 'classobj' definition 'classmop'.
  extern int db_is_subclass (DB_OBJECT * classobj, DB_OBJECT * supermop);
                                         ^
src/compat/db_info.c:445:21: note: Function 'db_is_subclass' argument 1 names different: declaration 'classobj' definition 'classmop'.
db_is_subclass (MOP classmop, MOP supermop)
                    ^
src/compat/db_info.c:466:37: style:inconclusive: Function 'db_is_superclass' argument 2 names different: declaration 'classobj' definition 'classmop'. [funcArgNamesDifferent]
db_is_superclass (MOP supermop, MOP classmop)
                                    ^
src/compat/dbi.h:284:66: note: Function 'db_is_superclass' argument 2 names different: declaration 'classobj' definition 'classmop'.
  extern int db_is_superclass (DB_OBJECT * supermop, DB_OBJECT * classobj);
                                                                 ^
src/compat/db_info.c:466:37: note: Function 'db_is_superclass' argument 2 names different: declaration 'classobj' definition 'classmop'.
db_is_superclass (MOP supermop, MOP classmop)
                                    ^
src/compat/db_info.c:608:32: style:inconclusive: Function 'db_get_class_name' argument 1 names different: declaration 'classobj' definition 'class_'. [funcArgNamesDifferent]
db_get_class_name (DB_OBJECT * class_)
                               ^
src/compat/dbi.h:290:53: note: Function 'db_get_class_name' argument 1 names different: declaration 'classobj' definition 'class_'.
  extern const char *db_get_class_name (DB_OBJECT * classobj);
                                                    ^
src/compat/db_info.c:608:32: note: Function 'db_get_class_name' argument 1 names different: declaration 'classobj' definition 'class_'.
db_get_class_name (DB_OBJECT * class_)
                               ^
src/compat/db_info.c:2346:37: style:inconclusive: Function 'db_get_class_privilege' argument 1 names different: declaration 'op' definition 'mop'. [funcArgNamesDifferent]
db_get_class_privilege (DB_OBJECT * mop, unsigned int *auth)
                                    ^
src/compat/dbi.h:150:50: note: Function 'db_get_class_privilege' argument 1 names different: declaration 'op' definition 'mop'.
  extern int db_get_class_privilege (DB_OBJECT * op, unsigned int *auth);
                                                 ^
src/compat/db_info.c:2346:37: note: Function 'db_get_class_privilege' argument 1 names different: declaration 'op' definition 'mop'.
db_get_class_privilege (DB_OBJECT * mop, unsigned int *auth)
                                    ^
src/compat/db_json.cpp:251:11: warning: Assert statement calls a function which may have desired side effects: 'has_next'. [assertWithSideEffect]
  assert (has_next ());
          ^
src/compat/db_json.cpp:271:11: warning: Assert statement calls a function which may have desired side effects: 'has_next'. [assertWithSideEffect]
  assert (has_next ());
          ^
src/compat/db_json.cpp:486:17: performance:inconclusive: Technically the member function 'JSON_SERIALIZER_LENGTH::GetTypePackedSize' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    std::size_t GetTypePackedSize (void) const
                ^
src/compat/db_json.cpp:491:17: performance:inconclusive: Technically the member function 'JSON_SERIALIZER_LENGTH::GetStringPackedSize' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    std::size_t GetStringPackedSize (const char *str) const
                ^
src/compat/db_json.cpp:548:10: style:inconclusive: Technically the member function 'JSON_SERIALIZER::HasError' can be const. [functionConst]
    bool HasError ()
         ^
src/compat/db_json.cpp:455:5: style: Class 'JSON_PATH_MAPPER' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    JSON_PATH_MAPPER (map_func_type func);
    ^
src/compat/db_json.cpp:1171:95: style:inconclusive: Function 'db_json_extract_document_from_path' argument 2 names different: declaration 'raw_path' definition 'paths'. [funcArgNamesDifferent]
db_json_extract_document_from_path (const JSON_DOC *document, const std::vector<std::string> &paths,
                                                                                              ^
src/compat/db_json.hpp:74:99: note: Function 'db_json_extract_document_from_path' argument 2 names different: declaration 'raw_path' definition 'paths'.
int db_json_extract_document_from_path (const JSON_DOC *document, const std::vector<std::string> &raw_path,
                                                                                                  ^
src/compat/db_json.cpp:1171:95: note: Function 'db_json_extract_document_from_path' argument 2 names different: declaration 'raw_path' definition 'paths'.
db_json_extract_document_from_path (const JSON_DOC *document, const std::vector<std::string> &paths,
                                                                                              ^
src/compat/db_json.cpp:1665:38: style:inconclusive: Function 'db_json_insert_func' argument 1 names different: declaration 'doc_to_be_inserted' definition 'value'. [funcArgNamesDifferent]
db_json_insert_func (const JSON_DOC *value, JSON_DOC &doc, const char *raw_path)
                                     ^
src/compat/db_json.hpp:103:42: note: Function 'db_json_insert_func' argument 1 names different: declaration 'doc_to_be_inserted' definition 'value'.
int db_json_insert_func (const JSON_DOC *doc_to_be_inserted, JSON_DOC &doc_destination, const char *raw_path);
                                         ^
src/compat/db_json.cpp:1665:38: note: Function 'db_json_insert_func' argument 1 names different: declaration 'doc_to_be_inserted' definition 'value'.
db_json_insert_func (const JSON_DOC *value, JSON_DOC &doc, const char *raw_path)
                                     ^
src/compat/db_json.cpp:1665:55: style:inconclusive: Function 'db_json_insert_func' argument 2 names different: declaration 'doc_destination' definition 'doc'. [funcArgNamesDifferent]
db_json_insert_func (const JSON_DOC *value, JSON_DOC &doc, const char *raw_path)
                                                      ^
src/compat/db_json.hpp:103:72: note: Function 'db_json_insert_func' argument 2 names different: declaration 'doc_destination' definition 'doc'.
int db_json_insert_func (const JSON_DOC *doc_to_be_inserted, JSON_DOC &doc_destination, const char *raw_path);
                                                                       ^
src/compat/db_json.cpp:1665:55: note: Function 'db_json_insert_func' argument 2 names different: declaration 'doc_destination' definition 'doc'.
db_json_insert_func (const JSON_DOC *value, JSON_DOC &doc, const char *raw_path)
                                                      ^
src/compat/db_json.cpp:2749:71: style:inconclusive: Function 'db_json_normalize_path_string' argument 2 names different: declaration 'normalized_path' definition 'output'. [funcArgNamesDifferent]
db_json_normalize_path_string (const char *pointer_path, std::string &output)
                                                                      ^
src/compat/db_json.hpp:172:75: note: Function 'db_json_normalize_path_string' argument 2 names different: declaration 'normalized_path' definition 'output'.
int db_json_normalize_path_string (const char *pointer_path, std::string &normalized_path);
                                                                          ^
src/compat/db_json.cpp:2749:71: note: Function 'db_json_normalize_path_string' argument 2 names different: declaration 'normalized_path' definition 'output'.
db_json_normalize_path_string (const char *pointer_path, std::string &output)
                                                                      ^
src/compat/db_json.cpp:1288:25: style: Consider using std::any_of, std::all_of, std::none_of, or std::accumulate algorithm instead of a raw loop. [useStlAlgorithm]
      contains_wildcard = contains_wildcard || json_path.contains_wildcard ();
                        ^
src/compat/db_json.cpp:1174:18: style: Variable 'error_code' is assigned a value that is never used. [unreadVariable]
  int error_code = NO_ERROR;
                 ^
src/compat/db_json_path.cpp:614:13: warning: Member variable 'PATH_TOKEN::m_array_idx' is not initialized in the constructor. [uninitMemberVar]
PATH_TOKEN::PATH_TOKEN ()
            ^
src/compat/db_json_path.cpp:627:13: warning: Member variable 'PATH_TOKEN::m_array_idx' is not initialized in the constructor. [uninitMemberVar]
PATH_TOKEN::PATH_TOKEN (token_type type, std::string &&s)
            ^
src/compat/db_json_path.cpp:461:26: style: Condition 'path[end]!='"'' is always true [knownConditionTrueFalse]
      else if (path[end] != '"' || ((end >= 1) && path[end - 1] != '\\'))
                         ^
src/compat/db_json_path.cpp:442:21: note: Assuming that condition 'path[end]=='"'' is not redundant
      if (path[end] == '"')
                    ^
src/compat/db_json_path.cpp:461:26: note: Condition 'path[end]!='"'' is always true
      else if (path[end] != '"' || ((end >= 1) && path[end - 1] != '\\'))
                         ^
src/compat/db_json_path.cpp:266:56: style:inconclusive: Function 'skip_whitespaces' argument 2 names different: declaration 'token_begin' definition 'pos'. [funcArgNamesDifferent]
skip_whitespaces (const std::string &path, std::size_t pos)
                                                       ^
src/compat/db_json_path.cpp:45:75: note: Function 'skip_whitespaces' argument 2 names different: declaration 'token_begin' definition 'pos'.
static std::size_t skip_whitespaces (const std::string &path, std::size_t token_begin);
                                                                          ^
src/compat/db_json_path.cpp:266:56: note: Function 'skip_whitespaces' argument 2 names different: declaration 'token_begin' definition 'pos'.
skip_whitespaces (const std::string &path, std::size_t pos)
                                                       ^
src/compat/db_json_path.cpp:915:46: style:inconclusive: Function 'extract_from_subtree' argument 4 names different: declaration 'unique_elements' definition 'vals_hash_set'. [funcArgNamesDifferent]
     std::unordered_set<const JSON_VALUE *> &vals_hash_set,
                                             ^
src/compat/db_json_path.hpp:113:73: note: Function 'extract_from_subtree' argument 4 names different: declaration 'unique_elements' definition 'vals_hash_set'.
          const JSON_VALUE &jv, std::unordered_set<const JSON_VALUE *> &unique_elements,
                                                                        ^
src/compat/db_json_path.cpp:915:46: note: Function 'extract_from_subtree' argument 4 names different: declaration 'unique_elements' definition 'vals_hash_set'.
     std::unordered_set<const JSON_VALUE *> &vals_hash_set,
                                             ^
src/compat/db_json_path.cpp:925:26: performance: Searching before insertion is not necessary. [stlFindInsert]
   vals_hash_set.insert (&jv);
                         ^
src/compat/db_json_path.cpp:720:2: style: Consider using std::any_of algorithm instead of a raw loop. [useStlAlgorithm]
 {
 ^
src/compat/db_macro.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 13 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/compat/db_value_printer.hpp:38:1: error: Code 'classdb_value_printer{' is invalid C code. Use --std or --language to configure the language. [syntaxError]
class db_value_printer
^
src/compat/db_obj.c:793:17: style: The scope of the variable 'att' can be reduced. [variableScope]
  DB_ATTRIBUTE *att;
                ^
src/compat/db_obj.c:255:48: style:inconclusive: Function 'db_get_shared' argument 2 names different: declaration 'attpath' definition 'attname'. [funcArgNamesDifferent]
db_get_shared (DB_OBJECT * object, const char *attname, DB_VALUE * value)
                                               ^
src/compat/dbi.h:698:61: note: Function 'db_get_shared' argument 2 names different: declaration 'attpath' definition 'attname'.
  extern int db_get_shared (DB_OBJECT * object, const char *attpath, DB_VALUE * value);
                                                            ^
src/compat/db_obj.c:255:48: note: Function 'db_get_shared' argument 2 names different: declaration 'attpath' definition 'attname'.
db_get_shared (DB_OBJECT * object, const char *attname, DB_VALUE * value)
                                               ^
src/compat/db_obj.c:1092:21: style:inconclusive: Function 'db_find_unique' argument 1 names different: declaration 'classobj' definition 'classmop'. [funcArgNamesDifferent]
db_find_unique (MOP classmop, const char *attname, DB_VALUE * value)
                    ^
src/compat/dbi.h:166:49: note: Function 'db_find_unique' argument 1 names different: declaration 'classobj' definition 'classmop'.
  extern DB_OBJECT *db_find_unique (DB_OBJECT * classobj, const char *attname, DB_VALUE * value);
                                                ^
src/compat/db_obj.c:1092:21: note: Function 'db_find_unique' argument 1 names different: declaration 'classobj' definition 'classmop'.
db_find_unique (MOP classmop, const char *attname, DB_VALUE * value)
                    ^
src/compat/db_obj.c:1115:32: style:inconclusive: Function 'db_find_unique_write_mode' argument 1 names different: declaration 'classobj' definition 'classmop'. [funcArgNamesDifferent]
db_find_unique_write_mode (MOP classmop, const char *attname, DB_VALUE * value)
                               ^
src/compat/dbi.h:167:60: note: Function 'db_find_unique_write_mode' argument 1 names different: declaration 'classobj' definition 'classmop'.
  extern DB_OBJECT *db_find_unique_write_mode (DB_OBJECT * classobj, const char *attname, DB_VALUE * value);
                                                           ^
src/compat/db_obj.c:1115:32: note: Function 'db_find_unique_write_mode' argument 1 names different: declaration 'classobj' definition 'classmop'.
db_find_unique_write_mode (MOP classmop, const char *attname, DB_VALUE * value)
                               ^
src/compat/db_obj.c:1169:27: style:inconclusive: Function 'db_find_multi_unique' argument 1 names different: declaration 'classobj' definition 'classmop'. [funcArgNamesDifferent]
db_find_multi_unique (MOP classmop, int size, char *attr_names[], DB_VALUE * values[], DB_FETCH_MODE purpose)
                          ^
src/compat/dbi.h:168:55: note: Function 'db_find_multi_unique' argument 1 names different: declaration 'classobj' definition 'classmop'.
  extern DB_OBJECT *db_find_multi_unique (DB_OBJECT * classobj, int size, char *attnames[], DB_VALUE * values[],
                                                      ^
src/compat/db_obj.c:1169:27: note: Function 'db_find_multi_unique' argument 1 names different: declaration 'classobj' definition 'classmop'.
db_find_multi_unique (MOP classmop, int size, char *attr_names[], DB_VALUE * values[], DB_FETCH_MODE purpose)
                          ^
src/compat/db_obj.c:1169:53: style:inconclusive: Function 'db_find_multi_unique' argument 3 names different: declaration 'attnames' definition 'attr_names'. [funcArgNamesDifferent]
db_find_multi_unique (MOP classmop, int size, char *attr_names[], DB_VALUE * values[], DB_FETCH_MODE purpose)
                                                    ^
src/compat/dbi.h:168:81: note: Function 'db_find_multi_unique' argument 3 names different: declaration 'attnames' definition 'attr_names'.
  extern DB_OBJECT *db_find_multi_unique (DB_OBJECT * classobj, int size, char *attnames[], DB_VALUE * values[],
                                                                                ^
src/compat/db_obj.c:1169:53: note: Function 'db_find_multi_unique' argument 3 names different: declaration 'attnames' definition 'attr_names'.
db_find_multi_unique (MOP classmop, int size, char *attr_names[], DB_VALUE * values[], DB_FETCH_MODE purpose)
                                                    ^
src/compat/db_obj.c:1200:22: style:inconclusive: Function 'db_dfind_unique' argument 1 names different: declaration 'classobj' definition 'classmop'. [funcArgNamesDifferent]
db_dfind_unique (MOP classmop, DB_ATTDESC * attdesc, DB_VALUE * value, DB_FETCH_MODE purpose)
                     ^
src/compat/dbi.h:170:50: note: Function 'db_dfind_unique' argument 1 names different: declaration 'classobj' definition 'classmop'.
  extern DB_OBJECT *db_dfind_unique (DB_OBJECT * classobj, DB_ATTDESC * attdesc, DB_VALUE * value,
                                                 ^
src/compat/db_obj.c:1200:22: note: Function 'db_dfind_unique' argument 1 names different: declaration 'classobj' definition 'classmop'.
db_dfind_unique (MOP classmop, DB_ATTDESC * attdesc, DB_VALUE * value, DB_FETCH_MODE purpose)
                     ^
src/compat/db_obj.c:1224:28: style:inconclusive: Function 'db_dfind_multi_unique' argument 1 names different: declaration 'classobj' definition 'classmop'. [funcArgNamesDifferent]
db_dfind_multi_unique (MOP classmop, int size, DB_ATTDESC * attdesc[], DB_VALUE * values[], DB_FETCH_MODE purpose)
                           ^
src/compat/dbi.h:172:56: note: Function 'db_dfind_multi_unique' argument 1 names different: declaration 'classobj' definition 'classmop'.
  extern DB_OBJECT *db_dfind_multi_unique (DB_OBJECT * classobj, int size, DB_ATTDESC * attdesc[], DB_VALUE * values[],
                                                       ^
src/compat/db_obj.c:1224:28: note: Function 'db_dfind_multi_unique' argument 1 names different: declaration 'classobj' definition 'classmop'.
db_dfind_multi_unique (MOP classmop, int size, DB_ATTDESC * attdesc[], DB_VALUE * values[], DB_FETCH_MODE purpose)
                           ^
src/compat/db_obj.c:1302:18: style:inconclusive: Function 'db_create_trigger' argument 5 names different: declaration 'class_obj' definition 'class_'. [funcArgNamesDifferent]
     DB_OBJECT * class_, const char *attr, DB_TRIGGER_TIME cond_time, const char *cond_source,
                 ^
src/compat/dbi.h:377:48: note: Function 'db_create_trigger' argument 5 names different: declaration 'class_obj' definition 'class_'.
           DB_TRIGGER_EVENT event, DB_OBJECT * class_obj, const char *attr,
                                               ^
src/compat/db_obj.c:1302:18: note: Function 'db_create_trigger' argument 5 names different: declaration 'class_obj' definition 'class_'.
     DB_OBJECT * class_, const char *attr, DB_TRIGGER_TIME cond_time, const char *cond_source,
                 ^
src/compat/db_obj.c:1421:61: style:inconclusive: Function 'db_find_event_triggers' argument 2 names different: declaration 'class_obj' definition 'class_'. [funcArgNamesDifferent]
db_find_event_triggers (DB_TRIGGER_EVENT event, DB_OBJECT * class_, const char *attr, DB_OBJLIST ** list)
                                                            ^
src/compat/dbi.h:386:74: note: Function 'db_find_event_triggers' argument 2 names different: declaration 'class_obj' definition 'class_'.
  extern int db_find_event_triggers (DB_TRIGGER_EVENT event, DB_OBJECT * class_obj, const char *attr,
                                                                         ^
src/compat/db_obj.c:1421:61: note: Function 'db_find_event_triggers' argument 2 names different: declaration 'class_obj' definition 'class_'.
db_find_event_triggers (DB_TRIGGER_EVENT event, DB_OBJECT * class_, const char *attr, DB_OBJLIST ** list)
                                                            ^
src/compat/db_obj.c:1623:51: style:inconclusive: Function 'db_trigger_class' argument 2 names different: declaration 'class_obj' definition 'class_'. [funcArgNamesDifferent]
db_trigger_class (DB_OBJECT * trobj, DB_OBJECT ** class_)
                                                  ^
src/compat/dbi.h:398:64: note: Function 'db_trigger_class' argument 2 names different: declaration 'class_obj' definition 'class_'.
  extern int db_trigger_class (DB_OBJECT * trobj, DB_OBJECT ** class_obj);
                                                               ^
src/compat/db_obj.c:1623:51: note: Function 'db_trigger_class' argument 2 names different: declaration 'class_obj' definition 'class_'.
db_trigger_class (DB_OBJECT * trobj, DB_OBJECT ** class_)
                                                  ^
src/compat/db_old.c:124:8: style: The scope of the variable 'oid' can be reduced. [variableScope]
  OID *oid;
       ^
src/compat/db_old.c:96:40: style:inconclusive: Function 'db_objlist_get' argument 2 names different: declaration 'psn' definition 'index'. [funcArgNamesDifferent]
db_objlist_get (DB_OBJLIST * list, int index)
                                       ^
src/compat/dbi.h:671:60: note: Function 'db_objlist_get' argument 2 names different: declaration 'psn' definition 'index'.
  extern DB_OBJECT *db_objlist_get (DB_OBJLIST * list, int psn);
                                                           ^
src/compat/db_old.c:96:40: note: Function 'db_objlist_get' argument 2 names different: declaration 'psn' definition 'index'.
db_objlist_get (DB_OBJLIST * list, int index)
                                       ^
src/compat/db_old.c:705:20: style:inconclusive: Function 'db_is_indexed' argument 1 names different: declaration 'classobj' definition 'classmop'. [funcArgNamesDifferent]
db_is_indexed (MOP classmop, const char *attname)
                   ^
src/compat/dbi.h:703:41: note: Function 'db_is_indexed' argument 1 names different: declaration 'classobj' definition 'classmop'.
  extern int db_is_indexed (DB_OBJECT * classobj, const char *attname);
                                        ^
src/compat/db_old.c:705:20: note: Function 'db_is_indexed' argument 1 names different: declaration 'classobj' definition 'classmop'.
db_is_indexed (MOP classmop, const char *attname)
                   ^
src/compat/db_query.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/compat/db_query.c:156:18: style: The scope of the variable 'p' can be reduced. [variableScope]
  DB_QUERY_TYPE *p, *n;
                 ^
src/compat/db_query.c:247:7: style: The scope of the variable 'len' can be reduced. [variableScope]
  int len = 0;
      ^
src/compat/db_query.c:2057:7: style: The scope of the variable 'retval' can be reduced. [variableScope]
  int retval;
      ^
src/compat/db_query.c:194:52: style:inconclusive: Function 'or_packed_query_format_size' argument 1 names different: declaration 'q' definition 'columns'. [funcArgNamesDifferent]
or_packed_query_format_size (const DB_QUERY_TYPE * columns, int *count)
                                                   ^
src/compat/db_query.c:90:63: note: Function 'or_packed_query_format_size' argument 1 names different: declaration 'q' definition 'columns'.
static int or_packed_query_format_size (const DB_QUERY_TYPE * q, int *count);
                                                              ^
src/compat/db_query.c:194:52: note: Function 'or_packed_query_format_size' argument 1 names different: declaration 'q' definition 'columns'.
or_packed_query_format_size (const DB_QUERY_TYPE * columns, int *count)
                                                   ^
src/compat/db_query.c:244:56: style:inconclusive: Function 'or_pack_query_format' argument 2 names different: declaration 'q' definition 'columns'. [funcArgNamesDifferent]
or_pack_query_format (char *buf, const DB_QUERY_TYPE * columns, const int count)
                                                       ^
src/compat/db_query.c:91:69: note: Function 'or_pack_query_format' argument 2 names different: declaration 'q' definition 'columns'.
static char *or_pack_query_format (char *buf, const DB_QUERY_TYPE * q, const int count);
                                                                    ^
src/compat/db_query.c:244:56: note: Function 'or_pack_query_format' argument 2 names different: declaration 'q' definition 'columns'.
or_pack_query_format (char *buf, const DB_QUERY_TYPE * columns, const int count)
                                                       ^
src/compat/db_query.c:308:53: style:inconclusive: Function 'or_unpack_query_format' argument 2 names different: declaration 'q' definition 'columns'. [funcArgNamesDifferent]
or_unpack_query_format (char *buf, DB_QUERY_TYPE ** columns)
                                                    ^
src/compat/db_query.c:92:66: note: Function 'or_unpack_query_format' argument 2 names different: declaration 'q' definition 'columns'.
static char *or_unpack_query_format (char *buf, DB_QUERY_TYPE ** q);
                                                                 ^
src/compat/db_query.c:308:53: note: Function 'or_unpack_query_format' argument 2 names different: declaration 'q' definition 'columns'.
or_unpack_query_format (char *buf, DB_QUERY_TYPE ** columns)
                                                    ^
src/compat/db_query.c:1558:63: style:inconclusive: Function 'db_get_query_format' argument 2 names different: declaration 'type_list' definition 'result'. [funcArgNamesDifferent]
db_get_query_format (const char *CSQL_query, DB_QUERY_TYPE ** result, DB_QUERY_ERROR * query_error)
                                                              ^
src/compat/dbi.h:527:76: note: Function 'db_get_query_format' argument 2 names different: declaration 'type_list' definition 'result'.
  extern int db_get_query_format (const char *CSQL_query, DB_QUERY_TYPE ** type_list, DB_QUERY_ERROR * query_error);
                                                                           ^
src/compat/db_query.c:1558:63: note: Function 'db_get_query_format' argument 2 names different: declaration 'type_list' definition 'result'.
db_get_query_format (const char *CSQL_query, DB_QUERY_TYPE ** result, DB_QUERY_ERROR * query_error)
                                                              ^
src/compat/db_query.c:1998:42: style:inconclusive: Function 'db_get_db_value_query_result' argument 1 names different: declaration 'var' definition 'val'. [funcArgNamesDifferent]
db_get_db_value_query_result (DB_VALUE * val)
                                         ^
src/compat/db_query.h:194:68: note: Function 'db_get_db_value_query_result' argument 1 names different: declaration 'var' definition 'val'.
  extern DB_QUERY_RESULT *db_get_db_value_query_result (DB_VALUE * var);
                                                                   ^
src/compat/db_query.c:1998:42: note: Function 'db_get_db_value_query_result' argument 1 names different: declaration 'var' definition 'val'.
db_get_db_value_query_result (DB_VALUE * val)
                                         ^
src/compat/db_query.c:2873:57: style:inconclusive: Function 'db_query_get_tuple_value' argument 2 names different: declaration 'tuple_index' definition 'index'. [funcArgNamesDifferent]
db_query_get_tuple_value (DB_QUERY_RESULT * result, int index, DB_VALUE * value)
                                                        ^
src/compat/dbi.h:547:70: note: Function 'db_query_get_tuple_value' argument 2 names different: declaration 'tuple_index' definition 'index'.
  extern int db_query_get_tuple_value (DB_QUERY_RESULT * result, int tuple_index, DB_VALUE * value);
                                                                     ^
src/compat/db_query.c:2873:57: note: Function 'db_query_get_tuple_value' argument 2 names different: declaration 'tuple_index' definition 'index'.
db_query_get_tuple_value (DB_QUERY_RESULT * result, int index, DB_VALUE * value)
                                                        ^
src/compat/db_query.c:447:21: style: Local variable 'i' shadows outer variable [shadowVariable]
      int size = 0, i = 0;
                    ^
src/compat/db_query.c:436:24: note: Shadowed declaration
  int packed_size = 0, i = 0;
                       ^
src/compat/db_query.c:447:21: note: Shadow variable
      int size = 0, i = 0;
                    ^
src/compat/db_query.c:515:11: style: Local variable 'i' shadows outer variable [shadowVariable]
      int i = 0;
          ^
src/compat/db_query.c:436:24: note: Shadowed declaration
  int packed_size = 0, i = 0;
                       ^
src/compat/db_query.c:515:11: note: Shadow variable
      int i = 0;
          ^
src/compat/db_query.c:576:20: style: Local variable 'i' shadows outer variable [shadowVariable]
      unsigned int i = 0, var_count;
                   ^
src/compat/db_query.c:539:7: note: Shadowed declaration
  int i = 0;
      ^
src/compat/db_query.c:576:20: note: Shadow variable
      unsigned int i = 0, var_count;
                   ^
src/compat/db_query.c:247:11: style: Variable 'len' is assigned a value that is never used. [unreadVariable]
  int len = 0;
          ^
src/compat/db_query.c:1118:10: style: The scope of the variable 'size' can be reduced. [variableScope]
  size_t size;
         ^
src/compat/db_query.c:1904:8: style: The scope of the variable 'sizep' can be reduced. [variableScope]
  int *sizep;
       ^
src/compat/db_query.c:1905:10: style: The scope of the variable 'namep' can be reduced. [variableScope]
  char **namep;
         ^
src/compat/db_query.c:1906:10: style: The scope of the variable 'attr_namep' can be reduced. [variableScope]
  char **attr_namep;
         ^
src/compat/db_query.c:1907:10: style: The scope of the variable 'str_size' can be reduced. [variableScope]
  size_t str_size;
         ^
src/compat/db_query.c:2672:33: style: The scope of the variable 'index' can be reduced. [variableScope]
 int col_cnt, tpl_idx, n_tuple, index = 0;
                                ^
src/compat/db_set.c:86:21: style: The scope of the variable 'att' can be reduced. [variableScope]
      SM_ATTRIBUTE *att;
                    ^
src/compat/db_set.c:152:21: style: The scope of the variable 'att' can be reduced. [variableScope]
      SM_ATTRIBUTE *att;
                    ^
src/compat/db_set.c:210:21: style: The scope of the variable 'att' can be reduced. [variableScope]
      SM_ATTRIBUTE *att;
                    ^
src/compat/db_set.c:270:21: style: The scope of the variable 'att' can be reduced. [variableScope]
      SM_ATTRIBUTE *att;
                    ^
src/compat/db_set.c:72:20: style:inconclusive: Function 'db_set_create' argument 1 names different: declaration 'classobj' definition 'classop'. [funcArgNamesDifferent]
db_set_create (MOP classop, const char *name)
                   ^
src/compat/db_set_function.h:35:52: note: Function 'db_set_create' argument 1 names different: declaration 'classobj' definition 'classop'.
  extern DB_COLLECTION *db_set_create (DB_OBJECT * classobj, const char *name);
                                                   ^
src/compat/db_set.c:72:20: note: Function 'db_set_create' argument 1 names different: declaration 'classobj' definition 'classop'.
db_set_create (MOP classop, const char *name)
                   ^
src/compat/db_set.c:134:26: style:inconclusive: Function 'db_set_create_basic' argument 1 names different: declaration 'classobj' definition 'classop'. [funcArgNamesDifferent]
db_set_create_basic (MOP classop, const char *name)
                         ^
src/compat/db_set_function.h:36:58: note: Function 'db_set_create_basic' argument 1 names different: declaration 'classobj' definition 'classop'.
  extern DB_COLLECTION *db_set_create_basic (DB_OBJECT * classobj, const char *name);
                                                         ^
src/compat/db_set.c:134:26: note: Function 'db_set_create_basic' argument 1 names different: declaration 'classobj' definition 'classop'.
db_set_create_basic (MOP classop, const char *name)
                         ^
src/compat/db_set.c:192:26: style:inconclusive: Function 'db_set_create_multi' argument 1 names different: declaration 'classobj' definition 'classop'. [funcArgNamesDifferent]
db_set_create_multi (MOP classop, const char *name)
                         ^
src/compat/db_set_function.h:37:58: note: Function 'db_set_create_multi' argument 1 names different: declaration 'classobj' definition 'classop'.
  extern DB_COLLECTION *db_set_create_multi (DB_OBJECT * classobj, const char *name);
                                                         ^
src/compat/db_set.c:192:26: note: Function 'db_set_create_multi' argument 1 names different: declaration 'classobj' definition 'classop'.
db_set_create_multi (MOP classop, const char *name)
                         ^
src/compat/db_set.c:252:20: style:inconclusive: Function 'db_seq_create' argument 1 names different: declaration 'classobj' definition 'classop'. [funcArgNamesDifferent]
db_seq_create (MOP classop, const char *name, int size)
                   ^
src/compat/db_set_function.h:38:52: note: Function 'db_seq_create' argument 1 names different: declaration 'classobj' definition 'classop'.
  extern DB_COLLECTION *db_seq_create (DB_OBJECT * classobj, const char *name, int size);
                                                   ^
src/compat/db_set.c:252:20: note: Function 'db_seq_create' argument 1 names different: declaration 'classobj' definition 'classop'.
db_seq_create (MOP classop, const char *name, int size)
                   ^
src/compat/db_set.c:372:25: style:inconclusive: Function 'db_seq_filter' argument 1 names different: declaration 'seq' definition 'set'. [funcArgNamesDifferent]
db_seq_filter (DB_SET * set)
                        ^
src/compat/db_set_function.h:61:38: note: Function 'db_seq_filter' argument 1 names different: declaration 'seq' definition 'set'.
  extern int db_seq_filter (DB_SEQ * seq);
                                     ^
src/compat/db_set.c:372:25: note: Function 'db_seq_filter' argument 1 names different: declaration 'seq' definition 'set'.
db_seq_filter (DB_SET * set)
                        ^
src/compat/db_set.c:402:23: style:inconclusive: Function 'db_set_copy' argument 1 names different: declaration 'set' definition 'source'. [funcArgNamesDifferent]
db_set_copy (DB_SET * source)
                      ^
src/compat/db_set_function.h:51:54: note: Function 'db_set_copy' argument 1 names different: declaration 'set' definition 'source'.
  extern DB_COLLECTION *db_set_copy (DB_COLLECTION * set);
                                                     ^
src/compat/db_set.c:402:23: note: Function 'db_set_copy' argument 1 names different: declaration 'set' definition 'source'.
db_set_copy (DB_SET * source)
                      ^
src/compat/db_set.c:428:23: style:inconclusive: Function 'db_seq_copy' argument 1 names different: declaration 'seq' definition 'source'. [funcArgNamesDifferent]
db_seq_copy (DB_SEQ * source)
                      ^
src/compat/db_set_function.h:62:40: note: Function 'db_seq_copy' argument 1 names different: declaration 'seq' definition 'source'.
  extern DB_SEQ *db_seq_copy (DB_SEQ * seq);
                                       ^
src/compat/db_set.c:428:23: note: Function 'db_seq_copy' argument 1 names different: declaration 'seq' definition 'source'.
db_seq_copy (DB_SEQ * source)
                      ^
src/compat/db_set.c:508:31: style:inconclusive: Function 'db_set_get' argument 2 names different: declaration 'element_index' definition 'index'. [funcArgNamesDifferent]
db_set_get (DB_SET * set, int index, DB_VALUE * value)
                              ^
src/compat/db_set_function.h:42:51: note: Function 'db_set_get' argument 2 names different: declaration 'element_index' definition 'index'.
  extern int db_set_get (DB_COLLECTION * set, int element_index, DB_VALUE * value);
                                                  ^
src/compat/db_set.c:508:31: note: Function 'db_set_get' argument 2 names different: declaration 'element_index' definition 'index'.
db_set_get (DB_SET * set, int index, DB_VALUE * value)
                              ^
src/compat/db_set.c:712:31: style:inconclusive: Function 'db_seq_get' argument 2 names different: declaration 'element_index' definition 'index'. [funcArgNamesDifferent]
db_seq_get (DB_SET * set, int index, DB_VALUE * value)
                              ^
src/compat/db_set_function.h:52:51: note: Function 'db_seq_get' argument 2 names different: declaration 'element_index' definition 'index'.
  extern int db_seq_get (DB_COLLECTION * set, int element_index, DB_VALUE * value);
                                                  ^
src/compat/db_set.c:712:31: note: Function 'db_seq_get' argument 2 names different: declaration 'element_index' definition 'index'.
db_seq_get (DB_SET * set, int index, DB_VALUE * value)
                              ^
src/compat/db_set.c:745:31: style:inconclusive: Function 'db_seq_put' argument 2 names different: declaration 'element_index' definition 'index'. [funcArgNamesDifferent]
db_seq_put (DB_SET * set, int index, DB_VALUE * value)
                              ^
src/compat/db_set_function.h:53:51: note: Function 'db_seq_put' argument 2 names different: declaration 'element_index' definition 'index'.
  extern int db_seq_put (DB_COLLECTION * set, int element_index, DB_VALUE * value);
                                                  ^
src/compat/db_set.c:745:31: note: Function 'db_seq_put' argument 2 names different: declaration 'element_index' definition 'index'.
db_seq_put (DB_SET * set, int index, DB_VALUE * value)
                              ^
src/compat/db_set.c:786:34: style:inconclusive: Function 'db_seq_insert' argument 2 names different: declaration 'element_index' definition 'index'. [funcArgNamesDifferent]
db_seq_insert (DB_SET * set, int index, DB_VALUE * value)
                                 ^
src/compat/db_set_function.h:54:54: note: Function 'db_seq_insert' argument 2 names different: declaration 'element_index' definition 'index'.
  extern int db_seq_insert (DB_COLLECTION * set, int element_index, DB_VALUE * value);
                                                     ^
src/compat/db_set.c:786:34: note: Function 'db_seq_insert' argument 2 names different: declaration 'element_index' definition 'index'.
db_seq_insert (DB_SET * set, int index, DB_VALUE * value)
                                 ^
src/compat/db_set.c:823:32: style:inconclusive: Function 'db_seq_drop' argument 2 names different: declaration 'element_index' definition 'index'. [funcArgNamesDifferent]
db_seq_drop (DB_SET * set, int index)
                               ^
src/compat/db_set_function.h:55:52: note: Function 'db_seq_drop' argument 2 names different: declaration 'element_index' definition 'index'.
  extern int db_seq_drop (DB_COLLECTION * set, int element_index);
                                                   ^
src/compat/db_set.c:823:32: note: Function 'db_seq_drop' argument 2 names different: declaration 'element_index' definition 'index'.
db_seq_drop (DB_SET * set, int index)
                               ^
src/compat/db_set.c:908:50: style:inconclusive: Function 'db_seq_find' argument 3 names different: declaration 'element_index' definition 'index'. [funcArgNamesDifferent]
db_seq_find (DB_SET * set, DB_VALUE * value, int index)
                                                 ^
src/compat/db_set_function.h:59:70: note: Function 'db_seq_find' argument 3 names different: declaration 'element_index' definition 'index'.
  extern int db_seq_find (DB_COLLECTION * set, DB_VALUE * value, int element_index);
                                                                     ^
src/compat/db_set.c:908:50: note: Function 'db_seq_find' argument 3 names different: declaration 'element_index' definition 'index'.
db_seq_find (DB_SET * set, DB_VALUE * value, int index)
                                                 ^
src/compat/db_set.c:76:13: style: Variable 'error' is assigned a value that is never used. [unreadVariable]
  int error = NO_ERROR;
            ^
src/compat/db_set.c:93:8: style: Variable 'error' is assigned a value that is never used. [unreadVariable]
       ERROR_SET1 (error, ER_OBJ_INVALID_ATTRIBUTE, name);
       ^
src/compat/db_set.c:111:5: style: Variable 'error' is assigned a value that is never used. [unreadVariable]
    ERROR_SET1 (error, ER_OBJ_DOMAIN_CONFLICT, name);
    ^
src/compat/db_set.c:138:13: style: Variable 'error' is assigned a value that is never used. [unreadVariable]
  int error = NO_ERROR;
            ^
src/compat/db_set.c:159:8: style: Variable 'error' is assigned a value that is never used. [unreadVariable]
       ERROR_SET1 (error, ER_OBJ_INVALID_ATTRIBUTE, name);
       ^
src/compat/db_set.c:169:5: style: Variable 'error' is assigned a value that is never used. [unreadVariable]
    ERROR_SET1 (error, ER_OBJ_DOMAIN_CONFLICT, name);
    ^
src/compat/db_set.c:196:13: style: Variable 'error' is assigned a value that is never used. [unreadVariable]
  int error = NO_ERROR;
            ^
src/compat/db_set.c:217:8: style: Variable 'error' is assigned a value that is never used. [unreadVariable]
       ERROR_SET1 (error, ER_OBJ_INVALID_ATTRIBUTE, name);
       ^
src/compat/db_set.c:227:5: style: Variable 'error' is assigned a value that is never used. [unreadVariable]
    ERROR_SET1 (error, ER_OBJ_DOMAIN_CONFLICT, name);
    ^
src/compat/db_set.c:256:13: style: Variable 'error' is assigned a value that is never used. [unreadVariable]
  int error = NO_ERROR;
            ^
src/compat/db_set.c:277:8: style: Variable 'error' is assigned a value that is never used. [unreadVariable]
       ERROR_SET1 (error, ER_OBJ_INVALID_ATTRIBUTE, name);
       ^
src/compat/db_set.c:287:5: style: Variable 'error' is assigned a value that is never used. [unreadVariable]
    ERROR_SET1 (error, ER_OBJ_DOMAIN_CONFLICT, name);
    ^
src/compat/db_temp.c:552:36: style: Condition 'temp_cons!=NULL' is always false [knownConditionTrueFalse]
  if (def->op == NULL && temp_cons != NULL)
                                   ^
src/compat/db_temp.c:529:36: note: Assignment 'temp_cons=NULL', assigned value is 0
  SM_CLASS_CONSTRAINT *temp_cons = NULL;
                                   ^
src/compat/db_temp.c:552:36: note: Condition 'temp_cons!=NULL' is always false
  if (def->op == NULL && temp_cons != NULL)
                                   ^
src/compat/db_temp.c:382:51: style:inconclusive: Function 'dbt_constrain_unique' argument 2 names different: declaration 'name' definition 'attname'. [funcArgNamesDifferent]
dbt_constrain_unique (DB_CTMPL * def, const char *attname, int on_or_off)
                                                  ^
src/compat/dbi.h:419:64: note: Function 'dbt_constrain_unique' argument 2 names different: declaration 'name' definition 'attname'.
  extern int dbt_constrain_unique (DB_CTMPL * def, const char *name, int on_or_off);
                                                               ^
src/compat/db_temp.c:382:51: note: Function 'dbt_constrain_unique' argument 2 names different: declaration 'name' definition 'attname'.
dbt_constrain_unique (DB_CTMPL * def, const char *attname, int on_or_off)
                                                  ^
src/compat/db_temp.c:800:75: style:inconclusive: Function 'dbt_add_argument' argument 4 names different: declaration 'arg_index' definition 'index'. [funcArgNamesDifferent]
dbt_add_argument (DB_CTMPL * def, const char *name, int class_method, int index, const char *domain)
                                                                          ^
src/compat/dbi.h:433:88: note: Function 'dbt_add_argument' argument 4 names different: declaration 'arg_index' definition 'index'.
  extern int dbt_add_argument (DB_CTMPL * def, const char *name, int class_method, int arg_index, const char *domain);
                                                                                       ^
src/compat/db_temp.c:800:75: note: Function 'dbt_add_argument' argument 4 names different: declaration 'arg_index' definition 'index'.
dbt_add_argument (DB_CTMPL * def, const char *name, int class_method, int index, const char *domain)
                                                                          ^
src/compat/db_temp.c:823:86: style:inconclusive: Function 'dbt_add_set_argument_domain' argument 4 names different: declaration 'arg_index' definition 'index'. [funcArgNamesDifferent]
dbt_add_set_argument_domain (DB_CTMPL * def, const char *name, int class_method, int index, const char *domain)
                                                                                     ^
src/compat/dbi.h:434:99: note: Function 'dbt_add_set_argument_domain' argument 4 names different: declaration 'arg_index' definition 'index'.
  extern int dbt_add_set_argument_domain (DB_CTMPL * def, const char *name, int class_method, int arg_index,
                                                                                                  ^
src/compat/db_temp.c:823:86: note: Function 'dbt_add_set_argument_domain' argument 4 names different: declaration 'arg_index' definition 'index'.
dbt_add_set_argument_domain (DB_CTMPL * def, const char *name, int class_method, int index, const char *domain)
                                                                                     ^
src/compat/db_temp.c:1075:36: warning: Function 'dbt_rename_method_file' argument order different: declaration 'def, new_name, old_name' definition 'def, old_name, new_name' [funcArgOrderDifferent]
dbt_rename_method_file (DB_CTMPL * def, const char *old_name, const char *new_name)
                                   ^
src/compat/dbi.h:446:49: note: Function 'dbt_rename_method_file' argument order different: declaration 'def, new_name, old_name' definition 'def, old_name, new_name'
  extern int dbt_rename_method_file (DB_CTMPL * def, const char *new_name, const char *old_name);
                                                ^
src/compat/db_temp.c:1075:36: note: Function 'dbt_rename_method_file' argument order different: declaration 'def, new_name, old_name' definition 'def, old_name, new_name'
dbt_rename_method_file (DB_CTMPL * def, const char *old_name, const char *new_name)
                                   ^
src/compat/db_value_printer.hpp:46:5: style: Class 'db_value_printer' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    db_value_printer (string_buffer &buf, bool padding=false)
    ^
src/compat/db_value_printer.cpp:82:38: style: Parameter 'buf' can be declared with const [constParameter]
  void describe_real (string_buffer &buf, double value, int precision)
                                     ^
src/compat/db_vdb.c:1361:17: style: Condition 'statement!=NULL' is always true [knownConditionTrueFalse]
  if (statement != NULL && statement->node_type == PT_EXECUTE_PREPARE)
                ^
src/compat/db_vdb.c:1347:57: note: Assuming that condition '!statement' is not redundant
  if (stmt_ndx < 0 || stmt_ndx >= session->dimension || !statement)
                                                        ^
src/compat/db_vdb.c:1353:32: note: Assuming condition is false
  if (session->stage[stmt_ndx] < StatementPreparedStage)
                               ^
src/compat/db_vdb.c:1361:17: note: Condition 'statement!=NULL' is always true
  if (statement != NULL && statement->node_type == PT_EXECUTE_PREPARE)
                ^
src/compat/db_vdb.c:2324:26: warning: Either the condition 'if(prepared_session)' is redundant or there is possible null pointer dereference: prepared_session. [nullPointerRedundantCheck]
  prepare_info.columns = prepared_session->type_list[0];
                         ^
src/compat/db_vdb.c:2371:6: note: Assuming that condition 'if(prepared_session)' is not redundant
  if (prepared_session)
     ^
src/compat/db_vdb.c:2324:26: note: Null pointer dereference
  prepare_info.columns = prepared_session->type_list[0];
                         ^
src/compat/db_vdb.c:2329:5: warning: Either the condition 'if(prepared_session)' is redundant or there is possible null pointer dereference: prepared_session. [nullPointerRedundantCheck]
    prepared_session->parser->host_var_count + prepared_session->parser->auto_param_count;
    ^
src/compat/db_vdb.c:2371:6: note: Assuming that condition 'if(prepared_session)' is not redundant
  if (prepared_session)
     ^
src/compat/db_vdb.c:2329:5: note: Null pointer dereference
    prepared_session->parser->host_var_count + prepared_session->parser->auto_param_count;
    ^
src/compat/db_vdb.c:2330:38: warning: Either the condition 'if(prepared_session)' is redundant or there is possible null pointer dereference: prepared_session. [nullPointerRedundantCheck]
  prepare_info.host_variables.vals = prepared_session->parser->host_variables;
                                     ^
src/compat/db_vdb.c:2371:6: note: Assuming that condition 'if(prepared_session)' is not redundant
  if (prepared_session)
     ^
src/compat/db_vdb.c:2330:38: note: Null pointer dereference
  prepare_info.host_variables.vals = prepared_session->parser->host_variables;
                                     ^
src/compat/db_vdb.c:2331:44: warning: Either the condition 'if(prepared_session)' is redundant or there is possible null pointer dereference: prepared_session. [nullPointerRedundantCheck]
  prepare_info.host_var_expected_domains = prepared_session->parser->host_var_expected_domains;
                                           ^
src/compat/db_vdb.c:2371:6: note: Assuming that condition 'if(prepared_session)' is not redundant
  if (prepared_session)
     ^
src/compat/db_vdb.c:2331:44: note: Null pointer dereference
  prepare_info.host_var_expected_domains = prepared_session->parser->host_var_expected_domains;
                                           ^
src/compat/db_vdb.c:2333:35: warning: Either the condition 'if(prepared_session)' is redundant or there is possible null pointer dereference: prepared_session. [nullPointerRedundantCheck]
  prepare_info.auto_param_count = prepared_session->parser->auto_param_count;
                                  ^
src/compat/db_vdb.c:2371:6: note: Assuming that condition 'if(prepared_session)' is not redundant
  if (prepared_session)
     ^
src/compat/db_vdb.c:2333:35: note: Null pointer dereference
  prepare_info.auto_param_count = prepared_session->parser->auto_param_count;
                                  ^
src/compat/db_vdb.c:2668:11: warning: Either the condition 'session!=NULL' is redundant or there is possible null pointer dereference: session. [nullPointerRedundantCheck]
  query = session->statements[0];
          ^
src/compat/db_vdb.c:2698:15: note: Assuming that condition 'session!=NULL' is not redundant
  if (session != NULL)
              ^
src/compat/db_vdb.c:2668:11: note: Null pointer dereference
  query = session->statements[0];
          ^
src/compat/db_vdb.c:2672:27: warning: Either the condition 'session!=NULL' is redundant or there is possible null pointer dereference: session. [nullPointerRedundantCheck]
  save_auto_param_count = session->parser->auto_param_count;
                          ^
src/compat/db_vdb.c:2698:15: note: Assuming that condition 'session!=NULL' is not redundant
  if (session != NULL)
              ^
src/compat/db_vdb.c:2672:27: note: Null pointer dereference
  save_auto_param_count = session->parser->auto_param_count;
                          ^
src/compat/db_vdb.c:2673:25: warning: Either the condition 'session!=NULL' is redundant or there is possible null pointer dereference: session. [nullPointerRedundantCheck]
  save_host_var_count = session->parser->host_var_count;
                        ^
src/compat/db_vdb.c:2698:15: note: Assuming that condition 'session!=NULL' is not redundant
  if (session != NULL)
              ^
src/compat/db_vdb.c:2673:25: note: Null pointer dereference
  save_host_var_count = session->parser->host_var_count;
                        ^
src/compat/db_vdb.c:2674:25: warning: Either the condition 'session!=NULL' is redundant or there is possible null pointer dereference: session. [nullPointerRedundantCheck]
  save_host_variables = session->parser->host_variables;
                        ^
src/compat/db_vdb.c:2698:15: note: Assuming that condition 'session!=NULL' is not redundant
  if (session != NULL)
              ^
src/compat/db_vdb.c:2674:25: note: Null pointer dereference
  save_host_variables = session->parser->host_variables;
                        ^
src/compat/db_vdb.c:2675:36: warning: Either the condition 'session!=NULL' is redundant or there is possible null pointer dereference: session. [nullPointerRedundantCheck]
  save_host_var_expected_domains = session->parser->host_var_expected_domains;
                                   ^
src/compat/db_vdb.c:2698:15: note: Assuming that condition 'session!=NULL' is not redundant
  if (session != NULL)
              ^
src/compat/db_vdb.c:2675:36: note: Null pointer dereference
  save_host_var_expected_domains = session->parser->host_var_expected_domains;
                                   ^
src/compat/db_vdb.c:2677:3: warning: Either the condition 'session!=NULL' is redundant or there is possible null pointer dereference: session. [nullPointerRedundantCheck]
  session->parser->host_variables = parent_parser->host_variables;
  ^
src/compat/db_vdb.c:2698:15: note: Assuming that condition 'session!=NULL' is not redundant
  if (session != NULL)
              ^
src/compat/db_vdb.c:2677:3: note: Null pointer dereference
  session->parser->host_variables = parent_parser->host_variables;
  ^
src/compat/db_vdb.c:2678:3: warning: Either the condition 'session!=NULL' is redundant or there is possible null pointer dereference: session. [nullPointerRedundantCheck]
  session->parser->host_var_expected_domains = parent_parser->host_var_expected_domains;
  ^
src/compat/db_vdb.c:2698:15: note: Assuming that condition 'session!=NULL' is not redundant
  if (session != NULL)
              ^
src/compat/db_vdb.c:2678:3: note: Null pointer dereference
  session->parser->host_var_expected_domains = parent_parser->host_var_expected_domains;
  ^
src/compat/db_vdb.c:2679:3: warning: Either the condition 'session!=NULL' is redundant or there is possible null pointer dereference: session. [nullPointerRedundantCheck]
  session->parser->host_var_count = parent_parser->host_var_count;
  ^
src/compat/db_vdb.c:2698:15: note: Assuming that condition 'session!=NULL' is not redundant
  if (session != NULL)
              ^
src/compat/db_vdb.c:2679:3: note: Null pointer dereference
  session->parser->host_var_count = parent_parser->host_var_count;
  ^
src/compat/db_vdb.c:2680:3: warning: Either the condition 'session!=NULL' is redundant or there is possible null pointer dereference: session. [nullPointerRedundantCheck]
  session->parser->auto_param_count = parent_parser->auto_param_count;
  ^
src/compat/db_vdb.c:2698:15: note: Assuming that condition 'session!=NULL' is not redundant
  if (session != NULL)
              ^
src/compat/db_vdb.c:2680:3: note: Null pointer dereference
  session->parser->auto_param_count = parent_parser->auto_param_count;
  ^
src/compat/db_vdb.c:2681:3: warning: Either the condition 'session!=NULL' is redundant or there is possible null pointer dereference: session. [nullPointerRedundantCheck]
  session->parser->set_host_var = 1;
  ^
src/compat/db_vdb.c:2698:15: note: Assuming that condition 'session!=NULL' is not redundant
  if (session != NULL)
              ^
src/compat/db_vdb.c:2681:3: note: Null pointer dereference
  session->parser->set_host_var = 1;
  ^
src/compat/db_vdb.c:2683:45: warning: Either the condition 'session!=NULL' is redundant or there is possible null pointer dereference: session. [nullPointerRedundantCheck]
  if (pt_recompile_for_limit_optimizations (session->parser, query, xasl_flag))
                                            ^
src/compat/db_vdb.c:2698:15: note: Assuming that condition 'session!=NULL' is not redundant
  if (session != NULL)
              ^
src/compat/db_vdb.c:2683:45: note: Null pointer dereference
  if (pt_recompile_for_limit_optimizations (session->parser, query, xasl_flag))
                                            ^
src/compat/db_vdb.c:2690:3: warning: Either the condition 'session!=NULL' is redundant or there is possible null pointer dereference: session. [nullPointerRedundantCheck]
  session->parser->host_variables = save_host_variables;
  ^
src/compat/db_vdb.c:2698:15: note: Assuming that condition 'session!=NULL' is not redundant
  if (session != NULL)
              ^
src/compat/db_vdb.c:2690:3: note: Null pointer dereference
  session->parser->host_variables = save_host_variables;
  ^
src/compat/db_vdb.c:2691:3: warning: Either the condition 'session!=NULL' is redundant or there is possible null pointer dereference: session. [nullPointerRedundantCheck]
  session->parser->host_var_expected_domains = save_host_var_expected_domains;
  ^
src/compat/db_vdb.c:2698:15: note: Assuming that condition 'session!=NULL' is not redundant
  if (session != NULL)
              ^
src/compat/db_vdb.c:2691:3: note: Null pointer dereference
  session->parser->host_var_expected_domains = save_host_var_expected_domains;
  ^
src/compat/db_vdb.c:2692:3: warning: Either the condition 'session!=NULL' is redundant or there is possible null pointer dereference: session. [nullPointerRedundantCheck]
  session->parser->auto_param_count = save_auto_param_count;
  ^
src/compat/db_vdb.c:2698:15: note: Assuming that condition 'session!=NULL' is not redundant
  if (session != NULL)
              ^
src/compat/db_vdb.c:2692:3: note: Null pointer dereference
  session->parser->auto_param_count = save_auto_param_count;
  ^
src/compat/db_vdb.c:2693:3: warning: Either the condition 'session!=NULL' is redundant or there is possible null pointer dereference: session. [nullPointerRedundantCheck]
  session->parser->host_var_count = save_host_var_count;
  ^
src/compat/db_vdb.c:2698:15: note: Assuming that condition 'session!=NULL' is not redundant
  if (session != NULL)
              ^
src/compat/db_vdb.c:2693:3: note: Null pointer dereference
  session->parser->host_var_count = save_host_var_count;
  ^
src/compat/db_vdb.c:2694:3: warning: Either the condition 'session!=NULL' is redundant or there is possible null pointer dereference: session. [nullPointerRedundantCheck]
  session->parser->set_host_var = 0;
  ^
src/compat/db_vdb.c:2698:15: note: Assuming that condition 'session!=NULL' is not redundant
  if (session != NULL)
              ^
src/compat/db_vdb.c:2694:3: note: Null pointer dereference
  session->parser->set_host_var = 0;
  ^
src/compat/db_vdb.c:4134:4: style: Same expression on both sides of '|'. [duplicateExpression]
   | PT_HINT_SELECT_KEY_INFO | PT_HINT_SELECT_BTREE_NODE_INFO);
   ^
src/compat/db_vdb.c:377:9: style: The scope of the variable 'fp' can be reduced. [variableScope]
  FILE *fp;
        ^
src/compat/db_vdb.c:410:14: style: The scope of the variable 'c_time_struct' can be reduced. [variableScope]
  struct tm *c_time_struct;
             ^
src/compat/db_vdb.c:1170:17: style: The scope of the variable 'hv' can be reduced. [variableScope]
  PT_HOST_VARS *hv;
                ^
src/compat/db_vdb.c:1200:17: style: The scope of the variable 'hv' can be reduced. [variableScope]
  PT_HOST_VARS *hv;
                ^
src/compat/db_vdb.c:1515:19: style: The scope of the variable 'parser' can be reduced. [variableScope]
  PARSER_CONTEXT *parser;
                  ^
src/compat/db_vdb.c:1590:13: style: The scope of the variable 'val' can be reduced. [variableScope]
  DB_VALUE *val;
            ^
src/compat/db_vdb.c:2863:12: style: The scope of the variable 'statement' can be reduced. [variableScope]
  PT_NODE *statement;
           ^
src/compat/db_vdb.c:3206:12: style: The scope of the variable 'statement' can be reduced. [variableScope]
  PT_NODE *statement;
           ^
src/compat/db_vdb.c:3252:16: style: The scope of the variable 'statement' can be reduced. [variableScope]
      PT_NODE *statement;
               ^
src/compat/db_vdb.c:3562:18: style: The scope of the variable 'specs' can be reduced. [variableScope]
  DB_QUERY_SPEC *specs;
                 ^
src/compat/db_vdb.c:3563:15: style: The scope of the variable 's' can be reduced. [variableScope]
  const char *s, *separator = " where ";
              ^
src/compat/db_vdb.c:3563:19: style: The scope of the variable 'separator' can be reduced. [variableScope]
  const char *s, *separator = " where ";
                  ^
src/compat/db_vdb.c:3564:27: style: The scope of the variable 'pred' can be reduced. [variableScope]
  char buffer[BUF_SIZE], *pred, *bufp, *newbuf;
                          ^
src/compat/db_vdb.c:3564:34: style: The scope of the variable 'bufp' can be reduced. [variableScope]
  char buffer[BUF_SIZE], *pred, *bufp, *newbuf;
                                 ^
src/compat/db_vdb.c:3566:17: style: The scope of the variable 'attributes' can be reduced. [variableScope]
  DB_ATTRIBUTE *attributes;
                ^
src/compat/db_vdb.c:3567:7: style: The scope of the variable 'len' can be reduced. [variableScope]
  int len, limit = BUF_SIZE;
      ^
src/compat/db_vdb.c:3567:12: style: The scope of the variable 'limit' can be reduced. [variableScope]
  int len, limit = BUF_SIZE;
           ^
src/compat/db_vdb.c:4022:7: style: The scope of the variable 'dimension' can be reduced. [variableScope]
  int dimension;
      ^
src/compat/db_vdb.c:939:52: style:inconclusive: Function 'db_get_next_error' argument 2 names different: declaration 'linenumber' definition 'line'. [funcArgNamesDifferent]
db_get_next_error (DB_SESSION_ERROR * errors, int *line, int *col)
                                                   ^
src/compat/dbi.h:577:79: note: Function 'db_get_next_error' argument 2 names different: declaration 'linenumber' definition 'line'.
  extern DB_SESSION_ERROR *db_get_next_error (DB_SESSION_ERROR * errors, int *linenumber, int *columnnumber);
                                                                              ^
src/compat/db_vdb.c:939:52: note: Function 'db_get_next_error' argument 2 names different: declaration 'linenumber' definition 'line'.
db_get_next_error (DB_SESSION_ERROR * errors, int *line, int *col)
                                                   ^
src/compat/db_vdb.c:939:63: style:inconclusive: Function 'db_get_next_error' argument 3 names different: declaration 'columnnumber' definition 'col'. [funcArgNamesDifferent]
db_get_next_error (DB_SESSION_ERROR * errors, int *line, int *col)
                                                              ^
src/compat/dbi.h:577:96: note: Function 'db_get_next_error' argument 3 names different: declaration 'columnnumber' definition 'col'.
  extern DB_SESSION_ERROR *db_get_next_error (DB_SESSION_ERROR * errors, int *linenumber, int *columnnumber);
                                                                                               ^
src/compat/db_vdb.c:939:63: note: Function 'db_get_next_error' argument 3 names different: declaration 'columnnumber' definition 'col'.
db_get_next_error (DB_SESSION_ERROR * errors, int *line, int *col)
                                                              ^
src/compat/db_vdb.c:999:43: style:inconclusive: Function 'db_get_next_warning' argument 1 names different: declaration 'errors' definition 'warnings'. [funcArgNamesDifferent]
db_get_next_warning (DB_SESSION_WARNING * warnings, int *line, int *col)
                                          ^
src/compat/dbi.h:581:70: note: Function 'db_get_next_warning' argument 1 names different: declaration 'errors' definition 'warnings'.
  extern DB_SESSION_ERROR *db_get_next_warning (DB_SESSION_WARNING * errors, int *linenumber, int *columnnumber);
                                                                     ^
src/compat/db_vdb.c:999:43: note: Function 'db_get_next_warning' argument 1 names different: declaration 'errors' definition 'warnings'.
db_get_next_warning (DB_SESSION_WARNING * warnings, int *line, int *col)
                                          ^
src/compat/db_vdb.c:999:58: style:inconclusive: Function 'db_get_next_warning' argument 2 names different: declaration 'linenumber' definition 'line'. [funcArgNamesDifferent]
db_get_next_warning (DB_SESSION_WARNING * warnings, int *line, int *col)
                                                         ^
src/compat/dbi.h:581:83: note: Function 'db_get_next_warning' argument 2 names different: declaration 'linenumber' definition 'line'.
  extern DB_SESSION_ERROR *db_get_next_warning (DB_SESSION_WARNING * errors, int *linenumber, int *columnnumber);
                                                                                  ^
src/compat/db_vdb.c:999:58: note: Function 'db_get_next_warning' argument 2 names different: declaration 'linenumber' definition 'line'.
db_get_next_warning (DB_SESSION_WARNING * warnings, int *line, int *col)
                                                         ^
src/compat/db_vdb.c:999:69: style:inconclusive: Function 'db_get_next_warning' argument 3 names different: declaration 'columnnumber' definition 'col'. [funcArgNamesDifferent]
db_get_next_warning (DB_SESSION_WARNING * warnings, int *line, int *col)
                                                                    ^
src/compat/dbi.h:581:100: note: Function 'db_get_next_warning' argument 3 names different: declaration 'columnnumber' definition 'col'.
  extern DB_SESSION_ERROR *db_get_next_warning (DB_SESSION_WARNING * errors, int *linenumber, int *columnnumber);
                                                                                                   ^
src/compat/db_vdb.c:999:69: note: Function 'db_get_next_warning' argument 3 names different: declaration 'columnnumber' definition 'col'.
db_get_next_warning (DB_SESSION_WARNING * warnings, int *line, int *col)
                                                                    ^
src/compat/db_vdb.c:1327:51: style:inconclusive: Function 'db_get_query_type_list' argument 2 names different: declaration 'stmt' definition 'stmt_ndx'. [funcArgNamesDifferent]
db_get_query_type_list (DB_SESSION * session, int stmt_ndx)
                                                  ^
src/compat/dbi.h:590:75: note: Function 'db_get_query_type_list' argument 2 names different: declaration 'stmt' definition 'stmt_ndx'.
  extern DB_QUERY_TYPE *db_get_query_type_list (DB_SESSION * session, int stmt);
                                                                          ^
src/compat/db_vdb.c:1327:51: note: Function 'db_get_query_type_list' argument 2 names different: declaration 'stmt' definition 'stmt_ndx'.
db_get_query_type_list (DB_SESSION * session, int stmt_ndx)
                                                  ^
src/compat/db_vdb.c:2633:49: style:inconclusive: Function 'db_check_limit_need_recompile' argument 1 names different: declaration 'parser' definition 'parent_parser'. [funcArgNamesDifferent]
db_check_limit_need_recompile (PARSER_CONTEXT * parent_parser, PT_NODE * statement, int xasl_flag)
                                                ^
src/compat/db_vdb.c:94:61: note: Function 'db_check_limit_need_recompile' argument 1 names different: declaration 'parser' definition 'parent_parser'.
static bool db_check_limit_need_recompile (PARSER_CONTEXT * parser, PT_NODE * statement, int xasl_flag);
                                                            ^
src/compat/db_vdb.c:2633:49: note: Function 'db_check_limit_need_recompile' argument 1 names different: declaration 'parser' definition 'parent_parser'.
db_check_limit_need_recompile (PARSER_CONTEXT * parent_parser, PT_NODE * statement, int xasl_flag)
                                                ^
src/compat/db_vdb.c:2892:58: style:inconclusive: Function 'db_execute_and_keep_statement' argument 2 names different: declaration 'stmt' definition 'stmt_ndx'. [funcArgNamesDifferent]
db_execute_and_keep_statement (DB_SESSION * session, int stmt_ndx, DB_QUERY_RESULT ** result)
                                                         ^
src/compat/dbi.h:618:71: note: Function 'db_execute_and_keep_statement' argument 2 names different: declaration 'stmt' definition 'stmt_ndx'.
  extern int db_execute_and_keep_statement (DB_SESSION * session, int stmt, DB_QUERY_RESULT ** result);
                                                                      ^
src/compat/db_vdb.c:2892:58: note: Function 'db_execute_and_keep_statement' argument 2 names different: declaration 'stmt' definition 'stmt_ndx'.
db_execute_and_keep_statement (DB_SESSION * session, int stmt_ndx, DB_QUERY_RESULT ** result)
                                                         ^
src/compat/db_vdb.c:2925:55: style:inconclusive: Function 'db_execute_statement_local' argument 2 names different: declaration 'stmt' definition 'stmt_ndx'. [funcArgNamesDifferent]
db_execute_statement_local (DB_SESSION * session, int stmt_ndx, DB_QUERY_RESULT ** result)
                                                      ^
src/compat/db.h:267:66: note: Function 'db_execute_statement_local' argument 2 names different: declaration 'stmt' definition 'stmt_ndx'.
extern int db_execute_statement_local (DB_SESSION * session, int stmt, DB_QUERY_RESULT ** result);
                                                                 ^
src/compat/db_vdb.c:2925:55: note: Function 'db_execute_statement_local' argument 2 names different: declaration 'stmt' definition 'stmt_ndx'.
db_execute_statement_local (DB_SESSION * session, int stmt_ndx, DB_QUERY_RESULT ** result)
                                                      ^
src/compat/db_vdb.c:2964:49: style:inconclusive: Function 'db_execute_statement' argument 2 names different: declaration 'stmt' definition 'stmt_ndx'. [funcArgNamesDifferent]
db_execute_statement (DB_SESSION * session, int stmt_ndx, DB_QUERY_RESULT ** result)
                                                ^
src/compat/dbi.h:616:62: note: Function 'db_execute_statement' argument 2 names different: declaration 'stmt' definition 'stmt_ndx'.
  extern int db_execute_statement (DB_SESSION * session, int stmt, DB_QUERY_RESULT ** result);
                                                             ^
src/compat/db_vdb.c:2964:49: note: Function 'db_execute_statement' argument 2 names different: declaration 'stmt' definition 'stmt_ndx'.
db_execute_statement (DB_SESSION * session, int stmt_ndx, DB_QUERY_RESULT ** result)
                                                ^
src/compat/db_vdb.c:3182:46: style:inconclusive: Function 'db_drop_statement' argument 2 names different: declaration 'stmt_id' definition 'stmt'. [funcArgNamesDifferent]
db_drop_statement (DB_SESSION * session, int stmt)
                                             ^
src/compat/dbi.h:630:60: note: Function 'db_drop_statement' argument 2 names different: declaration 'stmt_id' definition 'stmt'.
  extern void db_drop_statement (DB_SESSION * session, int stmt_id);
                                                           ^
src/compat/db_vdb.c:3182:46: note: Function 'db_drop_statement' argument 2 names different: declaration 'stmt_id' definition 'stmt'.
db_drop_statement (DB_SESSION * session, int stmt)
                                             ^
src/compat/db_vdb.c:3559:26: style:inconclusive: Function 'db_validate' argument 1 names different: declaration 'vclass' definition 'vc'. [funcArgNamesDifferent]
db_validate (DB_OBJECT * vc)
                         ^
src/compat/dbi.h:518:39: note: Function 'db_validate' argument 1 names different: declaration 'vclass' definition 'vc'.
  extern int db_validate (DB_OBJECT * vclass);
                                      ^
src/compat/db_vdb.c:3559:26: note: Function 'db_validate' argument 1 names different: declaration 'vclass' definition 'vc'.
db_validate (DB_OBJECT * vc)
                         ^
src/compat/db_vdb.c:3811:62: style:inconclusive: Function 'db_query_produce_updatable_result' argument 2 names different: declaration 'stmtid' definition 'stmt_ndx'. [funcArgNamesDifferent]
db_query_produce_updatable_result (DB_SESSION * session, int stmt_ndx)
                                                             ^
src/compat/dbi.h:614:75: note: Function 'db_query_produce_updatable_result' argument 2 names different: declaration 'stmtid' definition 'stmt_ndx'.
  extern int db_query_produce_updatable_result (DB_SESSION * session, int stmtid);
                                                                          ^
src/compat/db_vdb.c:3811:62: note: Function 'db_query_produce_updatable_result' argument 2 names different: declaration 'stmtid' definition 'stmt_ndx'.
db_query_produce_updatable_result (DB_SESSION * session, int stmt_ndx)
                                                             ^
src/compat/db_vdb.c:3922:66: style:inconclusive: Function 'pt_has_modified_class_helper' argument 2 names different: declaration 'tree' definition 'node'. [funcArgNamesDifferent]
pt_has_modified_class_helper (PARSER_CONTEXT * parser, PT_NODE * node, void *arg, int *continue_walk)
                                                                 ^
src/compat/db_vdb.c:97:82: note: Function 'pt_has_modified_class_helper' argument 2 names different: declaration 'tree' definition 'node'.
static PT_NODE *pt_has_modified_class_helper (PARSER_CONTEXT * parser, PT_NODE * tree, void *arg, int *continue_walk);
                                                                                 ^
src/compat/db_vdb.c:3922:66: note: Function 'pt_has_modified_class_helper' argument 2 names different: declaration 'tree' definition 'node'.
pt_has_modified_class_helper (PARSER_CONTEXT * parser, PT_NODE * node, void *arg, int *continue_walk)
                                                                 ^
src/compat/db_vdb.c:583:11: style: Local variable 'err' shadows outer variable [shadowVariable]
      int err = do_get_prepared_statement_info (session, stmt_ndx);
          ^
src/compat/db_vdb.c:504:7: note: Shadowed declaration
  int err;
      ^
src/compat/db_vdb.c:583:11: note: Shadow variable
      int err = do_get_prepared_statement_info (session, stmt_ndx);
          ^
src/compat/db_vdb.c:1118:22: style: Variable 'statement' is assigned a value that is never used. [unreadVariable]
      || !(statement = session->statements[stmt - 1]))
                     ^
src/compat/db_vdb.c:1436:28: style: Variable 'parser' is assigned a value that is never used. [unreadVariable]
  if (!session || !(parser = session->parser) || !session->statements || stmt < 1 || stmt > session->dimension
                           ^
src/compat/db_vdb.c:1465:28: style: Variable 'parser' is assigned a value that is never used. [unreadVariable]
  if (!session || !(parser = session->parser) || !session->statements || stmt < 1 || stmt > session->dimension
                           ^
src/compat/db_vdb.c:2137:15: style: Variable 'values.size' is assigned a value that is never used. [unreadVariable]
  values.size = 0;
              ^
src/compat/db_virt.c:143:16: style: The scope of the variable 'def' can be reduced. [variableScope]
  SM_TEMPLATE *def;
               ^
src/compat/db_virt.c:145:12: style: The scope of the variable 'type' can be reduced. [variableScope]
  PR_TYPE *type;
           ^
src/compat/db_virt.c:215:7: style: The scope of the variable 'retval' can be reduced. [variableScope]
  int retval;
      ^
src/compat/db_virt.c:249:14: style: The scope of the variable 'retval' can be reduced. [variableScope]
  DB_OBJECT *retval;
             ^
src/compat/db_virt.c:397:7: style: The scope of the variable 'retval' can be reduced. [variableScope]
  int retval;
      ^
src/compat/db_virt.c:461:16: style: The scope of the variable 'def' can be reduced. [variableScope]
  SM_TEMPLATE *def;
               ^
src/compat/db_virt.c:510:16: style: The scope of the variable 'def' can be reduced. [variableScope]
  SM_TEMPLATE *def;
               ^
src/compat/db_virt.c:562:16: style: The scope of the variable 'def' can be reduced. [variableScope]
  SM_TEMPLATE *def;
               ^
src/compat/db_virt.c:142:13: style: Variable 'error' is assigned a value that is never used. [unreadVariable]
  int error = NO_ERROR;
            ^
src/compat/db_virt.c:157:10: style: Variable 'error' is assigned a value that is never used. [unreadVariable]
   error = ER_SM_CLASS_WITH_PRIM_NAME;
         ^
src/compat/db_virt.c:166:14: style: Variable 'error' is assigned a value that is never used. [unreadVariable]
       error = er_errid ();
             ^
src/compat/db_virt.c:368:4: style: Variable 'error' is assigned a value that is never used. [unreadVariable]
   ERROR_SET (error, ER_WS_NO_CLASS_FOR_INSTANCE);
   ^
src/compat/db_virt.c:409:7: style: Variable 'error' is assigned a value that is never used. [unreadVariable]
      ERROR_SET (error, ER_OBJ_INVALID_ARGUMENTS);
      ^
src/compat/db_virt.c:445:7: style: Variable 'error' is assigned a value that is never used. [unreadVariable]
      ERROR_SET (error, ER_WS_NO_CLASS_FOR_INSTANCE);
      ^
src/compat/dbtype_function.i:1998:55: style:inconclusive: Function 'db_make_collection' argument 2 names different: declaration 'set' definition 'col'. [funcArgNamesDifferent]
db_make_collection (DB_VALUE * value, DB_COLLECTION * col)
                                                      ^
src/compat/dbtype_function.h:384:63: note: Function 'db_make_collection' argument 2 names different: declaration 'set' definition 'col'.
  extern int db_make_collection (DB_VALUE * value, DB_C_SET * set);
                                                              ^
src/compat/dbtype_function.i:1998:55: note: Function 'db_make_collection' argument 2 names different: declaration 'set' definition 'col'.
db_make_collection (DB_VALUE * value, DB_COLLECTION * col)
                                                      ^
src/compat/dbtype_function.i:2067:59: style:inconclusive: Function 'db_make_time' argument 3 names different: declaration 'minute' definition 'min'. [funcArgNamesDifferent]
db_make_time (DB_VALUE * value, const int hour, const int min, const int sec)
                                                          ^
src/compat/dbtype_function.h:388:72: note: Function 'db_make_time' argument 3 names different: declaration 'minute' definition 'min'.
  extern int db_make_time (DB_VALUE * value, const int hour, const int minute, const int second);
                                                                       ^
src/compat/dbtype_function.i:2067:59: note: Function 'db_make_time' argument 3 names different: declaration 'minute' definition 'min'.
db_make_time (DB_VALUE * value, const int hour, const int min, const int sec)
                                                          ^
src/compat/dbtype_function.i:2067:74: style:inconclusive: Function 'db_make_time' argument 4 names different: declaration 'second' definition 'sec'. [funcArgNamesDifferent]
db_make_time (DB_VALUE * value, const int hour, const int min, const int sec)
                                                                         ^
src/compat/dbtype_function.h:388:90: note: Function 'db_make_time' argument 4 names different: declaration 'second' definition 'sec'.
  extern int db_make_time (DB_VALUE * value, const int hour, const int minute, const int second);
                                                                                         ^
src/compat/dbtype_function.i:2067:74: note: Function 'db_make_time' argument 4 names different: declaration 'second' definition 'sec'.
db_make_time (DB_VALUE * value, const int hour, const int min, const int sec)
                                                                         ^
src/compat/dbtype_function.i:2088:43: style:inconclusive: Function 'db_make_date' argument 2 names different: declaration 'month' definition 'mon'. [funcArgNamesDifferent]
db_make_date (DB_VALUE * value, const int mon, const int day, const int year)
                                          ^
src/compat/dbtype_function.h:389:56: note: Function 'db_make_date' argument 2 names different: declaration 'month' definition 'mon'.
  extern int db_make_date (DB_VALUE * value, const int month, const int day, const int year);
                                                       ^
src/compat/dbtype_function.i:2088:43: note: Function 'db_make_date' argument 2 names different: declaration 'month' definition 'mon'.
db_make_date (DB_VALUE * value, const int mon, const int day, const int year)
                                          ^
src/connection/client_support.c:83:18: style: The scope of the variable 'entry' can be reduced. [variableScope]
  CSS_MAP_ENTRY *entry;
                 ^
src/connection/client_support.c:434:18: style: The scope of the variable 'entry' can be reduced. [variableScope]
  CSS_MAP_ENTRY *entry;
                 ^
src/connection/client_support.c:435:18: style: The scope of the variable 'rid' can be reduced. [variableScope]
  unsigned short rid;
                 ^
src/connection/connection_cl.c:381:37: warning: Result of operator '|' is always true if one operand is non-zero. Did you intend to use '&'? [badBitmaskCheck]
  conn->invalidate_snapshot = flags | NET_HEADER_FLAG_INVALIDATE_SNAPSHOT ? 1 : 0;
                                    ^
src/connection/connection_cl.c:321:18: style: The scope of the variable 'flags' can be reduced. [variableScope]
  unsigned short flags;
                 ^
src/connection/connection_cl.c:401:7: style: The scope of the variable 'type' can be reduced. [variableScope]
  int type;
      ^
src/connection/connection_cl.c:1263:9: style: The scope of the variable 'buffer' can be reduced. [variableScope]
  char *buffer;
        ^
src/connection/connection_cl.c:449:85: style:inconclusive: Function 'css_receive_request' argument 4 names different: declaration 'arg_buffer_size' definition 'buffer_size'. [funcArgNamesDifferent]
css_receive_request (CSS_CONN_ENTRY * conn, unsigned short *rid, int *request, int *buffer_size)
                                                                                    ^
src/connection/connection_cl.h:64:96: note: Function 'css_receive_request' argument 4 names different: declaration 'arg_buffer_size' definition 'buffer_size'.
extern int css_receive_request (CSS_CONN_ENTRY * conn, unsigned short *rid, int *request, int *arg_buffer_size);
                                                                                               ^
src/connection/connection_cl.c:449:85: note: Function 'css_receive_request' argument 4 names different: declaration 'arg_buffer_size' definition 'buffer_size'.
css_receive_request (CSS_CONN_ENTRY * conn, unsigned short *rid, int *request, int *buffer_size)
                                                                                    ^
src/connection/connection_cl.c:476:57: style:inconclusive: Function 'css_receive_data' argument 2 names different: declaration 'rid' definition 'req_id'. [funcArgNamesDifferent]
css_receive_data (CSS_CONN_ENTRY * conn, unsigned short req_id, char **buffer, int *buffer_size, int timeout)
                                                        ^
src/connection/connection_cl.h:63:68: note: Function 'css_receive_data' argument 2 names different: declaration 'rid' definition 'req_id'.
extern int css_receive_data (CSS_CONN_ENTRY * conn, unsigned short rid, char **buffer, int *size, int timeout);
                                                                   ^
src/connection/connection_cl.c:476:57: note: Function 'css_receive_data' argument 2 names different: declaration 'rid' definition 'req_id'.
css_receive_data (CSS_CONN_ENTRY * conn, unsigned short req_id, char **buffer, int *buffer_size, int timeout)
                                                        ^
src/connection/connection_cl.c:476:85: style:inconclusive: Function 'css_receive_data' argument 4 names different: declaration 'size' definition 'buffer_size'. [funcArgNamesDifferent]
css_receive_data (CSS_CONN_ENTRY * conn, unsigned short req_id, char **buffer, int *buffer_size, int timeout)
                                                                                    ^
src/connection/connection_cl.h:63:93: note: Function 'css_receive_data' argument 4 names different: declaration 'size' definition 'buffer_size'.
extern int css_receive_data (CSS_CONN_ENTRY * conn, unsigned short rid, char **buffer, int *size, int timeout);
                                                                                            ^
src/connection/connection_cl.c:476:85: note: Function 'css_receive_data' argument 4 names different: declaration 'size' definition 'buffer_size'.
css_receive_data (CSS_CONN_ENTRY * conn, unsigned short req_id, char **buffer, int *buffer_size, int timeout)
                                                                                    ^
src/connection/connection_less.c:44:30: style:inconclusive: Function 'css_make_eid' argument 1 names different: declaration 'host_id' definition 'entry_id'. [funcArgNamesDifferent]
css_make_eid (unsigned short entry_id, unsigned short rid)
                             ^
src/connection/connection_less.h:31:50: note: Function 'css_make_eid' argument 1 names different: declaration 'host_id' definition 'entry_id'.
extern unsigned int css_make_eid (unsigned short host_id, unsigned short rid);
                                                 ^
src/connection/connection_less.c:44:30: note: Function 'css_make_eid' argument 1 names different: declaration 'host_id' definition 'entry_id'.
css_make_eid (unsigned short entry_id, unsigned short rid)
                             ^
src/connection/connection_list_cl.c:553:37: warning: Result of operator '|' is always true if one operand is non-zero. Did you intend to use '&'? [badBitmaskCheck]
  conn->invalidate_snapshot = flags | NET_HEADER_FLAG_INVALIDATE_SNAPSHOT ? 1 : 0;
                                    ^
src/connection/connection_list_cl.c:483:15: style: The scope of the variable 'temp' can be reduced. [variableScope]
  NET_HEADER *temp;
              ^
src/connection/connection_list_cl.c:381:91: style:inconclusive: Function 'css_queue_unexpected_data_packet' argument 3 names different: declaration 'header' definition 'buffer'. [funcArgNamesDifferent]
css_queue_unexpected_data_packet (CSS_CONN_ENTRY * conn, unsigned short request_id, char *buffer, int size, int rc)
                                                                                          ^
src/connection/connection_list_cl.h:31:103: note: Function 'css_queue_unexpected_data_packet' argument 3 names different: declaration 'header' definition 'buffer'.
extern void css_queue_unexpected_data_packet (CSS_CONN_ENTRY * conn, unsigned short request_id, char *header, int size,
                                                                                                      ^
src/connection/connection_list_cl.c:381:91: note: Function 'css_queue_unexpected_data_packet' argument 3 names different: declaration 'header' definition 'buffer'.
css_queue_unexpected_data_packet (CSS_CONN_ENTRY * conn, unsigned short request_id, char *buffer, int size, int rc)
                                                                                          ^
src/connection/connection_list_cl.c:431:92: style:inconclusive: Function 'css_queue_unexpected_error_packet' argument 3 names different: declaration 'header' definition 'buffer'. [funcArgNamesDifferent]
css_queue_unexpected_error_packet (CSS_CONN_ENTRY * conn, unsigned short request_id, char *buffer, int size, int rc)
                                                                                           ^
src/connection/connection_list_cl.h:33:104: note: Function 'css_queue_unexpected_error_packet' argument 3 names different: declaration 'header' definition 'buffer'.
extern void css_queue_unexpected_error_packet (CSS_CONN_ENTRY * conn, unsigned short request_id, char *header, int size,
                                                                                                       ^
src/connection/connection_list_cl.c:431:92: note: Function 'css_queue_unexpected_error_packet' argument 3 names different: declaration 'header' definition 'buffer'.
css_queue_unexpected_error_packet (CSS_CONN_ENTRY * conn, unsigned short request_id, char *buffer, int size, int rc)
                                                                                           ^
src/connection/connection_list_sr.c:83:33: style:inconclusive: Function 'css_initialize_list' argument 1 names different: declaration 'ptr' definition 'list'. [funcArgNamesDifferent]
css_initialize_list (CSS_LIST * list, int free_count)
                                ^
src/connection/connection_list_sr.h:54:44: note: Function 'css_initialize_list' argument 1 names different: declaration 'ptr' definition 'list'.
extern int css_initialize_list (CSS_LIST * ptr, int free_count);
                                           ^
src/connection/connection_list_sr.c:83:33: note: Function 'css_initialize_list' argument 1 names different: declaration 'ptr' definition 'list'.
css_initialize_list (CSS_LIST * list, int free_count)
                                ^
src/connection/connection_list_sr.c:121:31: style:inconclusive: Function 'css_finalize_list' argument 1 names different: declaration 'ptr' definition 'list'. [funcArgNamesDifferent]
css_finalize_list (CSS_LIST * list)
                              ^
src/connection/connection_list_sr.h:55:42: note: Function 'css_finalize_list' argument 1 names different: declaration 'ptr' definition 'list'.
extern int css_finalize_list (CSS_LIST * ptr);
                                         ^
src/connection/connection_list_sr.c:121:31: note: Function 'css_finalize_list' argument 1 names different: declaration 'ptr' definition 'list'.
css_finalize_list (CSS_LIST * list)
                              ^
src/connection/connection_list_sr.c:161:26: style:inconclusive: Function 'css_add_list' argument 1 names different: declaration 'ptr' definition 'list'. [funcArgNamesDifferent]
css_add_list (CSS_LIST * list, void *item)
                         ^
src/connection/connection_list_sr.h:61:37: note: Function 'css_add_list' argument 1 names different: declaration 'ptr' definition 'list'.
extern int css_add_list (CSS_LIST * ptr, void *item);
                                    ^
src/connection/connection_list_sr.c:161:26: note: Function 'css_add_list' argument 1 names different: declaration 'ptr' definition 'list'.
css_add_list (CSS_LIST * list, void *item)
                         ^
src/connection/connection_list_sr.c:277:39: style:inconclusive: Function 'css_remove_list_from_head' argument 1 names different: declaration 'ptr' definition 'list'. [funcArgNamesDifferent]
css_remove_list_from_head (CSS_LIST * list)
                                      ^
src/connection/connection_list_sr.h:62:52: note: Function 'css_remove_list_from_head' argument 1 names different: declaration 'ptr' definition 'list'.
extern void *css_remove_list_from_head (CSS_LIST * ptr);
                                                   ^
src/connection/connection_list_sr.c:277:39: note: Function 'css_remove_list_from_head' argument 1 names different: declaration 'ptr' definition 'list'.
css_remove_list_from_head (CSS_LIST * list)
                                      ^
src/connection/connection_list_sr.c:311:31: style:inconclusive: Function 'css_traverse_list' argument 1 names different: declaration 'ptr' definition 'list'. [funcArgNamesDifferent]
css_traverse_list (CSS_LIST * list, int (*func) (void *, void *), void *arg)
                              ^
src/connection/connection_list_sr.h:63:42: note: Function 'css_traverse_list' argument 1 names different: declaration 'ptr' definition 'list'.
extern int css_traverse_list (CSS_LIST * ptr, int (*func) (void *, void *), void *arg);
                                         ^
src/connection/connection_list_sr.c:311:31: note: Function 'css_traverse_list' argument 1 names different: declaration 'ptr' definition 'list'.
css_traverse_list (CSS_LIST * list, int (*func) (void *, void *), void *arg)
                              ^
src/connection/connection_list_sr.c:148:30: style:inconclusive: Function 'css_list_isempty' argument 1 names different: declaration 'ptr' definition 'list'. [funcArgNamesDifferent]
css_list_isempty (CSS_LIST * list)
                             ^
src/connection/connection_list_sr.h:57:42: note: Function 'css_list_isempty' argument 1 names different: declaration 'ptr' definition 'list'.
extern bool css_list_isempty (CSS_LIST * ptr);
                                         ^
src/connection/connection_list_sr.c:148:30: note: Function 'css_list_isempty' argument 1 names different: declaration 'ptr' definition 'list'.
css_list_isempty (CSS_LIST * list)
                             ^
src/connection/connection_list_sr.c:206:34: style:inconclusive: Function 'css_add_list_to_head' argument 1 names different: declaration 'ptr' definition 'list'. [funcArgNamesDifferent]
css_add_list_to_head (CSS_LIST * list, void *item)
                                 ^
src/connection/connection_list_sr.h:58:45: note: Function 'css_add_list_to_head' argument 1 names different: declaration 'ptr' definition 'list'.
extern int css_add_list_to_head (CSS_LIST * ptr, void *item);
                                            ^
src/connection/connection_list_sr.c:206:34: note: Function 'css_add_list_to_head' argument 1 names different: declaration 'ptr' definition 'list'.
css_add_list_to_head (CSS_LIST * list, void *item)
                                 ^
src/connection/connection_list_sr.c:265:29: style:inconclusive: Function 'css_remove_list' argument 1 names different: declaration 'ptr' definition 'list'. [funcArgNamesDifferent]
css_remove_list (CSS_LIST * list, void *item)
                            ^
src/connection/connection_list_sr.h:59:40: note: Function 'css_remove_list' argument 1 names different: declaration 'ptr' definition 'list'.
extern int css_remove_list (CSS_LIST * ptr, void *item);
                                       ^
src/connection/connection_list_sr.c:265:29: note: Function 'css_remove_list' argument 1 names different: declaration 'ptr' definition 'list'.
css_remove_list (CSS_LIST * list, void *item)
                            ^
src/connection/connection_list_sr.c:56:28: style:inconclusive: Function 'css_check_list' argument 1 names different: declaration 'ptr' definition 'list'. [funcArgNamesDifferent]
css_check_list (CSS_LIST * list)
                           ^
src/connection/connection_list_sr.c:42:39: note: Function 'css_check_list' argument 1 names different: declaration 'ptr' definition 'list'.
static int css_check_list (CSS_LIST * ptr);
                                      ^
src/connection/connection_list_sr.c:56:28: note: Function 'css_check_list' argument 1 names different: declaration 'ptr' definition 'list'.
css_check_list (CSS_LIST * list)
                           ^
src/connection/connection_sr.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 14 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/connection/connection_sr.c:1502:37: warning: Result of operator '|' is always true if one operand is non-zero. Did you intend to use '&'? [badBitmaskCheck]
  conn->invalidate_snapshot = flags | NET_HEADER_FLAG_INVALIDATE_SNAPSHOT ? 1 : 0;
                                    ^
src/connection/connection_sr.c:2161:31: warning: Result of operator '|' is always true if one operand is non-zero. Did you intend to use '&'? [badBitmaskCheck]
  invalidate_snapshot = flags | NET_HEADER_FLAG_INVALIDATE_SNAPSHOT ? 1 : 0;
                              ^
src/connection/connection_sr.c:938:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i, r;
      ^
src/connection/connection_sr.c:938:10: style: The scope of the variable 'r' can be reduced. [variableScope]
  int i, r;
         ^
src/connection/connection_sr.c:966:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i, r;
      ^
src/connection/connection_sr.c:966:10: style: The scope of the variable 'r' can be reduced. [variableScope]
  int i, r;
         ^
src/connection/connection_sr.c:1210:7: style: The scope of the variable 'r' can be reduced. [variableScope]
  int r;
      ^
src/connection/connection_sr.c:1240:7: style: The scope of the variable 'r' can be reduced. [variableScope]
  int r;
      ^
src/connection/connection_sr.c:1336:7: style: The scope of the variable 'r' can be reduced. [variableScope]
  int r;
      ^
src/connection/connection_sr.c:1811:9: style: The scope of the variable 'p' can be reduced. [variableScope]
  char *p;
        ^
src/connection/connection_sr.c:2558:15: style: The scope of the variable 'buffer' can be reduced. [variableScope]
  NET_HEADER *buffer;
              ^
src/connection/connection_sr.c:2657:25: style: The scope of the variable 'data_wait' can be reduced. [variableScope]
  CSS_WAIT_QUEUE_ENTRY *data_wait;
                        ^
src/connection/connection_sr.c:922:45: style:inconclusive: Function 'css_print_conn_entry_info' argument 1 names different: declaration 'p' definition 'conn'. [funcArgNamesDifferent]
css_print_conn_entry_info (CSS_CONN_ENTRY * conn)
                                            ^
src/connection/connection_sr.h:156:57: note: Function 'css_print_conn_entry_info' argument 1 names different: declaration 'p' definition 'conn'.
extern void css_print_conn_entry_info (CSS_CONN_ENTRY * p);
                                                        ^
src/connection/connection_sr.c:922:45: note: Function 'css_print_conn_entry_info' argument 1 names different: declaration 'p' definition 'conn'.
css_print_conn_entry_info (CSS_CONN_ENTRY * conn)
                                            ^
src/connection/connection_sr.c:1267:59: style:inconclusive: Function 'css_get_session_ids_for_active_connections' argument 1 names different: declaration 'ids' definition 'session_ids'. [funcArgNamesDifferent]
css_get_session_ids_for_active_connections (SESSION_ID ** session_ids, int *count)
                                                          ^
src/connection/connection_sr.h:165:70: note: Function 'css_get_session_ids_for_active_connections' argument 1 names different: declaration 'ids' definition 'session_ids'.
extern int css_get_session_ids_for_active_connections (SESSION_ID ** ids, int *count);
                                                                     ^
src/connection/connection_sr.c:1267:59: note: Function 'css_get_session_ids_for_active_connections' argument 1 names different: declaration 'ids' definition 'session_ids'.
css_get_session_ids_for_active_connections (SESSION_ID ** session_ids, int *count)
                                                          ^
src/connection/connection_sr.c:2297:53: style:inconclusive: Function 'css_queue_data_packet' argument 4 names different: declaration 'wait_thrd' definition 'wake_thrd'. [funcArgNamesDifferent]
         const NET_HEADER * header, THREAD_ENTRY ** wake_thrd)
                                                    ^
src/connection/connection_sr.c:200:24: note: Function 'css_queue_data_packet' argument 4 names different: declaration 'wait_thrd' definition 'wake_thrd'.
       THREAD_ENTRY ** wait_thrd);
                       ^
src/connection/connection_sr.c:2297:53: note: Function 'css_queue_data_packet' argument 4 names different: declaration 'wait_thrd' definition 'wake_thrd'.
         const NET_HEADER * header, THREAD_ENTRY ** wake_thrd)
                                                    ^
src/connection/connection_sr.c:2755:9: style: Local variable 'r' shadows outer variable [shadowVariable]
    int r;
        ^
src/connection/connection_sr.c:2659:7: note: Shadowed declaration
  int r;
      ^
src/connection/connection_sr.c:2755:9: note: Shadow variable
    int r;
        ^
src/connection/connection_sr.c:2358:12: style: Variable 'last' is assigned a value that is never used. [unreadVariable]
      last = thrd;
           ^
src/connection/connection_support.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 17 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/connection/connection_support.c:2546:24: warning: Either the condition 'access_status_array!=NULL' is redundant or there is possible null pointer dereference: access_status_array. [nullPointerRedundantCheck]
  LAST_ACCESS_STATUS **access_status_array = NULL;
                       ^
src/connection/connection_support.c:2613:27: note: Assuming that condition 'access_status_array!=NULL' is not redundant
  if (access_status_array != NULL)
                          ^
src/connection/connection_support.c:2546:24: note: Null pointer dereference
  LAST_ACCESS_STATUS **access_status_array = NULL;
                       ^
src/connection/connection_support.c:178:14: style: The scope of the variable 'pid' can be reduced. [variableScope]
  static int pid;
             ^
src/connection/connection_support.c:492:7: style: The scope of the variable 'nbytes' can be reduced. [variableScope]
  int nbytes, buf_size;
      ^
src/connection/connection_support.c:1510:88: style:inconclusive: Function 'css_send_request_with_data_buffer' argument 3 names different: declaration 'rid' definition 'request_id'. [funcArgNamesDifferent]
css_send_request_with_data_buffer (CSS_CONN_ENTRY * conn, int request, unsigned short *request_id,
                                                                                       ^
src/connection/connection_support.h:63:99: note: Function 'css_send_request_with_data_buffer' argument 3 names different: declaration 'rid' definition 'request_id'.
extern int css_send_request_with_data_buffer (CSS_CONN_ENTRY * conn, int request, unsigned short *rid,
                                                                                                  ^
src/connection/connection_support.c:1510:88: note: Function 'css_send_request_with_data_buffer' argument 3 names different: declaration 'rid' definition 'request_id'.
css_send_request_with_data_buffer (CSS_CONN_ENTRY * conn, int request, unsigned short *request_id,
                                                                                       ^
src/connection/connection_support.c:1511:36: style:inconclusive: Function 'css_send_request_with_data_buffer' argument 5 names different: declaration 'arg_buffer_size' definition 'arg_size'. [funcArgNamesDifferent]
       const char *arg_buffer, int arg_size, char *reply_buffer, int reply_size)
                                   ^
src/connection/connection_support.h:64:40: note: Function 'css_send_request_with_data_buffer' argument 5 names different: declaration 'arg_buffer_size' definition 'arg_size'.
           const char *arg_buffer, int arg_buffer_size, char *data_buffer,
                                       ^
src/connection/connection_support.c:1511:36: note: Function 'css_send_request_with_data_buffer' argument 5 names different: declaration 'arg_buffer_size' definition 'arg_size'.
       const char *arg_buffer, int arg_size, char *reply_buffer, int reply_size)
                                   ^
src/connection/connection_support.c:1511:52: style:inconclusive: Function 'css_send_request_with_data_buffer' argument 6 names different: declaration 'data_buffer' definition 'reply_buffer'. [funcArgNamesDifferent]
       const char *arg_buffer, int arg_size, char *reply_buffer, int reply_size)
                                                   ^
src/connection/connection_support.h:64:63: note: Function 'css_send_request_with_data_buffer' argument 6 names different: declaration 'data_buffer' definition 'reply_buffer'.
           const char *arg_buffer, int arg_buffer_size, char *data_buffer,
                                                              ^
src/connection/connection_support.c:1511:52: note: Function 'css_send_request_with_data_buffer' argument 6 names different: declaration 'data_buffer' definition 'reply_buffer'.
       const char *arg_buffer, int arg_size, char *reply_buffer, int reply_size)
                                                   ^
src/connection/connection_support.c:1511:70: style:inconclusive: Function 'css_send_request_with_data_buffer' argument 7 names different: declaration 'data_buffer_size' definition 'reply_size'. [funcArgNamesDifferent]
       const char *arg_buffer, int arg_size, char *reply_buffer, int reply_size)
                                                                     ^
src/connection/connection_support.h:65:16: note: Function 'css_send_request_with_data_buffer' argument 7 names different: declaration 'data_buffer_size' definition 'reply_size'.
           int data_buffer_size);
               ^
src/connection/connection_support.c:1511:70: note: Function 'css_send_request_with_data_buffer' argument 7 names different: declaration 'data_buffer_size' definition 'reply_size'.
       const char *arg_buffer, int arg_size, char *reply_buffer, int reply_size)
                                                                     ^
src/connection/connection_support.c:1803:46: style:inconclusive: Function 'css_send_request' argument 2 names different: declaration 'request' definition 'command'. [funcArgNamesDifferent]
css_send_request (CSS_CONN_ENTRY * conn, int command, unsigned short *request_id, const char *arg_buffer,
                                             ^
src/connection/connection_support.h:83:57: note: Function 'css_send_request' argument 2 names different: declaration 'request' definition 'command'.
extern int css_send_request (CSS_CONN_ENTRY * conn, int request, unsigned short *rid, const char *arg_buffer,
                                                        ^
src/connection/connection_support.c:1803:46: note: Function 'css_send_request' argument 2 names different: declaration 'request' definition 'command'.
css_send_request (CSS_CONN_ENTRY * conn, int command, unsigned short *request_id, const char *arg_buffer,
                                             ^
src/connection/connection_support.c:1803:71: style:inconclusive: Function 'css_send_request' argument 3 names different: declaration 'rid' definition 'request_id'. [funcArgNamesDifferent]
css_send_request (CSS_CONN_ENTRY * conn, int command, unsigned short *request_id, const char *arg_buffer,
                                                                      ^
src/connection/connection_support.h:83:82: note: Function 'css_send_request' argument 3 names different: declaration 'rid' definition 'request_id'.
extern int css_send_request (CSS_CONN_ENTRY * conn, int request, unsigned short *rid, const char *arg_buffer,
                                                                                 ^
src/connection/connection_support.c:1803:71: note: Function 'css_send_request' argument 3 names different: declaration 'rid' definition 'request_id'.
css_send_request (CSS_CONN_ENTRY * conn, int command, unsigned short *request_id, const char *arg_buffer,
                                                                      ^
src/connection/connection_support.c:652:14: style: The scope of the variable 'nwritten' can be reduced. [variableScope]
  int nleft, nwritten;
             ^
src/connection/connection_support.c:1349:14: style: The scope of the variable 'buffer_size' can be reduced. [variableScope]
  int rc, i, buffer_size;
             ^
src/connection/connection_support.c:1403:14: style: The scope of the variable 'buffer_size' can be reduced. [variableScope]
  int rc, i, buffer_size;
             ^
src/connection/heartbeat.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 13 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/connection/heartbeat.c:259:3: error: Code 'cuberr::context' is invalid C code. Use --std or --language to configure the language. [syntaxError]
  cuberr::context er_context (true);
  ^
src/connection/heartbeat.c:153:7: style: The scope of the variable 'nbytes' can be reduced. [variableScope]
  int nbytes;
      ^
src/connection/heartbeat.c:180:7: style: The scope of the variable 'nbytes' can be reduced. [variableScope]
  int nbytes;
      ^
src/connection/heartbeat.c:204:7: style: The scope of the variable 'nbytes' can be reduced. [variableScope]
  int nbytes;
      ^
src/connection/heartbeat.c:232:7: style: The scope of the variable 'nbytes' can be reduced. [variableScope]
  int nbytes;
      ^
src/connection/heartbeat.c:514:8: style: The scope of the variable 'pid_string' can be reduced. [variableScope]
  char pid_string[16];
       ^
src/connection/heartbeat.c:515:7: style: The scope of the variable 'n_len' can be reduced. [variableScope]
  int n_len, l_len, r_len, e_len, p_len;
      ^
src/connection/heartbeat.c:515:14: style: The scope of the variable 'l_len' can be reduced. [variableScope]
  int n_len, l_len, r_len, e_len, p_len;
             ^
src/connection/heartbeat.c:515:21: style: The scope of the variable 'r_len' can be reduced. [variableScope]
  int n_len, l_len, r_len, e_len, p_len;
                    ^
src/connection/heartbeat.c:515:28: style: The scope of the variable 'e_len' can be reduced. [variableScope]
  int n_len, l_len, r_len, e_len, p_len;
                           ^
src/connection/heartbeat.c:515:35: style: The scope of the variable 'p_len' can be reduced. [variableScope]
  int n_len, l_len, r_len, e_len, p_len;
                                  ^
src/connection/server_support.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/connection/server_support.c:137:1: error: Code 'classcss_server_task:' is invalid C code. Use --std or --language to configure the language. [syntaxError]
class css_server_task : public cubthread::entry_task
^
src/connection/tcp.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 26 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/connection/tcp.c:116:15: style: Checking if unsigned expression 'namelen' is less than zero. [unsignedLessThanZero]
  if (namelen <= 0)
              ^
src/connection/tcp.c:967:32: style:inconclusive: Function 'css_tcp_master_datagram' argument 1 names different: declaration 'pathname' definition 'path_name'. [funcArgNamesDifferent]
css_tcp_master_datagram (char *path_name, SOCKET * sockfd)
                               ^
src/connection/tcp.h:48:44: note: Function 'css_tcp_master_datagram' argument 1 names different: declaration 'pathname' definition 'path_name'.
extern bool css_tcp_master_datagram (char *pathname, SOCKET * sockfd);
                                           ^
src/connection/tcp.c:967:32: note: Function 'css_tcp_master_datagram' argument 1 names different: declaration 'pathname' definition 'path_name'.
css_tcp_master_datagram (char *path_name, SOCKET * sockfd)
                               ^
src/connection/tcp.c:1122:93: style:inconclusive: Function 'css_transfer_fd' argument 4 names different: declaration 'request' definition 'request_for_server'. [funcArgNamesDifferent]
css_transfer_fd (SOCKET server_fd, SOCKET client_fd, unsigned short rid, CSS_SERVER_REQUEST request_for_server)
                                                                                            ^
src/connection/tcp.h:51:105: note: Function 'css_transfer_fd' argument 4 names different: declaration 'request' definition 'request_for_server'.
extern bool css_transfer_fd (SOCKET server_fd, SOCKET client_fd, unsigned short rid, CSS_SERVER_REQUEST request);
                                                                                                        ^
src/connection/tcp.c:1122:93: note: Function 'css_transfer_fd' argument 4 names different: declaration 'request' definition 'request_for_server'.
css_transfer_fd (SOCKET server_fd, SOCKET client_fd, unsigned short rid, CSS_SERVER_REQUEST request_for_server)
                                                                                            ^
src/connection/tcp.c:371:9: style: Variable 'r' is assigned a value that is never used. [unreadVariable]
      r = pthread_mutex_lock (&gethostbyname_lock);
        ^
src/connection/tcp.c:1377:16: style: The scope of the variable 'icmp' can be reduced. [variableScope]
  struct icmp *icmp;
               ^
src/connection/tcp.c:1383:18: style: The scope of the variable 'n' can be reduced. [variableScope]
  int size, seq, n, hlen;
                 ^
src/connection/tcp.c:1384:10: style: The scope of the variable 'plen' can be reduced. [variableScope]
  size_t plen;
         ^
src/connection/wintcp.c:189:19: style: The scope of the variable 'dest_host' can be reduced. [variableScope]
  struct hostent *dest_host;
                  ^
src/connection/wintcp.c:164:34: style:inconclusive: Function 'css_tcp_client_open' argument 1 names different: declaration 'hostname' definition 'host_name'. [funcArgNamesDifferent]
css_tcp_client_open (const char *host_name, int port)
                                 ^
src/connection/wintcp.h:53:48: note: Function 'css_tcp_client_open' argument 1 names different: declaration 'hostname' definition 'host_name'.
extern SOCKET css_tcp_client_open (const char *hostname, int port);
                                               ^
src/connection/wintcp.c:164:34: note: Function 'css_tcp_client_open' argument 1 names different: declaration 'hostname' definition 'host_name'.
css_tcp_client_open (const char *host_name, int port)
                                 ^
src/connection/wintcp.c:184:45: style:inconclusive: Function 'css_tcp_client_open_with_retry' argument 1 names different: declaration 'hostname' definition 'host_name'. [funcArgNamesDifferent]
css_tcp_client_open_with_retry (const char *host_name, int port, bool will_retry)
                                            ^
src/connection/wintcp.h:54:59: note: Function 'css_tcp_client_open_with_retry' argument 1 names different: declaration 'hostname' definition 'host_name'.
extern SOCKET css_tcp_client_open_with_retry (const char *hostname, int port, bool willretry);
                                                          ^
src/connection/wintcp.c:184:45: note: Function 'css_tcp_client_open_with_retry' argument 1 names different: declaration 'hostname' definition 'host_name'.
css_tcp_client_open_with_retry (const char *host_name, int port, bool will_retry)
                                            ^
src/connection/wintcp.c:184:71: style:inconclusive: Function 'css_tcp_client_open_with_retry' argument 3 names different: declaration 'willretry' definition 'will_retry'. [funcArgNamesDifferent]
css_tcp_client_open_with_retry (const char *host_name, int port, bool will_retry)
                                                                      ^
src/connection/wintcp.h:54:84: note: Function 'css_tcp_client_open_with_retry' argument 3 names different: declaration 'willretry' definition 'will_retry'.
extern SOCKET css_tcp_client_open_with_retry (const char *hostname, int port, bool willretry);
                                                                                   ^
src/connection/wintcp.c:184:71: note: Function 'css_tcp_client_open_with_retry' argument 3 names different: declaration 'willretry' definition 'will_retry'.
css_tcp_client_open_with_retry (const char *host_name, int port, bool will_retry)
                                                                      ^
src/connection/wintcp.c:152:11: style: Variable 'err' is assigned a value that is never used. [unreadVariable]
      err = WSACleanup ();
          ^
src/connection/wintcp.c:333:28: style: Checking if unsigned expression 'css_fd_error(fd)' is less than zero. [unsignedLessThanZero]
      || css_fd_error (fd) <= 0)
                           ^
src/executables/checksumdb.c:1176:27: style: Array index 'i' is used before limits check. [arrayIndexThenCheck]
      for (i = 0; pk_attrs[i] != NULL && i < col_cnt; i++)
                          ^
src/executables/checksumdb.c:1285:19: warning: Either the condition 'pos!=NULL' is redundant or there is pointer arithmetic with NULL pointer. [nullPointerArithmeticRedundantCheck]
      start = pos + 1;
                  ^
src/executables/checksumdb.c:1268:18: note: Assuming that condition 'pos!=NULL' is not redundant
      while (pos != NULL && pos < end && (*pos) != '\'')
                 ^
src/executables/checksumdb.c:1285:19: note: Null pointer addition
      start = pos + 1;
                  ^
src/executables/checksumdb.c:1533:11: style: Variable 'res' is reassigned a value before the old one has been used. [redundantAssignment]
      res = db_execute (query, &query_result, &query_error);
          ^
src/executables/checksumdb.c:1511:12: note: res is assigned
       res = error;
           ^
src/executables/checksumdb.c:1533:11: note: res is overwritten
      res = db_execute (query, &query_result, &query_error);
          ^
src/executables/checksumdb.c:1533:11: style: Variable 'res' is reassigned a value before the old one has been used. [redundantAssignment]
      res = db_execute (query, &query_result, &query_error);
          ^
src/executables/checksumdb.c:1521:8: note: res is assigned
   res = ER_FAILED;
       ^
src/executables/checksumdb.c:1533:11: note: res is overwritten
      res = db_execute (query, &query_result, &query_error);
          ^
src/executables/checksumdb.c:218:16: style: The scope of the variable 'out_val_idx' can be reduced. [variableScope]
      int pos, out_val_idx;
               ^
src/executables/checksumdb.c:339:16: style: The scope of the variable 'out_val_idx' can be reduced. [variableScope]
      int pos, out_val_idx;
               ^
src/executables/checksumdb.c:403:7: style: The scope of the variable 'num_chunks' can be reduced. [variableScope]
  int num_chunks;
      ^
src/executables/checksumdb.c:423:16: style: The scope of the variable 'error' can be reduced. [variableScope]
      int pos, error, out_val_idx;
               ^
src/executables/checksumdb.c:423:23: style: The scope of the variable 'out_val_idx' can be reduced. [variableScope]
      int pos, error, out_val_idx;
                      ^
src/executables/checksumdb.c:825:11: style: The scope of the variable 'out_val_idx' can be reduced. [variableScope]
      int out_val_idx;
          ^
src/executables/checksumdb.c:1313:8: style: The scope of the variable 'err_msg' can be reduced. [variableScope]
  char err_msg[LINE_MAX];
       ^
src/executables/checksumdb.c:1316:12: style: The scope of the variable 'i' can be reduced. [variableScope]
  int res, i;
           ^
src/executables/checksumdb.c:1486:7: style: The scope of the variable 'master_checksum' can be reduced. [variableScope]
  int master_checksum = 0;
      ^
src/executables/checksumdb.c:1488:12: style: The scope of the variable 'error' can be reduced. [variableScope]
  int res, error;
           ^
src/executables/checksumdb.c:1489:8: style: The scope of the variable 'err_msg' can be reduced. [variableScope]
  char err_msg[LINE_MAX];
       ^
src/executables/checksumdb.c:2292:1: style: Label 'error_exit' is not used. There is #if in function body so the label might be used in code that is removed by the preprocessor. [unusedLabelConfiguration]
error_exit:
^
src/executables/checksumdb.c:2068:33: style:inconclusive: Function 'checksumdb' argument 1 names different: declaration 'arg_map' definition 'arg'. [funcArgNamesDifferent]
checksumdb (UTIL_FUNCTION_ARG * arg)
                                ^
src/executables/utility.h:1748:46: note: Function 'checksumdb' argument 1 names different: declaration 'arg_map' definition 'arg'.
  extern int checksumdb (UTIL_FUNCTION_ARG * arg_map);
                                             ^
src/executables/checksumdb.c:2068:33: note: Function 'checksumdb' argument 1 names different: declaration 'arg_map' definition 'arg'.
checksumdb (UTIL_FUNCTION_ARG * arg)
                                ^
src/executables/checksumdb.c:423:16: style: Local variable 'error' shadows outer variable [shadowVariable]
      int pos, error, out_val_idx;
               ^
src/executables/checksumdb.c:404:12: note: Shadowed declaration
  int res, error = NO_ERROR;
           ^
src/executables/checksumdb.c:423:16: note: Shadow variable
      int pos, error, out_val_idx;
               ^
src/executables/checksumdb.c:837:12: style: Variable 'res' is assigned a value that is never used. [unreadVariable]
       res = ER_OUT_OF_VIRTUAL_MEMORY;
           ^
src/executables/checksumdb.c:1258:14: style: Variable 'length' is assigned a value that is never used. [unreadVariable]
  int length = 0;
             ^
src/executables/commdb.c:498:8: style: The scope of the variable 'search_pattern' can be reduced. [variableScope]
  char search_pattern[256];
       ^
src/executables/commdb.c:1074:7: style: The scope of the variable 'pid' can be reduced. [variableScope]
  int pid;
      ^
src/executables/commdb.c:360:21: style: Variable 'requests_serviced' is assigned a value that is never used. [unreadVariable]
  requests_serviced = return_integer_data (conn, rid2);
                    ^
src/executables/commdb.c:554:7: style: Condition 'size' is always false [knownConditionTrueFalse]
  if (size)
      ^
src/executables/commdb.c:544:14: note: Assignment 'size=0', assigned value is 0
  int size = 0;
             ^
src/executables/commdb.c:554:7: note: Condition 'size' is always false
  if (size)
      ^
src/executables/commdb.c:559:20: style: Condition 'reply_buffer!=NULL' is always false [knownConditionTrueFalse]
  if (reply_buffer != NULL)
                   ^
src/executables/commdb.c:543:24: note: Assignment 'reply_buffer=NULL', assigned value is 0
  char *reply_buffer = NULL;
                       ^
src/executables/commdb.c:559:20: note: Condition 'reply_buffer!=NULL' is always false
  if (reply_buffer != NULL)
                   ^
src/executables/commdb.c:585:7: style: Condition 'size' is always false [knownConditionTrueFalse]
  if (size)
      ^
src/executables/commdb.c:575:14: note: Assignment 'size=0', assigned value is 0
  int size = 0;
             ^
src/executables/commdb.c:585:7: note: Condition 'size' is always false
  if (size)
      ^
src/executables/commdb.c:590:20: style: Condition 'reply_buffer!=NULL' is always false [knownConditionTrueFalse]
  if (reply_buffer != NULL)
                   ^
src/executables/commdb.c:574:24: note: Assignment 'reply_buffer=NULL', assigned value is 0
  char *reply_buffer = NULL;
                       ^
src/executables/commdb.c:590:20: note: Condition 'reply_buffer!=NULL' is always false
  if (reply_buffer != NULL)
                   ^
src/executables/commdb.c:620:20: style: Condition 'reply_buffer!=NULL' is always false [knownConditionTrueFalse]
  if (reply_buffer != NULL)
                   ^
src/executables/commdb.c:604:24: note: Assignment 'reply_buffer=NULL', assigned value is 0
  char *reply_buffer = NULL;
                       ^
src/executables/commdb.c:620:20: note: Condition 'reply_buffer!=NULL' is always false
  if (reply_buffer != NULL)
                   ^
src/executables/commdb.c:650:20: style: Condition 'reply_buffer!=NULL' is always false [knownConditionTrueFalse]
  if (reply_buffer != NULL)
                   ^
src/executables/commdb.c:634:24: note: Assignment 'reply_buffer=NULL', assigned value is 0
  char *reply_buffer = NULL;
                       ^
src/executables/commdb.c:650:20: note: Condition 'reply_buffer!=NULL' is always false
  if (reply_buffer != NULL)
                   ^
src/executables/commdb.c:675:7: style: Condition 'size' is always false [knownConditionTrueFalse]
  if (size)
      ^
src/executables/commdb.c:665:14: note: Assignment 'size=0', assigned value is 0
  int size = 0;
             ^
src/executables/commdb.c:675:7: note: Condition 'size' is always false
  if (size)
      ^
src/executables/commdb.c:680:20: style: Condition 'reply_buffer!=NULL' is always false [knownConditionTrueFalse]
  if (reply_buffer != NULL)
                   ^
src/executables/commdb.c:664:24: note: Assignment 'reply_buffer=NULL', assigned value is 0
  char *reply_buffer = NULL;
                       ^
src/executables/commdb.c:680:20: note: Condition 'reply_buffer!=NULL' is always false
  if (reply_buffer != NULL)
                   ^
src/executables/commdb.c:836:20: style: Condition 'reply_buffer!=NULL' is always false [knownConditionTrueFalse]
  if (reply_buffer != NULL)
                   ^
src/executables/commdb.c:814:24: note: Assignment 'reply_buffer=NULL', assigned value is 0
  char *reply_buffer = NULL;
                       ^
src/executables/commdb.c:836:20: note: Condition 'reply_buffer!=NULL' is always false
  if (reply_buffer != NULL)
                   ^
src/executables/commdb.c:880:24: style: Condition 'msg_reply_buffer!=NULL' is always false [knownConditionTrueFalse]
  if (msg_reply_buffer != NULL)
                       ^
src/executables/commdb.c:853:28: note: Assignment 'msg_reply_buffer=NULL', assigned value is 0
  char *msg_reply_buffer = NULL;
                           ^
src/executables/commdb.c:880:24: note: Condition 'msg_reply_buffer!=NULL' is always false
  if (msg_reply_buffer != NULL)
                       ^
src/executables/commdb.c:885:27: style: Condition 'result_reply_buffer!=NULL' is always false [knownConditionTrueFalse]
  if (result_reply_buffer != NULL)
                          ^
src/executables/commdb.c:854:31: note: Assignment 'result_reply_buffer=NULL', assigned value is 0
  char *result_reply_buffer = NULL;
                              ^
src/executables/commdb.c:880:24: note: Assuming condition is false
  if (msg_reply_buffer != NULL)
                       ^
src/executables/commdb.c:885:27: note: Condition 'result_reply_buffer!=NULL' is always false
  if (result_reply_buffer != NULL)
                          ^
src/executables/commdb.c:916:20: style: Condition 'reply_buffer!=NULL' is always false [knownConditionTrueFalse]
  if (reply_buffer != NULL)
                   ^
src/executables/commdb.c:896:24: note: Assignment 'reply_buffer=NULL', assigned value is 0
  char *reply_buffer = NULL;
                       ^
src/executables/commdb.c:916:20: note: Condition 'reply_buffer!=NULL' is always false
  if (reply_buffer != NULL)
                   ^
src/executables/commdb.c:948:20: style: Condition 'reply_buffer!=NULL' is always false [knownConditionTrueFalse]
  if (reply_buffer != NULL)
                   ^
src/executables/commdb.c:928:24: note: Assignment 'reply_buffer=NULL', assigned value is 0
  char *reply_buffer = NULL;
                       ^
src/executables/commdb.c:948:20: note: Condition 'reply_buffer!=NULL' is always false
  if (reply_buffer != NULL)
                   ^
src/executables/commdb.c:981:20: style: Condition 'reply_buffer!=NULL' is always false [knownConditionTrueFalse]
  if (reply_buffer != NULL)
                   ^
src/executables/commdb.c:960:24: note: Assignment 'reply_buffer=NULL', assigned value is 0
  char *reply_buffer = NULL;
                       ^
src/executables/commdb.c:981:20: note: Condition 'reply_buffer!=NULL' is always false
  if (reply_buffer != NULL)
                   ^
src/executables/commdb.c:1018:20: style: Condition 'reply_buffer!=NULL' is always false [knownConditionTrueFalse]
  if (reply_buffer != NULL)
                   ^
src/executables/commdb.c:998:24: note: Assignment 'reply_buffer=NULL', assigned value is 0
  char *reply_buffer = NULL;
                       ^
src/executables/commdb.c:1018:20: note: Condition 'reply_buffer!=NULL' is always false
  if (reply_buffer != NULL)
                   ^
src/executables/commdb.c:615:12: style: The comparison 'size > 0' is always false. [knownConditionTrueFalse]
  if (size > 0 && reply_buffer[0] != '\0')
           ^
src/executables/commdb.c:605:14: note: 'size' is assigned value '0' here.
  int size = 0;
             ^
src/executables/commdb.c:615:12: note: The comparison 'size > 0' is always false.
  if (size > 0 && reply_buffer[0] != '\0')
           ^
src/executables/commdb.c:645:12: style: The comparison 'size > 0' is always false. [knownConditionTrueFalse]
  if (size > 0 && reply_buffer[0] != '\0')
           ^
src/executables/commdb.c:635:14: note: 'size' is assigned value '0' here.
  int size = 0;
             ^
src/executables/commdb.c:645:12: note: The comparison 'size > 0' is always false.
  if (size > 0 && reply_buffer[0] != '\0')
           ^
src/executables/commdb.c:826:12: style: The comparison 'size > 0' is always false. [knownConditionTrueFalse]
  if (size > 0 && reply_buffer[0] != '\0')
           ^
src/executables/commdb.c:815:14: note: 'size' is assigned value '0' here.
  int size = 0;
             ^
src/executables/commdb.c:826:12: note: The comparison 'size > 0' is always false.
  if (size > 0 && reply_buffer[0] != '\0')
           ^
src/executables/commdb.c:871:12: style: The comparison 'size > 0' is always false. [knownConditionTrueFalse]
  if (size > 0 && strcmp (result_reply_buffer, HA_REQUEST_SUCCESS) == 0)
           ^
src/executables/commdb.c:855:14: note: 'size' is assigned value '0' here.
  int size = 0;
             ^
src/executables/commdb.c:871:12: note: The comparison 'size > 0' is always false.
  if (size > 0 && strcmp (result_reply_buffer, HA_REQUEST_SUCCESS) == 0)
           ^
src/executables/commdb.c:907:12: style: The comparison 'size > 0' is always false. [knownConditionTrueFalse]
  if (size > 0 && strcmp (reply_buffer, HA_REQUEST_SUCCESS) == 0)
           ^
src/executables/commdb.c:897:14: note: 'size' is assigned value '0' here.
  int size = 0;
             ^
src/executables/commdb.c:907:12: note: The comparison 'size > 0' is always false.
  if (size > 0 && strcmp (reply_buffer, HA_REQUEST_SUCCESS) == 0)
           ^
src/executables/commdb.c:939:12: style: The comparison 'size > 0' is always false. [knownConditionTrueFalse]
  if (size > 0 && strcmp (reply_buffer, HA_REQUEST_SUCCESS) == 0)
           ^
src/executables/commdb.c:929:14: note: 'size' is assigned value '0' here.
  int size = 0;
             ^
src/executables/commdb.c:939:12: note: The comparison 'size > 0' is always false.
  if (size > 0 && strcmp (reply_buffer, HA_REQUEST_SUCCESS) == 0)
           ^
src/executables/commdb.c:972:12: style: The comparison 'size > 0' is always false. [knownConditionTrueFalse]
  if (size > 0 && strcmp (reply_buffer, HA_REQUEST_SUCCESS) == 0)
           ^
src/executables/commdb.c:961:14: note: 'size' is assigned value '0' here.
  int size = 0;
             ^
src/executables/commdb.c:972:12: note: The comparison 'size > 0' is always false.
  if (size > 0 && strcmp (reply_buffer, HA_REQUEST_SUCCESS) == 0)
           ^
src/executables/commdb.c:1009:12: style: The comparison 'size > 0' is always false. [knownConditionTrueFalse]
  if (size > 0 && strcmp (reply_buffer, HA_REQUEST_SUCCESS) == 0)
           ^
src/executables/commdb.c:999:14: note: 'size' is assigned value '0' here.
  int size = 0;
             ^
src/executables/commdb.c:1009:12: note: The comparison 'size > 0' is always false.
  if (size > 0 && strcmp (reply_buffer, HA_REQUEST_SUCCESS) == 0)
           ^
src/executables/compactdb.c:658:7: style: The scope of the variable 'save_newsize' can be reduced. [variableScope]
  int save_newsize;
      ^
src/executables/compactdb.c:98:32: style:inconclusive: Function 'compactdb' argument 1 names different: declaration 'arg_map' definition 'arg'. [funcArgNamesDifferent]
compactdb (UTIL_FUNCTION_ARG * arg)
                               ^
src/executables/utility.h:1699:45: note: Function 'compactdb' argument 1 names different: declaration 'arg_map' definition 'arg'.
  extern int compactdb (UTIL_FUNCTION_ARG * arg_map);
                                            ^
src/executables/compactdb.c:98:32: note: Function 'compactdb' argument 1 names different: declaration 'arg_map' definition 'arg'.
compactdb (UTIL_FUNCTION_ARG * arg)
                               ^
src/executables/compactdb.c:175:66: style:inconclusive: Function 'compactdb_start' argument 3 names different: declaration 'input_class_name' definition 'input_class_names'. [funcArgNamesDifferent]
compactdb_start (bool verbose_flag, char *input_filename, char **input_class_names, int input_class_length)
                                                                 ^
src/executables/compactdb.c:60:77: note: Function 'compactdb_start' argument 3 names different: declaration 'input_class_name' definition 'input_class_names'.
static int compactdb_start (bool verbose_flag, char *input_filename, char **input_class_name, int input_class_length);
                                                                            ^
src/executables/compactdb.c:175:66: note: Function 'compactdb_start' argument 3 names different: declaration 'input_class_name' definition 'input_class_names'.
compactdb_start (bool verbose_flag, char *input_filename, char **input_class_names, int input_class_length)
                                                                 ^
src/executables/compactdb.c:109:9: style: Variable 'i' is assigned a value that is never used. [unreadVariable]
  int i = 0;
        ^
src/executables/compactdb.c:366:9: style: Variable 'i' is assigned a value that is never used. [unreadVariable]
  int i = 0;
        ^
src/executables/compactdb.c:505:13: style: Variable 'class_oid' is assigned a value that is never used. [unreadVariable]
  class_oid = ws_oid (desc_obj->classop);
            ^
src/executables/compactdb_cl.c:856:27: style: Redundant initialization for 'maximum_processed_space'. The initialized value is overwritten before it is read. [redundantInitialization]
  maximum_processed_space = pages * DB_PAGESIZE;
                          ^
src/executables/compactdb_cl.c:793:31: note: maximum_processed_space is initialized
  int maximum_processed_space = 10 * DB_PAGESIZE, pages;
                              ^
src/executables/compactdb_cl.c:856:27: note: maximum_processed_space is overwritten
  maximum_processed_space = pages * DB_PAGESIZE;
                          ^
src/executables/compactdb_cl.c:789:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i, status = 0;
      ^
src/executables/compactdb_cl.c:784:32: style:inconclusive: Function 'compactdb' argument 1 names different: declaration 'arg_map' definition 'arg'. [funcArgNamesDifferent]
compactdb (UTIL_FUNCTION_ARG * arg)
                               ^
src/executables/utility.h:1699:45: note: Function 'compactdb' argument 1 names different: declaration 'arg_map' definition 'arg'.
  extern int compactdb (UTIL_FUNCTION_ARG * arg_map);
                                            ^
src/executables/compactdb_cl.c:784:32: note: Function 'compactdb' argument 1 names different: declaration 'arg_map' definition 'arg'.
compactdb (UTIL_FUNCTION_ARG * arg)
                               ^
src/executables/compactdb_cl.c:1015:57: style:inconclusive: Function 'do_reclaim_class_addresses' argument 2 names different: declaration 'clas_name' definition 'class_name'. [funcArgNamesDifferent]
do_reclaim_class_addresses (const OID class_oid, char **class_name, bool * const any_class_can_be_referenced,
                                                        ^
src/executables/compactdb_cl.c:58:68: note: Function 'do_reclaim_class_addresses' argument 2 names different: declaration 'clas_name' definition 'class_name'.
static int do_reclaim_class_addresses (const OID class_oid, char **clas_name, bool * const any_class_can_be_referenced,
                                                                   ^
src/executables/compactdb_cl.c:1015:57: note: Function 'do_reclaim_class_addresses' argument 2 names different: declaration 'clas_name' definition 'class_name'.
do_reclaim_class_addresses (const OID class_oid, char **class_name, bool * const any_class_can_be_referenced,
                                                        ^
src/executables/compactdb_common.c:198:7: error: Resource leak: input_file [resourceLeak]
      return ER_FAILED;
      ^
src/executables/csql.c:2523:19: style: Condition 'cont==0' is always true [knownConditionTrueFalse]
      while (cont == 0)
                  ^
src/executables/csql.c:2516:14: note: Assignment 'cont=0', assigned value is 0
      cont = 0;
             ^
src/executables/csql.c:2523:19: note: Condition 'cont==0' is always true
      while (cont == 0)
                  ^
src/executables/csql.c:622:29: warning: Either the condition 'line_read==NULL' is redundant or there is possible null pointer dereference: line_read. [nullPointerRedundantCheck]
      line_length = strlen (line_read);
                            ^
src/executables/csql.c:604:21: note: Assuming that condition 'line_read==NULL' is not redundant
      if (line_read == NULL)
                    ^
src/executables/csql.c:622:29: note: Null pointer dereference
      line_length = strlen (line_read);
                            ^
src/executables/csql.c:824:21: style: Redundant initialization for 'sess_end_char'. The initialized value is overwritten before it is read. [redundantInitialization]
      sess_end_char = *ptr;
                    ^
src/executables/csql.c:793:22: note: sess_end_char is initialized
  char sess_end_char = '\0'; /* orginal char in end pos of session command */
                     ^
src/executables/csql.c:824:21: note: sess_end_char is overwritten
      sess_end_char = *ptr;
                    ^
src/executables/csql.c:1177:17: style: The scope of the variable 'result' can be reduced. [variableScope]
 int width = 0, result;
                ^
src/executables/csql.c:1236:24: style: The scope of the variable 'result' can be reduced. [variableScope]
 int string_width = 0, result;
                       ^
src/executables/csql.c:2250:9: style: The scope of the variable 'pstr' can be reduced. [variableScope]
  char *pstr;
        ^
src/executables/csql.c:2251:8: style: The scope of the variable 'converted_host_name' can be reduced. [variableScope]
  char converted_host_name[CUB_MAXHOSTNAMELEN + 1];
       ^
src/executables/csql.c:2252:8: style: The scope of the variable 'ha_state' can be reduced. [variableScope]
  char ha_state[16];
       ^
src/executables/csql.c:2253:7: style: The scope of the variable 'res' can be reduced. [variableScope]
  int res;
      ^
src/executables/csql.c:2374:7: style: The scope of the variable 'cost' can be reduced. [variableScope]
  int cost;
      ^
src/executables/csql.c:2548:8: style: The scope of the variable 'line_buf' can be reduced. [variableScope]
  char line_buf[LINE_BUFFER_SIZE];
       ^
src/executables/csql.c:2549:8: style: The scope of the variable 'commit_on_shutdown' can be reduced. [variableScope]
  bool commit_on_shutdown = false;
       ^
src/executables/csql.c:3155:8: style: The scope of the variable 'format' can be reduced. [variableScope]
  char format[128], *p;
       ^
src/executables/csql.c:3155:22: style: The scope of the variable 'p' can be reduced. [variableScope]
  char format[128], *p;
                     ^
src/executables/csql.c:2191:28: style: Variable 'do_abort_transaction' is assigned a value that is never used. [unreadVariable]
      do_abort_transaction = false;
                           ^
src/executables/csql_launcher.c:49:20: style: Local variable 'csql_get_message' shadows outer function [shadowFunction]
  CSQL_GET_MESSAGE csql_get_message;
                   ^
src/executables/csql.h:317:22: note: Shadowed declaration
  extern const char *csql_get_message (int message_index);
                     ^
src/executables/csql_launcher.c:49:20: note: Shadow variable
  CSQL_GET_MESSAGE csql_get_message;
                   ^
src/executables/csql_launcher.c:120:8: style: Local variable 'csql' shadows outer function [shadowFunction]
  CSQL csql;
       ^
src/executables/csql.h:315:14: note: Shadowed declaration
  extern int csql (const char *argv0, CSQL_ARGUMENT * csql_arg);
             ^
src/executables/csql_launcher.c:120:8: note: Shadow variable
  CSQL csql;
       ^
src/executables/csql_result.c:273:35: style: Condition 'attr_name_console_encoded!=NULL' is always false [knownConditionTrueFalse]
    if (attr_name_console_encoded != NULL)
                                  ^
src/executables/csql_result.c:266:42: note: Assignment 'attr_name_console_encoded=NULL', assigned value is 0
       char *attr_name_console_encoded = NULL;
                                         ^
src/executables/csql_result.c:273:35: note: Condition 'attr_name_console_encoded!=NULL' is always false
    if (attr_name_console_encoded != NULL)
                                  ^
src/executables/csql_result.c:915:9: style: The scope of the variable 'padding_size' can be reduced. [variableScope]
    int padding_size;
        ^
src/executables/csql_result.c:495:27: style:inconclusive: Function 'get_current_result' argument 1 names different: declaration 'len' definition 'lengths'. [funcArgNamesDifferent]
get_current_result (int **lengths, const CUR_RESULT_INFO * result_info, bool plain_output, bool query_output,
                          ^
src/executables/csql_result.c:161:41: note: Function 'get_current_result' argument 1 names different: declaration 'len' definition 'lengths'.
static char **get_current_result (int **len, const CUR_RESULT_INFO * result_info, bool plain_output, bool query_output,
                                        ^
src/executables/csql_result.c:495:27: note: Function 'get_current_result' argument 1 names different: declaration 'len' definition 'lengths'.
get_current_result (int **lengths, const CUR_RESULT_INFO * result_info, bool plain_output, bool query_output,
                          ^
src/executables/csql_result_format.c:491:3: warning: %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed int'. [invalidPrintfArgType_uint]
  snprintf (precision_string, sizeof (precision_string) - 1, ".%u", (int) precision);
  ^
src/executables/csql_result_format.c:1240:22: style: The scope of the variable 'i' can be reduced. [variableScope]
  int num_found = 0, i = 0;
                     ^
src/executables/csql_result_format.c:987:44: style:inconclusive: Function 'set_to_string' argument 7 names different: declaration 'column_encolser' definition 'column_enclosure'. [funcArgNamesDifferent]
        CSQL_OUTPUT_TYPE output_type, char column_enclosure)
                                           ^
src/executables/csql_result_format.c:282:62: note: Function 'set_to_string' argument 7 names different: declaration 'column_encolser' definition 'column_enclosure'.
       bool plain_string, CSQL_OUTPUT_TYPE output_type, char column_encolser);
                                                             ^
src/executables/csql_result_format.c:987:44: note: Function 'set_to_string' argument 7 names different: declaration 'column_encolser' definition 'column_enclosure'.
        CSQL_OUTPUT_TYPE output_type, char column_enclosure)
                                           ^
src/executables/csql_result_format.c:1337:10: style:inconclusive: Function 'csql_db_value_as_string' argument 5 names different: declaration 'cloumn_enclosure' definition 'column_enclosure'. [funcArgNamesDifferent]
    char column_enclosure)
         ^
src/executables/csql.h:360:11: note: Function 'csql_db_value_as_string' argument 5 names different: declaration 'cloumn_enclosure' definition 'column_enclosure'.
     char cloumn_enclosure);
          ^
src/executables/csql_result_format.c:1337:10: note: Function 'csql_db_value_as_string' argument 5 names different: declaration 'cloumn_enclosure' definition 'column_enclosure'.
    char column_enclosure)
         ^
src/executables/csql_result_format.c:316:19: style: Variable 'last_digit' is assigned a value that is never used. [unreadVariable]
       last_digit = i; /* keep track of last digit found */
                  ^
src/executables/csql_result_format.c:1240:24: style: Variable 'i' is assigned a value that is never used. [unreadVariable]
  int num_found = 0, i = 0;
                       ^
src/executables/csql_session.c:812:12: style: Condition 'info!=NULL' is always true [knownConditionTrueFalse]
  if (info != NULL)
           ^
src/executables/csql_session.c:769:12: note: Assuming that condition 'info==NULL' is not redundant
  if (info == NULL)
           ^
src/executables/csql_session.c:812:12: note: Condition 'info!=NULL' is always true
  if (info != NULL)
           ^
src/executables/csql_session.c:731:9: style: The scope of the variable 'p_stream' can be reduced. [variableScope]
  FILE *p_stream;  /* pipe stream to pager */
        ^
src/executables/csql_session.c:461:32: style:inconclusive: Function 'csql_help_trigger' argument 1 names different: declaration 'class_name' definition 'trigger_name'. [funcArgNamesDifferent]
csql_help_trigger (const char *trigger_name)
                               ^
src/executables/csql.h:355:46: note: Function 'csql_help_trigger' argument 1 names different: declaration 'class_name' definition 'trigger_name'.
  extern void csql_help_trigger (const char *class_name);
                                             ^
src/executables/csql_session.c:461:32: note: Function 'csql_help_trigger' argument 1 names different: declaration 'class_name' definition 'trigger_name'.
csql_help_trigger (const char *trigger_name)
                               ^
src/executables/csql_session.c:72:16: style: struct member 'SESSION_CMD_TABLE::flags' is never used. [unusedStructMember]
  unsigned int flags;
               ^
src/executables/csql_support.c:586:24: style: Condition 'conv_buf!=NULL' is always false [knownConditionTrueFalse]
      line = (conv_buf != NULL) ? conv_buf : line;
                       ^
src/executables/csql_support.c:580:20: note: Assignment 'conv_buf=NULL', assigned value is 0
  char *conv_buf = NULL;
                   ^
src/executables/csql_support.c:586:24: note: Condition 'conv_buf!=NULL' is always false
      line = (conv_buf != NULL) ? conv_buf : line;
                       ^
src/executables/csql_support.c:609:17: style: Condition 'conv_buf!=NULL' is always false [knownConditionTrueFalse]
   if (conv_buf != NULL)
                ^
src/executables/csql_support.c:580:20: note: Assignment 'conv_buf=NULL', assigned value is 0
  char *conv_buf = NULL;
                   ^
src/executables/csql_support.c:609:17: note: Condition 'conv_buf!=NULL' is always false
   if (conv_buf != NULL)
                ^
src/executables/csql_support.c:873:23: style: Condition 'con_buf_ptr!=NULL' is always false [knownConditionTrueFalse]
      if (con_buf_ptr != NULL)
                      ^
src/executables/csql_support.c:857:23: note: Assignment 'con_buf_ptr=NULL', assigned value is 0
  char *con_buf_ptr = NULL;
                      ^
src/executables/csql_support.c:873:23: note: Condition 'con_buf_ptr!=NULL' is always false
      if (con_buf_ptr != NULL)
                      ^
src/executables/csql_support.c:899:19: style: Condition 'con_buf_ptr!=NULL' is always false [knownConditionTrueFalse]
  if (con_buf_ptr != NULL)
                  ^
src/executables/csql_support.c:857:23: note: Assignment 'con_buf_ptr=NULL', assigned value is 0
  char *con_buf_ptr = NULL;
                      ^
src/executables/csql_support.c:899:19: note: Condition 'con_buf_ptr!=NULL' is always false
  if (con_buf_ptr != NULL)
                  ^
src/executables/csql_support.c:179:8: style: The scope of the variable 'home' can be reduced. [variableScope]
  char home[PATH_MAX];
       ^
src/executables/csql_support.c:576:7: style: The scope of the variable 'new_num' can be reduced. [variableScope]
  int new_num;   /* new # of entries */
      ^
src/executables/csql_support.c:737:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/executables/csql_support.c:1288:7: style: The scope of the variable 'write_len' can be reduced. [variableScope]
  int write_len;
      ^
src/executables/csql_support.c:124:27: style:inconclusive: Function 'csql_get_user_home' argument 1 names different: declaration 'homebuf' definition 'homedir'. [funcArgNamesDifferent]
csql_get_user_home (char *homedir, int homedir_size)
                          ^
src/executables/csql_support.c:91:38: note: Function 'csql_get_user_home' argument 1 names different: declaration 'homebuf' definition 'homedir'.
static int csql_get_user_home (char *homebuf, int bufsize);
                                     ^
src/executables/csql_support.c:124:27: note: Function 'csql_get_user_home' argument 1 names different: declaration 'homebuf' definition 'homedir'.
csql_get_user_home (char *homedir, int homedir_size)
                          ^
src/executables/csql_support.c:124:40: style:inconclusive: Function 'csql_get_user_home' argument 2 names different: declaration 'bufsize' definition 'homedir_size'. [funcArgNamesDifferent]
csql_get_user_home (char *homedir, int homedir_size)
                                       ^
src/executables/csql_support.c:91:51: note: Function 'csql_get_user_home' argument 2 names different: declaration 'bufsize' definition 'homedir_size'.
static int csql_get_user_home (char *homebuf, int bufsize);
                                                  ^
src/executables/csql_support.c:124:40: note: Function 'csql_get_user_home' argument 2 names different: declaration 'bufsize' definition 'homedir_size'.
csql_get_user_home (char *homedir, int homedir_size)
                                       ^
src/executables/esql_cli.c:641:7: style: The scope of the variable 'status' can be reduced. [variableScope]
  int status = 0;
      ^
src/executables/esql_cli.c:741:12: style: The scope of the variable 'statement' can be reduced. [variableScope]
  DB_NODE *statement;
           ^
src/executables/esql_cli.c:2105:7: style: The scope of the variable 'new_num' can be reduced. [variableScope]
  int new_num;
      ^
src/executables/esql_cli.c:2236:7: style: The scope of the variable 'new_num' can be reduced. [variableScope]
  int new_num;
      ^
src/executables/esql_cli.c:2518:7: style: The scope of the variable 'new_num' can be reduced. [variableScope]
  int new_num;
      ^
src/executables/esql_cli.c:2581:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/executables/esql_cli.c:2685:7: style: The scope of the variable 'new_size' can be reduced. [variableScope]
  int new_size;
      ^
src/executables/esql_cli.c:2234:25: style:inconclusive: Function 'alloc_dynamic' argument 6 names different: declaration 'col_spec' definition 'column_spec'. [funcArgNamesDifferent]
        DB_QUERY_TYPE * column_spec, char *stmt, int length)
                        ^
src/executables/esql_cli.c:418:44: note: Function 'alloc_dynamic' argument 6 names different: declaration 'col_spec' definition 'column_spec'.
          int num_markers, DB_QUERY_TYPE * col_spec, char *stmt, int length);
                                           ^
src/executables/esql_cli.c:2234:25: note: Function 'alloc_dynamic' argument 6 names different: declaration 'col_spec' definition 'column_spec'.
        DB_QUERY_TYPE * column_spec, char *stmt, int length)
                        ^
src/executables/esql_cli.c:2516:38: style:inconclusive: Function 'put_pointer' argument 2 names different: declaration 'addr' definition 'value'. [funcArgNamesDifferent]
put_pointer (CURSOR * cs, DB_VALUE * value)
                                     ^
src/executables/esql_cli.c:429:54: note: Function 'put_pointer' argument 2 names different: declaration 'addr' definition 'value'.
static POINTER *put_pointer (CURSOR * cs, DB_VALUE * addr);
                                                     ^
src/executables/esql_cli.c:2516:38: note: Function 'put_pointer' argument 2 names different: declaration 'addr' definition 'value'.
put_pointer (CURSOR * cs, DB_VALUE * value)
                                     ^
src/executables/esql_cli.c:641:14: style: Variable 'status' is assigned a value that is never used. [unreadVariable]
  int status = 0;
             ^
src/executables/esql_cursor.c:174:11: style: The scope of the variable 'i' can be reduced. [variableScope]
      int i;
          ^
src/executables/esql_cursor.c:56:51: style:inconclusive: Function 'pp_new_cursor' argument 3 names different: declaration 'stmtLength' definition 'length'. [funcArgNamesDifferent]
pp_new_cursor (char *name, char *static_stmt, int length, STMT * dynamic_stmt, HOST_LOD * host_refs)
                                                  ^
src/executables/esql_misc.h:184:68: note: Function 'pp_new_cursor' argument 3 names different: declaration 'stmtLength' definition 'length'.
  extern CURSOR *pp_new_cursor (char *name, char *static_stmt, int stmtLength, STMT * dynamic_stmt,
                                                                   ^
src/executables/esql_cursor.c:56:51: note: Function 'pp_new_cursor' argument 3 names different: declaration 'stmtLength' definition 'length'.
pp_new_cursor (char *name, char *static_stmt, int length, STMT * dynamic_stmt, HOST_LOD * host_refs)
                                                  ^
src/executables/esql_declare.c:427:7: error: Common realloc mistake: 'pp_name_scope_base' nulled but not freed upon failure [memleakOnRealloc]
      pp_name_scope_base = (SCOPE *) realloc (pp_name_scope_base, sizeof (SCOPE) * (nframes + NFRAMES));
      ^
src/executables/esql_declare.c:581:7: error: Common realloc mistake: 'pp_spec_scope_base' nulled but not freed upon failure [memleakOnRealloc]
      pp_spec_scope_base = (SPEC_STATE *) realloc (pp_spec_scope_base, sizeof (SPEC_STATE) * (nframes + NFRAMES));
      ^
src/executables/esql_declare.c:432:4: style: Consecutive return, break, continue, goto or throw statements are unnecessary. [duplicateBreak]
   return;
   ^
src/executables/esql_declare.c:586:4: style: Consecutive return, break, continue, goto or throw statements are unnecessary. [duplicateBreak]
   return;
   ^
src/executables/esql_declare.c:1098:42: style:inconclusive: Function 'pp_add_whenever_to_scope' argument 1 names different: declaration 'cond' definition 'when'. [funcArgNamesDifferent]
pp_add_whenever_to_scope (WHEN_CONDITION when, WHEN_ACTION action, char *name)
                                         ^
src/executables/esql_misc.h:216:56: note: Function 'pp_add_whenever_to_scope' argument 1 names different: declaration 'cond' definition 'when'.
  extern void pp_add_whenever_to_scope (WHEN_CONDITION cond, WHEN_ACTION action, char *name);
                                                       ^
src/executables/esql_declare.c:1098:42: note: Function 'pp_add_whenever_to_scope' argument 1 names different: declaration 'cond' definition 'when'.
pp_add_whenever_to_scope (WHEN_CONDITION when, WHEN_ACTION action, char *name)
                                         ^
src/executables/esql_declare.c:1380:26: style:inconclusive: Function 'pp_print_decls' argument 1 names different: declaration 'sym_chain' definition 'decl_chain'. [funcArgNamesDifferent]
pp_print_decls (SYMBOL * decl_chain, int preechoed)
                         ^
src/executables/esql_misc.h:217:40: note: Function 'pp_print_decls' argument 1 names different: declaration 'sym_chain' definition 'decl_chain'.
  extern void pp_print_decls (SYMBOL * sym_chain, int preechoed);
                                       ^
src/executables/esql_declare.c:1380:26: note: Function 'pp_print_decls' argument 1 names different: declaration 'sym_chain' definition 'decl_chain'.
pp_print_decls (SYMBOL * decl_chain, int preechoed)
                         ^
src/executables/esql_hash.c:263:22: style: The scope of the variable 'outp' can be reduced. [variableScope]
  BUCKET **outtab, **outp, *sym, **symtab;
                     ^
src/executables/esql_hash.c:229:31: style:inconclusive: Function 'es_ht_next_symbol' argument 1 names different: declaration 'tbl' definition 'table'. [funcArgNamesDifferent]
es_ht_next_symbol (HASH_TAB * table, void *last_sym)
                              ^
src/executables/esql_hash.c:70:44: note: Function 'es_ht_next_symbol' argument 1 names different: declaration 'tbl' definition 'table'.
static void *es_ht_next_symbol (HASH_TAB * tbl, void *last_sym);
                                           ^
src/executables/esql_hash.c:229:31: note: Function 'es_ht_next_symbol' argument 1 names different: declaration 'tbl' definition 'table'.
es_ht_next_symbol (HASH_TAB * table, void *last_sym)
                              ^
src/executables/esql_host_variable.c:1502:11: warning: Either the condition 'pp_host_refs==NULL' is redundant or there is possible null pointer dereference: pp_host_refs. [nullPointerRedundantCheck]
  assert (pp_host_refs->refs != NULL);
          ^
src/executables/esql_host_variable.c:1504:20: note: Assuming that condition 'pp_host_refs==NULL' is not redundant
  if (pp_host_refs == NULL || pp_host_refs->n_refs != 1 || pp_host_refs->refs == NULL)
                   ^
src/executables/esql_host_variable.c:1502:11: note: Null pointer dereference
  assert (pp_host_refs->refs != NULL);
          ^
src/executables/esql_host_variable.c:963:9: style: The scope of the variable 'p' can be reduced. [variableScope]
  char *p;
        ^
src/executables/esql_host_variable.c:387:7: style: Local variable 'errors' shadows outer variable [shadowVariable]
  int errors = 0;
      ^
src/executables/esql_misc.h:175:14: note: Shadowed declaration
  extern int errors;
             ^
src/executables/esql_host_variable.c:387:7: note: Shadow variable
  int errors = 0;
      ^
src/executables/esql_host_variable.c:399:17: style: Local variable 'var' shadows outer argument [shadowArgument]
      HOST_VAR *var;
                ^
src/executables/esql_host_variable.c:382:38: note: Shadowed declaration
pp_add_struct_field_refs (HOST_VAR * var, int *n_refs)
                                     ^
src/executables/esql_host_variable.c:399:17: note: Shadow variable
      HOST_VAR *var;
                ^
src/executables/esql_misc.c:73:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/executables/esql_symbol_table.c:203:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/executables/esql_symbol_table.c:298:14: style: The scope of the variable 'anon_tag' can be reduced. [variableScope]
  static int anon_tag = 0;
             ^
src/executables/esql_symbol_table.c:369:41: style:inconclusive: Function 'pp_discard_structdef_chain' argument 1 names different: declaration 'sdef' definition 'sdef_chain'. [funcArgNamesDifferent]
pp_discard_structdef_chain (STRUCTDEF * sdef_chain)
                                        ^
src/executables/esql_misc.h:288:55: note: Function 'pp_discard_structdef_chain' argument 1 names different: declaration 'sdef' definition 'sdef_chain'.
  extern void pp_discard_structdef_chain (STRUCTDEF * sdef);
                                                      ^
src/executables/esql_symbol_table.c:369:41: note: Function 'pp_discard_structdef_chain' argument 1 names different: declaration 'sdef' definition 'sdef_chain'.
pp_discard_structdef_chain (STRUCTDEF * sdef_chain)
                                        ^
src/executables/esql_symbol_table.c:185:13: style: Variable 'p' is assigned a value that is never used. [unreadVariable]
  SYMBOL *p = sym;
            ^
src/executables/esql_translate.c:1522:31: warning: Either the condition 'in_str==NULL' is redundant or there is pointer arithmetic with NULL pointer. [nullPointerArithmeticRedundantCheck]
  char *end = (char *) in_str + length - 1;
                              ^
src/executables/esql_translate.c:1527:14: note: Assuming that condition 'in_str==NULL' is not redundant
  if (in_str == NULL)
             ^
src/executables/esql_translate.c:1522:31: note: Null pointer addition
  char *end = (char *) in_str + length - 1;
                              ^
src/executables/esql_translate.c:490:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/executables/esql_translate.c:568:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/executables/esql_translate.c:634:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/executables/esql_translate.c:1130:15: style: The scope of the variable 'fmt' can be reduced. [variableScope]
  const char *fmt = "db_col_type(%s)";
              ^
src/executables/esql_translate.c:381:47: style:inconclusive: Function 'tr_static' argument 3 names different: declaration 'repeat' definition 'repetitive'. [funcArgNamesDifferent]
tr_static (const char *stmt, int length, bool repetitive, int num_in_vars, HOST_REF * in_vars, const char *in_desc_name,
                                              ^
src/executables/esql_translate.c:83:59: note: Function 'tr_static' argument 3 names different: declaration 'repeat' definition 'repetitive'.
static void tr_static (const char *stmt, int length, bool repeat, int num_in_vars, HOST_REF * in_vars,
                                                          ^
src/executables/esql_translate.c:381:47: note: Function 'tr_static' argument 3 names different: declaration 'repeat' definition 'repetitive'.
tr_static (const char *stmt, int length, bool repetitive, int num_in_vars, HOST_REF * in_vars, const char *in_desc_name,
                                              ^
src/executables/file_hash.c:102:7: style: The scope of the variable 'left' can be reduced. [variableScope]
  int left, right, middle; /* Indices for binary search */
      ^
src/executables/file_hash.c:102:13: style: The scope of the variable 'right' can be reduced. [variableScope]
  int left, right, middle; /* Indices for binary search */
            ^
src/executables/file_hash.c:102:20: style: The scope of the variable 'middle' can be reduced. [variableScope]
  int left, right, middle; /* Indices for binary search */
                   ^
src/executables/file_hash.c:354:7: style: The scope of the variable 'page_no' can be reduced. [variableScope]
  int page_no;
      ^
src/executables/file_hash.c:355:7: style: The scope of the variable 'entry_no' can be reduced. [variableScope]
  int entry_no;
      ^
src/executables/file_hash.c:357:16: style: The scope of the variable 'pg_hdr' can be reduced. [variableScope]
  FH_PAGE_HDR *pg_hdr;
               ^
src/executables/file_hash.c:358:9: style: The scope of the variable 'ptr' can be reduced. [variableScope]
  char *ptr;
        ^
src/executables/file_hash.c:678:13: style: The scope of the variable 'ptr' can be reduced. [variableScope]
      char *ptr;
            ^
src/executables/gencat.c:364:3: error: Returning/dereferencing 'ptr' after it is deallocated / released [deallocret]
  return (ptr);
  ^
src/executables/gencat.c:356:14: note: Returning/dereferencing 'ptr' after it is deallocated / released
  if ((ptr = realloc (ptr, size)) == NULL)
             ^
src/executables/gencat.c:364:3: note: Returning/dereferencing 'ptr' after it is deallocated / released
  return (ptr);
  ^
src/executables/gencat.c:1072:17: style: The scope of the variable 'msg' can be reduced. [variableScope]
  struct _msgT *msg;
                ^
src/executables/gencat.c:1023:34: style:inconclusive: Function 'MCAddMsg' argument 2 names different: declaration 'msg' definition 'str'. [funcArgNamesDifferent]
MCAddMsg (int msgId, const char *str)
                                 ^
src/executables/gencat.c:187:44: note: Function 'MCAddMsg' argument 2 names different: declaration 'msg' definition 'str'.
     void MCAddMsg (int msgId, const char *msg);
                                           ^
src/executables/gencat.c:1023:34: note: Function 'MCAddMsg' argument 2 names different: declaration 'msg' definition 'str'.
MCAddMsg (int msgId, const char *str)
                                 ^
src/executables/gencat.c:912:3: portability: %d in format string (no. 1) requires 'int' but the argument type is 'size_t {aka unsigned long}'. [invalidPrintfArgType_sint]
  printf ("string pool size: %d\n", string_size);
  ^
src/executables/javasp.cpp:580:65: style:inconclusive: Function 'javasp_check_database' argument 2 names different: declaration 'db_path' definition 'path'. [funcArgNamesDifferent]
javasp_check_database (const std::string &db_name, std::string &path)
                                                                ^
src/executables/javasp.cpp:95:76: note: Function 'javasp_check_database' argument 2 names different: declaration 'db_path' definition 'path'.
static int javasp_check_database (const std::string &db_name, std::string &db_path);
                                                                           ^
src/executables/javasp.cpp:580:65: note: Function 'javasp_check_database' argument 2 names different: declaration 'db_path' definition 'path'.
javasp_check_database (const std::string &db_name, std::string &path)
                                                                ^
src/executables/javasp.cpp:174:16: style: Variable 'redirect' is assigned a value that is never used. [unreadVariable]
 if ((redirect = freopen (NULL_DEVICE, "w", stderr)) == NULL)
               ^
src/executables/javasp.cpp:335:20: style: Variable 'req_size' is assigned a value that is never used. [unreadVariable]
      int req_size = (int) sizeof (int);
                   ^
src/executables/loadjava.c:162:7: style: Condition 'fh_src' is always true [knownConditionTrueFalse]
  if (fh_src)
      ^
src/executables/loadjava.c:102:14: note: Assuming that condition 'fh_src==NULL' is not redundant
  if (fh_src == NULL)
             ^
src/executables/loadjava.c:162:7: note: Condition 'fh_src' is always true
  if (fh_src)
      ^
src/executables/loadjava.c:270:51: warning: Either the condition 'if(java_dir)' is redundant or there is possible null pointer dereference: java_dir. [nullPointerRedundantCheck]
  if ((class_file_path = (char *) malloc (strlen (java_dir) + strlen (class_file_name) + 2)) == NULL)
                                                  ^
src/executables/loadjava.c:286:6: note: Assuming that condition 'if(java_dir)' is not redundant
  if (java_dir)
     ^
src/executables/loadjava.c:270:51: note: Null pointer dereference
  if ((class_file_path = (char *) malloc (strlen (java_dir) + strlen (class_file_name) + 2)) == NULL)
                                                  ^
src/executables/loadjava.c:276:39: warning: Either the condition 'if(java_dir)' is redundant or there is possible null pointer dereference: java_dir. [nullPointerRedundantCheck]
  sprintf (class_file_path, "%s%c%s", java_dir, SEPERATOR, class_file_name);
                                      ^
src/executables/loadjava.c:286:6: note: Assuming that condition 'if(java_dir)' is not redundant
  if (java_dir)
     ^
src/executables/loadjava.c:276:39: note: Null pointer dereference
  sprintf (class_file_path, "%s%c%s", java_dir, SEPERATOR, class_file_name);
                                      ^
src/executables/loadjava.c:94:10: style: The scope of the variable 'bytesr' can be reduced. [variableScope]
  size_t bytesr;
         ^
src/executables/loadjava.c:98:8: style: The scope of the variable 'buff' can be reduced. [variableScope]
  char buff[COPY_BUFFER_SIZE];
       ^
src/executables/loadjava.c:99:8: style: The scope of the variable 'c' can be reduced. [variableScope]
  char c;
       ^
src/executables/master.c:401:7: style: The scope of the variable 'length' can be reduced. [variableScope]
  int length;
      ^
src/executables/master.c:181:6: style: Variable 'rv' is assigned a value that is never used. [unreadVariable]
  rv = pthread_mutex_lock (&css_Master_socket_anchor_lock);
     ^
src/executables/master.c:946:6: style: Variable 'rv' is assigned a value that is never used. [unreadVariable]
  rv = pthread_mutex_lock (&css_Master_socket_anchor_lock);
     ^
src/executables/master_heartbeat.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 15 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/executables/master_heartbeat.c:4316:3: error: Code 'cuberr::context' is invalid C code. Use --std or --language to configure the language. [syntaxError]
  cuberr::context er_context (true);
  ^
src/executables/master_request.c:929:56: warning:inconclusive: Either the condition 'buffer!=NULL' is redundant or there is possible null pointer dereference: buffer. [nullPointerRedundantCheck]
  if (css_send_data (conn, request_id, buffer, strlen (buffer) + 1) != NO_ERRORS)
                                                       ^
src/executables/master_request.c:934:14: note: Assuming that condition 'buffer!=NULL' is not redundant
  if (buffer != NULL)
             ^
src/executables/master_request.c:929:56: note: Null pointer dereference
  if (css_send_data (conn, request_id, buffer, strlen (buffer) + 1) != NO_ERRORS)
                                                       ^
src/executables/master_request.c:995:56: warning:inconclusive: Either the condition 'buffer!=NULL' is redundant or there is possible null pointer dereference: buffer. [nullPointerRedundantCheck]
  if (css_send_data (conn, request_id, buffer, strlen (buffer) + 1) != NO_ERRORS)
                                                       ^
src/executables/master_request.c:1000:14: note: Assuming that condition 'buffer!=NULL' is not redundant
  if (buffer != NULL)
             ^
src/executables/master_request.c:995:56: note: Null pointer dereference
  if (css_send_data (conn, request_id, buffer, strlen (buffer) + 1) != NO_ERRORS)
                                                       ^
src/executables/master_request.c:1076:56: warning:inconclusive: Either the condition 'buffer!=NULL' is redundant or there is possible null pointer dereference: buffer. [nullPointerRedundantCheck]
  if (css_send_data (conn, request_id, buffer, strlen (buffer) + 1) != NO_ERRORS)
                                                       ^
src/executables/master_request.c:1081:14: note: Assuming that condition 'buffer!=NULL' is not redundant
  if (buffer != NULL)
             ^
src/executables/master_request.c:1076:56: note: Null pointer dereference
  if (css_send_data (conn, request_id, buffer, strlen (buffer) + 1) != NO_ERRORS)
                                                       ^
src/executables/master_request.c:1144:56: warning:inconclusive: Either the condition 'buffer!=NULL' is redundant or there is possible null pointer dereference: buffer. [nullPointerRedundantCheck]
  if (css_send_data (conn, request_id, buffer, strlen (buffer) + 1) != NO_ERRORS)
                                                       ^
src/executables/master_request.c:1149:14: note: Assuming that condition 'buffer!=NULL' is not redundant
  if (buffer != NULL)
             ^
src/executables/master_request.c:1144:56: note: Null pointer dereference
  if (css_send_data (conn, request_id, buffer, strlen (buffer) + 1) != NO_ERRORS)
                                                       ^
src/executables/master_request.c:1203:56: warning:inconclusive: Either the condition 'buffer!=NULL' is redundant or there is possible null pointer dereference: buffer. [nullPointerRedundantCheck]
  if (css_send_data (conn, request_id, buffer, strlen (buffer) + 1) != NO_ERRORS)
                                                       ^
src/executables/master_request.c:1208:14: note: Assuming that condition 'buffer!=NULL' is not redundant
  if (buffer != NULL)
             ^
src/executables/master_request.c:1203:56: note: Null pointer dereference
  if (css_send_data (conn, request_id, buffer, strlen (buffer) + 1) != NO_ERRORS)
                                                       ^
src/executables/master_request.c:1415:56: warning:inconclusive: Either the condition 'buffer!=NULL' is redundant or there is possible null pointer dereference: buffer. [nullPointerRedundantCheck]
  if (css_send_data (conn, request_id, buffer, strlen (buffer) + 1) != NO_ERRORS)
                                                       ^
src/executables/master_request.c:1420:14: note: Assuming that condition 'buffer!=NULL' is not redundant
  if (buffer != NULL)
             ^
src/executables/master_request.c:1415:56: note: Null pointer dereference
  if (css_send_data (conn, request_id, buffer, strlen (buffer) + 1) != NO_ERRORS)
                                                       ^
src/executables/master_request.c:187:8: style: The scope of the variable 'time_string' can be reduced. [variableScope]
  char time_string[1028];
       ^
src/executables/migrate.c:231:62: style:inconclusive: Function 'check_and_fix_compat_level' argument 2 names different: declaration 'vol_path' definition 'db_path'. [funcArgNamesDifferent]
check_and_fix_compat_level (const char *db_name, const char *db_path)
                                                             ^
src/executables/migrate.c:161:73: note: Function 'check_and_fix_compat_level' argument 2 names different: declaration 'vol_path' definition 'db_path'.
static int check_and_fix_compat_level (const char *db_name, const char *vol_path);
                                                                        ^
src/executables/migrate.c:231:62: note: Function 'check_and_fix_compat_level' argument 2 names different: declaration 'vol_path' definition 'db_path'.
check_and_fix_compat_level (const char *db_name, const char *db_path)
                                                             ^
src/executables/migrate.c:595:18: style: Variable 'db_started' is assigned a value that is never used. [unreadVariable]
      db_started = false;
                 ^
src/executables/server.c:230:12: style: The scope of the variable 'err_log' can be reduced. [variableScope]
      char err_log[PATH_MAX];
           ^
src/executables/server.c:269:23: style: The scope of the variable 'client_pid' can be reduced. [variableScope]
  int i, num_clients, client_pid;
                      ^
src/executables/server.c:162:15: style: Variable 'Success' is assigned a value that is never used. [unreadVariable]
      Success =
              ^
src/executables/server.c:174:12: style: Variable 'fSuccess' is assigned a value that is never used. [unreadVariable]
  fSuccess = CreateProcess (executable_path, cmd_line,
           ^
src/executables/unittests_area.c:310:9: style: Local variable 'i' shadows outer variable [shadowVariable]
    int i, j, blockset_cnt = 0, block_cnt = 0, chunk_count;
        ^
src/executables/unittests_area.c:265:7: note: Shadowed declaration
  int i;
      ^
src/executables/unittests_area.c:310:9: note: Shadow variable
    int i, j, blockset_cnt = 0, block_cnt = 0, chunk_count;
        ^
src/executables/unittests_bit.c:189:7: error: Code 'std::memcpy' is invalid C code. Use --std or --language to configure the language. [syntaxError]
      std::memcpy (&us, rands, sizeof (UINT16));
      ^
src/executables/unittests_lf.c:324:23: error: Syntax Error: AST broken, binary operator '=' doesn't have two operands. [internalAstError]
  my_hashmap *hashmap = (my_hashmap *) param;
                      ^
src/executables/unittests_snapshot.c:277:3: error: Code 'cubthread::set_thread_local_entry' is invalid C code. Use --std or --language to configure the language. [syntaxError]
  cubthread::set_thread_local_entry (*thread_p);
  ^
src/executables/unload_object.c:1220:7: warning: %ld in format string (no. 2) requires 'long' but the argument type is 'signed int'. [invalidPrintfArgType_sint]
      fprintf (unloadlog_file, MSG_FORMAT "\n", sm_ch_name ((MOBJ) class_ptr), 0, 100, total);
      ^
src/executables/unload_object.c:1224:4: warning: %ld in format string (no. 2) requires 'long' but the argument type is 'signed int'. [invalidPrintfArgType_sint]
   fprintf (stdout, MSG_FORMAT "\n", sm_ch_name ((MOBJ) class_ptr), 0, 100, total);
   ^
src/executables/unload_object.c:1242:7: warning: %ld in format string (no. 2) requires 'long' but the argument type is 'signed int'. [invalidPrintfArgType_sint]
      fprintf (unloadlog_file, MSG_FORMAT "\n", sm_ch_name ((MOBJ) class_ptr), 0, 100, total);
      ^
src/executables/unload_object.c:1246:4: warning: %ld in format string (no. 2) requires 'long' but the argument type is 'signed int'. [invalidPrintfArgType_sint]
   fprintf (stdout, MSG_FORMAT "\n", sm_ch_name ((MOBJ) class_ptr), 0, 100, total);
   ^
src/executables/unload_object.c:1427:18: style: Variable 'attribute' is reassigned a value before the old one has been used. [redundantAssignment]
  for (attribute = class_ptr->ordered_attributes; attribute; attribute = attribute->order_link)
                 ^
src/executables/unload_object.c:1426:13: note: attribute is assigned
  attribute = class_ptr->ordered_attributes;
            ^
src/executables/unload_object.c:1427:18: note: attribute is overwritten
  for (attribute = class_ptr->ordered_attributes; attribute; attribute = attribute->order_link)
                 ^
src/executables/unload_object.c:1869:31: style: The scope of the variable 'error' can be reduced. [variableScope]
  int i, j, is_partition = 0, error;
                              ^
src/executables/unload_object.c:1870:7: style: The scope of the variable 'len_clsname' can be reduced. [variableScope]
  int len_clsname = 0;
      ^
src/executables/unload_object.c:1877:9: style: The scope of the variable 'trimmed_buf' can be reduced. [variableScope]
  char *trimmed_buf;
        ^
src/executables/unload_object.c:1870:19: style: Variable 'len_clsname' is assigned a value that is never used. [unreadVariable]
  int len_clsname = 0;
                  ^
src/executables/unload_object.c:1917:14: style: Variable 'error' is assigned a value that is never used. [unreadVariable]
       error = sm_partitioned_class_type (class_, &is_partition, NULL, &sub_partitions);
             ^
src/executables/unload_schema.c:296:18: style: The scope of the variable 'setdomain' can be reduced. [variableScope]
  DB_DOMAIN *d, *setdomain;
                 ^
src/executables/unload_schema.c:333:17: style: The scope of the variable 'att' can be reduced. [variableScope]
  DB_ATTRIBUTE *att;
                ^
src/executables/unload_schema.c:334:14: style: The scope of the variable 'domain' can be reduced. [variableScope]
  DB_DOMAIN *domain;
             ^
src/executables/unload_schema.c:2257:11: style: The scope of the variable 'set' can be reduced. [variableScope]
  DB_SET *set;
          ^
src/executables/unload_schema.c:2258:7: style: The scope of the variable 'error' can be reduced. [variableScope]
  int error;
      ^
src/executables/unload_schema.c:2260:19: style: The scope of the variable 'size' can be reduced. [variableScope]
  int has_object, size, i;
                  ^
src/executables/unload_schema.c:2260:25: style: The scope of the variable 'i' can be reduced. [variableScope]
  int has_object, size, i;
                        ^
src/executables/unload_schema.c:330:31: style:inconclusive: Function 'has_dependencies' argument 1 names different: declaration 'class_' definition 'mop'. [funcArgNamesDifferent]
has_dependencies (DB_OBJECT * mop, DB_OBJLIST * unordered, DB_OBJLIST * ordered, int conservative)
                              ^
src/executables/unload_schema.c:129:42: note: Function 'has_dependencies' argument 1 names different: declaration 'class_' definition 'mop'.
static int has_dependencies (DB_OBJECT * class_, DB_OBJLIST * unordered, DB_OBJLIST * ordered, int conservative);
                                         ^
src/executables/unload_schema.c:330:31: note: Function 'has_dependencies' argument 1 names different: declaration 'class_' definition 'mop'.
has_dependencies (DB_OBJECT * mop, DB_OBJLIST * unordered, DB_OBJLIST * ordered, int conservative)
                              ^
src/executables/unloaddb.c:195:11: style: Expression is always true because 'else if' condition is opposite to previous condition at line 178. [multiCondition]
  else if (error != NO_ERROR)
          ^
src/executables/unloaddb.c:178:13: note: first condition
  if (error == NO_ERROR)
            ^
src/executables/unloaddb.c:195:11: note: else if condition is opposite to first condition
  else if (error != NO_ERROR)
          ^
src/executables/unloaddb.c:93:31: style:inconclusive: Function 'unloaddb' argument 1 names different: declaration 'arg_map' definition 'arg'. [funcArgNamesDifferent]
unloaddb (UTIL_FUNCTION_ARG * arg)
                              ^
src/executables/utility.h:1704:44: note: Function 'unloaddb' argument 1 names different: declaration 'arg_map' definition 'arg'.
  extern int unloaddb (UTIL_FUNCTION_ARG * arg_map);
                                           ^
src/executables/unloaddb.c:93:31: note: Function 'unloaddb' argument 1 names different: declaration 'arg_map' definition 'arg'.
unloaddb (UTIL_FUNCTION_ARG * arg)
                              ^
src/executables/unloaddb.c:262:11: style: Local variable 'error' shadows outer variable [shadowVariable]
      int error;
          ^
src/executables/unloaddb.c:99:7: note: Shadowed declaration
  int error;
      ^
src/executables/unloaddb.c:262:11: note: Shadow variable
      int error;
          ^
src/executables/util_common.c:363:20: error: Code 'C++ cast <...' is invalid C code. Use --std or --language to configure the language. [syntaxError]
       *keystr_p = const_cast < char *>(keyp->keystr);
                   ^
src/executables/util_cs.c:567:17: style: Condition 'table==NULL' is always false [knownConditionTrueFalse]
      if (table == NULL || table[0] == '\0')
                ^
src/executables/util_cs.c:544:8: warning: Either the condition 'table==NULL' is redundant or there is possible null pointer dereference: table. [nullPointerRedundantCheck]
  char table[SM_MAX_IDENTIFIER_LENGTH];
       ^
src/executables/util_cs.c:567:17: note: Assuming that condition 'table==NULL' is not redundant
      if (table == NULL || table[0] == '\0')
                ^
src/executables/util_cs.c:544:8: note: Null pointer dereference
  char table[SM_MAX_IDENTIFIER_LENGTH];
       ^
src/executables/util_cs.c:3538:20: warning: Either the condition 'str_key1!=NULL' is redundant or there is possible null pointer dereference: str_key1. [nullPointerRedundantCheck]
     ret = strcmp (str_key1, str_key2);
                   ^
src/executables/util_cs.c:3532:20: note: Assuming that condition 'str_key1!=NULL' is not redundant
 else if (str_key1 != NULL && str_key2 == NULL)
                   ^
src/executables/util_cs.c:3538:20: note: Null pointer dereference
     ret = strcmp (str_key1, str_key2);
                   ^
src/executables/util_cs.c:1474:10: style: The scope of the variable 'ok' can be reduced. [variableScope]
  int i, ok;
         ^
src/executables/util_cs.c:1475:19: style: The scope of the variable 'nfailures' can be reduced. [variableScope]
  int nkills = 0, nfailures = 0;
                  ^
src/executables/util_cs.c:1476:7: style: The scope of the variable 'ch' can be reduced. [variableScope]
  int ch;
      ^
src/executables/util_cs.c:3084:7: style: The scope of the variable 'pgsize' can be reduced. [variableScope]
  int pgsize, i;
      ^
src/executables/util_cs.c:3084:15: style: The scope of the variable 'i' can be reduced. [variableScope]
  int pgsize, i;
              ^
src/executables/util_cs.c:3085:10: style: The scope of the variable 'size' can be reduced. [variableScope]
  double size;
         ^
src/executables/util_cs.c:3063:1: style: Label 'error_exit' is not used. There is #if in function body so the label might be used in code that is removed by the preprocessor. [unusedLabelConfiguration]
error_exit:
^
src/executables/util_cs.c:121:31: style:inconclusive: Function 'backupdb' argument 1 names different: declaration 'arg_map' definition 'arg'. [funcArgNamesDifferent]
backupdb (UTIL_FUNCTION_ARG * arg)
                              ^
src/executables/utility.h:1705:44: note: Function 'backupdb' argument 1 names different: declaration 'arg_map' definition 'arg'.
  extern int backupdb (UTIL_FUNCTION_ARG * arg_map);
                                           ^
src/executables/util_cs.c:121:31: note: Function 'backupdb' argument 1 names different: declaration 'arg_map' definition 'arg'.
backupdb (UTIL_FUNCTION_ARG * arg)
                              ^
src/executables/util_cs.c:355:31: style:inconclusive: Function 'addvoldb' argument 1 names different: declaration 'arg_map' definition 'arg'. [funcArgNamesDifferent]
addvoldb (UTIL_FUNCTION_ARG * arg)
                              ^
src/executables/utility.h:1706:44: note: Function 'addvoldb' argument 1 names different: declaration 'arg_map' definition 'arg'.
  extern int addvoldb (UTIL_FUNCTION_ARG * arg_map);
                                           ^
src/executables/util_cs.c:355:31: note: Function 'addvoldb' argument 1 names different: declaration 'arg_map' definition 'arg'.
addvoldb (UTIL_FUNCTION_ARG * arg)
                              ^
src/executables/util_cs.c:621:30: style:inconclusive: Function 'checkdb' argument 1 names different: declaration 'arg_map' definition 'arg'. [funcArgNamesDifferent]
checkdb (UTIL_FUNCTION_ARG * arg)
                             ^
src/executables/utility.h:1710:43: note: Function 'checkdb' argument 1 names different: declaration 'arg_map' definition 'arg'.
  extern int checkdb (UTIL_FUNCTION_ARG * arg_map);
                                          ^
src/executables/util_cs.c:621:30: note: Function 'checkdb' argument 1 names different: declaration 'arg_map' definition 'arg'.
checkdb (UTIL_FUNCTION_ARG * arg)
                             ^
src/executables/util_cs.c:844:30: style:inconclusive: Function 'spacedb' argument 1 names different: declaration 'arg_map' definition 'arg'. [funcArgNamesDifferent]
spacedb (UTIL_FUNCTION_ARG * arg)
                             ^
src/executables/utility.h:1711:43: note: Function 'spacedb' argument 1 names different: declaration 'arg_map' definition 'arg'.
  extern int spacedb (UTIL_FUNCTION_ARG * arg_map);
                                          ^
src/executables/util_cs.c:844:30: note: Function 'spacedb' argument 1 names different: declaration 'arg_map' definition 'arg'.
spacedb (UTIL_FUNCTION_ARG * arg)
                             ^
src/executables/util_cs.c:1128:28: style:inconclusive: Function 'acldb' argument 1 names different: declaration 'arg_map' definition 'arg'. [funcArgNamesDifferent]
acldb (UTIL_FUNCTION_ARG * arg)
                           ^
src/executables/utility.h:1739:41: note: Function 'acldb' argument 1 names different: declaration 'arg_map' definition 'arg'.
  extern int acldb (UTIL_FUNCTION_ARG * arg_map);
                                        ^
src/executables/util_cs.c:1128:28: note: Function 'acldb' argument 1 names different: declaration 'arg_map' definition 'arg'.
acldb (UTIL_FUNCTION_ARG * arg)
                           ^
src/executables/util_cs.c:1203:29: style:inconclusive: Function 'lockdb' argument 1 names different: declaration 'arg_map' definition 'arg'. [funcArgNamesDifferent]
lockdb (UTIL_FUNCTION_ARG * arg)
                            ^
src/executables/utility.h:1712:42: note: Function 'lockdb' argument 1 names different: declaration 'arg_map' definition 'arg'.
  extern int lockdb (UTIL_FUNCTION_ARG * arg_map);
                                         ^
src/executables/util_cs.c:1203:29: note: Function 'lockdb' argument 1 names different: declaration 'arg_map' definition 'arg'.
lockdb (UTIL_FUNCTION_ARG * arg)
                            ^
src/executables/util_cs.c:1672:31: style:inconclusive: Function 'tranlist' argument 1 names different: declaration 'arg_map' definition 'arg'. [funcArgNamesDifferent]
tranlist (UTIL_FUNCTION_ARG * arg)
                              ^
src/executables/utility.h:1713:44: note: Function 'tranlist' argument 1 names different: declaration 'arg_map' definition 'arg'.
  extern int tranlist (UTIL_FUNCTION_ARG * arg_map);
                                           ^
src/executables/util_cs.c:1672:31: note: Function 'tranlist' argument 1 names different: declaration 'arg_map' definition 'arg'.
tranlist (UTIL_FUNCTION_ARG * arg)
                              ^
src/executables/util_cs.c:1842:31: style:inconclusive: Function 'killtran' argument 1 names different: declaration 'arg_map' definition 'arg'. [funcArgNamesDifferent]
killtran (UTIL_FUNCTION_ARG * arg)
                              ^
src/executables/utility.h:1714:44: note: Function 'killtran' argument 1 names different: declaration 'arg_map' definition 'arg'.
  extern int killtran (UTIL_FUNCTION_ARG * arg_map);
                                           ^
src/executables/util_cs.c:1842:31: note: Function 'killtran' argument 1 names different: declaration 'arg_map' definition 'arg'.
killtran (UTIL_FUNCTION_ARG * arg)
                              ^
src/executables/util_cs.c:2105:31: style:inconclusive: Function 'plandump' argument 1 names different: declaration 'arg_map' definition 'arg'. [funcArgNamesDifferent]
plandump (UTIL_FUNCTION_ARG * arg)
                              ^
src/executables/utility.h:1719:44: note: Function 'plandump' argument 1 names different: declaration 'arg_map' definition 'arg'.
  extern int plandump (UTIL_FUNCTION_ARG * arg_map);
                                           ^
src/executables/util_cs.c:2105:31: note: Function 'plandump' argument 1 names different: declaration 'arg_map' definition 'arg'.
plandump (UTIL_FUNCTION_ARG * arg)
                              ^
src/executables/util_cs.c:2206:32: style:inconclusive: Function 'paramdump' argument 1 names different: declaration 'arg_map' definition 'arg'. [funcArgNamesDifferent]
paramdump (UTIL_FUNCTION_ARG * arg)
                               ^
src/executables/utility.h:1733:45: note: Function 'paramdump' argument 1 names different: declaration 'arg_map' definition 'arg'.
  extern int paramdump (UTIL_FUNCTION_ARG * arg_map);
                                            ^
src/executables/util_cs.c:2206:32: note: Function 'paramdump' argument 1 names different: declaration 'arg_map' definition 'arg'.
paramdump (UTIL_FUNCTION_ARG * arg)
                               ^
src/executables/util_cs.c:2323:31: style:inconclusive: Function 'statdump' argument 1 names different: declaration 'arg_map' definition 'arg'. [funcArgNamesDifferent]
statdump (UTIL_FUNCTION_ARG * arg)
                              ^
src/executables/utility.h:1734:44: note: Function 'statdump' argument 1 names different: declaration 'arg_map' definition 'arg'.
  extern int statdump (UTIL_FUNCTION_ARG * arg_map);
                                           ^
src/executables/util_cs.c:2323:31: note: Function 'statdump' argument 1 names different: declaration 'arg_map' definition 'arg'.
statdump (UTIL_FUNCTION_ARG * arg)
                              ^
src/executables/util_cs.c:2486:33: style:inconclusive: Function 'changemode' argument 1 names different: declaration 'arg_map' definition 'arg'. [funcArgNamesDifferent]
changemode (UTIL_FUNCTION_ARG * arg)
                                ^
src/executables/utility.h:1735:46: note: Function 'changemode' argument 1 names different: declaration 'arg_map' definition 'arg'.
  extern int changemode (UTIL_FUNCTION_ARG * arg_map);
                                             ^
src/executables/util_cs.c:2486:33: note: Function 'changemode' argument 1 names different: declaration 'arg_map' definition 'arg'.
changemode (UTIL_FUNCTION_ARG * arg)
                                ^
src/executables/util_cs.c:2633:32: style:inconclusive: Function 'copylogdb' argument 1 names different: declaration 'arg_map' definition 'arg'. [funcArgNamesDifferent]
copylogdb (UTIL_FUNCTION_ARG * arg)
                               ^
src/executables/utility.h:1736:45: note: Function 'copylogdb' argument 1 names different: declaration 'arg_map' definition 'arg'.
  extern int copylogdb (UTIL_FUNCTION_ARG * arg_map);
                                            ^
src/executables/util_cs.c:2633:32: note: Function 'copylogdb' argument 1 names different: declaration 'arg_map' definition 'arg'.
copylogdb (UTIL_FUNCTION_ARG * arg)
                               ^
src/executables/util_cs.c:2862:33: style:inconclusive: Function 'applylogdb' argument 1 names different: declaration 'arg_map' definition 'arg'. [funcArgNamesDifferent]
applylogdb (UTIL_FUNCTION_ARG * arg)
                                ^
src/executables/utility.h:1737:46: note: Function 'applylogdb' argument 1 names different: declaration 'arg_map' definition 'arg'.
  extern int applylogdb (UTIL_FUNCTION_ARG * arg_map);
                                             ^
src/executables/util_cs.c:2862:33: note: Function 'applylogdb' argument 1 names different: declaration 'arg_map' definition 'arg'.
applylogdb (UTIL_FUNCTION_ARG * arg)
                                ^
src/executables/util_cs.c:3130:32: style:inconclusive: Function 'applyinfo' argument 1 names different: declaration 'arg_map' definition 'arg'. [funcArgNamesDifferent]
applyinfo (UTIL_FUNCTION_ARG * arg)
                               ^
src/executables/utility.h:1738:45: note: Function 'applyinfo' argument 1 names different: declaration 'arg_map' definition 'arg'.
  extern int applyinfo (UTIL_FUNCTION_ARG * arg_map);
                                            ^
src/executables/util_cs.c:3130:32: note: Function 'applyinfo' argument 1 names different: declaration 'arg_map' definition 'arg'.
applyinfo (UTIL_FUNCTION_ARG * arg)
                               ^
src/executables/util_cs.c:3560:31: style:inconclusive: Function 'vacuumdb' argument 1 names different: declaration 'arg_map' definition 'arg'. [funcArgNamesDifferent]
vacuumdb (UTIL_FUNCTION_ARG * arg)
                              ^
src/executables/utility.h:1747:44: note: Function 'vacuumdb' argument 1 names different: declaration 'arg_map' definition 'arg'.
  extern int vacuumdb (UTIL_FUNCTION_ARG * arg_map);
                                           ^
src/executables/util_cs.c:3560:31: note: Function 'vacuumdb' argument 1 names different: declaration 'arg_map' definition 'arg'.
vacuumdb (UTIL_FUNCTION_ARG * arg)
                              ^
src/executables/util_cs.c:3644:26: style:inconclusive: Function 'tde' argument 1 names different: declaration 'arg_map' definition 'arg'. [funcArgNamesDifferent]
tde (UTIL_FUNCTION_ARG * arg)
                         ^
src/executables/utility.h:1749:39: note: Function 'tde' argument 1 names different: declaration 'arg_map' definition 'arg'.
  extern int tde (UTIL_FUNCTION_ARG * arg_map);
                                      ^
src/executables/util_cs.c:3644:26: note: Function 'tde' argument 1 names different: declaration 'arg_map' definition 'arg'.
tde (UTIL_FUNCTION_ARG * arg)
                         ^
src/executables/util_cs.c:1815:7: style: Condition 'info' is always true [knownConditionTrueFalse]
  if (info)
      ^
src/executables/util_cs.c:1796:12: note: Assuming that condition 'info==NULL' is not redundant
  if (info == NULL)
           ^
src/executables/util_cs.c:1815:7: note: Condition 'info' is always true
  if (info)
      ^
src/executables/util_cs.c:1684:7: style: Unused variable: error [unusedVariable]
  int error;
      ^
src/executables/util_sa.c:2432:22: style: Condition 'locale_str==NULL' is always false [knownConditionTrueFalse]
      if (locale_str == NULL || strlen (locale_str) > LOC_LOCALE_STR_SIZE)
                     ^
src/executables/util_sa.c:2427:18: note: Assuming that condition 'locale_str!=NULL' is not redundant
  if (locale_str != NULL)
                 ^
src/executables/util_sa.c:2432:22: note: Condition 'locale_str==NULL' is always false
      if (locale_str == NULL || strlen (locale_str) > LOC_LOCALE_STR_SIZE)
                     ^
src/executables/util_sa.c:3320:18: style: Condition 'f_stmt!=NULL' is always true [knownConditionTrueFalse]
      if (f_stmt != NULL)
                 ^
src/executables/util_sa.c:2765:14: note: Assuming that condition 'f_stmt==NULL' is not redundant
  if (f_stmt == NULL)
             ^
src/executables/util_sa.c:3320:18: note: Condition 'f_stmt!=NULL' is always true
      if (f_stmt != NULL)
                 ^
src/executables/util_sa.c:3970:19: style: Condition 'db_name!=NULL' is always true [knownConditionTrueFalse]
      if (db_name != NULL && check_database_name (db_name) != NO_ERROR)
                  ^
src/executables/util_sa.c:3964:19: note: Assuming that condition 'db_name==NULL' is not redundant
      if (db_name == NULL)
                  ^
src/executables/util_sa.c:3970:19: note: Condition 'db_name!=NULL' is always true
      if (db_name != NULL && check_database_name (db_name) != NO_ERROR)
                  ^
src/executables/util_sa.c:159:8: style: The scope of the variable 'group_type' can be reduced. [variableScope]
  bool group_type;
       ^
src/executables/util_sa.c:155:31: style:inconclusive: Function 'parse_user_define_line' argument 1 names different: declaration 'line' definition 'line_buffer'. [funcArgNamesDifferent]
parse_user_define_line (char *line_buffer, FILE * output_file)
                              ^
src/executables/util_sa.c:100:42: note: Function 'parse_user_define_line' argument 1 names different: declaration 'line' definition 'line_buffer'.
static int parse_user_define_line (char *line, FILE * output_file);
                                         ^
src/executables/util_sa.c:155:31: note: Function 'parse_user_define_line' argument 1 names different: declaration 'line' definition 'line_buffer'.
parse_user_define_line (char *line_buffer, FILE * output_file)
                              ^
src/executables/util_sa.c:303:31: style:inconclusive: Function 'createdb' argument 1 names different: declaration 'arg_map' definition 'arg'. [funcArgNamesDifferent]
createdb (UTIL_FUNCTION_ARG * arg)
                              ^
src/executables/utility.h:1720:44: note: Function 'createdb' argument 1 names different: declaration 'arg_map' definition 'arg'.
  extern int createdb (UTIL_FUNCTION_ARG * arg_map);
                                           ^
src/executables/util_sa.c:303:31: note: Function 'createdb' argument 1 names different: declaration 'arg_map' definition 'arg'.
createdb (UTIL_FUNCTION_ARG * arg)
                              ^
src/executables/util_sa.c:708:31: style:inconclusive: Function 'deletedb' argument 1 names different: declaration 'arg_map' definition 'arg'. [funcArgNamesDifferent]
deletedb (UTIL_FUNCTION_ARG * arg)
                              ^
src/executables/utility.h:1721:44: note: Function 'deletedb' argument 1 names different: declaration 'arg_map' definition 'arg'.
  extern int deletedb (UTIL_FUNCTION_ARG * arg_map);
                                           ^
src/executables/util_sa.c:708:31: note: Function 'deletedb' argument 1 names different: declaration 'arg_map' definition 'arg'.
deletedb (UTIL_FUNCTION_ARG * arg)
                              ^
src/executables/util_sa.c:793:25: style:inconclusive: Function 'parse_up_to_date' argument 1 names different: declaration 'up_to_date' definition 'date_string'. [funcArgNamesDifferent]
parse_up_to_date (char *date_string, struct tm *time_data)
                        ^
src/executables/util_sa.c:102:36: note: Function 'parse_up_to_date' argument 1 names different: declaration 'up_to_date' definition 'date_string'.
static int parse_up_to_date (char *up_to_date, struct tm *time_date);
                                   ^
src/executables/util_sa.c:793:25: note: Function 'parse_up_to_date' argument 1 names different: declaration 'up_to_date' definition 'date_string'.
parse_up_to_date (char *date_string, struct tm *time_data)
                        ^
src/executables/util_sa.c:793:49: style:inconclusive: Function 'parse_up_to_date' argument 2 names different: declaration 'time_date' definition 'time_data'. [funcArgNamesDifferent]
parse_up_to_date (char *date_string, struct tm *time_data)
                                                ^
src/executables/util_sa.c:102:59: note: Function 'parse_up_to_date' argument 2 names different: declaration 'time_date' definition 'time_data'.
static int parse_up_to_date (char *up_to_date, struct tm *time_date);
                                                          ^
src/executables/util_sa.c:793:49: note: Function 'parse_up_to_date' argument 2 names different: declaration 'time_date' definition 'time_data'.
parse_up_to_date (char *date_string, struct tm *time_data)
                                                ^
src/executables/util_sa.c:908:32: style:inconclusive: Function 'restoredb' argument 1 names different: declaration 'arg_map' definition 'arg'. [funcArgNamesDifferent]
restoredb (UTIL_FUNCTION_ARG * arg)
                               ^
src/executables/utility.h:1722:45: note: Function 'restoredb' argument 1 names different: declaration 'arg_map' definition 'arg'.
  extern int restoredb (UTIL_FUNCTION_ARG * arg_map);
                                            ^
src/executables/util_sa.c:908:32: note: Function 'restoredb' argument 1 names different: declaration 'arg_map' definition 'arg'.
restoredb (UTIL_FUNCTION_ARG * arg)
                               ^
src/executables/util_sa.c:1026:31: style:inconclusive: Function 'renamedb' argument 1 names different: declaration 'arg_map' definition 'arg'. [funcArgNamesDifferent]
renamedb (UTIL_FUNCTION_ARG * arg)
                              ^
src/executables/utility.h:1723:44: note: Function 'renamedb' argument 1 names different: declaration 'arg_map' definition 'arg'.
  extern int renamedb (UTIL_FUNCTION_ARG * arg_map);
                                           ^
src/executables/util_sa.c:1026:31: note: Function 'renamedb' argument 1 names different: declaration 'arg_map' definition 'arg'.
renamedb (UTIL_FUNCTION_ARG * arg)
                              ^
src/executables/util_sa.c:1117:32: style:inconclusive: Function 'installdb' argument 1 names different: declaration 'arg_map' definition 'arg'. [funcArgNamesDifferent]
installdb (UTIL_FUNCTION_ARG * arg)
                               ^
src/executables/utility.h:1724:45: note: Function 'installdb' argument 1 names different: declaration 'arg_map' definition 'arg'.
  extern int installdb (UTIL_FUNCTION_ARG * arg_map);
                                            ^
src/executables/util_sa.c:1117:32: note: Function 'installdb' argument 1 names different: declaration 'arg_map' definition 'arg'.
installdb (UTIL_FUNCTION_ARG * arg)
                               ^
src/executables/util_sa.c:1236:29: style:inconclusive: Function 'copydb' argument 1 names different: declaration 'arg_map' definition 'arg'. [funcArgNamesDifferent]
copydb (UTIL_FUNCTION_ARG * arg)
                            ^
src/executables/utility.h:1725:42: note: Function 'copydb' argument 1 names different: declaration 'arg_map' definition 'arg'.
  extern int copydb (UTIL_FUNCTION_ARG * arg_map);
                                         ^
src/executables/util_sa.c:1236:29: note: Function 'copydb' argument 1 names different: declaration 'arg_map' definition 'arg'.
copydb (UTIL_FUNCTION_ARG * arg)
                            ^
src/executables/util_sa.c:1349:33: style:inconclusive: Function 'optimizedb' argument 1 names different: declaration 'arg_map' definition 'arg'. [funcArgNamesDifferent]
optimizedb (UTIL_FUNCTION_ARG * arg)
                                ^
src/executables/utility.h:1726:46: note: Function 'optimizedb' argument 1 names different: declaration 'arg_map' definition 'arg'.
  extern int optimizedb (UTIL_FUNCTION_ARG * arg_map);
                                             ^
src/executables/util_sa.c:1349:33: note: Function 'optimizedb' argument 1 names different: declaration 'arg_map' definition 'arg'.
optimizedb (UTIL_FUNCTION_ARG * arg)
                                ^
src/executables/util_sa.c:1446:29: style:inconclusive: Function 'diagdb' argument 1 names different: declaration 'arg_map' definition 'arg'. [funcArgNamesDifferent]
diagdb (UTIL_FUNCTION_ARG * arg)
                            ^
src/executables/utility.h:1727:42: note: Function 'diagdb' argument 1 names different: declaration 'arg_map' definition 'arg'.
  extern int diagdb (UTIL_FUNCTION_ARG * arg_map);
                                         ^
src/executables/util_sa.c:1446:29: note: Function 'diagdb' argument 1 names different: declaration 'arg_map' definition 'arg'.
diagdb (UTIL_FUNCTION_ARG * arg)
                            ^
src/executables/util_sa.c:1672:30: style:inconclusive: Function 'patchdb' argument 1 names different: declaration 'arg_map' definition 'arg'. [funcArgNamesDifferent]
patchdb (UTIL_FUNCTION_ARG * arg)
                             ^
src/executables/utility.h:1728:43: note: Function 'patchdb' argument 1 names different: declaration 'arg_map' definition 'arg'.
  extern int patchdb (UTIL_FUNCTION_ARG * arg_map);
                                          ^
src/executables/util_sa.c:1672:30: note: Function 'patchdb' argument 1 names different: declaration 'arg_map' definition 'arg'.
patchdb (UTIL_FUNCTION_ARG * arg)
                             ^
src/executables/util_sa.c:1896:34: style:inconclusive: Function 'alterdbhost' argument 1 names different: declaration 'arg_map' definition 'arg'. [funcArgNamesDifferent]
alterdbhost (UTIL_FUNCTION_ARG * arg)
                                 ^
src/executables/utility.h:1732:47: note: Function 'alterdbhost' argument 1 names different: declaration 'arg_map' definition 'arg'.
  extern int alterdbhost (UTIL_FUNCTION_ARG * arg_map);
                                              ^
src/executables/util_sa.c:1896:34: note: Function 'alterdbhost' argument 1 names different: declaration 'arg_map' definition 'arg'.
alterdbhost (UTIL_FUNCTION_ARG * arg)
                                 ^
src/executables/util_sa.c:2059:32: style:inconclusive: Function 'genlocale' argument 1 names different: declaration 'arg_map' definition 'arg'. [funcArgNamesDifferent]
genlocale (UTIL_FUNCTION_ARG * arg)
                               ^
src/executables/utility.h:1740:45: note: Function 'genlocale' argument 1 names different: declaration 'arg_map' definition 'arg'.
  extern int genlocale (UTIL_FUNCTION_ARG * arg_map);
                                            ^
src/executables/util_sa.c:2059:32: note: Function 'genlocale' argument 1 names different: declaration 'arg_map' definition 'arg'.
genlocale (UTIL_FUNCTION_ARG * arg)
                               ^
src/executables/util_sa.c:2289:33: style:inconclusive: Function 'dumplocale' argument 1 names different: declaration 'arg_map' definition 'arg'. [funcArgNamesDifferent]
dumplocale (UTIL_FUNCTION_ARG * arg)
                                ^
src/executables/utility.h:1741:46: note: Function 'dumplocale' argument 1 names different: declaration 'arg_map' definition 'arg'.
  extern int dumplocale (UTIL_FUNCTION_ARG * arg_map);
                                             ^
src/executables/util_sa.c:2289:33: note: Function 'dumplocale' argument 1 names different: declaration 'arg_map' definition 'arg'.
dumplocale (UTIL_FUNCTION_ARG * arg)
                                ^
src/executables/util_sa.c:2582:33: style:inconclusive: Function 'synccolldb' argument 1 names different: declaration 'arg_map' definition 'arg'. [funcArgNamesDifferent]
synccolldb (UTIL_FUNCTION_ARG * arg)
                                ^
src/executables/utility.h:1742:46: note: Function 'synccolldb' argument 1 names different: declaration 'arg_map' definition 'arg'.
  extern int synccolldb (UTIL_FUNCTION_ARG * arg_map);
                                             ^
src/executables/util_sa.c:2582:33: note: Function 'synccolldb' argument 1 names different: declaration 'arg_map' definition 'arg'.
synccolldb (UTIL_FUNCTION_ARG * arg)
                                ^
src/executables/util_sa.c:3736:35: style:inconclusive: Function 'restoreslave' argument 1 names different: declaration 'arg_map' definition 'arg'. [funcArgNamesDifferent]
restoreslave (UTIL_FUNCTION_ARG * arg)
                                  ^
src/executables/utility.h:1746:48: note: Function 'restoreslave' argument 1 names different: declaration 'arg_map' definition 'arg'.
  extern int restoreslave (UTIL_FUNCTION_ARG * arg_map);
                                               ^
src/executables/util_sa.c:3736:35: note: Function 'restoreslave' argument 1 names different: declaration 'arg_map' definition 'arg'.
restoreslave (UTIL_FUNCTION_ARG * arg)
                                  ^
src/executables/util_sa.c:3924:29: style:inconclusive: Function 'gen_tz' argument 1 names different: declaration 'arg_map' definition 'arg'. [funcArgNamesDifferent]
gen_tz (UTIL_FUNCTION_ARG * arg)
                            ^
src/executables/utility.h:1743:42: note: Function 'gen_tz' argument 1 names different: declaration 'arg_map' definition 'arg'.
  extern int gen_tz (UTIL_FUNCTION_ARG * arg_map);
                                         ^
src/executables/util_sa.c:3924:29: note: Function 'gen_tz' argument 1 names different: declaration 'arg_map' definition 'arg'.
gen_tz (UTIL_FUNCTION_ARG * arg)
                            ^
src/executables/util_sa.c:4113:30: style:inconclusive: Function 'dump_tz' argument 1 names different: declaration 'arg_map' definition 'arg'. [funcArgNamesDifferent]
dump_tz (UTIL_FUNCTION_ARG * arg)
                             ^
src/executables/utility.h:1744:43: note: Function 'dump_tz' argument 1 names different: declaration 'arg_map' definition 'arg'.
  extern int dump_tz (UTIL_FUNCTION_ARG * arg_map);
                                          ^
src/executables/util_sa.c:4113:30: note: Function 'dump_tz' argument 1 names different: declaration 'arg_map' definition 'arg'.
dump_tz (UTIL_FUNCTION_ARG * arg)
                             ^
src/executables/util_sa.c:1733:38: style:inconclusive: Function 'estimatedb_data' argument 1 names different: declaration 'arg_map' definition 'arg'. [funcArgNamesDifferent]
estimatedb_data (UTIL_FUNCTION_ARG * arg)
                                     ^
src/executables/utility.h:1729:51: note: Function 'estimatedb_data' argument 1 names different: declaration 'arg_map' definition 'arg'.
  extern int estimatedb_data (UTIL_FUNCTION_ARG * arg_map);
                                                  ^
src/executables/util_sa.c:1733:38: note: Function 'estimatedb_data' argument 1 names different: declaration 'arg_map' definition 'arg'.
estimatedb_data (UTIL_FUNCTION_ARG * arg)
                                     ^
src/executables/util_sa.c:1746:39: style:inconclusive: Function 'estimatedb_index' argument 1 names different: declaration 'arg_map' definition 'arg'. [funcArgNamesDifferent]
estimatedb_index (UTIL_FUNCTION_ARG * arg)
                                      ^
src/executables/utility.h:1730:52: note: Function 'estimatedb_index' argument 1 names different: declaration 'arg_map' definition 'arg'.
  extern int estimatedb_index (UTIL_FUNCTION_ARG * arg_map);
                                                   ^
src/executables/util_sa.c:1746:39: note: Function 'estimatedb_index' argument 1 names different: declaration 'arg_map' definition 'arg'.
estimatedb_index (UTIL_FUNCTION_ARG * arg)
                                      ^
src/executables/util_service.c:997:16: style: Redundant condition: pid!=0. 'pid==0 || (pid!=0 && is_terminated_process(pid))' is equivalent to 'pid==0 || is_terminated_process(pid)' [redundantCondition]
  if (pid == 0 || (pid != 0 && is_terminated_process (pid)))
               ^
src/executables/util_service.c:1046:11: style: Variable 'status' is reassigned a value before the old one has been used. [redundantAssignment]
   status = css_does_master_exist (master_port) ? ER_GENERIC_ERROR : NO_ERROR;
          ^
src/executables/util_service.c:1044:11: note: status is assigned
   status = proc_execute (UTIL_COMMDB_NAME, args, true, false, false, NULL);
          ^
src/executables/util_service.c:1046:11: note: status is overwritten
   status = css_does_master_exist (master_port) ? ER_GENERIC_ERROR : NO_ERROR;
          ^
src/executables/util_service.c:1407:14: style: Variable 'status' is reassigned a value before the old one has been used. [redundantAssignment]
      status = process_service (START, process_window_service);
             ^
src/executables/util_service.c:1406:14: note: status is assigned
      status = process_service (STOP, process_window_service);
             ^
src/executables/util_service.c:1407:14: note: status is overwritten
      status = process_service (START, process_window_service);
             ^
src/executables/util_service.c:1774:14: style: Variable 'status' is reassigned a value before the old one has been used. [redundantAssignment]
      status = process_server (START, argc, argv, show_usage, check_ha_mode, process_window_service);
             ^
src/executables/util_service.c:1773:14: note: status is assigned
      status = process_server (STOP, argc, argv, show_usage, check_ha_mode, process_window_service);
             ^
src/executables/util_service.c:1774:14: note: status is overwritten
      status = process_server (START, argc, argv, show_usage, check_ha_mode, process_window_service);
             ^
src/executables/util_service.c:1894:15: style: Variable 'status' is reassigned a value before the old one has been used. [redundantAssignment]
       status = (is_broker_running () == 0) ? NO_ERROR : ER_GENERIC_ERROR;
              ^
src/executables/util_service.c:1893:15: note: status is assigned
       status = proc_execute (UTIL_BROKER_NAME, args, true, false, false, NULL);
              ^
src/executables/util_service.c:1894:15: note: status is overwritten
       status = (is_broker_running () == 0) ? NO_ERROR : ER_GENERIC_ERROR;
              ^
src/executables/util_service.c:1926:15: style: Variable 'status' is reassigned a value before the old one has been used. [redundantAssignment]
       status = (is_broker_running () == 0) ? ER_GENERIC_ERROR : NO_ERROR;
              ^
src/executables/util_service.c:1925:15: note: status is assigned
       status = proc_execute (UTIL_BROKER_NAME, args, true, false, false, NULL);
              ^
src/executables/util_service.c:1926:15: note: status is overwritten
       status = (is_broker_running () == 0) ? ER_GENERIC_ERROR : NO_ERROR;
              ^
src/executables/util_service.c:1947:14: style: Variable 'status' is reassigned a value before the old one has been used. [redundantAssignment]
      status = process_broker (START, 0, NULL, process_window_service);
             ^
src/executables/util_service.c:1943:14: note: status is assigned
      status = process_broker (STOP, 0, NULL, process_window_service);
             ^
src/executables/util_service.c:1947:14: note: status is overwritten
      status = process_broker (START, 0, NULL, process_window_service);
             ^
src/executables/util_service.c:2318:11: style: Variable 'status' is reassigned a value before the old one has been used. [redundantAssignment]
   status = (is_manager_running (1) == MANAGER_SERVER_STOPPED) ? NO_ERROR : ER_GENERIC_ERROR;
          ^
src/executables/util_service.c:2316:15: note: status is assigned
       status = proc_execute (UTIL_CUB_MANAGER_NAME, args, true, false, false, NULL);
              ^
src/executables/util_service.c:2318:11: note: status is overwritten
   status = (is_manager_running (1) == MANAGER_SERVER_STOPPED) ? NO_ERROR : ER_GENERIC_ERROR;
          ^
src/executables/util_service.c:2435:14: style: Variable 'status' is reassigned a value before the old one has been used. [redundantAssignment]
      status = ER_GENERIC_ERROR;
             ^
src/executables/util_service.c:2432:11: note: status is assigned
   status = proc_execute (UTIL_JAVASP_NAME, args, false, false, false, &pid);
          ^
src/executables/util_service.c:2435:14: note: status is overwritten
      status = ER_GENERIC_ERROR;
             ^
src/executables/util_service.c:2588:11: style: Variable 'status' is reassigned a value before the old one has been used. [redundantAssignment]
   status = process_javasp_start (db_name, process_window_service);
          ^
src/executables/util_service.c:2587:11: note: status is assigned
   status = process_javasp_stop (db_name, process_window_service);
          ^
src/executables/util_service.c:2588:11: note: status is overwritten
   status = process_javasp_start (db_name, process_window_service);
          ^
src/executables/util_service.c:656:34: style: The comparison 'process_window_service == false' is always true because 'process_window_service' and 'false' represent the same value. [knownConditionTrueFalse]
  assert (process_window_service == false);
                                 ^
src/executables/util_service.c:521:33: note: 'process_window_service' is assigned value 'false' here.
  bool process_window_service = false;
                                ^
src/executables/util_service.c:656:34: note: The comparison 'process_window_service == false' is always true because 'process_window_service' and 'false' represent the same value.
  assert (process_window_service == false);
                                 ^
src/executables/util_service.c:1174:20: style: The scope of the variable 'token' can be reduced. [variableScope]
      char *list, *token, *save;
                   ^
src/executables/util_service.c:1201:20: style: The scope of the variable 'token' can be reduced. [variableScope]
      char *list, *token, *save;
                   ^
src/executables/util_service.c:1457:20: style: The scope of the variable 'token' can be reduced. [variableScope]
  char buf[4096], *token, *save_ptr, *delim = (char *) " ";
                   ^
src/executables/util_service.c:4323:7: style: The scope of the variable 'master_port' can be reduced. [variableScope]
  int master_port;
      ^
src/executables/util_service.c:4670:1: style: Label 'ret' is not used. There is #if in function body so the label might be used in code that is removed by the preprocessor. [unusedLabelConfiguration]
ret:
^
src/executables/util_service.c:751:110: style:inconclusive: Function 'proc_execute' argument 6 names different: declaration 'pid' definition 'out_pid'. [funcArgNamesDifferent]
proc_execute (const char *file, const char *args[], bool wait_child, bool close_output, bool close_err, int *out_pid)
                                                                                                             ^
src/executables/util_service.c:282:10: note: Function 'proc_execute' argument 6 names different: declaration 'pid' definition 'out_pid'.
    int *pid);
         ^
src/executables/util_service.c:751:110: note: Function 'proc_execute' argument 6 names different: declaration 'pid' definition 'out_pid'.
proc_execute (const char *file, const char *args[], bool wait_child, bool close_output, bool close_err, int *out_pid)
                                                                                                             ^
src/executables/util_service.c:763:13: style:inconclusive: Function 'proc_execute_hide_cmd_args' argument 6 names different: declaration 'pid' definition 'out_pid'. [funcArgNamesDifferent]
       int *out_pid)
            ^
src/executables/util_service.c:284:33: note: Function 'proc_execute_hide_cmd_args' argument 6 names different: declaration 'pid' definition 'out_pid'.
           bool close_err, int *pid);
                                ^
src/executables/util_service.c:763:13: note: Function 'proc_execute_hide_cmd_args' argument 6 names different: declaration 'pid' definition 'out_pid'.
       int *out_pid)
            ^
src/executables/util_service.c:857:35: style:inconclusive: Function 'proc_execute_internal' argument 7 names different: declaration 'pid' definition 'out_pid'. [funcArgNamesDifferent]
         bool hide_cmd_args, int *out_pid)
                                  ^
src/executables/util_service.c:280:48: note: Function 'proc_execute_internal' argument 7 names different: declaration 'pid' definition 'out_pid'.
      bool close_err, bool hide_cmd_args, int *pid);
                                               ^
src/executables/util_service.c:857:35: note: Function 'proc_execute_internal' argument 7 names different: declaration 'pid' definition 'out_pid'.
         bool hide_cmd_args, int *out_pid)
                                  ^
src/executables/util_service.c:3792:64: style:inconclusive: Function 'us_hb_stop_get_options' argument 3 names different: declaration 'host_name' definition 'remote_host_name'. [funcArgNamesDifferent]
us_hb_stop_get_options (char *db_name, int db_name_size, char *remote_host_name, int remote_host_name_size,
                                                               ^
src/executables/util_service.c:338:75: note: Function 'us_hb_stop_get_options' argument 3 names different: declaration 'host_name' definition 'remote_host_name'.
static int us_hb_stop_get_options (char *db_name, int db_name_size, char *host_name, int host_name_size,
                                                                          ^
src/executables/util_service.c:3792:64: note: Function 'us_hb_stop_get_options' argument 3 names different: declaration 'host_name' definition 'remote_host_name'.
us_hb_stop_get_options (char *db_name, int db_name_size, char *remote_host_name, int remote_host_name_size,
                                                               ^
src/executables/util_service.c:3792:86: style:inconclusive: Function 'us_hb_stop_get_options' argument 4 names different: declaration 'host_name_size' definition 'remote_host_name_size'. [funcArgNamesDifferent]
us_hb_stop_get_options (char *db_name, int db_name_size, char *remote_host_name, int remote_host_name_size,
                                                                                     ^
src/executables/util_service.c:338:90: note: Function 'us_hb_stop_get_options' argument 4 names different: declaration 'host_name_size' definition 'remote_host_name_size'.
static int us_hb_stop_get_options (char *db_name, int db_name_size, char *host_name, int host_name_size,
                                                                                         ^
src/executables/util_service.c:3792:86: note: Function 'us_hb_stop_get_options' argument 4 names different: declaration 'host_name_size' definition 'remote_host_name_size'.
us_hb_stop_get_options (char *db_name, int db_name_size, char *remote_host_name, int remote_host_name_size,
                                                                                     ^
src/executables/util_service.c:2287:20: style: Variable 'cub_manager' is assigned a value that is never used. [unreadVariable]
       cub_manager = proc_execute (UTIL_CUB_MANAGER_NAME, args, false, false, false, NULL);
                   ^
src/executables/util_service.c:1887:15: style: Variable 'status' is reassigned a value before the old one has been used. [redundantAssignment]
       status = (is_broker_running () == 0) ? NO_ERROR : ER_GENERIC_ERROR;
              ^
src/executables/util_service.c:1886:15: note: status is assigned
       status = proc_execute (UTIL_WIN_SERVICE_CONTROLLER_NAME, args, true, false, false, NULL);
              ^
src/executables/util_service.c:1887:15: note: status is overwritten
       status = (is_broker_running () == 0) ? NO_ERROR : ER_GENERIC_ERROR;
              ^
src/executables/util_service.c:1919:15: style: Variable 'status' is reassigned a value before the old one has been used. [redundantAssignment]
       status = (is_broker_running () == 0) ? ER_GENERIC_ERROR : NO_ERROR;
              ^
src/executables/util_service.c:1918:15: note: status is assigned
       status = proc_execute (UTIL_WIN_SERVICE_CONTROLLER_NAME, args, true, false, false, NULL);
              ^
src/executables/util_service.c:1919:15: note: status is overwritten
       status = (is_broker_running () == 0) ? ER_GENERIC_ERROR : NO_ERROR;
              ^
src/executables/util_service.c:2290:11: style: Variable 'status' is reassigned a value before the old one has been used. [redundantAssignment]
   status = (is_manager_running (1) == MANAGER_SERVER_RUNNING) ? NO_ERROR : ER_GENERIC_ERROR;
          ^
src/executables/util_service.c:2281:15: note: status is assigned
       status = proc_execute (UTIL_WIN_SERVICE_CONTROLLER_NAME, args, true, false, false, NULL);
              ^
src/executables/util_service.c:2290:11: note: status is overwritten
   status = (is_manager_running (1) == MANAGER_SERVER_RUNNING) ? NO_ERROR : ER_GENERIC_ERROR;
          ^
src/executables/util_service.c:2318:11: style: Variable 'status' is reassigned a value before the old one has been used. [redundantAssignment]
   status = (is_manager_running (1) == MANAGER_SERVER_STOPPED) ? NO_ERROR : ER_GENERIC_ERROR;
          ^
src/executables/util_service.c:2310:15: note: status is assigned
       status = proc_execute (UTIL_WIN_SERVICE_CONTROLLER_NAME, args, true, false, false, NULL);
              ^
src/executables/util_service.c:2318:11: note: status is overwritten
   status = (is_manager_running (1) == MANAGER_SERVER_STOPPED) ? NO_ERROR : ER_GENERIC_ERROR;
          ^
src/executables/util_service.c:2435:14: style: Variable 'status' is reassigned a value before the old one has been used. [redundantAssignment]
      status = ER_GENERIC_ERROR;
             ^
src/executables/util_service.c:2426:11: note: status is assigned
   status = proc_execute (UTIL_WIN_SERVICE_CONTROLLER_NAME, args, true, false, false, NULL);
          ^
src/executables/util_service.c:2435:14: note: status is overwritten
      status = ER_GENERIC_ERROR;
             ^
src/executables/util_service.c:771:35: style:inconclusive: Function 'proc_execute_internal' argument 7 names different: declaration 'pid' definition 'out_pid'. [funcArgNamesDifferent]
         bool hide_cmd_args, int *out_pid)
                                  ^
src/executables/util_service.c:280:48: note: Function 'proc_execute_internal' argument 7 names different: declaration 'pid' definition 'out_pid'.
      bool close_err, bool hide_cmd_args, int *pid);
                                               ^
src/executables/util_service.c:771:35: note: Function 'proc_execute_internal' argument 7 names different: declaration 'pid' definition 'out_pid'.
         bool hide_cmd_args, int *out_pid)
                                  ^
src/executables/util_support.c:189:7: style: The scope of the variable 'option_value' can be reduced. [variableScope]
  int option_value;
      ^
src/executables/util_support.c:77:56: style:inconclusive: Function 'utility_load_library' argument 2 names different: declaration 'lib_path' definition 'path'. [funcArgNamesDifferent]
utility_load_library (DSO_HANDLE * handle, const char *path)
                                                       ^
src/executables/util_support.h:33:67: note: Function 'utility_load_library' argument 2 names different: declaration 'lib_path' definition 'path'.
extern int utility_load_library (DSO_HANDLE * handle, const char *lib_path);
                                                                  ^
src/executables/util_support.c:77:56: note: Function 'utility_load_library' argument 2 names different: declaration 'lib_path' definition 'path'.
utility_load_library (DSO_HANDLE * handle, const char *path)
                                                       ^
src/executables/util_support.c:237:0: information: Skipping configuration 'TRANLIST_PASSWORD_S' since the value of 'TRANLIST_PASSWORD_S' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      || (index == TRANLIST && value == TRANLIST_PASSWORD_S)
^
src/heaplayers/customheaps.cpp:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 33 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/heaplayers/heaps/special/obstackheap.h:50:17: warning: Assert statement calls a function which may have desired side effects: 'isValid'. [assertWithSideEffect]
        assert (isValid ());
                ^
src/heaplayers/heaps/special/obstackheap.h:56:15: warning: Assert statement calls a function which may have desired side effects: 'isValid'. [assertWithSideEffect]
      assert (isValid());
              ^
src/heaplayers/heaps/special/obstackheap.h:74:12: warning: Assert statement calls a function which may have desired side effects: 'isValid'. [assertWithSideEffect]
   assert (isValid ());
           ^
src/heaplayers/heaps/special/obstackheap.h:83:15: warning: Assert statement calls a function which may have desired side effects: 'isValid'. [assertWithSideEffect]
      assert (isValid());
              ^
src/heaplayers/heaps/special/obstackheap.h:94:17: warning: Assert statement calls a function which may have desired side effects: 'isValid'. [assertWithSideEffect]
        assert (isValid());
                ^
src/heaplayers/heaps/special/obstackheap.h:96:46: warning: Assert statement calls a function which may have desired side effects: 'getLimit'. [assertWithSideEffect]
      assert (((int) ((char *) currentChunk->getLimit() - (char *) nextPos) >= sz));
                                             ^
src/heaplayers/heaps/special/obstackheap.h:97:56: warning: Assert statement calls a function which may have desired side effects: 'getLimit'. [assertWithSideEffect]
      assert ((char *) (sz + nextPos) <= currentChunk->getLimit());
                                                       ^
src/heaplayers/heaps/special/obstackheap.h:101:15: warning: Assert statement calls a function which may have desired side effects: 'isValid'. [assertWithSideEffect]
      assert (isValid());
              ^
src/heaplayers/heaps/special/obstackheap.h:107:15: warning: Assert statement calls a function which may have desired side effects: 'isValid'. [assertWithSideEffect]
      assert (isValid());
              ^
src/heaplayers/heaps/special/obstackheap.h:121:17: warning: Assert statement calls a function which may have desired side effects: 'isValid'. [assertWithSideEffect]
        assert (isValid());
                ^
src/heaplayers/heaps/special/obstackheap.h:123:52: warning: Assert statement calls a function which may have desired side effects: 'getLimit'. [assertWithSideEffect]
      assert (((ptrdiff_t) ((char *) currentChunk->getLimit() - (char *) nextPos) >= (ptrdiff_t) sz));
                                                   ^
src/heaplayers/heaps/special/obstackheap.h:124:56: warning: Assert statement calls a function which may have desired side effects: 'getLimit'. [assertWithSideEffect]
      assert ((char *) (sz + nextPos) <= currentChunk->getLimit());
                                                       ^
src/heaplayers/heaps/special/obstackheap.h:130:15: warning: Assert statement calls a function which may have desired side effects: 'isValid'. [assertWithSideEffect]
      assert (isValid());
              ^
src/heaplayers/heaps/special/obstackheap.h:137:15: warning: Assert statement calls a function which may have desired side effects: 'isValid'. [assertWithSideEffect]
      assert (isValid());
              ^
src/heaplayers/heaps/special/obstackheap.h:149:17: warning: Assert statement calls a function which may have desired side effects: 'isValid'. [assertWithSideEffect]
        assert (isValid());
                ^
src/heaplayers/heaps/special/obstackheap.h:159:19: warning: Assert statement calls a function which may have desired side effects: 'isValid'. [assertWithSideEffect]
          assert (isValid());
                  ^
src/heaplayers/heaps/special/obstackheap.h:166:15: warning: Assert statement calls a function which may have desired side effects: 'isValid'. [assertWithSideEffect]
      assert (isValid());
              ^
src/heaplayers/heaps/special/obstackheap.h:172:15: warning: Assert statement calls a function which may have desired side effects: 'isValid'. [assertWithSideEffect]
      assert (isValid());
              ^
src/heaplayers/heaps/special/obstackheap.h:175:15: warning: Assert statement calls a function which may have desired side effects: 'isValid'. [assertWithSideEffect]
      assert (isValid());
              ^
src/heaplayers/heaps/special/zoneheap.h:129:7: warning: Member variable 'Arena::nextArena' is not initialized in the constructor. [uninitMemberVar]
      Arena() {
      ^
src/heaplayers/heaps/special/zoneheap.h:129:7: warning: Member variable 'Arena::arenaSpace' is not initialized in the constructor. [uninitMemberVar]
      Arena() {
      ^
src/heaplayers/locks/spinlock-old.h:162:17: style: Unused private function: 'SpinLockType::onMultiprocessor' [unusedPrivateFunction]
    inline bool onMultiprocessor (void) {
                ^
src/heaplayers/heaps/objectrep/sizeheap.h:84:24: style: Unused private function: 'SizeHeap < HL :: ObstackHeap < 0 , MallocHeap > >::setSize' [unusedPrivateFunction]
    inline static void setSize (void * ptr, size_t sz) {
                       ^
src/heaplayers/heaps/top/mallocheap.h:61:19: performance:inconclusive: Technically the member function 'HL::MallocHeap::getSize' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    inline size_t getSize (void * ptr) {
                  ^
src/heaplayers/locks/spinlock-old.h:162:17: performance:inconclusive: Technically the member function 'HL::SpinLockType::onMultiprocessor' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    inline bool onMultiprocessor (void) {
                ^
src/heaplayers/heaps/special/obstackheap.h:182:16: style:inconclusive: Technically the member function 'ObstackHeap < 0 , MallocHeap >::objectSize' can be const. [functionConst]
    inline int objectSize() {
               ^
src/heaplayers/heaps/special/zoneheap.h:80:17: performance:inconclusive: Technically the member function 'ZoneHeap < MallocHeap , 0 >::free' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    inline void free (void *) {}
                ^
src/heaplayers/heaps/special/zoneheap.h:83:16: performance:inconclusive: Technically the member function 'ZoneHeap < MallocHeap , 0 >::remove' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    inline int remove (void *) { return 0; }
               ^
src/heaplayers/customheaps.cpp:57:26: style: C-style pointer casting [cstyleCast]
  TheFixedHeapType *th = (TheFixedHeapType *) heap_id;
                         ^
src/heaplayers/customheaps.cpp:68:26: style: C-style pointer casting [cstyleCast]
  TheFixedHeapType *th = (TheFixedHeapType *) heap_id;
                         ^
src/heaplayers/customheaps.cpp:79:26: style: C-style pointer casting [cstyleCast]
  TheFixedHeapType *th = (TheFixedHeapType *) heap_id;
                         ^
src/heaplayers/customheaps.cpp:110:28: style: C-style pointer casting [cstyleCast]
  TheObstackHeapType *th = (TheObstackHeapType *) heap_id;
                           ^
src/heaplayers/customheaps.cpp:121:28: style: C-style pointer casting [cstyleCast]
  TheObstackHeapType *th = (TheObstackHeapType *) heap_id;
                           ^
src/heaplayers/customheaps.cpp:132:28: style: C-style pointer casting [cstyleCast]
  TheObstackHeapType *th = (TheObstackHeapType *) heap_id;
                           ^
src/heaplayers/heaps/special/zoneheap.h:110:4: style: C-style pointer casting [cstyleCast]
   (Arena *) SuperHeap::malloc (allocSize + sizeof(Arena));
   ^
src/heaplayers/heaps/objectrep/sizeheap.h:59:24: style: C-style pointer casting [cstyleCast]
      freeObject * p = (freeObject *) SuperHeap::malloc (sz + sizeof(freeObject));
                       ^
src/heaplayers/heaps/objectrep/sizeheap.h:90:15: style: C-style pointer casting [cstyleCast]
      return ((freeObject *) ptr - 1);
              ^
src/heaplayers/heaps/top/mallocheap.h:57:19: performance:inconclusive: Technically the member function 'HL::MallocHeap::getSize' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    inline size_t getSize (void * ptr) {
                  ^
src/heaplayers/lea_heap.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 33 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/heaplayers/malloc_2_8_3.c:2924:32: error: Pointer addition with NULL pointer. [nullPointerArithmetic]
   size_t mfree = m->topsize + TOP_FOOT_SIZE;
                               ^
src/heaplayers/malloc_2_8_3.c:2973:30: error: Pointer addition with NULL pointer. [nullPointerArithmetic]
   used = fp - (m->topsize + TOP_FOOT_SIZE);
                             ^
src/heaplayers/malloc_2_8_3.c:3357:40: error: Pointer addition with NULL pointer. [nullPointerArithmetic]
  chunk_plus_offset (p, psize)->head = TOP_FOOT_SIZE;
                                       ^
src/heaplayers/malloc_2_8_3.c:3463:43: error: Pointer addition with NULL pointer. [nullPointerArithmetic]
  init_top (m, (mchunkptr) tbase, tsize - TOP_FOOT_SIZE);
                                          ^
src/heaplayers/malloc_2_8_3.c:3549:16: error: Pointer addition with NULL pointer. [nullPointerArithmetic]
       asize = granularity_align (nb + TOP_FOOT_SIZE + SIZE_T_ONE);
               ^
src/heaplayers/malloc_2_8_3.c:3564:12: error: Pointer addition with NULL pointer. [nullPointerArithmetic]
   asize = granularity_align (nb - m->topsize + TOP_FOOT_SIZE + SIZE_T_ONE);
           ^
src/heaplayers/malloc_2_8_3.c:3577:52: error: Pointer addition with NULL pointer. [nullPointerArithmetic]
       if (asize < HALF_MAX_SIZE_T && asize < nb + TOP_FOOT_SIZE + SIZE_T_ONE)
                                                   ^
src/heaplayers/malloc_2_8_3.c:3579:20: error: Pointer addition with NULL pointer. [nullPointerArithmetic]
    size_t esize = granularity_align (nb + TOP_FOOT_SIZE + SIZE_T_ONE - asize);
                   ^
src/heaplayers/malloc_2_8_3.c:3607:25: error: Pointer addition with NULL pointer. [nullPointerArithmetic]
      size_t req = nb + TOP_FOOT_SIZE + SIZE_T_ONE;
                        ^
src/heaplayers/malloc_2_8_3.c:3623:22: error: Pointer addition with NULL pointer. [nullPointerArithmetic]
      size_t asize = granularity_align (nb + TOP_FOOT_SIZE + SIZE_T_ONE);
                     ^
src/heaplayers/malloc_2_8_3.c:3635:25: error: Pointer addition with NULL pointer. [nullPointerArithmetic]
       if (ssize > nb + TOP_FOOT_SIZE)
                        ^
src/heaplayers/malloc_2_8_3.c:3658:46: error: Pointer addition with NULL pointer. [nullPointerArithmetic]
     init_top (m, (mchunkptr) tbase, tsize - TOP_FOOT_SIZE);
                                             ^
src/heaplayers/malloc_2_8_3.c:3663:68: error: Pointer addition with NULL pointer. [nullPointerArithmetic]
       init_top (m, mn, (size_t) ((tbase + tsize) - (char *) mn) - TOP_FOOT_SIZE);
                                                                   ^
src/heaplayers/malloc_2_8_3.c:3734:59: error: Pointer addition with NULL pointer. [nullPointerArithmetic]
   if (!cinuse (p) && (char *) p + psize >= base + size - TOP_FOOT_SIZE)
                                                          ^
src/heaplayers/malloc_2_8_3.c:3773:14: error: Pointer addition with NULL pointer. [nullPointerArithmetic]
      pad += TOP_FOOT_SIZE; /* ensure enough room for segment overhead */
             ^
src/heaplayers/malloc_2_8_3.c:4726:63: error: Pointer addition with NULL pointer. [nullPointerArithmetic]
  init_top (m, mn, (size_t) ((tbase + tsize) - (char *) mn) - TOP_FOOT_SIZE);
                                                              ^
src/heaplayers/malloc_2_8_3.c:4738:38: error: Pointer addition with NULL pointer. [nullPointerArithmetic]
  if (capacity < (size_t) - (msize + TOP_FOOT_SIZE + mparams.page_size))
                                     ^
src/heaplayers/malloc_2_8_3.c:4740:72: error: Pointer addition with NULL pointer. [nullPointerArithmetic]
      size_t rs = ((capacity == 0) ? mparams.granularity : (capacity + TOP_FOOT_SIZE + msize));
                                                                       ^
src/heaplayers/malloc_2_8_3.c:4760:26: error: Pointer addition with NULL pointer. [nullPointerArithmetic]
  if (capacity > msize + TOP_FOOT_SIZE && capacity < (size_t) - (msize + TOP_FOOT_SIZE + mparams.page_size))
                         ^
src/heaplayers/malloc_2_8_3.c:2924:32: style: Same value in both branches of ternary operator. [duplicateValueTernary]
   size_t mfree = m->topsize + TOP_FOOT_SIZE;
                               ^
src/heaplayers/malloc_2_8_3.c:2973:30: style: Same value in both branches of ternary operator. [duplicateValueTernary]
   used = fp - (m->topsize + TOP_FOOT_SIZE);
                             ^
src/heaplayers/malloc_2_8_3.c:3357:40: style: Same value in both branches of ternary operator. [duplicateValueTernary]
  chunk_plus_offset (p, psize)->head = TOP_FOOT_SIZE;
                                       ^
src/heaplayers/malloc_2_8_3.c:3463:43: style: Same value in both branches of ternary operator. [duplicateValueTernary]
  init_top (m, (mchunkptr) tbase, tsize - TOP_FOOT_SIZE);
                                          ^
src/heaplayers/malloc_2_8_3.c:3549:16: style: Same value in both branches of ternary operator. [duplicateValueTernary]
       asize = granularity_align (nb + TOP_FOOT_SIZE + SIZE_T_ONE);
               ^
src/heaplayers/malloc_2_8_3.c:3564:12: style: Same value in both branches of ternary operator. [duplicateValueTernary]
   asize = granularity_align (nb - m->topsize + TOP_FOOT_SIZE + SIZE_T_ONE);
           ^
src/heaplayers/malloc_2_8_3.c:3577:52: style: Same value in both branches of ternary operator. [duplicateValueTernary]
       if (asize < HALF_MAX_SIZE_T && asize < nb + TOP_FOOT_SIZE + SIZE_T_ONE)
                                                   ^
src/heaplayers/malloc_2_8_3.c:3579:20: style: Same value in both branches of ternary operator. [duplicateValueTernary]
    size_t esize = granularity_align (nb + TOP_FOOT_SIZE + SIZE_T_ONE - asize);
                   ^
src/heaplayers/malloc_2_8_3.c:3607:25: style: Same value in both branches of ternary operator. [duplicateValueTernary]
      size_t req = nb + TOP_FOOT_SIZE + SIZE_T_ONE;
                        ^
src/heaplayers/malloc_2_8_3.c:3623:22: style: Same value in both branches of ternary operator. [duplicateValueTernary]
      size_t asize = granularity_align (nb + TOP_FOOT_SIZE + SIZE_T_ONE);
                     ^
src/heaplayers/malloc_2_8_3.c:3635:25: style: Same value in both branches of ternary operator. [duplicateValueTernary]
       if (ssize > nb + TOP_FOOT_SIZE)
                        ^
src/heaplayers/malloc_2_8_3.c:3658:46: style: Same value in both branches of ternary operator. [duplicateValueTernary]
     init_top (m, (mchunkptr) tbase, tsize - TOP_FOOT_SIZE);
                                             ^
src/heaplayers/malloc_2_8_3.c:3663:68: style: Same value in both branches of ternary operator. [duplicateValueTernary]
       init_top (m, mn, (size_t) ((tbase + tsize) - (char *) mn) - TOP_FOOT_SIZE);
                                                                   ^
src/heaplayers/malloc_2_8_3.c:3734:59: style: Same value in both branches of ternary operator. [duplicateValueTernary]
   if (!cinuse (p) && (char *) p + psize >= base + size - TOP_FOOT_SIZE)
                                                          ^
src/heaplayers/malloc_2_8_3.c:3773:14: style: Same value in both branches of ternary operator. [duplicateValueTernary]
      pad += TOP_FOOT_SIZE; /* ensure enough room for segment overhead */
             ^
src/heaplayers/malloc_2_8_3.c:3884:24: style: Opposite expression on both sides of '&'. [oppositeExpression]
   binmap_t leastbit = least_bit (leftbits);
                       ^
src/heaplayers/malloc_2_8_3.c:3934:23: style: Opposite expression on both sides of '&'. [oppositeExpression]
  binmap_t leastbit = least_bit (m->treemap);
                      ^
src/heaplayers/malloc_2_8_3.c:4726:63: style: Same value in both branches of ternary operator. [duplicateValueTernary]
  init_top (m, mn, (size_t) ((tbase + tsize) - (char *) mn) - TOP_FOOT_SIZE);
                                                              ^
src/heaplayers/malloc_2_8_3.c:4738:38: style: Same value in both branches of ternary operator. [duplicateValueTernary]
  if (capacity < (size_t) - (msize + TOP_FOOT_SIZE + mparams.page_size))
                                     ^
src/heaplayers/malloc_2_8_3.c:4740:72: style: Same value in both branches of ternary operator. [duplicateValueTernary]
      size_t rs = ((capacity == 0) ? mparams.granularity : (capacity + TOP_FOOT_SIZE + msize));
                                                                       ^
src/heaplayers/malloc_2_8_3.c:4760:26: style: Same value in both branches of ternary operator. [duplicateValueTernary]
  if (capacity > msize + TOP_FOOT_SIZE && capacity < (size_t) - (msize + TOP_FOOT_SIZE + mparams.page_size))
                         ^
src/heaplayers/malloc_2_8_3.c:4843:25: style: Opposite expression on both sides of '&'. [oppositeExpression]
    binmap_t leastbit = least_bit (leftbits);
                        ^
src/heaplayers/malloc_2_8_3.c:3434:7: style: Consecutive return, break, continue, goto or throw statements are unnecessary. [duplicateBreak]
      insert_chunk (m, q, (bindex_t) qsize);
      ^
src/heaplayers/malloc_2_8_3.c:3494:7: style: Consecutive return, break, continue, goto or throw statements are unnecessary. [duplicateBreak]
      insert_chunk (m, q, (bindex_t) psize);
      ^
src/heaplayers/malloc_2_8_3.c:3757:5: style: Consecutive return, break, continue, goto or throw statements are unnecessary. [duplicateBreak]
    insert_large_chunk (m, tp, psize);
    ^
src/heaplayers/malloc_2_8_3.c:3917:5: style: Consecutive return, break, continue, goto or throw statements are unnecessary. [duplicateBreak]
    insert_chunk (m, r, (bindex_t) rsize);
    ^
src/heaplayers/malloc_2_8_3.c:4944:4: style: Consecutive return, break, continue, goto or throw statements are unnecessary. [duplicateBreak]
   return;
   ^
src/heaplayers/malloc_2_8_3.c:5036:5: style: Consecutive return, break, continue, goto or throw statements are unnecessary. [duplicateBreak]
    insert_chunk (fm, p, (bindex_t) psize);
    ^
src/heaplayers/lea_heap.c:337:13: style: The scope of the variable 'p' can be reduced. [variableScope]
      void *p;
            ^
src/heaplayers/lea_heap.c:372:13: style: The scope of the variable 'p' can be reduced. [variableScope]
      void *p;
            ^
src/heaplayers/malloc_2_8_3.c:3554:18: style: Checking if unsigned expression 'asize' is less than zero. [unsignedLessThanZero]
       if (asize < HALF_MAX_SIZE_T && (br = (char *) (CALL_MORECORE (asize))) == base)
                 ^
src/heaplayers/malloc_2_8_3.c:3566:14: style: Checking if unsigned expression 'asize' is less than zero. [unsignedLessThanZero]
   if (asize < HALF_MAX_SIZE_T && (br = (char *) (CALL_MORECORE (asize))) == ss->base + ss->size)
             ^
src/heaplayers/malloc_2_8_3.c:3577:18: style: Checking if unsigned expression 'asize' is less than zero. [unsignedLessThanZero]
       if (asize < HALF_MAX_SIZE_T && asize < nb + TOP_FOOT_SIZE + SIZE_T_ONE)
                 ^
src/heaplayers/malloc_2_8_3.c:3580:15: style: Checking if unsigned expression 'esize' is less than zero. [unsignedLessThanZero]
    if (esize < HALF_MAX_SIZE_T)
              ^
src/heaplayers/malloc_2_8_3.c:3624:17: style: Checking if unsigned expression 'asize' is less than zero. [unsignedLessThanZero]
      if (asize < HALF_MAX_SIZE_T)
                ^
src/heaplayers/malloc_2_8_3.c:3799:15: style: Unsigned expression 'extra' can't be negative so it is unnecessary to test it. [unsignedPositive]
    if (extra >= HALF_MAX_SIZE_T) /* Avoid wrapping negative */
              ^
src/heaplayers/malloc_2_8_3.c:5073:35: style:inconclusive: Function 'mspace_realloc' argument 2 names different: declaration 'mem' definition 'oldmem'. [funcArgNamesDifferent]
mspace_realloc (mspace msp, void *oldmem, size_t bytes)
                                  ^
src/heaplayers/malloc_2_8_3.c:1097:43: note: Function 'mspace_realloc' argument 2 names different: declaration 'mem' definition 'oldmem'.
  void *mspace_realloc (mspace msp, void *mem, size_t newsize);
                                          ^
src/heaplayers/malloc_2_8_3.c:5073:35: note: Function 'mspace_realloc' argument 2 names different: declaration 'mem' definition 'oldmem'.
mspace_realloc (mspace msp, void *oldmem, size_t bytes)
                                  ^
src/heaplayers/malloc_2_8_3.c:5073:50: style:inconclusive: Function 'mspace_realloc' argument 3 names different: declaration 'newsize' definition 'bytes'. [funcArgNamesDifferent]
mspace_realloc (mspace msp, void *oldmem, size_t bytes)
                                                 ^
src/heaplayers/malloc_2_8_3.c:1097:55: note: Function 'mspace_realloc' argument 3 names different: declaration 'newsize' definition 'bytes'.
  void *mspace_realloc (mspace msp, void *mem, size_t newsize);
                                                      ^
src/heaplayers/malloc_2_8_3.c:5073:50: note: Function 'mspace_realloc' argument 3 names different: declaration 'newsize' definition 'bytes'.
mspace_realloc (mspace msp, void *oldmem, size_t bytes)
                                                 ^
src/heaplayers/malloc_2_8_3.c:3800:13: style: Variable 'extra' is assigned a value that is never used. [unreadVariable]
      extra = (HALF_MAX_SIZE_T) + SIZE_T_ONE - unit;
            ^
src/heaplayers/lea_heap.c:200:18: style: Variable 'hms' is assigned a value that is never used. [unreadVariable]
  HL_MSPACE *hms = mspace2hlmspace (m);
                 ^
src/heaplayers/malloc_2_8_3.c:2536:0: information: Skipping configuration 'CLSIZE;NBPG' since the value of 'CLSIZE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      mparams.page_size = malloc_getpagesize;
^
src/heaplayers/malloc_2_8_3.c:2536:0: information: Skipping configuration 'CLSIZE;NBPG' since the value of 'NBPG' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      mparams.page_size = malloc_getpagesize;
^
src/heaplayers/malloc_2_8_3.c:2615:3: error: Pointer addition with NULL pointer. [nullPointerArithmetic]
  assert (sz == ((sp->base + sp->size) - (char *) p) - TOP_FOOT_SIZE);
  ^
src/heaplayers/malloc_2_8_3.c:2848:27: error: Pointer addition with NULL pointer. [nullPointerArithmetic]
      sum += m->topsize + TOP_FOOT_SIZE;
                          ^
src/heaplayers/malloc_2_8_3.c:2615:3: style: Same value in both branches of ternary operator. [duplicateValueTernary]
  assert (sz == ((sp->base + sp->size) - (char *) p) - TOP_FOOT_SIZE);
  ^
src/heaplayers/malloc_2_8_3.c:2848:27: style: Same value in both branches of ternary operator. [duplicateValueTernary]
      sum += m->topsize + TOP_FOOT_SIZE;
                          ^
src/heaplayers/malloc_2_8_3.c:2536:0: information: Skipping configuration 'EXEC_PAGESIZE' since the value of 'EXEC_PAGESIZE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      mparams.page_size = malloc_getpagesize;
^
src/heaplayers/malloc_2_8_3.c:4222:7: style: Condition 'was_enabled' is always false [knownConditionTrueFalse]
  if (was_enabled)
      ^
src/heaplayers/malloc_2_8_3.c:4219:17: note: Assignment 'was_enabled=(m)->mflags&((unsigned long)0)', assigned value is 0
  was_enabled = use_mmap (m);
                ^
src/heaplayers/malloc_2_8_3.c:4222:7: note: Condition 'was_enabled' is always false
  if (was_enabled)
      ^
src/heaplayers/malloc_2_8_3.c:3788:24: style: Variable 'newsize' is assigned a value that is never used. [unreadVariable]
        size_t newsize = sp->size - extra;
                       ^
src/heaplayers/malloc_2_8_3.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 31 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/heaplayers/malloc_2_8_3.c:4576:19: error: Invalid malloc() argument nr 1. The value is -1 but the valid values are '0:'. [invalidFunctionArg]
  mem = dlmalloc (req);
                  ^
src/heaplayers/malloc_2_8_3.c:4574:8: note: Assignment 'req=~(unsigned long)0', assigned value is -1
 req = MAX_SIZE_T; /* force downstream failure on overflow */
       ^
src/heaplayers/malloc_2_8_3.c:4576:19: note: Invalid argument
  mem = dlmalloc (req);
                  ^
src/heaplayers/malloc_2_8_3.c:4092:6: error: Memory leak: mem [memleak]
     return 0;
     ^
src/heaplayers/malloc_2_8_3.c:4149:4: error: Memory leak: mem [memleak]
   return chunk2mem (p);
   ^
src/heaplayers/malloc_2_8_3.c:4228:5: error: Memory leak: mem [memleak]
    return 0;
    ^
src/heaplayers/malloc_2_8_3.c:4359:25: style: Opposite expression on both sides of '&'. [oppositeExpression]
    binmap_t leastbit = least_bit (leftbits);
                        ^
src/heaplayers/malloc_2_8_3.c:4549:5: style: Consecutive return, break, continue, goto or throw statements are unnecessary. [duplicateBreak]
    insert_chunk (fm, p, psize);
    ^
src/heaplayers/malloc_2_8_3.c:657:23: style: struct member 'mallinfo::smblks' is never used. [unusedStructMember]
  MALLINFO_FIELD_TYPE smblks; /* always 0 */
                      ^
src/heaplayers/malloc_2_8_3.c:658:23: style: struct member 'mallinfo::hblks' is never used. [unusedStructMember]
  MALLINFO_FIELD_TYPE hblks; /* always 0 */
                      ^
src/heaplayers/malloc_2_8_3.c:661:23: style: struct member 'mallinfo::fsmblks' is never used. [unusedStructMember]
  MALLINFO_FIELD_TYPE fsmblks; /* always 0 */
                      ^
src/jsp/jsp_comm.h:63:3: error: Code 'std::vector' is invalid C code. Use --std or --language to configure the language. [syntaxError]
  std::vector < std::string > vm_args;
  ^
src/jsp/jsp_sr.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 13 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/jsp/jsp_sr.c:517:3: error: Code 'std::string' is invalid C code. Use --std or --language to configure the language. [syntaxError]
  std::string str (opt_str);
  ^
src/loaddb/load_common.hpp:276:3: style: The class 'load_status' does not have a constructor although it has private member variables. [noConstructor]
  class load_status : public cubpacking::packable_object
  ^
src/loaddb/load_common.cpp:622:78: style: Parameter 'c_handler' can be declared with const [constParameter]
  split (int batch_size, const std::string &object_file_name, class_handler &c_handler, batch_handler &b_handler)
                                                                             ^
src/loaddb/load_common.cpp:754:32: style: Parameter 'handler' can be declared with const [constParameter]
  handle_batch (batch_handler &handler, class_id clsid, std::string &batch_content, batch_id &batch_id, int64_t line_offset,
                               ^
src/loaddb/load_common.cpp:615:7: style: Consider using std::accumulate algorithm instead of a raw loop. [useStlAlgorithm]
 size += s.get_packed_size (serializator, size);
      ^
src/loaddb/load_common.cpp:712:24: style: Consider using std::accumulate algorithm instead of a raw loop. [useStlAlgorithm]
  single_quote_checker ^= 1;
                       ^
src/loaddb/load_common.cpp:629:14: style: Unused variable: batch_id [unusedVariable]
    batch_id batch_id = NULL_BATCH_ID;
             ^
src/loaddb/load_db.c:46:1: error: Code 'using namespace cubload' is invalid C code. Use --std or --language to configure the language. [syntaxError]
using namespace cubload;
^
src/loaddb/load_common.hpp:36:1: error: Code 'namespacecubload{' is invalid C code. Use --std or --language to configure the language. [syntaxError]
namespace cubload
^
src/loaddb/load_db_value_converter.cpp:898:20: style: Variable 'error_code' is assigned a value that is never used. [unreadVariable]
    int error_code = NO_ERROR;
                   ^
src/loaddb/load_driver.hpp:79:12: style:inconclusive: Technically the member function 'cubload::driver::is_initialized' can be const. [functionConst]
      bool is_initialized ();
           ^
src/loaddb/load_driver.cpp:77:11: note: Technically the member function 'cubload::driver::is_initialized' can be const.
  driver::is_initialized ()
          ^
src/loaddb/load_driver.hpp:79:12: note: Technically the member function 'cubload::driver::is_initialized' can be const.
      bool is_initialized ();
           ^
src/loaddb/load_driver.hpp:92:11: style:inconclusive: Technically the member function 'cubload::driver::get_start_line' can be const. [functionConst]
      int get_start_line ();
          ^
src/loaddb/load_driver.cpp:132:11: note: Technically the member function 'cubload::driver::get_start_line' can be const.
  driver::get_start_line ()
          ^
src/loaddb/load_driver.hpp:92:11: note: Technically the member function 'cubload::driver::get_start_line' can be const.
      int get_start_line ();
          ^
src/loaddb/load_error_handler.hpp:199:67: warning: Access of forwarded variable 'args'. [accessForwarded]
    snprintf (msg.get (), (size_t) size, fmt, std::forward<Args> (args)...);
                                                                  ^
src/loaddb/load_error_handler.hpp:196:40: note: Calling std::forward(args)
    int size = snprintf (NULL, 0, fmt, std::forward<Args> (args)...) + 1; // +1 for '\0'
                                       ^
src/loaddb/load_error_handler.hpp:199:67: note: Access of forwarded variable 'args'.
    snprintf (msg.get (), (size_t) size, fmt, std::forward<Args> (args)...);
                                                                  ^
src/loaddb/load_error_handler.hpp:76:12: style:inconclusive: Technically the member function 'cubload::error_handler::current_line_has_error' can be const. [functionConst]
      bool current_line_has_error ();
           ^
src/loaddb/load_error_handler.cpp:177:18: note: Technically the member function 'cubload::error_handler::current_line_has_error' can be const.
  error_handler::current_line_has_error ()
                 ^
src/loaddb/load_error_handler.hpp:76:12: note: Technically the member function 'cubload::error_handler::current_line_has_error' can be const.
      bool current_line_has_error ();
           ^
src/loaddb/load_error_handler.hpp:84:11: performance:inconclusive: Technically the member function 'cubload::error_handler::get_driver_lineno' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      int get_driver_lineno ();
          ^
src/loaddb/load_error_handler.cpp:47:18: note: Technically the member function 'cubload::error_handler::get_driver_lineno' can be static (but you may consider moving to unnamed namespace).
  error_handler::get_driver_lineno ()
                 ^
src/loaddb/load_error_handler.hpp:84:11: note: Technically the member function 'cubload::error_handler::get_driver_lineno' can be static (but you may consider moving to unnamed namespace).
      int get_driver_lineno ();
          ^
src/loaddb/load_error_handler.hpp:92:11: performance:inconclusive: Technically the member function 'cubload::error_handler::get_scanner_lineno' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      int get_scanner_lineno ();
          ^
src/loaddb/load_error_handler.cpp:57:18: note: Technically the member function 'cubload::error_handler::get_scanner_lineno' can be static (but you may consider moving to unnamed namespace).
  error_handler::get_scanner_lineno ()
                 ^
src/loaddb/load_error_handler.hpp:92:11: note: Technically the member function 'cubload::error_handler::get_scanner_lineno' can be static (but you may consider moving to unnamed namespace).
      int get_scanner_lineno ();
          ^
src/loaddb/load_error_handler.hpp:162:9: style: Condition '!is_last_error_filtered()' is always true [knownConditionTrueFalse]
    if (!is_last_error_filtered ())
        ^
src/loaddb/load_error_handler.hpp:173:9: style: Condition '!is_last_error_filtered()' is always true [knownConditionTrueFalse]
    if (!is_last_error_filtered ())
        ^
src/loaddb/load_error_handler.cpp:74:9: style: Condition '!is_last_error_filtered()' is always true [knownConditionTrueFalse]
    if (!is_last_error_filtered ())
        ^
src/loaddb/load_error_handler.cpp:94:9: style: Condition '!is_last_error_filtered()' is always true [knownConditionTrueFalse]
    if (!is_last_error_filtered ())
        ^
src/loaddb/load_error_handler.cpp:173:5: style:inconclusive: Consecutive return, break, continue, goto or throw statements are unnecessary. [duplicateBreak]
    return false;
    ^
src/loaddb/load_object.c:485:44: warning:inconclusive: Possible null pointer dereference: fmt [nullPointer]
      nbytes = vsnprintf (tout->ptr, size, fmt, ap);
                                           ^
src/loaddb/load_object.c:1072:8: note: Calling function 'text_print', 4th argument 'NULL' value is 0
       CHECK_PRINT_ERROR (text_print (tout, ",\n ", 2, NULL));
       ^
src/loaddb/load_object.c:485:44: note: Null pointer dereference
      nbytes = vsnprintf (tout->ptr, size, fmt, ap);
                                           ^
src/loaddb/load_object.c:91:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/loaddb/load_object.c:140:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/loaddb/load_object.c:250:7: style: The scope of the variable 'a' can be reduced. [variableScope]
  int a, offset, len, i;
      ^
src/loaddb/load_object.c:250:10: style: The scope of the variable 'offset' can be reduced. [variableScope]
  int a, offset, len, i;
         ^
src/loaddb/load_object.c:250:18: style: The scope of the variable 'len' can be reduced. [variableScope]
  int a, offset, len, i;
                 ^
src/loaddb/load_object.c:250:23: style: The scope of the variable 'i' can be reduced. [variableScope]
  int a, offset, len, i;
                      ^
src/loaddb/load_object.c:536:16: style: The scope of the variable 'repid_bits' can be reduced. [variableScope]
  unsigned int repid_bits;
               ^
src/loaddb/load_object.c:626:10: style: The scope of the variable 'j' can be reduced. [variableScope]
  int i, j, offset, offset2, pad;
         ^
src/loaddb/load_object.c:626:13: style: The scope of the variable 'offset' can be reduced. [variableScope]
  int i, j, offset, offset2, pad;
            ^
src/loaddb/load_object.c:626:21: style: The scope of the variable 'offset2' can be reduced. [variableScope]
  int i, j, offset, offset2, pad;
                    ^
src/loaddb/load_object.c:933:7: style: The scope of the variable 'repid' can be reduced. [variableScope]
  int repid, status;
      ^
src/loaddb/load_object.c:934:16: style: The scope of the variable 'repid_bits' can be reduced. [variableScope]
  unsigned int repid_bits;
               ^
src/loaddb/load_object.c:935:7: style: The scope of the variable 'bound_bit_flag' can be reduced. [variableScope]
  int bound_bit_flag;
      ^
src/loaddb/load_object.c:937:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/loaddb/load_object.c:939:7: style: The scope of the variable 'offset_size' can be reduced. [variableScope]
  int offset_size;
      ^
src/loaddb/load_object.c:1117:7: style: The scope of the variable 'bit_index' can be reduced. [variableScope]
  int bit_index;
      ^
src/loaddb/load_object.c:1275:8: style: The scope of the variable 'aux' can be reduced. [variableScope]
  char aux;
       ^
src/loaddb/load_object_table.c:128:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/loaddb/load_object_table.c:196:14: style: The scope of the variable 'inst' can be reduced. [variableScope]
  INST_INFO *inst;
             ^
src/loaddb/load_object_table.c:231:14: style: The scope of the variable 'inst' can be reduced. [variableScope]
  INST_INFO *inst;
             ^
src/loaddb/load_object_table.c:345:46: style:inconclusive: Function 'otable_set_presize' argument 2 names different: declaration 'size' definition 'id'. [funcArgNamesDifferent]
otable_set_presize (CLASS_TABLE * table, int id)
                                             ^
src/loaddb/load_object_table.h:78:58: note: Function 'otable_set_presize' argument 2 names different: declaration 'size' definition 'id'.
extern void otable_set_presize (CLASS_TABLE * table, int size);
                                                         ^
src/loaddb/load_object_table.c:345:46: note: Function 'otable_set_presize' argument 2 names different: declaration 'size' definition 'id'.
otable_set_presize (CLASS_TABLE * table, int id)
                                             ^
src/loaddb/load_sa_loader.cpp:3964:23: warning: Either the condition 'if(mop_tempoid_maps_old)' is redundant or there is possible null pointer dereference: ldr_Mop_tempoid_maps->mop_tempoid_maps. [nullPointerRedundantCheck]
  ldr_Mop_tempoid_maps->mop_tempoid_maps[ldr_Mop_tempoid_maps->index].mop = mop;
                      ^
src/loaddb/load_sa_loader.cpp:3986:7: note: Assuming that condition 'if(mop_tempoid_maps_old)' is not redundant
   if (mop_tempoid_maps_old)
      ^
src/loaddb/load_sa_loader.cpp:3976:50: note: Assignment to 'mop_tempoid_maps_old=ldr_Mop_tempoid_maps->mop_tempoid_maps'
      mop_tempoid_maps_old = ldr_Mop_tempoid_maps->mop_tempoid_maps;
                                                 ^
src/loaddb/load_sa_loader.cpp:3964:23: note: Null pointer dereference
  ldr_Mop_tempoid_maps->mop_tempoid_maps[ldr_Mop_tempoid_maps->index].mop = mop;
                      ^
src/loaddb/load_sa_loader.cpp:3965:23: warning: Either the condition 'if(mop_tempoid_maps_old)' is redundant or there is possible null pointer dereference: ldr_Mop_tempoid_maps->mop_tempoid_maps. [nullPointerRedundantCheck]
  ldr_Mop_tempoid_maps->mop_tempoid_maps[ldr_Mop_tempoid_maps->index].table = table;
                      ^
src/loaddb/load_sa_loader.cpp:3986:7: note: Assuming that condition 'if(mop_tempoid_maps_old)' is not redundant
   if (mop_tempoid_maps_old)
      ^
src/loaddb/load_sa_loader.cpp:3976:50: note: Assignment to 'mop_tempoid_maps_old=ldr_Mop_tempoid_maps->mop_tempoid_maps'
      mop_tempoid_maps_old = ldr_Mop_tempoid_maps->mop_tempoid_maps;
                                                 ^
src/loaddb/load_sa_loader.cpp:3965:23: note: Null pointer dereference
  ldr_Mop_tempoid_maps->mop_tempoid_maps[ldr_Mop_tempoid_maps->index].table = table;
                      ^
src/loaddb/load_sa_loader.cpp:3966:23: warning: Either the condition 'if(mop_tempoid_maps_old)' is redundant or there is possible null pointer dereference: ldr_Mop_tempoid_maps->mop_tempoid_maps. [nullPointerRedundantCheck]
  ldr_Mop_tempoid_maps->mop_tempoid_maps[ldr_Mop_tempoid_maps->index].id = id;
                      ^
src/loaddb/load_sa_loader.cpp:3986:7: note: Assuming that condition 'if(mop_tempoid_maps_old)' is not redundant
   if (mop_tempoid_maps_old)
      ^
src/loaddb/load_sa_loader.cpp:3976:50: note: Assignment to 'mop_tempoid_maps_old=ldr_Mop_tempoid_maps->mop_tempoid_maps'
      mop_tempoid_maps_old = ldr_Mop_tempoid_maps->mop_tempoid_maps;
                                                 ^
src/loaddb/load_sa_loader.cpp:3966:23: note: Null pointer dereference
  ldr_Mop_tempoid_maps->mop_tempoid_maps[ldr_Mop_tempoid_maps->index].id = id;
                      ^
src/loaddb/load_sa_loader.cpp:856:25: style: C-style pointer casting [cstyleCast]
     string_type *str = (string_type *) c->val;
                        ^
src/loaddb/load_sa_loader.cpp:864:27: style: C-style pointer casting [cstyleCast]
     monetary_type *mon = (monetary_type *) c->val;
                          ^
src/loaddb/load_sa_loader.cpp:865:25: style: C-style pointer casting [cstyleCast]
     string_type *str = (string_type *) mon->amount;
                        ^
src/loaddb/load_sa_loader.cpp:898:25: style: C-style pointer casting [cstyleCast]
     string_type *str = (string_type *) c->val;
                        ^
src/loaddb/load_sa_loader.cpp:906:30: style: C-style pointer casting [cstyleCast]
     ldr_process_object_ref ((object_ref_type *) c->val, c->type);
                             ^
src/loaddb/load_sa_loader.cpp:911:20: style: C-style pointer casting [cstyleCast]
     process_line ((constant_type *) c->val);
                   ^
src/loaddb/load_sa_loader.cpp:1354:7: style: The scope of the variable 'newsize' can be reduced. [variableScope]
  int newsize, i;
      ^
src/loaddb/load_sa_loader.cpp:1354:16: style: The scope of the variable 'i' can be reduced. [variableScope]
  int newsize, i;
               ^
src/loaddb/load_sa_loader.cpp:1355:15: style: The scope of the variable 'id_map_old' can be reduced. [variableScope]
  DB_OBJECT **id_map_old;
              ^
src/loaddb/load_sa_loader.cpp:1542:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/loaddb/load_sa_loader.cpp:6546:15: style: The scope of the variable 'class_name' can be reduced. [variableScope]
  const char *class_name;
              ^
src/loaddb/load_sa_loader.cpp:4153:16: style: Local variable 'inst' shadows outer variable [shadowVariable]
    INST_INFO *inst;
               ^
src/loaddb/load_sa_loader.cpp:4110:14: note: Shadowed declaration
  INST_INFO *inst;
             ^
src/loaddb/load_sa_loader.cpp:4153:16: note: Shadow variable
    INST_INFO *inst;
               ^
src/loaddb/load_sa_loader.cpp:4678:27: style: Variable 'committed_instances' is assigned a value that is never used. [unreadVariable]
      committed_instances = (-1);
                          ^
src/loaddb/load_sa_loader.cpp:6601:11: style: Variable 'err' is assigned a value that is never used. [unreadVariable]
  int err = NO_ERROR;
          ^
src/loaddb/load_semantic_helper.hpp:91:12: style:inconclusive: Technically the member function 'cubload::semantic_helper::in_instance_line' can be const. [functionConst]
      bool in_instance_line ();
           ^
src/loaddb/load_semantic_helper.cpp:213:20: note: Technically the member function 'cubload::semantic_helper::in_instance_line' can be const.
  semantic_helper::in_instance_line ()
                   ^
src/loaddb/load_semantic_helper.hpp:91:12: note: Technically the member function 'cubload::semantic_helper::in_instance_line' can be const.
      bool in_instance_line ();
           ^
src/loaddb/load_semantic_helper.hpp:126:12: performance:inconclusive: Technically the member function 'cubload::semantic_helper::is_utf8_valid' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      bool is_utf8_valid (string_type *str);
           ^
src/loaddb/load_semantic_helper.cpp:288:20: note: Technically the member function 'cubload::semantic_helper::is_utf8_valid' can be static (but you may consider moving to unnamed namespace).
  semantic_helper::is_utf8_valid (string_type *str)
                   ^
src/loaddb/load_semantic_helper.hpp:126:12: note: Technically the member function 'cubload::semantic_helper::is_utf8_valid' can be static (but you may consider moving to unnamed namespace).
      bool is_utf8_valid (string_type *str);
           ^
src/loaddb/load_semantic_helper.hpp:127:12: style:inconclusive: Technically the member function 'cubload::semantic_helper::use_copy_buf_pool' can be const. [functionConst]
      bool use_copy_buf_pool (std::size_t str_size);
           ^
src/loaddb/load_semantic_helper.cpp:302:20: note: Technically the member function 'cubload::semantic_helper::use_copy_buf_pool' can be const.
  semantic_helper::use_copy_buf_pool (std::size_t str_size)
                   ^
src/loaddb/load_semantic_helper.hpp:127:12: note: Technically the member function 'cubload::semantic_helper::use_copy_buf_pool' can be const.
      bool use_copy_buf_pool (std::size_t str_size);
           ^
src/loaddb/load_server_loader.hpp:57:12: performance:inconclusive: Technically the member function 'cubload::server_class_installer::to_lowercase_identifier' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      void to_lowercase_identifier (const char *idname, cubmem::extensible_block &eb);
           ^
src/loaddb/load_server_loader.cpp:358:27: note: Technically the member function 'cubload::server_class_installer::to_lowercase_identifier' can be static (but you may consider moving to unnamed namespace).
  server_class_installer::to_lowercase_identifier (const char *idname, cubmem::extensible_block &eb)
                          ^
src/loaddb/load_server_loader.hpp:57:12: note: Technically the member function 'cubload::server_class_installer::to_lowercase_identifier' can be static (but you may consider moving to unnamed namespace).
      void to_lowercase_identifier (const char *idname, cubmem::extensible_block &eb);
           ^
src/loaddb/load_server_loader.hpp:67:12: performance:inconclusive: Technically the member function 'cubload::server_class_installer::get_class_attributes' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      void get_class_attributes (heap_cache_attrinfo &attrinfo, attribute_type attr_type, or_attribute *&or_attributes,
           ^
src/loaddb/load_server_loader.cpp:305:27: note: Technically the member function 'cubload::server_class_installer::get_class_attributes' can be static (but you may consider moving to unnamed namespace).
  server_class_installer::get_class_attributes (heap_cache_attrinfo &attrinfo, attribute_type attr_type,
                          ^
src/loaddb/load_server_loader.hpp:67:12: note: Technically the member function 'cubload::server_class_installer::get_class_attributes' can be static (but you may consider moving to unnamed namespace).
      void get_class_attributes (heap_cache_attrinfo &attrinfo, attribute_type attr_type, or_attribute *&or_attributes,
           ^
src/loaddb/load_server_loader.cpp:229:26: warning:inconclusive: Either the condition 'attr_name!=NULL' is redundant or there is possible null pointer dereference: attr_name. [nullPointerRedundantCheck]
 std::string attr_name_ (attr_name);
                         ^
src/loaddb/load_server_loader.cpp:244:16: note: Assuming that condition 'attr_name!=NULL' is not redundant
 if (attr_name != NULL && free_attr_name == 1)
               ^
src/loaddb/load_server_loader.cpp:229:26: note: Null pointer dereference
 std::string attr_name_ (attr_name);
                         ^
src/loaddb/load_server_loader.cpp:305:70: style: Parameter 'attrinfo' can be declared with const [constParameter]
  server_class_installer::get_class_attributes (heap_cache_attrinfo &attrinfo, attribute_type attr_type,
                                                                     ^
src/loaddb/load_server_loader.cpp:282:4: style: Consider using std::find_if algorithm instead of a raw loop. [useStlAlgorithm]
   {
   ^
src/loaddb/load_session.cpp:128:37: warning: Assert statement calls a function which may have desired side effects: 'is_initialized'. [assertWithSideEffect]
 assert (driver != NULL && !driver->is_initialized ());
                                    ^
src/loaddb/load_session.hpp:111:12: style:inconclusive: Technically the member function 'cubload::session::is_failed' can be const. [functionConst]
      bool is_failed ();
           ^
src/loaddb/load_session.cpp:407:12: note: Technically the member function 'cubload::session::is_failed' can be const.
  session::is_failed ()
           ^
src/loaddb/load_session.hpp:111:12: note: Technically the member function 'cubload::session::is_failed' can be const.
      bool is_failed ();
           ^
src/loaddb/load_session.hpp:117:15: style:inconclusive: Technically the member function 'cubload::session::stats_get_rows_committed' can be const. [functionConst]
      int64_t stats_get_rows_committed ();
              ^
src/loaddb/load_session.cpp:434:12: note: Technically the member function 'cubload::session::stats_get_rows_committed' can be const.
  session::stats_get_rows_committed ()
           ^
src/loaddb/load_session.hpp:117:15: note: Technically the member function 'cubload::session::stats_get_rows_committed' can be const.
      int64_t stats_get_rows_committed ();
              ^
src/loaddb/load_session.hpp:123:24: style:inconclusive: Technically the member function 'cubload::session::get_args' can be const. [functionConst]
      const load_args &get_args ();
                       ^
src/loaddb/load_session.cpp:513:12: note: Technically the member function 'cubload::session::get_args' can be const.
  session::get_args ()
           ^
src/loaddb/load_session.hpp:123:24: note: Technically the member function 'cubload::session::get_args' can be const.
      const load_args &get_args ();
                       ^
src/loaddb/load_session.hpp:132:12: style:inconclusive: Technically the member function 'cubload::session::is_completed' can be const. [functionConst]
      bool is_completed ();
           ^
src/loaddb/load_session.cpp:279:12: note: Technically the member function 'cubload::session::is_completed' can be const.
  session::is_completed ()
           ^
src/loaddb/load_session.hpp:132:12: note: Technically the member function 'cubload::session::is_completed' can be const.
      bool is_completed ();
           ^
src/loaddb/load_session.hpp:136:12: performance:inconclusive: Technically the member function 'cubload::session::update_atomic_value_with_max' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      void update_atomic_value_with_max (std::atomic<T> &atomic_val, T new_max);
           ^
src/loaddb/load_session.cpp:466:12: note: Technically the member function 'cubload::session::update_atomic_value_with_max' can be static (but you may consider moving to unnamed namespace).
  session::update_atomic_value_with_max (std::atomic<T> &atomic_val, T new_max)
           ^
src/loaddb/load_session.hpp:136:12: note: Technically the member function 'cubload::session::update_atomic_value_with_max' can be static (but you may consider moving to unnamed namespace).
      void update_atomic_value_with_max (std::atomic<T> &atomic_val, T new_max);
           ^
src/loaddb/load_session.cpp:450:29: warning: Identical condition 'last_committed_line<=m_stats.last_committed_line', second condition is always false [identicalConditionAfterEarlyExit]
    if (last_committed_line <= m_stats.last_committed_line)
                            ^
src/loaddb/load_session.cpp:442:29: note: If condition 'last_committed_line<=m_stats.last_committed_line' is true, the function will return/exit
    if (last_committed_line <= m_stats.last_committed_line)
                            ^
src/loaddb/load_session.cpp:450:29: note: Testing identical condition 'last_committed_line<=m_stats.last_committed_line'
    if (last_committed_line <= m_stats.last_committed_line)
                            ^
src/loaddb/load_session.cpp:566:42: style: Parameter 'thread_ref' can be declared with const [constParameter]
  session::load_batch (cubthread::entry &thread_ref, const batch *batch, bool use_temp_batch, bool &is_batch_accepted,
                                         ^
src/monitor/monitor_statistic.hpp:240:19: performance:inconclusive: Technically the member function 'cubmonitor::atomic_primitive < std :: chrono :: high_resolution_clock :: duration >::get_statistics_count' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      std::size_t get_statistics_count (void) const
                  ^
src/monitor/monitor_transaction.hpp:109:19: performance:inconclusive: Technically the member function 'cubmonitor::transaction_statistic::get_statistics_count' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      std::size_t get_statistics_count (void) const;
                  ^
src/monitor/monitor_transaction.hpp:251:29: note: Technically the member function 'cubmonitor::transaction_statistic::get_statistics_count' can be static (but you may consider moving to unnamed namespace).
  transaction_statistic<S>::get_statistics_count (void) const
                            ^
src/monitor/monitor_transaction.hpp:109:19: note: Technically the member function 'cubmonitor::transaction_statistic::get_statistics_count' can be static (but you may consider moving to unnamed namespace).
      std::size_t get_statistics_count (void) const;
                  ^
src/monitor/monitor_statistic.hpp:189:19: performance:inconclusive: Technically the member function 'atomic_primitive < std :: uint64_t >::get_statistics_count' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      std::size_t get_statistics_count (void) const
                  ^
src/monitor/monitor_statistic.hpp:147:19: performance:inconclusive: Technically the member function 'primitive < std :: uint64_t >::get_statistics_count' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      std::size_t get_statistics_count (void) const
                  ^
src/monitor/monitor_statistic.hpp:147:19: performance:inconclusive: Technically the member function 'primitive < double >::get_statistics_count' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      std::size_t get_statistics_count (void) const
                  ^
src/monitor/monitor_statistic.hpp:147:19: performance:inconclusive: Technically the member function 'primitive < std :: chrono :: high_resolution_clock :: duration >::get_statistics_count' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      std::size_t get_statistics_count (void) const
                  ^
src/monitor/monitor_collect.hpp:87:11: style: Class 'autotimer' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
   inline autotimer (timer_statistic &timer_stat, bool active = true);
          ^
src/monitor/monitor_collect.hpp:140:11: style: Class 'autotimer' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
   inline autotimer (counter_timer_statistic &cts, bool active = true);
          ^
src/monitor/monitor_statistic.hpp:240:19: performance:inconclusive: Technically the member function 'cubmonitor::atomic_primitive < duration >::get_statistics_count' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      std::size_t get_statistics_count (void) const
                  ^
src/monitor/monitor_statistic.hpp:147:19: performance:inconclusive: Technically the member function 'primitive < duration >::get_statistics_count' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      std::size_t get_statistics_count (void) const
                  ^
src/monitor/monitor_registration.cpp:124:71: style:inconclusive: Function 'add_registration' argument 2 names different: declaration 'fetch_f' definition 'fetch_func'. [funcArgNamesDifferent]
  monitor::add_registration (std::size_t count, const fetch_function &fetch_func)
                                                                      ^
src/monitor/monitor_registration.hpp:115:71: note: Function 'add_registration' argument 2 names different: declaration 'fetch_f' definition 'fetch_func'.
      void add_registration (std::size_t count, const fetch_function &fetch_f);
                                                                      ^
src/monitor/monitor_registration.cpp:124:71: note: Function 'add_registration' argument 2 names different: declaration 'fetch_f' definition 'fetch_func'.
  monitor::add_registration (std::size_t count, const fetch_function &fetch_func)
                                                                      ^
src/monitor/monitor_registration.cpp:136:85: style:inconclusive: Function 'register_statistics' argument 2 names different: declaration 'fetch_f' definition 'fetch_global'. [funcArgNamesDifferent]
  monitor::register_statistics (std::size_t statistics_count, const fetch_function &fetch_global,
                                                                                    ^
src/monitor/monitor_registration.hpp:76:85: note: Function 'register_statistics' argument 2 names different: declaration 'fetch_f' definition 'fetch_global'.
      void register_statistics (std::size_t statistics_count, const fetch_function &fetch_f,
                                                                                    ^
src/monitor/monitor_registration.cpp:136:85: note: Function 'register_statistics' argument 2 names different: declaration 'fetch_f' definition 'fetch_global'.
  monitor::register_statistics (std::size_t statistics_count, const fetch_function &fetch_global,
                                                                                    ^
src/monitor/monitor_statistic.hpp:189:19: performance:inconclusive: Technically the member function 'atomic_primitive < double >::get_statistics_count' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      std::size_t get_statistics_count (void) const
                  ^
src/object/authenticate.c:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
src/object/object_printer.hpp:57:5: style: Class 'object_printer' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    object_printer (string_buffer &buf)
    ^
src/object/class_description.cpp:447:30: style: Redundant condition: !include_inherited. 'A || (!A && B)' is equivalent to 'A || B' [redundantCondition]
       if (include_inherited || (!include_inherited && a->class_mop == op))
                             ^
src/object/class_description.cpp:498:30: style: Redundant condition: !include_inherited. 'A || (!A && B)' is equivalent to 'A || B' [redundantCondition]
       if (include_inherited || (!include_inherited && a->class_mop == op))
                             ^
src/object/class_description.cpp:549:30: style: Redundant condition: !include_inherited. 'A || (!A && B)' is equivalent to 'A || B' [redundantCondition]
       if (include_inherited || (!include_inherited && m->class_mop == op))
                             ^
src/object/class_description.cpp:596:30: style: Redundant condition: !include_inherited. 'A || (!A && B)' is equivalent to 'A || B' [redundantCondition]
       if (include_inherited || (!include_inherited && m->class_mop == op))
                             ^
src/object/class_description.cpp:669:30: style: Redundant condition: !include_inherited. 'A || (!A && B)' is equivalent to 'A || B' [redundantCondition]
       if (include_inherited || (!include_inherited && f->class_mop == op))
                             ^
src/object/class_description.cpp:781:13: style: Variable 'count' is assigned a value that is never used. [unreadVariable]
      count = 0;
            ^
src/object/class_object.c:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
src/object/object_primitive.h:397:35: error: Code 'C++ cast <...' is invalid C code. Use --std or --language to configure the language. [syntaxError]
      return (*f_data_lengthmem) (const_cast<void *> (mem), const_cast<tp_domain *> (domain), 1);
                                  ^
src/object/object_accessor.c:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
src/object/object_description.cpp:57:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i, count;
      ^
src/object/object_description.cpp:57:10: style: The scope of the variable 'count' can be reduced. [variableScope]
  int i, count;
         ^
src/object/object_description.cpp:60:10: style: The scope of the variable 'buf_size' can be reduced. [variableScope]
  size_t buf_size;
         ^
src/object/object_print.c:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
src/object/object_printer.cpp:235:18: style: Variable 'has_collation' is reassigned a value before the old one has been used. [redundantAssignment]
   has_collation = 1;
                 ^
src/object/object_printer.cpp:225:18: note: has_collation is assigned
   has_collation = 1;
                 ^
src/object/object_printer.cpp:235:18: note: has_collation is overwritten
   has_collation = 1;
                 ^
src/object/object_printer.cpp:175:7: style: The scope of the variable 'has_collation' can be reduced. [variableScope]
  int has_collation;
      ^
src/object/object_printer.cpp:1178:8: style: The scope of the variable 'col_name' can be reduced. [variableScope]
  char col_name[DB_MAX_IDENTIFIER_LENGTH + 1];
       ^
src/object/object_printer.cpp:361:84: style:inconclusive: Function 'describe_method' argument 2 names different: declaration 'method_p' definition 'method'. [funcArgNamesDifferent]
void object_printer::describe_method (const struct db_object &op, const sm_method &method,
                                                                                   ^
src/object/object_printer.hpp:66:72: note: Function 'describe_method' argument 2 names different: declaration 'method_p' definition 'method'.
    void describe_method (const struct db_object &op, const sm_method &method_p, class_description::type prt_type);
                                                                       ^
src/object/object_printer.cpp:361:84: note: Function 'describe_method' argument 2 names different: declaration 'method_p' definition 'method'.
void object_printer::describe_method (const struct db_object &op, const sm_method &method,
                                                                                   ^
src/object/object_printer.cpp:412:69: style:inconclusive: Function 'describe_signature' argument 1 names different: declaration 'signature_p' definition 'signature'. [funcArgNamesDifferent]
void object_printer::describe_signature (const sm_method_signature &signature, class_description::type prt_type)
                                                                    ^
src/object/object_printer.hpp:67:57: note: Function 'describe_signature' argument 1 names different: declaration 'signature_p' definition 'signature'.
    void describe_signature (const sm_method_signature &signature_p, class_description::type prt_type);
                                                        ^
src/object/object_printer.cpp:412:69: note: Function 'describe_signature' argument 1 names different: declaration 'signature_p' definition 'signature'.
void object_printer::describe_signature (const sm_method_signature &signature, class_description::type prt_type)
                                                                    ^
src/object/object_printer.cpp:453:66: style:inconclusive: Function 'describe_attribute' argument 1 names different: declaration 'class_p' definition 'cls'. [funcArgNamesDifferent]
void object_printer::describe_attribute (const struct db_object &cls, const sm_attribute &attribute,
                                                                 ^
src/object/object_printer.hpp:68:54: note: Function 'describe_attribute' argument 1 names different: declaration 'class_p' definition 'cls'.
    void describe_attribute (const struct db_object &class_p, const sm_attribute &attribute_p, bool is_inherited,
                                                     ^
src/object/object_printer.cpp:453:66: note: Function 'describe_attribute' argument 1 names different: declaration 'class_p' definition 'cls'.
void object_printer::describe_attribute (const struct db_object &cls, const sm_attribute &attribute,
                                                                 ^
src/object/object_printer.cpp:453:91: style:inconclusive: Function 'describe_attribute' argument 2 names different: declaration 'attribute_p' definition 'attribute'. [funcArgNamesDifferent]
void object_printer::describe_attribute (const struct db_object &cls, const sm_attribute &attribute,
                                                                                          ^
src/object/object_printer.hpp:68:83: note: Function 'describe_attribute' argument 2 names different: declaration 'attribute_p' definition 'attribute'.
    void describe_attribute (const struct db_object &class_p, const sm_attribute &attribute_p, bool is_inherited,
                                                                                  ^
src/object/object_printer.cpp:453:91: note: Function 'describe_attribute' argument 2 names different: declaration 'attribute_p' definition 'attribute'.
void object_printer::describe_attribute (const struct db_object &cls, const sm_attribute &attribute,
                                                                                          ^
src/object/object_printer.cpp:602:59: style:inconclusive: Function 'describe_constraint' argument 1 names different: declaration 'class_p' definition 'cls'. [funcArgNamesDifferent]
void object_printer::describe_constraint (const sm_class &cls, const sm_class_constraint &constraint,
                                                          ^
src/object/object_printer.hpp:70:47: note: Function 'describe_constraint' argument 1 names different: declaration 'class_p' definition 'cls'.
    void describe_constraint (const sm_class &class_p,
                                              ^
src/object/object_printer.cpp:602:59: note: Function 'describe_constraint' argument 1 names different: declaration 'class_p' definition 'cls'.
void object_printer::describe_constraint (const sm_class &cls, const sm_class_constraint &constraint,
                                                          ^
src/object/object_printer.cpp:602:91: style:inconclusive: Function 'describe_constraint' argument 2 names different: declaration 'constraint_p' definition 'constraint'. [funcArgNamesDifferent]
void object_printer::describe_constraint (const sm_class &cls, const sm_class_constraint &constraint,
                                                                                          ^
src/object/object_printer.hpp:71:37: note: Function 'describe_constraint' argument 2 names different: declaration 'constraint_p' definition 'constraint'.
         const sm_class_constraint &constraint_p,
                                    ^
src/object/object_printer.cpp:602:91: note: Function 'describe_constraint' argument 2 names different: declaration 'constraint_p' definition 'constraint'.
void object_printer::describe_constraint (const sm_class &cls, const sm_class_constraint &constraint,
                                                                                          ^
src/object/object_representation.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/object/object_template.c:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
src/object/quick_fit.c:73:21: style:inconclusive: Function 'db_ws_alloc' argument 1 names different: declaration 'bytes' definition 'size'. [funcArgNamesDifferent]
db_ws_alloc (size_t size)
                    ^
src/object/quick_fit.h:42:34: note: Function 'db_ws_alloc' argument 1 names different: declaration 'bytes' definition 'size'.
extern void *db_ws_alloc (size_t bytes);
                                 ^
src/object/quick_fit.c:73:21: note: Function 'db_ws_alloc' argument 1 names different: declaration 'bytes' definition 'size'.
db_ws_alloc (size_t size)
                    ^
src/object/quick_fit.c:123:22: style:inconclusive: Function 'db_ws_realloc' argument 1 names different: declaration 'obj' definition 'ptr'. [funcArgNamesDifferent]
db_ws_realloc (void *ptr, size_t size)
                     ^
src/object/quick_fit.h:43:35: note: Function 'db_ws_realloc' argument 1 names different: declaration 'obj' definition 'ptr'.
extern void *db_ws_realloc (void *obj, size_t newsize);
                                  ^
src/object/quick_fit.c:123:22: note: Function 'db_ws_realloc' argument 1 names different: declaration 'obj' definition 'ptr'.
db_ws_realloc (void *ptr, size_t size)
                     ^
src/object/quick_fit.c:123:34: style:inconclusive: Function 'db_ws_realloc' argument 2 names different: declaration 'newsize' definition 'size'. [funcArgNamesDifferent]
db_ws_realloc (void *ptr, size_t size)
                                 ^
src/object/quick_fit.h:43:47: note: Function 'db_ws_realloc' argument 2 names different: declaration 'newsize' definition 'size'.
extern void *db_ws_realloc (void *obj, size_t newsize);
                                              ^
src/object/quick_fit.c:123:34: note: Function 'db_ws_realloc' argument 2 names different: declaration 'newsize' definition 'size'.
db_ws_realloc (void *ptr, size_t size)
                                 ^
src/object/quick_fit.c:194:19: style:inconclusive: Function 'db_ws_free' argument 1 names different: declaration 'obj' definition 'ptr'. [funcArgNamesDifferent]
db_ws_free (void *ptr)
                  ^
src/object/quick_fit.h:41:31: note: Function 'db_ws_free' argument 1 names different: declaration 'obj' definition 'ptr'.
extern void db_ws_free (void *obj);
                              ^
src/object/quick_fit.c:194:19: note: Function 'db_ws_free' argument 1 names different: declaration 'obj' definition 'ptr'.
db_ws_free (void *ptr)
                  ^
src/object/schema_manager.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 20 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/object/schema_manager.c:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
src/object/schema_template.c:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
src/object/trigger_description.cpp:77:44: style: The scope of the variable 'classname' can be reduced. [variableScope]
  char *condition = NULL, *action = NULL, *classname;
                                           ^
src/object/trigger_description.cpp:464:15: style: The scope of the variable 'tmp' can be reduced. [variableScope]
  const char *tmp;
              ^
src/object/trigger_manager.c:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
src/object/virtual_object.c:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
src/object/work_space.c:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
src/optimizer/query_planner.h:38:1: error: Code 'namespacecubxasl{' is invalid C code. Use --std or --language to configure the language. [syntaxError]
namespace cubxasl
^
src/optimizer/query_rewrite.c:6646:12: style: Condition 'name==NULL' is always false [knownConditionTrueFalse]
  if (name == NULL || name->node_type != PT_NAME)
           ^
src/optimizer/query_rewrite.c:6641:12: note: Assuming that condition 'name==NULL' is not redundant
  if (name == NULL)
           ^
src/optimizer/query_rewrite.c:6646:12: note: Condition 'name==NULL' is always false
  if (name == NULL || name->node_type != PT_NAME)
           ^
src/optimizer/query_rewrite.c:6093:13: style: Variable 'hint_node' is reassigned a value before the old one has been used. [redundantAssignment]
  hint_node = root_node->next;
            ^
src/optimizer/query_rewrite.c:5963:17: note: hint_node is assigned
      hint_node = using_index->next;
                ^
src/optimizer/query_rewrite.c:6093:13: note: hint_node is overwritten
  hint_node = root_node->next;
            ^
src/optimizer/query_rewrite.c:6093:13: style: Variable 'hint_node' is reassigned a value before the old one has been used. [redundantAssignment]
  hint_node = root_node->next;
            ^
src/optimizer/query_rewrite.c:5974:17: note: hint_node is assigned
      hint_node = using_index;
                ^
src/optimizer/query_rewrite.c:6093:13: note: hint_node is overwritten
  hint_node = root_node->next;
            ^
src/optimizer/query_rewrite.c:987:12: style: The scope of the variable 'prev' can be reduced. [variableScope]
  PT_NODE *prev, *next, *from, *new_spec, *prev_spec = NULL;
           ^
src/optimizer/query_rewrite.c:1137:25: style: The scope of the variable 's_name' can be reduced. [variableScope]
       PT_NODE *point, *s_name;
                        ^
src/optimizer/query_rewrite.c:1304:8: style: The scope of the variable 'found_equality_term' can be reduced. [variableScope]
  bool found_equality_term, found_join_term;
       ^
src/optimizer/query_rewrite.c:1663:14: style: The scope of the variable 'dbval' can be reduced. [variableScope]
   DB_VALUE *dbval, dbval_res;
             ^
src/optimizer/query_rewrite.c:1664:15: style: The scope of the variable 'dom' can be reduced. [variableScope]
   TP_DOMAIN *dom;
              ^
src/optimizer/query_rewrite.c:4706:23: style: The scope of the variable 'dnf_node' can be reduced. [variableScope]
  PT_NODE *cnf_node, *dnf_node, *cnf_prev, *dnf_prev;
                      ^
src/optimizer/query_rewrite.c:5249:14: style: The scope of the variable 'r_lv' can be reduced. [variableScope]
   DB_VALUE *r_lv, *r_uv;
             ^
src/optimizer/query_rewrite.c:5249:21: style: The scope of the variable 'r_uv' can be reduced. [variableScope]
   DB_VALUE *r_lv, *r_uv;
                    ^
src/optimizer/query_rewrite.c:6718:12: style: The scope of the variable 'next' can be reduced. [variableScope]
  PT_NODE *next, *pred, **wherep, **havingp, *dummy;
           ^
src/optimizer/query_rewrite.c:7015:9: style: The scope of the variable 'can_move' can be reduced. [variableScope]
   bool can_move;
        ^
src/optimizer/query_rewrite.c:7419:16: style: The scope of the variable 'one_rewrited' can be reduced. [variableScope]
      PT_NODE *one_rewrited;
               ^
src/optimizer/query_rewrite.c:7702:19: style: The scope of the variable 'prev' can be reduced. [variableScope]
  PT_NODE *node, *prev, *next, *spec;
                  ^
src/optimizer/query_rewrite.c:7704:9: style: The scope of the variable 'location' can be reduced. [variableScope]
  short location;
        ^
src/optimizer/query_rewrite.c:6944:8: style: Local variable 'continue_walk' shadows outer argument [shadowArgument]
   int continue_walk;
       ^
src/optimizer/query_rewrite.c:6715:79: note: Shadowed declaration
qo_optimize_queries (PARSER_CONTEXT * parser, PT_NODE * node, void *arg, int *continue_walk)
                                                                              ^
src/optimizer/query_rewrite.c:6944:8: note: Shadow variable
   int continue_walk;
       ^
src/optimizer/query_rewrite.c:7011:26: style: Local variable 'next' shadows outer variable [shadowVariable]
   PT_NODE *prev, *cnf, *next;
                         ^
src/optimizer/query_rewrite.c:6718:12: note: Shadowed declaration
  PT_NODE *next, *pred, **wherep, **havingp, *dummy;
           ^
src/optimizer/query_rewrite.c:7011:26: note: Shadow variable
   PT_NODE *prev, *cnf, *next;
                         ^
src/optimizer/query_rewrite.c:7320:8: style: Local variable 'continue_walk' shadows outer argument [shadowArgument]
   int continue_walk;
       ^
src/optimizer/query_rewrite.c:6715:79: note: Shadowed declaration
qo_optimize_queries (PARSER_CONTEXT * parser, PT_NODE * node, void *arg, int *continue_walk)
                                                                              ^
src/optimizer/query_rewrite.c:7320:8: note: Shadow variable
   int continue_walk;
       ^
src/optimizer/query_rewrite.c:812:9: style: Variable 'targ' is assigned a value that is never used. [unreadVariable]
   targ = node->info.expr.arg1;
        ^
src/optimizer/query_rewrite.c:818:9: style: Variable 'targ' is assigned a value that is never used. [unreadVariable]
   targ = node->info.expr.arg2;
        ^
src/optimizer/query_rewrite.c:826:9: style: Variable 'targ' is assigned a value that is never used. [unreadVariable]
   targ = node->info.expr.arg1;
        ^
src/optimizer/query_rewrite.c:832:9: style: Variable 'targ' is assigned a value that is never used. [unreadVariable]
   targ = node->info.expr.arg2;
        ^
src/optimizer/query_rewrite.c:2089:25: style: Variable 'need_merge_check' is assigned a value that is never used. [unreadVariable]
       need_merge_check = false; /* clear */
                        ^
src/optimizer/query_rewrite.c:469:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  statement = parser_walk_tree (parser, statement, qo_convert_path_to_name, path_spec, NULL, NULL);
  ^
src/parser/cnf.c:778:8: style: Condition 'lhs' is always true [knownConditionTrueFalse]
   if (lhs)
       ^
src/parser/cnf.c:759:15: note: Assuming that condition 'lhs==NULL' is not redundant
      if (lhs == NULL || rhs == NULL)
              ^
src/parser/cnf.c:778:8: note: Condition 'lhs' is always true
   if (lhs)
       ^
src/parser/cnf.c:798:8: style: Condition 'rhs' is always true [knownConditionTrueFalse]
   if (rhs)
       ^
src/parser/cnf.c:759:30: note: Assuming that condition 'rhs==NULL' is not redundant
      if (lhs == NULL || rhs == NULL)
                             ^
src/parser/cnf.c:798:8: note: Condition 'rhs' is always true
   if (rhs)
       ^
src/parser/cnf.c:591:48: style: The scope of the variable 'arg1' can be reduced. [variableScope]
  PT_NODE *common_list, *lhs_prev, *rhs_prev, *arg1, *arg2;
                                               ^
src/parser/compile.c:995:20: style: Array index 'i' is used before limits check. [arrayIndexThenCheck]
      for (i = 0; p[i] != single_quote_char && i < strlen (p); i++)
                   ^
src/parser/compile.c:1066:11: style: Condition 'name1' is always true [knownConditionTrueFalse]
      if (name1)
          ^
src/parser/compile.c:1057:25: note: Assuming that condition 'name1!=NULL' is not redundant
  if (class_op && name1 != NULL)
                        ^
src/parser/compile.c:1060:11: note: Assuming condition is false
      if (!class_name)
          ^
src/parser/compile.c:1066:11: note: Condition 'name1' is always true
      if (name1)
          ^
src/parser/compile.c:1076:8: style: Condition '!name1' is always false [knownConditionTrueFalse]
   if (!name1)
       ^
src/parser/compile.c:1057:25: note: Assuming that condition 'name1!=NULL' is not redundant
  if (class_op && name1 != NULL)
                        ^
src/parser/compile.c:1060:11: note: Assuming condition is false
      if (!class_name)
          ^
src/parser/compile.c:1076:8: note: Condition '!name1' is always false
   if (!name1)
       ^
src/parser/compile.c:709:7: error: Memory leak: ptr [memleak]
      ptr = realloc (lcks->only_all, new_size * sizeof (int));
      ^
src/parser/compile.c:718:7: error: Memory leak: ptr [memleak]
      ptr = realloc (lcks->locks, new_size * sizeof (LOCK));
      ^
src/parser/compile.c:727:7: error: Memory leak: ptr [memleak]
      ptr = realloc (lcks->flags, new_size * sizeof (LC_PREFETCH_FLAGS));
      ^
src/parser/compile.c:244:18: style: The scope of the variable 'from' can be reduced. [variableScope]
  PT_NODE *oid, *from;
                 ^
src/parser/compile.c:253:20: style: The scope of the variable 'ord' can be reduced. [variableScope]
      PT_NODE *p, *ord;
                   ^
src/parser/compile.c:618:7: style: The scope of the variable 'is_class' can be reduced. [variableScope]
  int is_class = 0;
      ^
src/parser/compile.c:957:10: style: The scope of the variable 'i' can be reduced. [variableScope]
  size_t i;
         ^
src/parser/compile.c:960:15: style: The scope of the variable 'eval_prefix' can be reduced. [variableScope]
  const char *eval_prefix = "EVALUATE ( ";
              ^
src/parser/compile.c:961:15: style: The scope of the variable 'eval_suffix' can be reduced. [variableScope]
  const char *eval_suffix = " ) ";
              ^
src/parser/compile.c:1026:7: style: The scope of the variable 'with_evaluate' can be reduced. [variableScope]
  int with_evaluate;
      ^
src/parser/compile.c:333:52: style:inconclusive: Function 'pt_add_row_oid' argument 2 names different: declaration 'stmt' definition 'statement'. [funcArgNamesDifferent]
pt_add_row_oid (PARSER_CONTEXT * parser, PT_NODE * statement)
                                                   ^
src/parser/parser.h:189:70: note: Function 'pt_add_row_oid' argument 2 names different: declaration 'stmt' definition 'statement'.
  extern PT_NODE *pt_add_row_oid (PARSER_CONTEXT * parser, PT_NODE * stmt);
                                                                     ^
src/parser/compile.c:333:52: note: Function 'pt_add_row_oid' argument 2 names different: declaration 'stmt' definition 'statement'.
pt_add_row_oid (PARSER_CONTEXT * parser, PT_NODE * statement)
                                                   ^
src/parser/compile.c:347:57: style:inconclusive: Function 'pt_add_row_oid_name' argument 2 names different: declaration 'stmt' definition 'statement'. [funcArgNamesDifferent]
pt_add_row_oid_name (PARSER_CONTEXT * parser, PT_NODE * statement)
                                                        ^
src/parser/parser.h:190:75: note: Function 'pt_add_row_oid_name' argument 2 names different: declaration 'stmt' definition 'statement'.
  extern PT_NODE *pt_add_row_oid_name (PARSER_CONTEXT * parser, PT_NODE * stmt);
                                                                          ^
src/parser/compile.c:347:57: note: Function 'pt_add_row_oid_name' argument 2 names different: declaration 'stmt' definition 'statement'.
pt_add_row_oid_name (PARSER_CONTEXT * parser, PT_NODE * statement)
                                                        ^
src/parser/compile.c:864:13: style: Variable 'error' is assigned a value that is never used. [unreadVariable]
  int error = NO_ERROR;
            ^
src/parser/double_byte_support.c:689:16: style: Variable 'return_char' is reassigned a value before the old one has been used. [redundantAssignment]
   return_char = ((input_char & 0xff) << 8) | c1;
               ^
src/parser/double_byte_support.c:687:20: note: return_char is assigned
       return_char = EOF;
                   ^
src/parser/double_byte_support.c:689:16: note: return_char is overwritten
   return_char = ((input_char & 0xff) << 8) | c1;
               ^
src/parser/func_type.hpp:108:19: performance:inconclusive: Technically the member function 'func_type::Node::get_types' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      const char *get_types (const func_all_signatures &signatures, size_t index, string_buffer &sb);
                  ^
src/parser/func_type.cpp:886:9: note: Technically the member function 'func_type::Node::get_types' can be static (but you may consider moving to unnamed namespace).
  Node::get_types (const func_all_signatures &signatures, size_t index, string_buffer &sb)
        ^
src/parser/func_type.hpp:108:19: note: Technically the member function 'func_type::Node::get_types' can be static (but you may consider moving to unnamed namespace).
      const char *get_types (const func_all_signatures &signatures, size_t index, string_buffer &sb);
                  ^
src/parser/parse_type.hpp:96:3: style: Struct 'pt_arg_type' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  pt_arg_type (pt_generic_type_enum generic_type)
  ^
src/parser/parse_type.hpp:102:3: style: Struct 'pt_arg_type' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  pt_arg_type (size_t index)
  ^
src/parser/func_type.cpp:1202:57: style:inconclusive: Function 'check_arg_compat' argument 4 names different: declaration 'resolved_type' definition 'arg_res'. [funcArgNamesDifferent]
     signature_compatibility &compat, argument_resolve &arg_res, bool string_args_to_utf8)
                                                        ^
src/parser/func_type.hpp:110:60: note: Function 'check_arg_compat' argument 4 names different: declaration 'resolved_type' definition 'arg_res'.
        signature_compatibility &compat, argument_resolve &resolved_type, bool args_to_utf8);
                                                           ^
src/parser/func_type.cpp:1202:57: note: Function 'check_arg_compat' argument 4 names different: declaration 'resolved_type' definition 'arg_res'.
     signature_compatibility &compat, argument_resolve &arg_res, bool string_args_to_utf8)
                                                        ^
src/parser/func_type.cpp:1202:71: style:inconclusive: Function 'check_arg_compat' argument 5 names different: declaration 'args_to_utf8' definition 'string_args_to_utf8'. [funcArgNamesDifferent]
     signature_compatibility &compat, argument_resolve &arg_res, bool string_args_to_utf8)
                                                                      ^
src/parser/func_type.hpp:110:80: note: Function 'check_arg_compat' argument 5 names different: declaration 'args_to_utf8' definition 'string_args_to_utf8'.
        signature_compatibility &compat, argument_resolve &resolved_type, bool args_to_utf8);
                                                                               ^
src/parser/func_type.cpp:1202:71: note: Function 'check_arg_compat' argument 5 names different: declaration 'args_to_utf8' definition 'string_args_to_utf8'.
     signature_compatibility &compat, argument_resolve &arg_res, bool string_args_to_utf8)
                                                                      ^
src/parser/func_type.cpp:1148:25: style: Variable 'func_type' is assigned a value that is never used. [unreadVariable]
    FUNC_TYPE func_type = m_node->info.function.function_type;
                        ^
src/parser/keyword.c:603:34: style:inconclusive: Function 'pt_is_reserved_word' argument 1 names different: declaration 's' definition 'text'. [funcArgNamesDifferent]
pt_is_reserved_word (const char *text)
                                 ^
src/parser/parser.h:185:48: note: Function 'pt_is_reserved_word' argument 1 names different: declaration 's' definition 'text'.
  extern bool pt_is_reserved_word (const char *s);
                                               ^
src/parser/keyword.c:603:34: note: Function 'pt_is_reserved_word' argument 1 names different: declaration 's' definition 'text'.
pt_is_reserved_word (const char *text)
                                 ^
src/parser/keyword.c:630:28: style:inconclusive: Function 'pt_is_keyword' argument 1 names different: declaration 's' definition 'text'. [funcArgNamesDifferent]
pt_is_keyword (const char *text)
                           ^
src/parser/parser.h:186:42: note: Function 'pt_is_keyword' argument 1 names different: declaration 's' definition 'text'.
  extern bool pt_is_keyword (const char *s);
                                         ^
src/parser/keyword.c:630:28: note: Function 'pt_is_keyword' argument 1 names different: declaration 's' definition 'text'.
pt_is_keyword (const char *text)
                           ^
src/parser/method_transform.c:521:11: style: Condition 'new_method' is always true [knownConditionTrueFalse]
      if (new_method)
          ^
src/parser/method_transform.c:493:18: note: Assuming that condition 'new_method==NULL' is not redundant
  if (new_method == NULL)
                 ^
src/parser/method_transform.c:521:11: note: Condition 'new_method' is always true
      if (new_method)
          ^
src/parser/method_transform.c:1604:22: style: Variable '*continue_walk' is reassigned a value before the old one has been used. [redundantAssignment]
      *continue_walk = PT_LIST_WALK;
                     ^
src/parser/method_transform.c:1595:23: note: *continue_walk is assigned
       *continue_walk = PT_STOP_WALK;
                      ^
src/parser/method_transform.c:1604:22: note: *continue_walk is overwritten
      *continue_walk = PT_LIST_WALK;
                     ^
src/parser/method_transform.c:1604:22: style: Variable '*continue_walk' is reassigned a value before the old one has been used. [redundantAssignment]
      *continue_walk = PT_LIST_WALK;
                     ^
src/parser/method_transform.c:1602:19: note: *continue_walk is assigned
   *continue_walk = PT_STOP_WALK;
                  ^
src/parser/method_transform.c:1604:22: note: *continue_walk is overwritten
      *continue_walk = PT_LIST_WALK;
                     ^
src/parser/method_transform.c:1152:19: style: The scope of the variable 'new_attr' can be reduced. [variableScope]
  PT_NODE *attr, *new_attr;
                  ^
src/parser/method_transform.c:1192:12: style: The scope of the variable 'prev_node' can be reduced. [variableScope]
  PT_NODE *prev_node, *node_next, *tmp;
           ^
src/parser/method_transform.c:1316:12: style: The scope of the variable 'new_node' can be reduced. [variableScope]
  PT_NODE *new_node;
           ^
src/parser/method_transform.c:2033:7: style: The scope of the variable 'outside_refs' can be reduced. [variableScope]
  int outside_refs, nested_meths;
      ^
src/parser/method_transform.c:2033:21: style: The scope of the variable 'nested_meths' can be reduced. [variableScope]
  int outside_refs, nested_meths;
                    ^
src/parser/method_transform.c:2102:12: style: The scope of the variable 'true_node' can be reduced. [variableScope]
  PT_NODE *true_node;
           ^
src/parser/method_transform.c:2186:7: style: The scope of the variable 'outside_refs' can be reduced. [variableScope]
  int outside_refs;
      ^
src/parser/method_transform.c:2187:7: style: The scope of the variable 'nested_meths' can be reduced. [variableScope]
  int nested_meths;
      ^
src/parser/method_transform.c:946:12: style: Variable 'derived1' is assigned a value that is never used. [unreadVariable]
  derived1 = mq_reset_paths (parser, derived1, derived1->info.query.q.select.from);
           ^
src/parser/name_resolution.c:4415:3: error: Code 'std::unordered_map' is invalid C code. Use --std or --language to configure the language. [syntaxError]
  std::unordered_map<size_t, PT_NODE *> sorted_attrs;
  ^
src/parser/xasl_generation.h:43:1: error: Code 'namespacecubxasl{' is invalid C code. Use --std or --language to configure the language. [syntaxError]
namespace cubxasl
^
src/parser/parse_evaluate.c:928:28: warning: Either the condition 'parser!=NULL' is redundant or there is possible null pointer dereference: parser. [nullPointerRedundantCheck]
  QUERY_ID query_id_self = parser->query_id;
                           ^
src/parser/parse_evaluate.c:936:18: note: Assuming that condition 'parser!=NULL' is not redundant
  assert (parser != NULL);
                 ^
src/parser/parse_evaluate.c:928:28: note: Null pointer dereference
  QUERY_ID query_id_self = parser->query_id;
                           ^
src/parser/parse_evaluate.c:151:17: style: Redundant initialization for 'query_id_self'. The initialized value is overwritten before it is read. [redundantInitialization]
  query_id_self = parser->query_id;
                ^
src/parser/parse_evaluate.c:140:26: note: query_id_self is initialized
  QUERY_ID query_id_self = parser->query_id;
                         ^
src/parser/parse_evaluate.c:151:17: note: query_id_self is overwritten
  query_id_self = parser->query_id;
                ^
src/parser/parse_evaluate.c:135:27: style: The scope of the variable 'e_val' can be reduced. [variableScope]
  DB_VALUE *vals = NULL, *e_val;
                          ^
src/parser/parse_evaluate.c:138:7: style: The scope of the variable 'cursor_status' can be reduced. [variableScope]
  int cursor_status, degree = 0, col;
      ^
src/parser/parse_evaluate.c:495:15: style: The scope of the variable 'key' can be reduced. [variableScope]
  const char *key;
              ^
src/parser/parse_evaluate.c:707:13: style: The scope of the variable 'db_valp' can be reduced. [variableScope]
  DB_VALUE *db_valp;
            ^
src/parser/parse_evaluate.c:921:12: style: The scope of the variable 'arg1' can be reduced. [variableScope]
  PT_NODE *arg1, *arg2, *arg3, *temp;
           ^
src/parser/parse_evaluate.c:926:14: style: The scope of the variable 'domain' can be reduced. [variableScope]
  TP_DOMAIN *domain;
             ^
src/parser/parse_evaluate.c:930:18: style: The scope of the variable 'serial_oid_p' can be reduced. [variableScope]
  DB_IDENTIFIER *serial_oid_p;
                 ^
src/parser/parse_evaluate.c:932:7: style: The scope of the variable 'r' can be reduced. [variableScope]
  int r = 0;
      ^
src/parser/parse_evaluate.c:933:7: style: The scope of the variable 'error_code' can be reduced. [variableScope]
  int error_code;
      ^
src/parser/parse_evaluate.c:934:8: style: The scope of the variable 'opd2_set_null' can be reduced. [variableScope]
  bool opd2_set_null = false;
       ^
src/parser/parse_evaluate.c:1200:14: style: Variable 'type3' is assigned a value that is never used. [unreadVariable]
       type3 = arg3->type_enum;
             ^
src/parser/parse_evaluate.c:1214:15: style: Variable 'type3' is assigned a value that is never used. [unreadVariable]
        type3 = PT_TYPE_VARNCHAR;
              ^
src/parser/parse_evaluate.c:1219:15: style: Variable 'type3' is assigned a value that is never used. [unreadVariable]
        type3 = PT_TYPE_VARCHAR;
              ^
src/parser/parse_evaluate.c:1227:15: style: Variable 'type2' is assigned a value that is never used. [unreadVariable]
        type2 = PT_TYPE_VARNCHAR;
              ^
src/parser/parse_evaluate.c:1232:15: style: Variable 'type2' is assigned a value that is never used. [unreadVariable]
        type2 = PT_TYPE_VARCHAR;
              ^
src/parser/parse_tree.c:1242:13: style: The scope of the variable 'hv' can be reduced. [variableScope]
  DB_VALUE *hv;
            ^
src/parser/parse_tree.c:1312:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/parser/parse_tree.c:1014:66: style:inconclusive: Function 'pt_append_bytes' argument 2 names different: declaration 'old_bytes' definition 'old_string'. [funcArgNamesDifferent]
pt_append_bytes (const PARSER_CONTEXT * parser, PARSER_VARCHAR * old_string, const char *new_tail,
                                                                 ^
src/parser/parser.h:125:91: note: Function 'pt_append_bytes' argument 2 names different: declaration 'old_bytes' definition 'old_string'.
  extern PARSER_VARCHAR *pt_append_bytes (const PARSER_CONTEXT * parser, PARSER_VARCHAR * old_bytes,
                                                                                          ^
src/parser/parse_tree.c:1014:66: note: Function 'pt_append_bytes' argument 2 names different: declaration 'old_bytes' definition 'old_string'.
pt_append_bytes (const PARSER_CONTEXT * parser, PARSER_VARCHAR * old_string, const char *new_tail,
                                                                 ^
src/parser/parse_tree.c:1015:14: style:inconclusive: Function 'pt_append_bytes' argument 4 names different: declaration 'length' definition 'new_tail_length'. [funcArgNamesDifferent]
   const int new_tail_length)
             ^
src/parser/parser.h:126:40: note: Function 'pt_append_bytes' argument 4 names different: declaration 'length' definition 'new_tail_length'.
       const char *new_tail, const int length);
                                       ^
src/parser/parse_tree.c:1015:14: note: Function 'pt_append_bytes' argument 4 names different: declaration 'length' definition 'new_tail_length'.
   const int new_tail_length)
             ^
src/parser/parse_tree.c:1052:68: style:inconclusive: Function 'pt_append_varchar' argument 2 names different: declaration 'old_bytes' definition 'old_string'. [funcArgNamesDifferent]
pt_append_varchar (const PARSER_CONTEXT * parser, PARSER_VARCHAR * old_string, const PARSER_VARCHAR * new_tail)
                                                                   ^
src/parser/parser.h:127:93: note: Function 'pt_append_varchar' argument 2 names different: declaration 'old_bytes' definition 'old_string'.
  extern PARSER_VARCHAR *pt_append_varchar (const PARSER_CONTEXT * parser, PARSER_VARCHAR * old_bytes,
                                                                                            ^
src/parser/parse_tree.c:1052:68: note: Function 'pt_append_varchar' argument 2 names different: declaration 'old_bytes' definition 'old_string'.
pt_append_varchar (const PARSER_CONTEXT * parser, PARSER_VARCHAR * old_string, const PARSER_VARCHAR * new_tail)
                                                                   ^
src/parser/parse_tree.c:1072:70: style:inconclusive: Function 'pt_append_nulstring' argument 2 names different: declaration 'old_bytes' definition 'bstring'. [funcArgNamesDifferent]
pt_append_nulstring (const PARSER_CONTEXT * parser, PARSER_VARCHAR * bstring, const char *nulstring)
                                                                     ^
src/parser/parser.h:129:95: note: Function 'pt_append_nulstring' argument 2 names different: declaration 'old_bytes' definition 'bstring'.
  extern PARSER_VARCHAR *pt_append_nulstring (const PARSER_CONTEXT * parser, PARSER_VARCHAR * old_bytes,
                                                                                              ^
src/parser/parse_tree.c:1072:70: note: Function 'pt_append_nulstring' argument 2 names different: declaration 'old_bytes' definition 'bstring'.
pt_append_nulstring (const PARSER_CONTEXT * parser, PARSER_VARCHAR * bstring, const char *nulstring)
                                                                     ^
src/parser/parse_tree.c:1072:91: style:inconclusive: Function 'pt_append_nulstring' argument 3 names different: declaration 'new_tail' definition 'nulstring'. [funcArgNamesDifferent]
pt_append_nulstring (const PARSER_CONTEXT * parser, PARSER_VARCHAR * bstring, const char *nulstring)
                                                                                          ^
src/parser/parser.h:130:24: note: Function 'pt_append_nulstring' argument 3 names different: declaration 'new_tail' definition 'nulstring'.
           const char *new_tail);
                       ^
src/parser/parse_tree.c:1072:91: note: Function 'pt_append_nulstring' argument 3 names different: declaration 'new_tail' definition 'nulstring'.
pt_append_nulstring (const PARSER_CONTEXT * parser, PARSER_VARCHAR * bstring, const char *nulstring)
                                                                                          ^
src/parser/parse_tree.c:1360:49: style:inconclusive: Function 'pt_get_next_assignment' argument 1 names different: declaration 'helper' definition 'ea'. [funcArgNamesDifferent]
pt_get_next_assignment (PT_ASSIGNMENTS_HELPER * ea)
                                                ^
src/parser/parser.h:598:67: note: Function 'pt_get_next_assignment' argument 1 names different: declaration 'helper' definition 'ea'.
  extern PT_NODE *pt_get_next_assignment (PT_ASSIGNMENTS_HELPER * helper);
                                                                  ^
src/parser/parse_tree.c:1360:49: note: Function 'pt_get_next_assignment' argument 1 names different: declaration 'helper' definition 'ea'.
pt_get_next_assignment (PT_ASSIGNMENTS_HELPER * ea)
                                                ^
src/parser/parse_tree.c:86:12: style: union member 'aligned::dummy' is never used. [unusedStructMember]
    double dummy;
           ^
src/parser/parser_allocator.hpp:31:1: error: Code 'classparser_block_allocator:' is invalid C code. Use --std or --language to configure the language. [syntaxError]
class parser_block_allocator : public cubmem::block_allocator
^
src/parser/parser_allocator.hpp:35:5: style: Class 'parser_block_allocator' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    parser_block_allocator (parser_context *parser);
    ^
src/parser/scanner_support.c:82:9: style: The scope of the variable 'tmp_name' can be reduced. [variableScope]
  char *tmp_name;
        ^
src/parser/scanner_support.c:530:18: style: The scope of the variable 'count' can be reduced. [variableScope]
  int i, j, len, count;
                 ^
src/parser/scanner_support.c:547:20: style: Variable 'has_parenthesis' is assigned a value that is never used. [unreadVariable]
   has_parenthesis = false;
                   ^
src/parser/show_meta.c:913:32: style: The scope of the variable 'att' can be reduced. [variableScope]
  DB_ATTRIBUTE *attrs = NULL, *att;
                               ^
src/parser/view_transform.c:7183:3: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
  statement = mq_reset_ids_and_references_helper (parser, statement, spec, get_spec_referenced_attr);
  ^
src/parser/view_transform.c:1070:11: style: Condition 'statement' is always true [knownConditionTrueFalse]
      if (statement && statement->info.query.all_distinct == PT_DISTINCT)
          ^
src/parser/view_transform.c:1066:21: note: Assuming that condition 'statement!=NULL' is not redundant
  while ((statement != NULL) && (PT_NOT_UPDATABLE != global))
                    ^
src/parser/view_transform.c:1070:11: note: Condition 'statement' is always true
      if (statement && statement->info.query.all_distinct == PT_DISTINCT)
          ^
src/parser/view_transform.c:1246:61: style: Condition 'attr!=NULL' is always true [knownConditionTrueFalse]
  if (PT_IS_VALUE_QUERY (query_spec) && col != NULL && attr != NULL)
                                                            ^
src/parser/view_transform.c:1239:18: note: Assuming that condition 'attributes==NULL' is not redundant
  if (attributes == NULL)
                 ^
src/parser/view_transform.c:1245:10: note: Assignment 'attr=attributes', assigned value is 0
  attr = attributes;
         ^
src/parser/view_transform.c:1246:61: note: Condition 'attr!=NULL' is always true
  if (PT_IS_VALUE_QUERY (query_spec) && col != NULL && attr != NULL)
                                                            ^
src/parser/view_transform.c:5511:16: style: Condition 'local_query' is always true [knownConditionTrueFalse]
      else if (local_query)
               ^
src/parser/view_transform.c:5502:23: note: Assuming that condition 'local_query==NULL' is not redundant
      if (local_query == NULL)
                      ^
src/parser/view_transform.c:5511:16: note: Condition 'local_query' is always true
      else if (local_query)
               ^
src/parser/view_transform.c:10458:14: style: Condition 'parser==NULL' is always true [knownConditionTrueFalse]
  if (parser == NULL)
             ^
src/parser/view_transform.c:10450:28: note: Assignment 'parser=NULL', assigned value is 0
  PARSER_CONTEXT *parser = NULL;
                           ^
src/parser/view_transform.c:10458:14: note: Condition 'parser==NULL' is always true
  if (parser == NULL)
             ^
src/parser/view_transform.c:10577:14: style: Condition 'parser==NULL' is always true [knownConditionTrueFalse]
  if (parser == NULL)
             ^
src/parser/view_transform.c:10572:41: note: Assignment 'parser=NULL', assigned value is 0
  /* static */ PARSER_CONTEXT *parser = NULL;
                                        ^
src/parser/view_transform.c:10577:14: note: Condition 'parser==NULL' is always true
  if (parser == NULL)
             ^
src/parser/view_transform.c:10669:14: style: Condition 'parser==NULL' is always true [knownConditionTrueFalse]
  if (parser == NULL)
             ^
src/parser/view_transform.c:10665:28: note: Assignment 'parser=NULL', assigned value is 0
  PARSER_CONTEXT *parser = NULL;
                           ^
src/parser/view_transform.c:10669:14: note: Condition 'parser==NULL' is always true
  if (parser == NULL)
             ^
src/parser/view_transform.c:10749:14: style: Condition 'parser==NULL' is always true [knownConditionTrueFalse]
  if (parser == NULL)
             ^
src/parser/view_transform.c:10743:28: note: Assignment 'parser=NULL', assigned value is 0
  PARSER_CONTEXT *parser = NULL;
                           ^
src/parser/view_transform.c:10749:14: note: Condition 'parser==NULL' is always true
  if (parser == NULL)
             ^
src/parser/view_transform.c:11353:15: style: Condition 'as_attr==NULL' is always false [knownConditionTrueFalse]
  if (as_attr == NULL)
              ^
src/parser/view_transform.c:11339:15: note: Assuming that condition 'as_attr==NULL' is not redundant
  if (as_attr == NULL)
              ^
src/parser/view_transform.c:11353:15: note: Condition 'as_attr==NULL' is always false
  if (as_attr == NULL)
              ^
src/parser/view_transform.c:5621:21: warning: Either the condition 'column_prev!=NULL' is redundant or there is possible null pointer dereference: column_prev. [nullPointerRedundantCheck]
       column = &((*column_prev)->next);
                    ^
src/parser/view_transform.c:5609:24: note: Assuming that condition 'column_prev!=NULL' is not redundant
       if (column_prev != NULL)
                       ^
src/parser/view_transform.c:5621:21: note: Null pointer dereference
       column = &((*column_prev)->next);
                    ^
src/parser/view_transform.c:11674:16: warning: Either the condition 'item!=NULL' is redundant or there is possible null pointer dereference: item. [nullPointerRedundantCheck]
   corr_diff = item->info.query.correlation_level - prev->info.query.correlation_level;
               ^
src/parser/view_transform.c:11677:13: note: Assuming that condition 'item!=NULL' is not redundant
   if (item != NULL && prev != NULL && corr_diff <= 0)
            ^
src/parser/view_transform.c:11674:16: note: Null pointer dereference
   corr_diff = item->info.query.correlation_level - prev->info.query.correlation_level;
               ^
src/parser/view_transform.c:11674:53: warning: Either the condition 'prev!=NULL' is redundant or there is possible null pointer dereference: prev. [nullPointerRedundantCheck]
   corr_diff = item->info.query.correlation_level - prev->info.query.correlation_level;
                                                    ^
src/parser/view_transform.c:11677:29: note: Assuming that condition 'prev!=NULL' is not redundant
   if (item != NULL && prev != NULL && corr_diff <= 0)
                            ^
src/parser/view_transform.c:11674:53: note: Null pointer dereference
   corr_diff = item->info.query.correlation_level - prev->info.query.correlation_level;
                                                    ^
src/parser/view_transform.c:5493:19: style: Variable 'local_query' is reassigned a value before the old one has been used. [redundantAssignment]
      local_query = parser_walk_tree (parser, query_spec, NULL, NULL, mq_translate_local, NULL);
                  ^
src/parser/view_transform.c:5492:19: note: local_query is assigned
      local_query = parser_walk_tree (parser, query_spec, NULL, NULL, mq_push_paths, NULL);
                  ^
src/parser/view_transform.c:5493:19: note: local_query is overwritten
      local_query = parser_walk_tree (parser, query_spec, NULL, NULL, mq_translate_local, NULL);
                  ^
src/parser/view_transform.c:9641:13: style: Variable 'root' is reassigned a value before the old one has been used. [redundantAssignment]
       root = pt_find_entity (parser, query->info.query.q.select.from, col->info.name.spec_id);
            ^
src/parser/view_transform.c:9631:13: note: root is assigned
       root = pt_find_entity (parser, query->info.query.q.select.from, col->info.name.spec_id);
            ^
src/parser/view_transform.c:9641:13: note: root is overwritten
       root = pt_find_entity (parser, query->info.query.q.select.from, col->info.name.spec_id);
            ^
src/parser/view_transform.c:4734:17: warning: Redundant assignment of 'statement' to itself. [selfAssignment]
      statement = statement;
                ^
src/parser/view_transform.c:4807:17: warning: Redundant assignment of 'statement' to itself. [selfAssignment]
      statement = statement;
                ^
src/parser/view_transform.c:1467:20: style: The scope of the variable 'val' can be reduced. [variableScope]
  PT_NODE *order, *val;
                   ^
src/parser/view_transform.c:2121:12: style: The scope of the variable 'result' can be reduced. [variableScope]
  PT_NODE *result;
           ^
src/parser/view_transform.c:2176:12: style: The scope of the variable 'subquery' can be reduced. [variableScope]
  PT_NODE *subquery;
           ^
src/parser/view_transform.c:3668:18: style: The scope of the variable 'tmp' can be reduced. [variableScope]
  PT_NODE *col, *tmp, *as_attr_list;
                 ^
src/parser/view_transform.c:3816:12: style: The scope of the variable 'from' can be reduced. [variableScope]
  PT_NODE *from;
           ^
src/parser/view_transform.c:4142:8: style: The scope of the variable 'viable' can be reduced. [variableScope]
  bool viable;
       ^
src/parser/view_transform.c:4145:7: style: The scope of the variable 'is_class' can be reduced. [variableScope]
  int is_class = 0;
      ^
src/parser/view_transform.c:4193:18: style: The scope of the variable 'flat' can be reduced. [variableScope]
        PT_NODE *flat;
                 ^
src/parser/view_transform.c:4454:19: style: The scope of the variable 'flat' can be reduced. [variableScope]
  PT_NODE *from, *flat;
                  ^
src/parser/view_transform.c:4914:8: style: The scope of the variable 'has_errors' can be reduced. [variableScope]
  bool has_errors = false;
       ^
src/parser/view_transform.c:4919:52: style: The scope of the variable 'is_hint_ignore' can be reduced. [variableScope]
  bool is_hint_use = false, is_hint_force = false, is_hint_ignore = false;
                                                   ^
src/parser/view_transform.c:5412:13: style: The scope of the variable 'result' can be reduced. [variableScope]
  PT_NODE **result;
            ^
src/parser/view_transform.c:5413:12: style: The scope of the variable 'query_spec' can be reduced. [variableScope]
  PT_NODE *query_spec;
           ^
src/parser/view_transform.c:5416:15: style: The scope of the variable 'query_spec_string' can be reduced. [variableScope]
  const char *query_spec_string;
              ^
src/parser/view_transform.c:5928:23: style: The scope of the variable 'on_cond' can be reduced. [variableScope]
      PT_NODE *spec, *on_cond;
                      ^
src/parser/view_transform.c:6005:23: style: The scope of the variable 'updatable' can be reduced. [variableScope]
  bool strict = true, updatable;
                      ^
src/parser/view_transform.c:7743:12: style: The scope of the variable 'arg1' can be reduced. [variableScope]
  PT_NODE *arg1;
           ^
src/parser/view_transform.c:7881:12: style: The scope of the variable 'next' can be reduced. [variableScope]
  PT_NODE *next;
           ^
src/parser/view_transform.c:8044:15: style: The scope of the variable 'generatedname' can be reduced. [variableScope]
  const char *generatedname;
              ^
src/parser/view_transform.c:8045:7: style: The scope of the variable 'ambiguous' can be reduced. [variableScope]
  int ambiguous;
      ^
src/parser/view_transform.c:8246:48: style: The scope of the variable 'tmp' can be reduced. [variableScope]
  PT_NODE *range, *spec, *as_attr_list, *col, *tmp;
                                               ^
src/parser/view_transform.c:8996:12: style: The scope of the variable 'new_spec' can be reduced. [variableScope]
  PT_NODE *new_spec;
           ^
src/parser/view_transform.c:9207:14: style: The scope of the variable 'entity' can be reduced. [variableScope]
    PT_NODE *entity;
             ^
src/parser/view_transform.c:9399:7: style: The scope of the variable 'had_virtual' can be reduced. [variableScope]
  int had_virtual, any_had_virtual;
      ^
src/parser/view_transform.c:9572:28: style: The scope of the variable 'real_class' can be reduced. [variableScope]
  DB_OBJECT *real_object, *real_class;
                           ^
src/parser/view_transform.c:9573:13: style: The scope of the variable 'db_value' can be reduced. [variableScope]
  DB_VALUE *db_value;
            ^
src/parser/view_transform.c:9614:12: style: The scope of the variable 'new_col' can be reduced. [variableScope]
  PT_NODE *new_col;
           ^
src/parser/view_transform.c:9615:12: style: The scope of the variable 'root' can be reduced. [variableScope]
  PT_NODE *root;
           ^
src/parser/view_transform.c:9775:12: style: The scope of the variable 'new_col' can be reduced. [variableScope]
  PT_NODE *new_col;
           ^
src/parser/view_transform.c:9845:12: style: The scope of the variable 'new_sub_path' can be reduced. [variableScope]
  PT_NODE *new_sub_path;
           ^
src/parser/view_transform.c:10980:7: style: The scope of the variable 'error' can be reduced. [variableScope]
  int error;
      ^
src/parser/view_transform.c:11651:11: style: The scope of the variable 'corr_diff' can be reduced. [variableScope]
      int corr_diff = 0;
          ^
src/parser/view_transform.c:11795:34: style: The scope of the variable 'prev' can be reduced. [variableScope]
  PT_NODE *values_list, *first, *prev, *p, *save_next;
                                 ^
src/parser/view_transform.c:11796:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/parser/view_transform.c:1062:95: style:inconclusive: Function 'mq_updatable_local' argument 4 names different: declaration 'i' definition 'num_classes'. [funcArgNamesDifferent]
mq_updatable_local (PARSER_CONTEXT * parser, PT_NODE * statement, DB_OBJECT *** classes, int *num_classes, int *max)
                                                                                              ^
src/parser/view_transform.c:186:118: note: Function 'mq_updatable_local' argument 4 names different: declaration 'i' definition 'num_classes'.
static PT_UPDATABILITY mq_updatable_local (PARSER_CONTEXT * parser, PT_NODE * statement, DB_OBJECT *** classes, int *i,
                                                                                                                     ^
src/parser/view_transform.c:1062:95: note: Function 'mq_updatable_local' argument 4 names different: declaration 'i' definition 'num_classes'.
mq_updatable_local (PARSER_CONTEXT * parser, PT_NODE * statement, DB_OBJECT *** classes, int *num_classes, int *max)
                                                                                              ^
src/parser/view_transform.c:5770:33: style:inconclusive: Function 'mq_virtual_queries' argument 1 names different: declaration 'class_obj' definition 'class_object'. [funcArgNamesDifferent]
mq_virtual_queries (DB_OBJECT * class_object)
                                ^
src/parser/parser.h:272:58: note: Function 'mq_virtual_queries' argument 1 names different: declaration 'class_obj' definition 'class_object'.
  extern PARSER_CONTEXT *mq_virtual_queries (DB_OBJECT * class_obj);
                                                         ^
src/parser/view_transform.c:5770:33: note: Function 'mq_virtual_queries' argument 1 names different: declaration 'class_obj' definition 'class_object'.
mq_virtual_queries (DB_OBJECT * class_object)
                                ^
src/parser/view_transform.c:6001:83: style:inconclusive: Function 'mq_check_non_updatable_vclass_oid' argument 3 names different: declaration 'arg' definition 'void_arg'. [funcArgNamesDifferent]
mq_check_non_updatable_vclass_oid (PARSER_CONTEXT * parser, PT_NODE * node, void *void_arg, int *continue_walk)
                                                                                  ^
src/parser/view_transform.c:246:99: note: Function 'mq_check_non_updatable_vclass_oid' argument 3 names different: declaration 'arg' definition 'void_arg'.
static PT_NODE *mq_check_non_updatable_vclass_oid (PARSER_CONTEXT * parser, PT_NODE * node, void *arg,
                                                                                                  ^
src/parser/view_transform.c:6001:83: note: Function 'mq_check_non_updatable_vclass_oid' argument 3 names different: declaration 'arg' definition 'void_arg'.
mq_check_non_updatable_vclass_oid (PARSER_CONTEXT * parser, PT_NODE * node, void *void_arg, int *continue_walk)
                                                                                  ^
src/parser/view_transform.c:6053:64: style:inconclusive: Function 'mq_check_vclass_for_insert' argument 2 names different: declaration 'stmt' definition 'query_spec'. [funcArgNamesDifferent]
mq_check_vclass_for_insert (PARSER_CONTEXT * parser, PT_NODE * query_spec)
                                                               ^
src/parser/view_transform.c:248:76: note: Function 'mq_check_vclass_for_insert' argument 2 names different: declaration 'stmt' definition 'query_spec'.
static bool mq_check_vclass_for_insert (PARSER_CONTEXT * parser, PT_NODE * stmt);
                                                                           ^
src/parser/view_transform.c:6053:64: note: Function 'mq_check_vclass_for_insert' argument 2 names different: declaration 'stmt' definition 'query_spec'.
mq_check_vclass_for_insert (PARSER_CONTEXT * parser, PT_NODE * query_spec)
                                                               ^
src/parser/view_transform.c:9301:74: style:inconclusive: Function 'mq_lambda' argument 3 names different: declaration 'name_node' definition 'name_node_list'. [funcArgNamesDifferent]
mq_lambda (PARSER_CONTEXT * parser, PT_NODE * tree_with_names, PT_NODE * name_node_list,
                                                                         ^
src/parser/view_transform.c:309:90: note: Function 'mq_lambda' argument 3 names different: declaration 'name_node' definition 'name_node_list'.
extern PT_NODE *mq_lambda (PARSER_CONTEXT * parser, PT_NODE * tree_with_names, PT_NODE * name_node,
                                                                                         ^
src/parser/view_transform.c:9301:74: note: Function 'mq_lambda' argument 3 names different: declaration 'name_node' definition 'name_node_list'.
mq_lambda (PARSER_CONTEXT * parser, PT_NODE * tree_with_names, PT_NODE * name_node_list,
                                                                         ^
src/parser/view_transform.c:9302:15: style:inconclusive: Function 'mq_lambda' argument 4 names different: declaration 'corresponding_tree' definition 'corresponding_tree_list'. [funcArgNamesDifferent]
    PT_NODE * corresponding_tree_list)
              ^
src/parser/view_transform.c:310:17: note: Function 'mq_lambda' argument 4 names different: declaration 'corresponding_tree' definition 'corresponding_tree_list'.
      PT_NODE * corresponding_tree);
                ^
src/parser/view_transform.c:9302:15: note: Function 'mq_lambda' argument 4 names different: declaration 'corresponding_tree' definition 'corresponding_tree_list'.
    PT_NODE * corresponding_tree_list)
              ^
src/parser/view_transform.c:10265:30: style:inconclusive: Function 'mq_is_updatable' argument 1 names different: declaration 'vclass_object' definition 'class_object'. [funcArgNamesDifferent]
mq_is_updatable (DB_OBJECT * class_object)
                             ^
src/parser/view_transform.h:66:42: note: Function 'mq_is_updatable' argument 1 names different: declaration 'vclass_object' definition 'class_object'.
extern bool mq_is_updatable (DB_OBJECT * vclass_object);
                                         ^
src/parser/view_transform.c:10265:30: note: Function 'mq_is_updatable' argument 1 names different: declaration 'vclass_object' definition 'class_object'.
mq_is_updatable (DB_OBJECT * class_object)
                             ^
src/parser/view_transform.c:10276:37: style:inconclusive: Function 'mq_is_updatable_strict' argument 1 names different: declaration 'vclass_object' definition 'class_object'. [funcArgNamesDifferent]
mq_is_updatable_strict (DB_OBJECT * class_object)
                                    ^
src/parser/view_transform.h:67:49: note: Function 'mq_is_updatable_strict' argument 1 names different: declaration 'vclass_object' definition 'class_object'.
extern bool mq_is_updatable_strict (DB_OBJECT * vclass_object);
                                                ^
src/parser/view_transform.c:10276:37: note: Function 'mq_is_updatable_strict' argument 1 names different: declaration 'vclass_object' definition 'class_object'.
mq_is_updatable_strict (DB_OBJECT * class_object)
                                    ^
src/parser/view_transform.c:10290:77: style:inconclusive: Function 'mq_is_updatable_att' argument 3 names different: declaration 'attr_name' definition 'att_nam'. [funcArgNamesDifferent]
mq_is_updatable_att (PARSER_CONTEXT * parser, DB_OBJECT * vmop, const char *att_nam, DB_OBJECT * rmop)
                                                                            ^
src/parser/view_transform.h:71:89: note: Function 'mq_is_updatable_att' argument 3 names different: declaration 'attr_name' definition 'att_nam'.
extern bool mq_is_updatable_att (PARSER_CONTEXT * parser, DB_OBJECT * vmop, const char *attr_name, DB_OBJECT * rmop);
                                                                                        ^
src/parser/view_transform.c:10290:77: note: Function 'mq_is_updatable_att' argument 3 names different: declaration 'attr_name' definition 'att_nam'.
mq_is_updatable_att (PARSER_CONTEXT * parser, DB_OBJECT * vmop, const char *att_nam, DB_OBJECT * rmop)
                                                                            ^
src/parser/view_transform.c:10326:40: style:inconclusive: Function 'mq_is_updatable_attribute' argument 1 names different: declaration 'vclass' definition 'vclass_object'. [funcArgNamesDifferent]
mq_is_updatable_attribute (DB_OBJECT * vclass_object, const char *attr_name, DB_OBJECT * real_class_object)
                                       ^
src/parser/view_transform.h:69:52: note: Function 'mq_is_updatable_attribute' argument 1 names different: declaration 'vclass' definition 'vclass_object'.
extern bool mq_is_updatable_attribute (DB_OBJECT * vclass, const char *attr_name, DB_OBJECT * base_class);
                                                   ^
src/parser/view_transform.c:10326:40: note: Function 'mq_is_updatable_attribute' argument 1 names different: declaration 'vclass' definition 'vclass_object'.
mq_is_updatable_attribute (DB_OBJECT * vclass_object, const char *attr_name, DB_OBJECT * real_class_object)
                                       ^
src/parser/view_transform.c:10326:90: style:inconclusive: Function 'mq_is_updatable_attribute' argument 3 names different: declaration 'base_class' definition 'real_class_object'. [funcArgNamesDifferent]
mq_is_updatable_attribute (DB_OBJECT * vclass_object, const char *attr_name, DB_OBJECT * real_class_object)
                                                                                         ^
src/parser/view_transform.h:69:95: note: Function 'mq_is_updatable_attribute' argument 3 names different: declaration 'base_class' definition 'real_class_object'.
extern bool mq_is_updatable_attribute (DB_OBJECT * vclass, const char *attr_name, DB_OBJECT * base_class);
                                                                                              ^
src/parser/view_transform.c:10326:90: note: Function 'mq_is_updatable_attribute' argument 3 names different: declaration 'base_class' definition 'real_class_object'.
mq_is_updatable_attribute (DB_OBJECT * vclass_object, const char *attr_name, DB_OBJECT * real_class_object)
                                                                                         ^
src/parser/view_transform.c:10445:31: style:inconclusive: Function 'mq_get_attribute' argument 1 names different: declaration 'vclass' definition 'vclass_object'. [funcArgNamesDifferent]
mq_get_attribute (DB_OBJECT * vclass_object, const char *attr_name, DB_OBJECT * real_class_object,
                              ^
src/parser/view_transform.h:73:42: note: Function 'mq_get_attribute' argument 1 names different: declaration 'vclass' definition 'vclass_object'.
extern int mq_get_attribute (DB_OBJECT * vclass, const char *attr_name, DB_OBJECT * base_class,
                                         ^
src/parser/view_transform.c:10445:31: note: Function 'mq_get_attribute' argument 1 names different: declaration 'vclass' definition 'vclass_object'.
mq_get_attribute (DB_OBJECT * vclass_object, const char *attr_name, DB_OBJECT * real_class_object,
                              ^
src/parser/view_transform.c:10445:81: style:inconclusive: Function 'mq_get_attribute' argument 3 names different: declaration 'base_class' definition 'real_class_object'. [funcArgNamesDifferent]
mq_get_attribute (DB_OBJECT * vclass_object, const char *attr_name, DB_OBJECT * real_class_object,
                                                                                ^
src/parser/view_transform.h:73:85: note: Function 'mq_get_attribute' argument 3 names different: declaration 'base_class' definition 'real_class_object'.
extern int mq_get_attribute (DB_OBJECT * vclass, const char *attr_name, DB_OBJECT * base_class,
                                                                                    ^
src/parser/view_transform.c:10445:81: note: Function 'mq_get_attribute' argument 3 names different: declaration 'base_class' definition 'real_class_object'.
mq_get_attribute (DB_OBJECT * vclass_object, const char *attr_name, DB_OBJECT * real_class_object,
                                                                                ^
src/parser/view_transform.c:10446:43: style:inconclusive: Function 'mq_get_attribute' argument 5 names different: declaration 'base_instance' definition 'real_instance'. [funcArgNamesDifferent]
    DB_VALUE * virtual_value, DB_OBJECT * real_instance)
                                          ^
src/parser/view_transform.h:74:47: note: Function 'mq_get_attribute' argument 5 names different: declaration 'base_instance' definition 'real_instance'.
        DB_VALUE * virtual_value, DB_OBJECT * base_instance);
                                              ^
src/parser/view_transform.c:10446:43: note: Function 'mq_get_attribute' argument 5 names different: declaration 'base_instance' definition 'real_instance'.
    DB_VALUE * virtual_value, DB_OBJECT * real_instance)
                                          ^
src/parser/view_transform.c:10567:34: style:inconclusive: Function 'mq_update_attribute' argument 1 names different: declaration 'vclass' definition 'vclass_object'. [funcArgNamesDifferent]
mq_update_attribute (DB_OBJECT * vclass_object, const char *attr_name, DB_OBJECT * real_class_object,
                                 ^
src/parser/view_transform.h:76:45: note: Function 'mq_update_attribute' argument 1 names different: declaration 'vclass' definition 'vclass_object'.
extern int mq_update_attribute (DB_OBJECT * vclass, const char *attr_name, DB_OBJECT * base_class,
                                            ^
src/parser/view_transform.c:10567:34: note: Function 'mq_update_attribute' argument 1 names different: declaration 'vclass' definition 'vclass_object'.
mq_update_attribute (DB_OBJECT * vclass_object, const char *attr_name, DB_OBJECT * real_class_object,
                                 ^
src/parser/view_transform.c:10567:84: style:inconclusive: Function 'mq_update_attribute' argument 3 names different: declaration 'base_class' definition 'real_class_object'. [funcArgNamesDifferent]
mq_update_attribute (DB_OBJECT * vclass_object, const char *attr_name, DB_OBJECT * real_class_object,
                                                                                   ^
src/parser/view_transform.h:76:88: note: Function 'mq_update_attribute' argument 3 names different: declaration 'base_class' definition 'real_class_object'.
extern int mq_update_attribute (DB_OBJECT * vclass, const char *attr_name, DB_OBJECT * base_class,
                                                                                       ^
src/parser/view_transform.c:10567:84: note: Function 'mq_update_attribute' argument 3 names different: declaration 'base_class' definition 'real_class_object'.
mq_update_attribute (DB_OBJECT * vclass_object, const char *attr_name, DB_OBJECT * real_class_object,
                                                                                   ^
src/parser/view_transform.c:10568:45: style:inconclusive: Function 'mq_update_attribute' argument 5 names different: declaration 'base_value' definition 'real_value'. [funcArgNamesDifferent]
       DB_VALUE * virtual_value, DB_VALUE * real_value, const char **real_name, int db_auth)
                                            ^
src/parser/view_transform.h:77:42: note: Function 'mq_update_attribute' argument 5 names different: declaration 'base_value' definition 'real_value'.
    DB_VALUE * virtual_value, DB_VALUE * base_value, const char **base_name, int db_auth);
                                         ^
src/parser/view_transform.c:10568:45: note: Function 'mq_update_attribute' argument 5 names different: declaration 'base_value' definition 'real_value'.
       DB_VALUE * virtual_value, DB_VALUE * real_value, const char **real_name, int db_auth)
                                            ^
src/parser/view_transform.c:10568:70: style:inconclusive: Function 'mq_update_attribute' argument 6 names different: declaration 'base_name' definition 'real_name'. [funcArgNamesDifferent]
       DB_VALUE * virtual_value, DB_VALUE * real_value, const char **real_name, int db_auth)
                                                                     ^
src/parser/view_transform.h:77:67: note: Function 'mq_update_attribute' argument 6 names different: declaration 'base_name' definition 'real_name'.
    DB_VALUE * virtual_value, DB_VALUE * base_value, const char **base_name, int db_auth);
                                                                  ^
src/parser/view_transform.c:10568:70: note: Function 'mq_update_attribute' argument 6 names different: declaration 'base_name' definition 'real_name'.
       DB_VALUE * virtual_value, DB_VALUE * real_value, const char **real_name, int db_auth)
                                                                     ^
src/parser/view_transform.c:10720:38: style:inconclusive: Function 'mq_fetch_one_real_class' argument 1 names different: declaration 'vclass' definition 'vclass_object'. [funcArgNamesDifferent]
mq_fetch_one_real_class (DB_OBJECT * vclass_object)
                                     ^
src/parser/view_transform.h:79:56: note: Function 'mq_fetch_one_real_class' argument 1 names different: declaration 'vclass' definition 'vclass_object'.
extern DB_OBJECT *mq_fetch_one_real_class (DB_OBJECT * vclass);
                                                       ^
src/parser/view_transform.c:10720:38: note: Function 'mq_fetch_one_real_class' argument 1 names different: declaration 'vclass' definition 'vclass_object'.
mq_fetch_one_real_class (DB_OBJECT * vclass_object)
                                     ^
src/parser/view_transform.c:10977:62: style:inconclusive: Function 'mq_evaluate_check_option' argument 2 names different: declaration 'expr' definition 'check_where'. [funcArgNamesDifferent]
mq_evaluate_check_option (PARSER_CONTEXT * parser, PT_NODE * check_where, DB_OBJECT * object, PT_NODE * view_class)
                                                             ^
src/parser/view_transform.h:88:73: note: Function 'mq_evaluate_check_option' argument 2 names different: declaration 'expr' definition 'check_where'.
extern int mq_evaluate_check_option (PARSER_CONTEXT * parser, PT_NODE * expr, DB_OBJECT * object, PT_NODE * view_class);
                                                                        ^
src/parser/view_transform.c:10977:62: note: Function 'mq_evaluate_check_option' argument 2 names different: declaration 'expr' definition 'check_where'.
mq_evaluate_check_option (PARSER_CONTEXT * parser, PT_NODE * check_where, DB_OBJECT * object, PT_NODE * view_class)
                                                             ^
src/parser/view_transform.c:4193:18: style: Local variable 'flat' shadows outer variable [shadowVariable]
        PT_NODE *flat;
                 ^
src/parser/view_transform.c:4138:12: note: Shadowed declaration
  PT_NODE *flat = NULL, *temp = NULL, **last = NULL;
           ^
src/parser/view_transform.c:4193:18: note: Shadow variable
        PT_NODE *flat;
                 ^
src/parser/view_transform.c:4367:25: style: Local variable 'sc_info' shadows outer variable [shadowVariable]
      SEMANTIC_CHK_INFO sc_info = { NULL, NULL, 0, 0, 0, false, false };
                        ^
src/parser/view_transform.c:4143:21: note: Shadowed declaration
  SEMANTIC_CHK_INFO sc_info = { NULL, NULL, 0, 0, 0, false, false };
                    ^
src/parser/view_transform.c:4367:25: note: Shadow variable
      SEMANTIC_CHK_INFO sc_info = { NULL, NULL, 0, 0, 0, false, false };
                        ^
src/parser/view_transform.c:5955:17: style: Local variable 'node' shadows outer argument [shadowArgument]
       PT_NODE *node = spec->info.spec.entity_name;
                ^
src/parser/view_transform.c:5921:54: note: Shadowed declaration
mq_mark_location (PARSER_CONTEXT * parser, PT_NODE * node, void *arg, int *continue_walk)
                                                     ^
src/parser/view_transform.c:5955:17: note: Shadow variable
       PT_NODE *node = spec->info.spec.entity_name;
                ^
src/parser/view_transform.c:4068:13: style: Variable 'error' is assigned a value that is never used. [unreadVariable]
  int error = NO_ERROR;
            ^
src/parser/view_transform.c:4145:16: style: Variable 'is_class' is assigned a value that is never used. [unreadVariable]
  int is_class = 0;
               ^
src/parser/view_transform.c:4547:19: style: Variable 'path_next' is assigned a value that is never used. [unreadVariable]
        path_next = paths;
                  ^
src/parser/view_transform.c:4919:67: style: Variable 'is_hint_ignore' is assigned a value that is never used. [unreadVariable]
  bool is_hint_use = false, is_hint_force = false, is_hint_ignore = false;
                                                                  ^
src/parser/view_transform.c:4969:19: style: Variable 'is_hint_ignore' is assigned a value that is never used. [unreadVariable]
   is_hint_ignore = true;
                  ^
src/parser/view_transform.c:7183:13: style: Variable 'statement' is assigned a value that is never used. [unreadVariable]
  statement = mq_reset_ids_and_references_helper (parser, statement, spec, get_spec_referenced_attr);
            ^
src/parser/view_transform.c:7808:17: style: Variable 'root_flat' is assigned a value that is never used. [unreadVariable]
      root_flat = old_spec->info.spec.path_conjuncts->info.expr.arg1->data_type->info.data_type.entity;
                ^
src/parser/view_transform.c:7838:16: style: Variable 'new_spec' is assigned a value that is never used. [unreadVariable]
      new_spec =
               ^
src/parser/view_transform.c:7910:9: style: Variable 'next' is assigned a value that is never used. [unreadVariable]
   next = path_spec->next;
        ^
src/parser/view_transform.c:8084:17: style: Variable 'temp' is assigned a value that is never used. [unreadVariable]
  PT_NODE *temp = name_list;
                ^
src/parser/view_transform.c:9043:13: style: Variable 'new_spec' is assigned a value that is never used. [unreadVariable]
   new_spec = pt_insert_entity (parser, dot, spec, NULL);
            ^
src/parser/view_transform.c:9253:16: style: Variable 'dt1' is assigned a value that is never used. [unreadVariable]
      if ((dt1 = result->data_type) && result->info.query.q.select.list
               ^
src/parser/view_transform.c:9277:16: style: Variable 'dt1' is assigned a value that is never used. [unreadVariable]
      if ((dt1 = result->data_type) && result->info.query.q.union_.arg1
               ^
src/parser/view_transform.c:9583:15: style: Variable 'real_class' is assigned a value that is never used. [unreadVariable]
   real_class = db_get_class (real_object);
              ^
src/parser/view_transform.c:9641:13: style: Variable 'root' is assigned a value that is never used. [unreadVariable]
       root = pt_find_entity (parser, query->info.query.q.select.from, col->info.name.spec_id);
            ^
src/parser/view_transform.c:10012:13: style: Variable 'error' is assigned a value that is never used. [unreadVariable]
  int error = NO_ERROR;
            ^
src/parser/view_transform.c:11616:14: style: Variable 'stack_head' is assigned a value that is never used. [unreadVariable]
  stack_head = stack_end = *stack;
             ^
src/parser/view_transform.c:11643:18: style: Variable 'stack_head' is assigned a value that is never used. [unreadVariable]
      stack_head = stack_end = stack_item;
                 ^
src/parser/view_transform.c:11651:21: style: Variable 'corr_diff' is assigned a value that is never used. [unreadVariable]
      int corr_diff = 0;
                    ^
src/parser/view_transform.c:11852:13: style: Variable 'error_msg' is assigned a value that is never used. [unreadVariable]
  error_msg = pt_get_next_error (error_msg, &stmt_no, &line_no, &col_no, &msg);
            ^
src/parser/view_transform.c:10814:13: style: The scope of the variable 'v' can be reduced. [variableScope]
  DB_VALUE *v;
            ^
src/parser/view_transform.c:10816:7: style: The scope of the variable 'siz' can be reduced. [variableScope]
  int siz;
      ^
src/query/arithmetic.c:5107:7: error: Code 'std::string' is invalid C code. Use --std or --language to configure the language. [syntaxError]
      std::string raw_path;
      ^
src/query/crypt_opfunc.c:82:1: error: Code 'template<...' is invalid C code. Use --std or --language to configure the language. [syntaxError]
template<typename T>
^
src/query/cursor.c:107:10: style: The scope of the variable 'size' can be reduced. [variableScope]
  size_t size;
         ^
src/query/cursor.c:553:7: style: The scope of the variable 'page_size' can be reduced. [variableScope]
  int page_size;
      ^
src/query/cursor.c:640:14: style: The scope of the variable 'object_p' can be reduced. [variableScope]
  DB_OBJECT *object_p, *tmp_object_p;
             ^
src/query/cursor.c:640:25: style: The scope of the variable 'tmp_object_p' can be reduced. [variableScope]
  DB_OBJECT *object_p, *tmp_object_p;
                        ^
src/query/cursor.c:713:9: style: The scope of the variable 'buffer_p' can be reduced. [variableScope]
  char *buffer_p;
        ^
src/query/cursor.c:715:29: style: The scope of the variable 'tuple_page_size' can be reduced. [variableScope]
  int tuple_length, offset, tuple_page_size;
                            ^
src/query/cursor.c:832:9: style: The scope of the variable 'tuple_p' can be reduced. [variableScope]
  char *tuple_p;
        ^
src/query/cursor.c:835:35: style: The scope of the variable 'current_tuple_length' can be reduced. [variableScope]
  int tupel_count, oid_index = 0, current_tuple_length, i;
                                  ^
src/query/cursor.c:889:35: style: The scope of the variable 'current_tuple_length' can be reduced. [variableScope]
  int tuple_count, oid_index = 0, current_tuple_length;
                                  ^
src/query/cursor.c:1392:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/query/cursor.c:105:38: style:inconclusive: Function 'cursor_copy_list_id' argument 1 names different: declaration 'dest_list_id' definition 'dest_list_id_p'. [funcArgNamesDifferent]
cursor_copy_list_id (QFILE_LIST_ID * dest_list_id_p, const QFILE_LIST_ID * src_list_id_p)
                                     ^
src/query/cursor.h:84:49: note: Function 'cursor_copy_list_id' argument 1 names different: declaration 'dest_list_id' definition 'dest_list_id_p'.
extern int cursor_copy_list_id (QFILE_LIST_ID * dest_list_id, const QFILE_LIST_ID * src_list_id);
                                                ^
src/query/cursor.c:105:38: note: Function 'cursor_copy_list_id' argument 1 names different: declaration 'dest_list_id' definition 'dest_list_id_p'.
cursor_copy_list_id (QFILE_LIST_ID * dest_list_id_p, const QFILE_LIST_ID * src_list_id_p)
                                     ^
src/query/cursor.c:105:76: style:inconclusive: Function 'cursor_copy_list_id' argument 2 names different: declaration 'src_list_id' definition 'src_list_id_p'. [funcArgNamesDifferent]
cursor_copy_list_id (QFILE_LIST_ID * dest_list_id_p, const QFILE_LIST_ID * src_list_id_p)
                                                                           ^
src/query/cursor.h:84:85: note: Function 'cursor_copy_list_id' argument 2 names different: declaration 'src_list_id' definition 'src_list_id_p'.
extern int cursor_copy_list_id (QFILE_LIST_ID * dest_list_id, const QFILE_LIST_ID * src_list_id);
                                                                                    ^
src/query/cursor.c:105:76: note: Function 'cursor_copy_list_id' argument 2 names different: declaration 'src_list_id' definition 'src_list_id_p'.
cursor_copy_list_id (QFILE_LIST_ID * dest_list_id_p, const QFILE_LIST_ID * src_list_id_p)
                                                                           ^
src/query/cursor.c:153:38: style:inconclusive: Function 'cursor_free_list_id' argument 1 names different: declaration 'list_id' definition 'list_id_p'. [funcArgNamesDifferent]
cursor_free_list_id (QFILE_LIST_ID * list_id_p, bool self)
                                     ^
src/query/cursor.h:85:50: note: Function 'cursor_free_list_id' argument 1 names different: declaration 'list_id' definition 'list_id_p'.
extern void cursor_free_list_id (QFILE_LIST_ID * list_id, bool self);
                                                 ^
src/query/cursor.c:153:38: note: Function 'cursor_free_list_id' argument 1 names different: declaration 'list_id' definition 'list_id_p'.
cursor_free_list_id (QFILE_LIST_ID * list_id_p, bool self)
                                     ^
src/query/cursor.c:229:36: style:inconclusive: Function 'cursor_fixup_set_vobjs' argument 1 names different: declaration 'value' definition 'value_p'. [funcArgNamesDifferent]
cursor_fixup_set_vobjs (DB_VALUE * value_p)
                                   ^
src/query/cursor.c:58:47: note: Function 'cursor_fixup_set_vobjs' argument 1 names different: declaration 'value' definition 'value_p'.
static int cursor_fixup_set_vobjs (DB_VALUE * value);
                                              ^
src/query/cursor.c:229:36: note: Function 'cursor_fixup_set_vobjs' argument 1 names different: declaration 'value' definition 'value_p'.
cursor_fixup_set_vobjs (DB_VALUE * value_p)
                                   ^
src/query/cursor.c:326:32: style:inconclusive: Function 'cursor_fixup_vobjs' argument 1 names different: declaration 'val' definition 'value_p'. [funcArgNamesDifferent]
cursor_fixup_vobjs (DB_VALUE * value_p)
                               ^
src/query/cursor.c:59:43: note: Function 'cursor_fixup_vobjs' argument 1 names different: declaration 'val' definition 'value_p'.
static int cursor_fixup_vobjs (DB_VALUE * val);
                                          ^
src/query/cursor.c:326:32: note: Function 'cursor_fixup_vobjs' argument 1 names different: declaration 'val' definition 'value_p'.
cursor_fixup_vobjs (DB_VALUE * value_p)
                               ^
src/query/cursor.c:377:45: style:inconclusive: Function 'cursor_copy_vobj_to_dbvalue' argument 1 names different: declaration 'buf' definition 'buffer_p'. [funcArgNamesDifferent]
cursor_copy_vobj_to_dbvalue (struct or_buf *buffer_p, DB_VALUE * value_p)
                                            ^
src/query/cursor.h:87:56: note: Function 'cursor_copy_vobj_to_dbvalue' argument 1 names different: declaration 'buf' definition 'buffer_p'.
extern int cursor_copy_vobj_to_dbvalue (struct or_buf *buf, DB_VALUE * db_value);
                                                       ^
src/query/cursor.c:377:45: note: Function 'cursor_copy_vobj_to_dbvalue' argument 1 names different: declaration 'buf' definition 'buffer_p'.
cursor_copy_vobj_to_dbvalue (struct or_buf *buffer_p, DB_VALUE * value_p)
                                            ^
src/query/cursor.c:377:66: style:inconclusive: Function 'cursor_copy_vobj_to_dbvalue' argument 2 names different: declaration 'db_value' definition 'value_p'. [funcArgNamesDifferent]
cursor_copy_vobj_to_dbvalue (struct or_buf *buffer_p, DB_VALUE * value_p)
                                                                 ^
src/query/cursor.h:87:72: note: Function 'cursor_copy_vobj_to_dbvalue' argument 2 names different: declaration 'db_value' definition 'value_p'.
extern int cursor_copy_vobj_to_dbvalue (struct or_buf *buf, DB_VALUE * db_value);
                                                                       ^
src/query/cursor.c:377:66: note: Function 'cursor_copy_vobj_to_dbvalue' argument 2 names different: declaration 'db_value' definition 'value_p'.
cursor_copy_vobj_to_dbvalue (struct or_buf *buffer_p, DB_VALUE * value_p)
                                                                 ^
src/query/cursor.c:419:45: style:inconclusive: Function 'cursor_get_tuple_value_to_dbvalue' argument 1 names different: declaration 'buf' definition 'buffer_p'. [funcArgNamesDifferent]
cursor_get_tuple_value_to_dbvalue (OR_BUF * buffer_p, TP_DOMAIN * domain_p, QFILE_TUPLE_VALUE_FLAG value_flag,
                                            ^
src/query/cursor.c:60:56: note: Function 'cursor_get_tuple_value_to_dbvalue' argument 1 names different: declaration 'buf' definition 'buffer_p'.
static int cursor_get_tuple_value_to_dbvalue (OR_BUF * buf, TP_DOMAIN * dom, QFILE_TUPLE_VALUE_FLAG val_flag,
                                                       ^
src/query/cursor.c:419:45: note: Function 'cursor_get_tuple_value_to_dbvalue' argument 1 names different: declaration 'buf' definition 'buffer_p'.
cursor_get_tuple_value_to_dbvalue (OR_BUF * buffer_p, TP_DOMAIN * domain_p, QFILE_TUPLE_VALUE_FLAG value_flag,
                                            ^
src/query/cursor.c:419:67: style:inconclusive: Function 'cursor_get_tuple_value_to_dbvalue' argument 2 names different: declaration 'dom' definition 'domain_p'. [funcArgNamesDifferent]
cursor_get_tuple_value_to_dbvalue (OR_BUF * buffer_p, TP_DOMAIN * domain_p, QFILE_TUPLE_VALUE_FLAG value_flag,
                                                                  ^
src/query/cursor.c:60:73: note: Function 'cursor_get_tuple_value_to_dbvalue' argument 2 names different: declaration 'dom' definition 'domain_p'.
static int cursor_get_tuple_value_to_dbvalue (OR_BUF * buf, TP_DOMAIN * dom, QFILE_TUPLE_VALUE_FLAG val_flag,
                                                                        ^
src/query/cursor.c:419:67: note: Function 'cursor_get_tuple_value_to_dbvalue' argument 2 names different: declaration 'dom' definition 'domain_p'.
cursor_get_tuple_value_to_dbvalue (OR_BUF * buffer_p, TP_DOMAIN * domain_p, QFILE_TUPLE_VALUE_FLAG value_flag,
                                                                  ^
src/query/cursor.c:419:100: style:inconclusive: Function 'cursor_get_tuple_value_to_dbvalue' argument 3 names different: declaration 'val_flag' definition 'value_flag'. [funcArgNamesDifferent]
cursor_get_tuple_value_to_dbvalue (OR_BUF * buffer_p, TP_DOMAIN * domain_p, QFILE_TUPLE_VALUE_FLAG value_flag,
                                                                                                   ^
src/query/cursor.c:60:101: note: Function 'cursor_get_tuple_value_to_dbvalue' argument 3 names different: declaration 'val_flag' definition 'value_flag'.
static int cursor_get_tuple_value_to_dbvalue (OR_BUF * buf, TP_DOMAIN * dom, QFILE_TUPLE_VALUE_FLAG val_flag,
                                                                                                    ^
src/query/cursor.c:419:100: note: Function 'cursor_get_tuple_value_to_dbvalue' argument 3 names different: declaration 'val_flag' definition 'value_flag'.
cursor_get_tuple_value_to_dbvalue (OR_BUF * buffer_p, TP_DOMAIN * domain_p, QFILE_TUPLE_VALUE_FLAG value_flag,
                                                                                                   ^
src/query/cursor.c:420:19: style:inconclusive: Function 'cursor_get_tuple_value_to_dbvalue' argument 4 names different: declaration 'db_value' definition 'value_p'. [funcArgNamesDifferent]
       DB_VALUE * value_p, bool is_copy)
                  ^
src/query/cursor.c:61:23: note: Function 'cursor_get_tuple_value_to_dbvalue' argument 4 names different: declaration 'db_value' definition 'value_p'.
           DB_VALUE * db_value, bool copy);
                      ^
src/query/cursor.c:420:19: note: Function 'cursor_get_tuple_value_to_dbvalue' argument 4 names different: declaration 'db_value' definition 'value_p'.
       DB_VALUE * value_p, bool is_copy)
                  ^
src/query/cursor.c:420:33: style:inconclusive: Function 'cursor_get_tuple_value_to_dbvalue' argument 5 names different: declaration 'copy' definition 'is_copy'. [funcArgNamesDifferent]
       DB_VALUE * value_p, bool is_copy)
                                ^
src/query/cursor.c:61:38: note: Function 'cursor_get_tuple_value_to_dbvalue' argument 5 names different: declaration 'copy' definition 'is_copy'.
           DB_VALUE * db_value, bool copy);
                                     ^
src/query/cursor.c:420:33: note: Function 'cursor_get_tuple_value_to_dbvalue' argument 5 names different: declaration 'copy' definition 'is_copy'.
       DB_VALUE * value_p, bool is_copy)
                                ^
src/query/cursor.c:468:47: style:inconclusive: Function 'cursor_get_tuple_value_from_list' argument 1 names different: declaration 'c_id' definition 'cursor_id_p'. [funcArgNamesDifferent]
cursor_get_tuple_value_from_list (CURSOR_ID * cursor_id_p, int index, DB_VALUE * value_p, char *tuple_p)
                                              ^
src/query/cursor.c:62:58: note: Function 'cursor_get_tuple_value_from_list' argument 1 names different: declaration 'c_id' definition 'cursor_id_p'.
static int cursor_get_tuple_value_from_list (CURSOR_ID * c_id, int index, DB_VALUE * value, char *tuple);
                                                         ^
src/query/cursor.c:468:47: note: Function 'cursor_get_tuple_value_from_list' argument 1 names different: declaration 'c_id' definition 'cursor_id_p'.
cursor_get_tuple_value_from_list (CURSOR_ID * cursor_id_p, int index, DB_VALUE * value_p, char *tuple_p)
                                              ^
src/query/cursor.c:468:82: style:inconclusive: Function 'cursor_get_tuple_value_from_list' argument 3 names different: declaration 'value' definition 'value_p'. [funcArgNamesDifferent]
cursor_get_tuple_value_from_list (CURSOR_ID * cursor_id_p, int index, DB_VALUE * value_p, char *tuple_p)
                                                                                 ^
src/query/cursor.c:62:86: note: Function 'cursor_get_tuple_value_from_list' argument 3 names different: declaration 'value' definition 'value_p'.
static int cursor_get_tuple_value_from_list (CURSOR_ID * c_id, int index, DB_VALUE * value, char *tuple);
                                                                                     ^
src/query/cursor.c:468:82: note: Function 'cursor_get_tuple_value_from_list' argument 3 names different: declaration 'value' definition 'value_p'.
cursor_get_tuple_value_from_list (CURSOR_ID * cursor_id_p, int index, DB_VALUE * value_p, char *tuple_p)
                                                                                 ^
src/query/cursor.c:468:97: style:inconclusive: Function 'cursor_get_tuple_value_from_list' argument 4 names different: declaration 'tuple' definition 'tuple_p'. [funcArgNamesDifferent]
cursor_get_tuple_value_from_list (CURSOR_ID * cursor_id_p, int index, DB_VALUE * value_p, char *tuple_p)
                                                                                                ^
src/query/cursor.c:62:99: note: Function 'cursor_get_tuple_value_from_list' argument 4 names different: declaration 'tuple' definition 'tuple_p'.
static int cursor_get_tuple_value_from_list (CURSOR_ID * c_id, int index, DB_VALUE * value, char *tuple);
                                                                                                  ^
src/query/cursor.c:468:97: note: Function 'cursor_get_tuple_value_from_list' argument 4 names different: declaration 'tuple' definition 'tuple_p'.
cursor_get_tuple_value_from_list (CURSOR_ID * cursor_id_p, int index, DB_VALUE * value_p, char *tuple_p)
                                                                                                ^
src/query/cursor.c:527:37: style:inconclusive: Function 'cursor_get_first_tuple_value' argument 1 names different: declaration 'tuple' definition 'tuple_p'. [funcArgNamesDifferent]
cursor_get_first_tuple_value (char *tuple_p, QFILE_TUPLE_VALUE_TYPE_LIST * type_list_p, DB_VALUE * value_p,
                                    ^
src/query/cursor.c:63:48: note: Function 'cursor_get_first_tuple_value' argument 1 names different: declaration 'tuple' definition 'tuple_p'.
static int cursor_get_first_tuple_value (char *tuple, QFILE_TUPLE_VALUE_TYPE_LIST * type_list, DB_VALUE * value,
                                               ^
src/query/cursor.c:527:37: note: Function 'cursor_get_first_tuple_value' argument 1 names different: declaration 'tuple' definition 'tuple_p'.
cursor_get_first_tuple_value (char *tuple_p, QFILE_TUPLE_VALUE_TYPE_LIST * type_list_p, DB_VALUE * value_p,
                                    ^
src/query/cursor.c:527:76: style:inconclusive: Function 'cursor_get_first_tuple_value' argument 2 names different: declaration 'type_list' definition 'type_list_p'. [funcArgNamesDifferent]
cursor_get_first_tuple_value (char *tuple_p, QFILE_TUPLE_VALUE_TYPE_LIST * type_list_p, DB_VALUE * value_p,
                                                                           ^
src/query/cursor.c:63:85: note: Function 'cursor_get_first_tuple_value' argument 2 names different: declaration 'type_list' definition 'type_list_p'.
static int cursor_get_first_tuple_value (char *tuple, QFILE_TUPLE_VALUE_TYPE_LIST * type_list, DB_VALUE * value,
                                                                                    ^
src/query/cursor.c:527:76: note: Function 'cursor_get_first_tuple_value' argument 2 names different: declaration 'type_list' definition 'type_list_p'.
cursor_get_first_tuple_value (char *tuple_p, QFILE_TUPLE_VALUE_TYPE_LIST * type_list_p, DB_VALUE * value_p,
                                                                           ^
src/query/cursor.c:527:100: style:inconclusive: Function 'cursor_get_first_tuple_value' argument 3 names different: declaration 'value' definition 'value_p'. [funcArgNamesDifferent]
cursor_get_first_tuple_value (char *tuple_p, QFILE_TUPLE_VALUE_TYPE_LIST * type_list_p, DB_VALUE * value_p,
                                                                                                   ^
src/query/cursor.c:63:107: note: Function 'cursor_get_first_tuple_value' argument 3 names different: declaration 'value' definition 'value_p'.
static int cursor_get_first_tuple_value (char *tuple, QFILE_TUPLE_VALUE_TYPE_LIST * type_list, DB_VALUE * value,
                                                                                                          ^
src/query/cursor.c:527:100: note: Function 'cursor_get_first_tuple_value' argument 3 names different: declaration 'value' definition 'value_p'.
cursor_get_first_tuple_value (char *tuple_p, QFILE_TUPLE_VALUE_TYPE_LIST * type_list_p, DB_VALUE * value_p,
                                                                                                   ^
src/query/cursor.c:528:15: style:inconclusive: Function 'cursor_get_first_tuple_value' argument 4 names different: declaration 'copy' definition 'is_copy'. [funcArgNamesDifferent]
         bool is_copy)
              ^
src/query/cursor.c:64:12: note: Function 'cursor_get_first_tuple_value' argument 4 names different: declaration 'copy' definition 'is_copy'.
      bool copy);
           ^
src/query/cursor.c:528:15: note: Function 'cursor_get_first_tuple_value' argument 4 names different: declaration 'copy' definition 'is_copy'.
         bool is_copy)
              ^
src/query/cursor.c:550:40: style:inconclusive: Function 'cursor_get_list_file_page' argument 1 names different: declaration 'cursor_id' definition 'cursor_id_p'. [funcArgNamesDifferent]
cursor_get_list_file_page (CURSOR_ID * cursor_id_p, VPID * vpid_p)
                                       ^
src/query/cursor.c:66:51: note: Function 'cursor_get_list_file_page' argument 1 names different: declaration 'cursor_id' definition 'cursor_id_p'.
static int cursor_get_list_file_page (CURSOR_ID * cursor_id, VPID * vpid);
                                                  ^
src/query/cursor.c:550:40: note: Function 'cursor_get_list_file_page' argument 1 names different: declaration 'cursor_id' definition 'cursor_id_p'.
cursor_get_list_file_page (CURSOR_ID * cursor_id_p, VPID * vpid_p)
                                       ^
src/query/cursor.c:550:60: style:inconclusive: Function 'cursor_get_list_file_page' argument 2 names different: declaration 'vpid' definition 'vpid_p'. [funcArgNamesDifferent]
cursor_get_list_file_page (CURSOR_ID * cursor_id_p, VPID * vpid_p)
                                                           ^
src/query/cursor.c:66:69: note: Function 'cursor_get_list_file_page' argument 2 names different: declaration 'vpid' definition 'vpid_p'.
static int cursor_get_list_file_page (CURSOR_ID * cursor_id, VPID * vpid);
                                                                    ^
src/query/cursor.c:550:60: note: Function 'cursor_get_list_file_page' argument 2 names different: declaration 'vpid' definition 'vpid_p'.
cursor_get_list_file_page (CURSOR_ID * cursor_id_p, VPID * vpid_p)
                                                           ^
src/query/cursor.c:1040:45: style:inconclusive: Function 'cursor_fetch_page_having_tuple' argument 1 names different: declaration 'cursor_id' definition 'cursor_id_p'. [funcArgNamesDifferent]
cursor_fetch_page_having_tuple (CURSOR_ID * cursor_id_p, VPID * vpid_p, int position, int offset)
                                            ^
src/query/cursor.h:88:56: note: Function 'cursor_fetch_page_having_tuple' argument 1 names different: declaration 'cursor_id' definition 'cursor_id_p'.
extern int cursor_fetch_page_having_tuple (CURSOR_ID * cursor_id, VPID * vpid, int position, int offset);
                                                       ^
src/query/cursor.c:1040:45: note: Function 'cursor_fetch_page_having_tuple' argument 1 names different: declaration 'cursor_id' definition 'cursor_id_p'.
cursor_fetch_page_having_tuple (CURSOR_ID * cursor_id_p, VPID * vpid_p, int position, int offset)
                                            ^
src/query/cursor.c:1040:65: style:inconclusive: Function 'cursor_fetch_page_having_tuple' argument 2 names different: declaration 'vpid' definition 'vpid_p'. [funcArgNamesDifferent]
cursor_fetch_page_having_tuple (CURSOR_ID * cursor_id_p, VPID * vpid_p, int position, int offset)
                                                                ^
src/query/cursor.h:88:74: note: Function 'cursor_fetch_page_having_tuple' argument 2 names different: declaration 'vpid' definition 'vpid_p'.
extern int cursor_fetch_page_having_tuple (CURSOR_ID * cursor_id, VPID * vpid, int position, int offset);
                                                                         ^
src/query/cursor.c:1040:65: note: Function 'cursor_fetch_page_having_tuple' argument 2 names different: declaration 'vpid' definition 'vpid_p'.
cursor_fetch_page_having_tuple (CURSOR_ID * cursor_id_p, VPID * vpid_p, int position, int offset)
                                                                ^
src/query/cursor.c:1242:26: style:inconclusive: Function 'cursor_open' argument 1 names different: declaration 'cursor_id' definition 'cursor_id_p'. [funcArgNamesDifferent]
cursor_open (CURSOR_ID * cursor_id_p, QFILE_LIST_ID * list_id_p, bool updatable, bool is_oid_included)
                         ^
src/query/cursor.h:92:38: note: Function 'cursor_open' argument 1 names different: declaration 'cursor_id' definition 'cursor_id_p'.
extern bool cursor_open (CURSOR_ID * cursor_id, QFILE_LIST_ID * list_id, bool updatable, bool oid_included);
                                     ^
src/query/cursor.c:1242:26: note: Function 'cursor_open' argument 1 names different: declaration 'cursor_id' definition 'cursor_id_p'.
cursor_open (CURSOR_ID * cursor_id_p, QFILE_LIST_ID * list_id_p, bool updatable, bool is_oid_included)
                         ^
src/query/cursor.c:1242:55: style:inconclusive: Function 'cursor_open' argument 2 names different: declaration 'list_id' definition 'list_id_p'. [funcArgNamesDifferent]
cursor_open (CURSOR_ID * cursor_id_p, QFILE_LIST_ID * list_id_p, bool updatable, bool is_oid_included)
                                                      ^
src/query/cursor.h:92:65: note: Function 'cursor_open' argument 2 names different: declaration 'list_id' definition 'list_id_p'.
extern bool cursor_open (CURSOR_ID * cursor_id, QFILE_LIST_ID * list_id, bool updatable, bool oid_included);
                                                                ^
src/query/cursor.c:1242:55: note: Function 'cursor_open' argument 2 names different: declaration 'list_id' definition 'list_id_p'.
cursor_open (CURSOR_ID * cursor_id_p, QFILE_LIST_ID * list_id_p, bool updatable, bool is_oid_included)
                                                      ^
src/query/cursor.c:1242:87: style:inconclusive: Function 'cursor_open' argument 4 names different: declaration 'oid_included' definition 'is_oid_included'. [funcArgNamesDifferent]
cursor_open (CURSOR_ID * cursor_id_p, QFILE_LIST_ID * list_id_p, bool updatable, bool is_oid_included)
                                                                                      ^
src/query/cursor.h:92:95: note: Function 'cursor_open' argument 4 names different: declaration 'oid_included' definition 'is_oid_included'.
extern bool cursor_open (CURSOR_ID * cursor_id, QFILE_LIST_ID * list_id, bool updatable, bool oid_included);
                                                                                              ^
src/query/cursor.c:1242:87: note: Function 'cursor_open' argument 4 names different: declaration 'oid_included' definition 'is_oid_included'.
cursor_open (CURSOR_ID * cursor_id_p, QFILE_LIST_ID * list_id_p, bool updatable, bool is_oid_included)
                                                                                      ^
src/query/cursor.c:1315:44: style:inconclusive: Function 'cursor_set_prefetch_lock_mode' argument 1 names different: declaration 'cursor_id' definition 'cursor_id_p'. [funcArgNamesDifferent]
cursor_set_prefetch_lock_mode (CURSOR_ID * cursor_id_p, DB_FETCH_MODE mode)
                                           ^
src/query/cursor.h:96:65: note: Function 'cursor_set_prefetch_lock_mode' argument 1 names different: declaration 'cursor_id' definition 'cursor_id_p'.
extern DB_FETCH_MODE cursor_set_prefetch_lock_mode (CURSOR_ID * cursor_id, DB_FETCH_MODE mode);
                                                                ^
src/query/cursor.c:1315:44: note: Function 'cursor_set_prefetch_lock_mode' argument 1 names different: declaration 'cursor_id' definition 'cursor_id_p'.
cursor_set_prefetch_lock_mode (CURSOR_ID * cursor_id_p, DB_FETCH_MODE mode)
                                           ^
src/query/cursor.c:1339:42: style:inconclusive: Function 'cursor_set_copy_tuple_value' argument 1 names different: declaration 'cursor_id' definition 'cursor_id_p'. [funcArgNamesDifferent]
cursor_set_copy_tuple_value (CURSOR_ID * cursor_id_p, bool is_copy)
                                         ^
src/query/cursor.h:97:54: note: Function 'cursor_set_copy_tuple_value' argument 1 names different: declaration 'cursor_id' definition 'cursor_id_p'.
extern bool cursor_set_copy_tuple_value (CURSOR_ID * cursor_id, bool copy);
                                                     ^
src/query/cursor.c:1339:42: note: Function 'cursor_set_copy_tuple_value' argument 1 names different: declaration 'cursor_id' definition 'cursor_id_p'.
cursor_set_copy_tuple_value (CURSOR_ID * cursor_id_p, bool is_copy)
                                         ^
src/query/cursor.c:1339:60: style:inconclusive: Function 'cursor_set_copy_tuple_value' argument 2 names different: declaration 'copy' definition 'is_copy'. [funcArgNamesDifferent]
cursor_set_copy_tuple_value (CURSOR_ID * cursor_id_p, bool is_copy)
                                                           ^
src/query/cursor.h:97:70: note: Function 'cursor_set_copy_tuple_value' argument 2 names different: declaration 'copy' definition 'is_copy'.
extern bool cursor_set_copy_tuple_value (CURSOR_ID * cursor_id, bool copy);
                                                                     ^
src/query/cursor.c:1339:60: note: Function 'cursor_set_copy_tuple_value' argument 2 names different: declaration 'copy' definition 'is_copy'.
cursor_set_copy_tuple_value (CURSOR_ID * cursor_id_p, bool is_copy)
                                                           ^
src/query/cursor.c:1370:37: style:inconclusive: Function 'cursor_set_oid_columns' argument 1 names different: declaration 'cursor_id' definition 'cursor_id_p'. [funcArgNamesDifferent]
cursor_set_oid_columns (CURSOR_ID * cursor_id_p, int *oid_col_no_p, int oid_col_no_cnt)
                                    ^
src/query/cursor.h:98:48: note: Function 'cursor_set_oid_columns' argument 1 names different: declaration 'cursor_id' definition 'cursor_id_p'.
extern int cursor_set_oid_columns (CURSOR_ID * cursor_id, int *oid_col_no, int oid_col_no_cnt);
                                               ^
src/query/cursor.c:1370:37: note: Function 'cursor_set_oid_columns' argument 1 names different: declaration 'cursor_id' definition 'cursor_id_p'.
cursor_set_oid_columns (CURSOR_ID * cursor_id_p, int *oid_col_no_p, int oid_col_no_cnt)
                                    ^
src/query/cursor.c:1370:55: style:inconclusive: Function 'cursor_set_oid_columns' argument 2 names different: declaration 'oid_col_no' definition 'oid_col_no_p'. [funcArgNamesDifferent]
cursor_set_oid_columns (CURSOR_ID * cursor_id_p, int *oid_col_no_p, int oid_col_no_cnt)
                                                      ^
src/query/cursor.h:98:64: note: Function 'cursor_set_oid_columns' argument 2 names different: declaration 'oid_col_no' definition 'oid_col_no_p'.
extern int cursor_set_oid_columns (CURSOR_ID * cursor_id, int *oid_col_no, int oid_col_no_cnt);
                                                               ^
src/query/cursor.c:1370:55: note: Function 'cursor_set_oid_columns' argument 2 names different: declaration 'oid_col_no' definition 'oid_col_no_p'.
cursor_set_oid_columns (CURSOR_ID * cursor_id_p, int *oid_col_no_p, int oid_col_no_cnt)
                                                      ^
src/query/cursor.c:1390:26: style:inconclusive: Function 'cursor_free' argument 1 names different: declaration 'cursor_id' definition 'cursor_id_p'. [funcArgNamesDifferent]
cursor_free (CURSOR_ID * cursor_id_p)
                         ^
src/query/cursor.h:99:38: note: Function 'cursor_free' argument 1 names different: declaration 'cursor_id' definition 'cursor_id_p'.
extern void cursor_free (CURSOR_ID * cursor_id);
                                     ^
src/query/cursor.c:1390:26: note: Function 'cursor_free' argument 1 names different: declaration 'cursor_id' definition 'cursor_id_p'.
cursor_free (CURSOR_ID * cursor_id_p)
                         ^
src/query/cursor.c:1429:27: style:inconclusive: Function 'cursor_close' argument 1 names different: declaration 'cursor_id' definition 'cursor_id_p'. [funcArgNamesDifferent]
cursor_close (CURSOR_ID * cursor_id_p)
                          ^
src/query/cursor.h:95:39: note: Function 'cursor_close' argument 1 names different: declaration 'cursor_id' definition 'cursor_id_p'.
extern void cursor_close (CURSOR_ID * cursor_id);
                                      ^
src/query/cursor.c:1429:27: note: Function 'cursor_close' argument 1 names different: declaration 'cursor_id' definition 'cursor_id_p'.
cursor_close (CURSOR_ID * cursor_id_p)
                          ^
src/query/cursor.c:1468:32: style:inconclusive: Function 'cursor_peek_tuple' argument 1 names different: declaration 'cursor_id' definition 'cursor_id_p'. [funcArgNamesDifferent]
cursor_peek_tuple (CURSOR_ID * cursor_id_p)
                               ^
src/query/cursor.c:65:45: note: Function 'cursor_peek_tuple' argument 1 names different: declaration 'cursor_id' definition 'cursor_id_p'.
static char *cursor_peek_tuple (CURSOR_ID * cursor_id);
                                            ^
src/query/cursor.c:1468:32: note: Function 'cursor_peek_tuple' argument 1 names different: declaration 'cursor_id' definition 'cursor_id_p'.
cursor_peek_tuple (CURSOR_ID * cursor_id_p)
                               ^
src/query/cursor.c:1497:37: style:inconclusive: Function 'cursor_get_current_oid' argument 1 names different: declaration 'cursor_id' definition 'cursor_id_p'. [funcArgNamesDifferent]
cursor_get_current_oid (CURSOR_ID * cursor_id_p, DB_VALUE * value_p)
                                    ^
src/query/cursor.h:100:48: note: Function 'cursor_get_current_oid' argument 1 names different: declaration 'cursor_id' definition 'cursor_id_p'.
extern int cursor_get_current_oid (CURSOR_ID * cursor_id, DB_VALUE * crs_value);
                                               ^
src/query/cursor.c:1497:37: note: Function 'cursor_get_current_oid' argument 1 names different: declaration 'cursor_id' definition 'cursor_id_p'.
cursor_get_current_oid (CURSOR_ID * cursor_id_p, DB_VALUE * value_p)
                                    ^
src/query/cursor.c:1497:61: style:inconclusive: Function 'cursor_get_current_oid' argument 2 names different: declaration 'crs_value' definition 'value_p'. [funcArgNamesDifferent]
cursor_get_current_oid (CURSOR_ID * cursor_id_p, DB_VALUE * value_p)
                                                            ^
src/query/cursor.h:100:70: note: Function 'cursor_get_current_oid' argument 2 names different: declaration 'crs_value' definition 'value_p'.
extern int cursor_get_current_oid (CURSOR_ID * cursor_id, DB_VALUE * crs_value);
                                                                     ^
src/query/cursor.c:1497:61: note: Function 'cursor_get_current_oid' argument 2 names different: declaration 'crs_value' definition 'value_p'.
cursor_get_current_oid (CURSOR_ID * cursor_id_p, DB_VALUE * value_p)
                                                            ^
src/query/cursor.c:1530:32: style:inconclusive: Function 'cursor_next_tuple' argument 1 names different: declaration 'cursor_id' definition 'cursor_id_p'. [funcArgNamesDifferent]
cursor_next_tuple (CURSOR_ID * cursor_id_p)
                               ^
src/query/cursor.h:93:43: note: Function 'cursor_next_tuple' argument 1 names different: declaration 'cursor_id' definition 'cursor_id_p'.
extern int cursor_next_tuple (CURSOR_ID * cursor_id);
                                          ^
src/query/cursor.c:1530:32: note: Function 'cursor_next_tuple' argument 1 names different: declaration 'cursor_id' definition 'cursor_id_p'.
cursor_next_tuple (CURSOR_ID * cursor_id_p)
                               ^
src/query/cursor.c:1616:32: style:inconclusive: Function 'cursor_prev_tuple' argument 1 names different: declaration 'cursor_id' definition 'cursor_id_p'. [funcArgNamesDifferent]
cursor_prev_tuple (CURSOR_ID * cursor_id_p)
                               ^
src/query/cursor.h:101:43: note: Function 'cursor_prev_tuple' argument 1 names different: declaration 'cursor_id' definition 'cursor_id_p'.
extern int cursor_prev_tuple (CURSOR_ID * cursor_id);
                                          ^
src/query/cursor.c:1616:32: note: Function 'cursor_prev_tuple' argument 1 names different: declaration 'cursor_id' definition 'cursor_id_p'.
cursor_prev_tuple (CURSOR_ID * cursor_id_p)
                               ^
src/query/cursor.c:1700:33: style:inconclusive: Function 'cursor_first_tuple' argument 1 names different: declaration 'cursor_id' definition 'cursor_id_p'. [funcArgNamesDifferent]
cursor_first_tuple (CURSOR_ID * cursor_id_p)
                                ^
src/query/cursor.h:102:44: note: Function 'cursor_first_tuple' argument 1 names different: declaration 'cursor_id' definition 'cursor_id_p'.
extern int cursor_first_tuple (CURSOR_ID * cursor_id);
                                           ^
src/query/cursor.c:1700:33: note: Function 'cursor_first_tuple' argument 1 names different: declaration 'cursor_id' definition 'cursor_id_p'.
cursor_first_tuple (CURSOR_ID * cursor_id_p)
                                ^
src/query/cursor.c:1744:32: style:inconclusive: Function 'cursor_last_tuple' argument 1 names different: declaration 'cursor_id' definition 'cursor_id_p'. [funcArgNamesDifferent]
cursor_last_tuple (CURSOR_ID * cursor_id_p)
                               ^
src/query/cursor.h:103:43: note: Function 'cursor_last_tuple' argument 1 names different: declaration 'cursor_id' definition 'cursor_id_p'.
extern int cursor_last_tuple (CURSOR_ID * cursor_id);
                                          ^
src/query/cursor.c:1744:32: note: Function 'cursor_last_tuple' argument 1 names different: declaration 'cursor_id' definition 'cursor_id_p'.
cursor_last_tuple (CURSOR_ID * cursor_id_p)
                               ^
src/query/cursor.c:1782:37: style:inconclusive: Function 'cursor_get_tuple_value' argument 1 names different: declaration 'result' definition 'cursor_id_p'. [funcArgNamesDifferent]
cursor_get_tuple_value (CURSOR_ID * cursor_id_p, int index, DB_VALUE * value_p)
                                    ^
src/query/cursor.h:104:48: note: Function 'cursor_get_tuple_value' argument 1 names different: declaration 'result' definition 'cursor_id_p'.
extern int cursor_get_tuple_value (CURSOR_ID * result, int index, DB_VALUE * value);
                                               ^
src/query/cursor.c:1782:37: note: Function 'cursor_get_tuple_value' argument 1 names different: declaration 'result' definition 'cursor_id_p'.
cursor_get_tuple_value (CURSOR_ID * cursor_id_p, int index, DB_VALUE * value_p)
                                    ^
src/query/cursor.c:1782:72: style:inconclusive: Function 'cursor_get_tuple_value' argument 3 names different: declaration 'value' definition 'value_p'. [funcArgNamesDifferent]
cursor_get_tuple_value (CURSOR_ID * cursor_id_p, int index, DB_VALUE * value_p)
                                                                       ^
src/query/cursor.h:104:78: note: Function 'cursor_get_tuple_value' argument 3 names different: declaration 'value' definition 'value_p'.
extern int cursor_get_tuple_value (CURSOR_ID * result, int index, DB_VALUE * value);
                                                                             ^
src/query/cursor.c:1782:72: note: Function 'cursor_get_tuple_value' argument 3 names different: declaration 'value' definition 'value_p'.
cursor_get_tuple_value (CURSOR_ID * cursor_id_p, int index, DB_VALUE * value_p)
                                                                       ^
src/query/cursor.c:1826:42: style:inconclusive: Function 'cursor_get_tuple_value_list' argument 1 names different: declaration 'cursor_id' definition 'cursor_id_p'. [funcArgNamesDifferent]
cursor_get_tuple_value_list (CURSOR_ID * cursor_id_p, int size, DB_VALUE * value_list_p)
                                         ^
src/query/cursor.h:94:53: note: Function 'cursor_get_tuple_value_list' argument 1 names different: declaration 'cursor_id' definition 'cursor_id_p'.
extern int cursor_get_tuple_value_list (CURSOR_ID * cursor_id, int size, DB_VALUE * value_list);
                                                    ^
src/query/cursor.c:1826:42: note: Function 'cursor_get_tuple_value_list' argument 1 names different: declaration 'cursor_id' definition 'cursor_id_p'.
cursor_get_tuple_value_list (CURSOR_ID * cursor_id_p, int size, DB_VALUE * value_list_p)
                                         ^
src/query/cursor.c:1826:76: style:inconclusive: Function 'cursor_get_tuple_value_list' argument 3 names different: declaration 'value_list' definition 'value_list_p'. [funcArgNamesDifferent]
cursor_get_tuple_value_list (CURSOR_ID * cursor_id_p, int size, DB_VALUE * value_list_p)
                                                                           ^
src/query/cursor.h:94:85: note: Function 'cursor_get_tuple_value_list' argument 3 names different: declaration 'value_list' definition 'value_list_p'.
extern int cursor_get_tuple_value_list (CURSOR_ID * cursor_id, int size, DB_VALUE * value_list);
                                                                                    ^
src/query/cursor.c:1826:76: note: Function 'cursor_get_tuple_value_list' argument 3 names different: declaration 'value_list' definition 'value_list_p'.
cursor_get_tuple_value_list (CURSOR_ID * cursor_id_p, int size, DB_VALUE * value_list_p)
                                                                           ^
src/query/cursor.c:1110:55: style:inconclusive: Function 'cursor_print_list' argument 2 names different: declaration 'list_id' definition 'list_id_p'. [funcArgNamesDifferent]
cursor_print_list (QUERY_ID query_id, QFILE_LIST_ID * list_id_p)
                                                      ^
src/query/cursor.h:90:67: note: Function 'cursor_print_list' argument 2 names different: declaration 'list_id' definition 'list_id_p'.
extern void cursor_print_list (QUERY_ID query_id, QFILE_LIST_ID * list_id);
                                                                  ^
src/query/cursor.c:1110:55: note: Function 'cursor_print_list' argument 2 names different: declaration 'list_id' definition 'list_id_p'.
cursor_print_list (QUERY_ID query_id, QFILE_LIST_ID * list_id_p)
                                                      ^
src/query/execute_schema.c:3190:3: warning: Either the condition 'if(attnames)' is redundant or there is possible null pointer dereference: attnames. [nullPointerRedundantCheck]
  attnames[i] = NULL;
  ^
src/query/execute_schema.c:3359:6: note: Assuming that condition 'if(attnames)' is not redundant
  if (attnames)
     ^
src/query/execute_schema.c:3190:3: note: Null pointer dereference
  attnames[i] = NULL;
  ^
src/query/execute_schema.c:9944:15: warning: Either the condition 'ctemplate!=NULL' is redundant or there is possible null pointer dereference: ctemplate. [nullPointerRedundantCheck]
  class_mop = ctemplate->op;
              ^
src/query/execute_schema.c:9989:17: note: Assuming that condition 'ctemplate!=NULL' is not redundant
  if (ctemplate != NULL)
                ^
src/query/execute_schema.c:9944:15: note: Null pointer dereference
  class_mop = ctemplate->op;
              ^
src/query/execute_schema.c:10242:15: warning: Either the condition 'ctemplate!=NULL' is redundant or there is possible null pointer dereference: ctemplate. [nullPointerRedundantCheck]
  class_mop = ctemplate->op;
              ^
src/query/execute_schema.c:10257:17: note: Assuming that condition 'ctemplate!=NULL' is not redundant
  if (ctemplate != NULL)
                ^
src/query/execute_schema.c:10242:15: note: Null pointer dereference
  class_mop = ctemplate->op;
              ^
src/query/execute_schema.c:10584:23: warning: Either the condition 'found_att!=NULL' is redundant or there is possible null pointer dereference: found_att. [nullPointerRedundantCheck]
      assert_release (found_att->auto_increment != NULL);
                      ^
src/query/execute_schema.c:10591:18: note: Assuming that condition 'found_att!=NULL' is not redundant
   if (found_att != NULL)
                 ^
src/query/execute_schema.c:10584:23: note: Null pointer dereference
      assert_release (found_att->auto_increment != NULL);
                      ^
src/query/execute_schema.c:14074:11: warning: Either the condition 'result!=NULL' is redundant or there is possible null pointer dereference: result. [nullPointerRedundantCheck]
  assert (result->query_type->db_type == DB_TYPE_INTEGER);
          ^
src/query/execute_schema.c:14097:14: note: Assuming that condition 'result!=NULL' is not redundant
  if (result != NULL)
             ^
src/query/execute_schema.c:14074:11: note: Null pointer dereference
  assert (result->query_type->db_type == DB_TYPE_INTEGER);
          ^
src/query/execute_schema.c:1581:17: style: Variable 'cur_attr' is reassigned a value before the old one has been used. [redundantAssignment]
  for (cur_attr = db_get_attributes (class_obj); cur_attr != NULL; cur_attr = db_attribute_next (cur_attr))
                ^
src/query/execute_schema.c:1578:12: note: cur_attr is assigned
  cur_attr = db_get_attributes (class_obj);
           ^
src/query/execute_schema.c:1581:17: note: cur_attr is overwritten
  for (cur_attr = db_get_attributes (class_obj); cur_attr != NULL; cur_attr = db_attribute_next (cur_attr))
                ^
src/query/execute_schema.c:14178:9: style: Variable 'error' is reassigned a value before the old one has been used. [redundantAssignment]
  error = sm_touch_class (class_mop);
        ^
src/query/execute_schema.c:14174:9: note: error is assigned
  error = NO_ERROR;
        ^
src/query/execute_schema.c:14178:9: note: error is overwritten
  error = sm_touch_class (class_mop);
        ^
src/query/execute_schema.c:13697:7: style:inconclusive: Found duplicate branches for 'if' and 'else'. [duplicateBranch]
      if (is_att_prop_set (attr_chg_prop->p[P_NAME], ATT_CHG_PROPERTY_DIFF))
      ^
src/query/execute_schema.c:13701:7: note: Found duplicate branches for 'if' and 'else'.
      else
      ^
src/query/execute_schema.c:13697:7: note: Found duplicate branches for 'if' and 'else'.
      if (is_att_prop_set (attr_chg_prop->p[P_NAME], ATT_CHG_PROPERTY_DIFF))
      ^
src/query/execute_schema.c:2388:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i = 0;
      ^
src/query/execute_schema.c:4815:37: style: The scope of the variable 'wrtval' can be reduced. [variableScope]
  DB_VALUE minval, maxval, seqval, *wrtval;
                                    ^
src/query/execute_schema.c:7426:18: style: The scope of the variable 'n_ref_atts' can be reduced. [variableScope]
  int i, n_atts, n_ref_atts;
                 ^
src/query/execute_schema.c:7430:10: style: The scope of the variable 'buf_size' can be reduced. [variableScope]
  size_t buf_size;
         ^
src/query/execute_schema.c:7874:15: style: The scope of the variable 'method_name' can be reduced. [variableScope]
  const char *method_name, *method_impl;
              ^
src/query/execute_schema.c:7877:7: style: The scope of the variable 'arg_num' can be reduced. [variableScope]
  int arg_num;
      ^
src/query/execute_schema.c:7878:7: style: The scope of the variable 'is_meta' can be reduced. [variableScope]
  int is_meta;
      ^
src/query/execute_schema.c:8051:12: style: The scope of the variable 'path' can be reduced. [variableScope]
  PT_NODE *path, *mf;
           ^
src/query/execute_schema.c:8124:14: style: The scope of the variable 'resolution_super_mop' can be reduced. [variableScope]
  DB_OBJECT *resolution_super_mop;
             ^
src/query/execute_schema.c:8125:15: style: The scope of the variable 'resolution_attr_mthd_name' can be reduced. [variableScope]
  const char *resolution_attr_mthd_name, *resolution_as_attr_mthd_name;
              ^
src/query/execute_schema.c:8272:15: style: The scope of the variable 'att_name' can be reduced. [variableScope]
  const char *att_name;
              ^
src/query/execute_schema.c:1626:46: style:inconclusive: Function 'do_alter' argument 2 names different: declaration 'statement' definition 'alter'. [funcArgNamesDifferent]
do_alter (PARSER_CONTEXT * parser, PT_NODE * alter)
                                             ^
src/query/execute_statement.h:61:57: note: Function 'do_alter' argument 2 names different: declaration 'statement' definition 'alter'.
extern int do_alter (PARSER_CONTEXT * parser, PT_NODE * statement);
                                                        ^
src/query/execute_schema.c:1626:46: note: Function 'do_alter' argument 2 names different: declaration 'statement' definition 'alter'.
do_alter (PARSER_CONTEXT * parser, PT_NODE * alter)
                                             ^
src/query/execute_schema.c:2701:51: style:inconclusive: Function 'create_or_drop_index_helper' argument 8 names different: declaration 'filter_predicate' definition 'where_predicate'. [funcArgNamesDifferent]
        PT_NODE * column_prefix_length, PT_NODE * where_predicate, int func_index_pos,
                                                  ^
src/query/execute_schema.c:239:16: note: Function 'create_or_drop_index_helper' argument 8 names different: declaration 'filter_predicate' definition 'where_predicate'.
     PT_NODE * filter_predicate, int func_index_pos, int func_index_args_count,
               ^
src/query/execute_schema.c:2701:51: note: Function 'create_or_drop_index_helper' argument 8 names different: declaration 'filter_predicate' definition 'where_predicate'.
        PT_NODE * column_prefix_length, PT_NODE * where_predicate, int func_index_pos,
                                                  ^
src/query/execute_schema.c:4633:46: style:inconclusive: Function 'do_redistribute_partitions_data' argument 1 names different: declaration 'class_name' definition 'classname'. [funcArgNamesDifferent]
do_redistribute_partitions_data (const char *classname, const char *keyname, char **promoted, int promoted_count,
                                             ^
src/query/execute_schema.c:346:57: note: Function 'do_redistribute_partitions_data' argument 1 names different: declaration 'class_name' definition 'classname'.
static int do_redistribute_partitions_data (const char *class_name, const char *keyname, char **promoted,
                                                        ^
src/query/execute_schema.c:4633:46: note: Function 'do_redistribute_partitions_data' argument 1 names different: declaration 'class_name' definition 'classname'.
do_redistribute_partitions_data (const char *classname, const char *keyname, char **promoted, int promoted_count,
                                             ^
src/query/execute_schema.c:6998:76: style:inconclusive: Function 'do_add_attribute' argument 3 names different: declaration 'atts' definition 'attribute'. [funcArgNamesDifferent]
do_add_attribute (PARSER_CONTEXT * parser, DB_CTMPL * ctemplate, PT_NODE * attribute, PT_NODE * constraints,
                                                                           ^
src/query/execute_schema.c:358:87: note: Function 'do_add_attribute' argument 3 names different: declaration 'atts' definition 'attribute'.
static int do_add_attribute (PARSER_CONTEXT * parser, DB_CTMPL * ctemplate, PT_NODE * atts, PT_NODE * constraints,
                                                                                      ^
src/query/execute_schema.c:6998:76: note: Function 'do_add_attribute' argument 3 names different: declaration 'atts' definition 'attribute'.
do_add_attribute (PARSER_CONTEXT * parser, DB_CTMPL * ctemplate, PT_NODE * attribute, PT_NODE * constraints,
                                                                           ^
src/query/execute_schema.c:10133:77: style:inconclusive: Function 'do_alter_change_col_comment' argument 2 names different: declaration 'alter' definition 'alter_node'. [funcArgNamesDifferent]
do_alter_change_col_comment (PARSER_CONTEXT * const parser, PT_NODE * const alter_node)
                                                                            ^
src/query/execute_schema.c:264:88: note: Function 'do_alter_change_col_comment' argument 2 names different: declaration 'alter' definition 'alter_node'.
static int do_alter_change_col_comment (PARSER_CONTEXT * const parser, PT_NODE * const alter);
                                                                                       ^
src/query/execute_schema.c:10133:77: note: Function 'do_alter_change_col_comment' argument 2 names different: declaration 'alter' definition 'alter_node'.
do_alter_change_col_comment (PARSER_CONTEXT * const parser, PT_NODE * const alter_node)
                                                                            ^
src/query/execute_schema.c:13823:46: style:inconclusive: Function 'sort_constr_info_list' argument 1 names different: declaration 'source' definition 'orig_list'. [funcArgNamesDifferent]
sort_constr_info_list (SM_CONSTRAINT_INFO ** orig_list)
                                             ^
src/query/execute_schema.c:321:57: note: Function 'sort_constr_info_list' argument 1 names different: declaration 'source' definition 'orig_list'.
static int sort_constr_info_list (SM_CONSTRAINT_INFO ** source);
                                                        ^
src/query/execute_schema.c:13823:46: note: Function 'sort_constr_info_list' argument 1 names different: declaration 'source' definition 'orig_list'.
sort_constr_info_list (SM_CONSTRAINT_INFO ** orig_list)
                                             ^
src/query/execute_schema.c:14210:79: style:inconclusive: Function 'pt_node_to_function_index' argument 3 names different: declaration 'sort_spec' definition 'node'. [funcArgNamesDifferent]
pt_node_to_function_index (PARSER_CONTEXT * parser, PT_NODE * spec, PT_NODE * node, DO_INDEX do_index)
                                                                              ^
src/query/execute_schema.c:325:104: note: Function 'pt_node_to_function_index' argument 3 names different: declaration 'sort_spec' definition 'node'.
static SM_FUNCTION_INFO *pt_node_to_function_index (PARSER_CONTEXT * parser, PT_NODE * spec, PT_NODE * sort_spec,
                                                                                                       ^
src/query/execute_schema.c:14210:79: note: Function 'pt_node_to_function_index' argument 3 names different: declaration 'sort_spec' definition 'node'.
pt_node_to_function_index (PARSER_CONTEXT * parser, PT_NODE * spec, PT_NODE * node, DO_INDEX do_index)
                                                                              ^
src/query/execute_schema.c:1631:8: style: Local variable 'do_rollback' shadows outer function [shadowFunction]
  bool do_rollback = false;
       ^
src/query/execute_statement.h:72:12: note: Shadowed declaration
extern int do_rollback (PARSER_CONTEXT * parser, PT_NODE * statement);
           ^
src/query/execute_schema.c:1631:8: note: Shadow variable
  bool do_rollback = false;
       ^
src/query/execute_schema.c:3090:8: style: Local variable 'do_rollback' shadows outer function [shadowFunction]
  bool do_rollback = false;
       ^
src/query/execute_statement.h:72:12: note: Shadowed declaration
extern int do_rollback (PARSER_CONTEXT * parser, PT_NODE * statement);
           ^
src/query/execute_schema.c:3090:8: note: Shadow variable
  bool do_rollback = false;
       ^
src/query/execute_schema.c:3528:8: style: Local variable 'do_rollback' shadows outer function [shadowFunction]
  bool do_rollback = false;
       ^
src/query/execute_statement.h:72:12: note: Shadowed declaration
extern int do_rollback (PARSER_CONTEXT * parser, PT_NODE * statement);
           ^
src/query/execute_schema.c:3528:8: note: Shadow variable
  bool do_rollback = false;
       ^
src/query/execute_schema.c:15273:8: style: Local variable 'do_rollback' shadows outer function [shadowFunction]
  bool do_rollback = false;
       ^
src/query/execute_statement.h:72:12: note: Shadowed declaration
extern int do_rollback (PARSER_CONTEXT * parser, PT_NODE * statement);
           ^
src/query/execute_schema.c:15273:8: note: Shadow variable
  bool do_rollback = false;
       ^
src/query/execute_schema.c:2388:9: style: Variable 'i' is assigned a value that is never used. [unreadVariable]
  int i = 0;
        ^
src/query/execute_schema.c:7434:10: style: Variable 'n_atts' is assigned a value that is never used. [unreadVariable]
  n_atts = pt_length_of_list (fk_info->attrs);
         ^
src/query/execute_schema.c:12200:13: style: Variable 'error' is assigned a value that is never used. [unreadVariable]
  int error = NO_ERROR;
            ^
src/query/execute_schema.c:15204:13: style: Variable 'error' is assigned a value that is never used. [unreadVariable]
  int error = NO_ERROR;
            ^
src/query/execute_schema.c:15242:13: style: Variable 'error' is assigned a value that is never used. [unreadVariable]
  int error = NO_ERROR;
            ^
src/query/execute_schema.c:3412:8: style: Local variable 'do_rollback' shadows outer function [shadowFunction]
  bool do_rollback = false;
       ^
src/query/execute_statement.h:72:12: note: Shadowed declaration
extern int do_rollback (PARSER_CONTEXT * parser, PT_NODE * statement);
           ^
src/query/execute_schema.c:3412:8: note: Shadow variable
  bool do_rollback = false;
       ^
src/query/execute_statement.c:14406:7: error: Memory leak: vals [memleak]
      return err;
      ^
src/query/execute_statement.c:11009:28: warning: Either the condition 'parser==NULL' is redundant or there is possible null pointer dereference: parser. [nullPointerRedundantCheck]
  QUERY_ID query_id_self = parser->query_id;
                           ^
src/query/execute_statement.c:11018:14: note: Assuming that condition 'parser==NULL' is not redundant
  if (parser == NULL || statement == NULL || statement->node_type != PT_INSERT)
             ^
src/query/execute_statement.c:11009:28: note: Null pointer dereference
  QUERY_ID query_id_self = parser->query_id;
                           ^
src/query/execute_statement.c:11014:11: warning: Either the condition 'parser==NULL' is redundant or there is possible null pointer dereference: parser. [nullPointerRedundantCheck]
  assert (parser->query_id == NULL_QUERY_ID);
          ^
src/query/execute_statement.c:11018:14: note: Assuming that condition 'parser==NULL' is not redundant
  if (parser == NULL || statement == NULL || statement->node_type != PT_INSERT)
             ^
src/query/execute_statement.c:11014:11: note: Null pointer dereference
  assert (parser->query_id == NULL_QUERY_ID);
          ^
src/query/execute_statement.c:12582:28: warning: Either the condition 'parser!=NULL' is redundant or there is possible null pointer dereference: parser. [nullPointerRedundantCheck]
  QUERY_ID query_id_self = parser->query_id;
                           ^
src/query/execute_statement.c:12588:18: note: Assuming that condition 'parser!=NULL' is not redundant
  assert (parser != NULL);
                 ^
src/query/execute_statement.c:12582:28: note: Null pointer dereference
  QUERY_ID query_id_self = parser->query_id;
                           ^
src/query/execute_statement.c:16604:13: warning: Either the condition 'statement!=NULL' is redundant or there is possible null pointer dereference: statement. [nullPointerRedundantCheck]
  tz_node = statement->info.set_timezone.timezone_node;
            ^
src/query/execute_statement.c:16605:21: note: Assuming that condition 'statement!=NULL' is not redundant
  assert (statement != NULL && tz_node != NULL && tz_node->info.value.data_value.str != NULL);
                    ^
src/query/execute_statement.c:16604:13: note: Null pointer dereference
  tz_node = statement->info.set_timezone.timezone_node;
            ^
src/query/execute_statement.c:1727:19: style: Variable 'au_disable_flag' is reassigned a value before the old one has been used. [redundantAssignment]
  au_disable_flag = false;
                  ^
src/query/execute_statement.c:1721:19: note: au_disable_flag is assigned
  au_disable_flag = true;
                  ^
src/query/execute_statement.c:1727:19: note: au_disable_flag is overwritten
  au_disable_flag = false;
                  ^
src/query/execute_statement.c:11924:4: style: Statements following return, break, continue, goto or throw will never be executed. [unreachableCode]
   retval = error;
   ^
src/query/execute_statement.c:222:10: style: The scope of the variable 'c' can be reduced. [variableScope]
  int i, c;
         ^
src/query/execute_statement.c:223:7: style: The scope of the variable 'error' can be reduced. [variableScope]
  int error;
      ^
src/query/execute_statement.c:1188:18: style: The scope of the variable 'db_id' can be reduced. [variableScope]
  DB_IDENTIFIER *db_id;
                 ^
src/query/execute_statement.c:4087:13: style: The scope of the variable 't' can be reduced. [variableScope]
  char *s, *t, *att = NULL;
            ^
src/query/execute_statement.c:4088:7: style: The scope of the variable 'size' can be reduced. [variableScope]
  int size;
      ^
src/query/execute_statement.c:4126:9: style: The scope of the variable 's' can be reduced. [variableScope]
  char *s, *t;
        ^
src/query/execute_statement.c:4758:9: style: The scope of the variable 'cost' can be reduced. [variableScope]
  char *cost;
        ^
src/query/execute_statement.c:5089:9: style: The scope of the variable 'timeout' can be reduced. [variableScope]
  float timeout;
        ^
src/query/execute_statement.c:5398:23: style: The scope of the variable 'espec' can be reduced. [variableScope]
  PT_EVENT_SPEC_INFO *espec;
                      ^
src/query/execute_statement.c:5400:15: style: The scope of the variable 'str' can be reduced. [variableScope]
  const char *str, *attribute;
              ^
src/query/execute_statement.c:5400:21: style: The scope of the variable 'attribute' can be reduced. [variableScope]
  const char *str, *attribute;
                    ^
src/query/execute_statement.c:5402:14: style: The scope of the variable 'trigger' can be reduced. [variableScope]
  DB_OBJECT *trigger, *class_;
             ^
src/query/execute_statement.c:5402:24: style: The scope of the variable 'class_' can be reduced. [variableScope]
  DB_OBJECT *trigger, *class_;
                       ^
src/query/execute_statement.c:6153:12: style: The scope of the variable 'str' can be reduced. [variableScope]
  PT_NODE *str;
           ^
src/query/execute_statement.c:7194:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i = 0;
      ^
src/query/execute_statement.c:7238:47: style: The scope of the variable 'multi_assign_cnt' can be reduced. [variableScope]
      int assigns_count = 0, upd_cls_cnt = 0, multi_assign_cnt = 0;
                                              ^
src/query/execute_statement.c:7955:38: style: The scope of the variable 'multi_assign_cnt' can be reduced. [variableScope]
  int upd_cls_cnt = 0, vals_cnt = 0, multi_assign_cnt = 0;
                                     ^
src/query/execute_statement.c:8118:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/query/execute_statement.c:9763:14: style: The scope of the variable 'class_obj' can be reduced. [variableScope]
  DB_OBJECT *class_obj;
             ^
src/query/execute_statement.c:9907:7: style: The scope of the variable 'wait_msecs' can be reduced. [variableScope]
  int wait_msecs = -2, old_wait_msecs = -2;
      ^
src/query/execute_statement.c:9907:24: style: The scope of the variable 'old_wait_msecs' can be reduced. [variableScope]
  int wait_msecs = -2, old_wait_msecs = -2;
                       ^
src/query/execute_statement.c:9908:9: style: The scope of the variable 'hint_waitsecs' can be reduced. [variableScope]
  float hint_waitsecs;
        ^
src/query/execute_statement.c:10674:25: style: The scope of the variable 'into_val' can be reduced. [variableScope]
  DB_VALUE expr_value, *into_val;
                        ^
src/query/execute_statement.c:13048:27: style: The scope of the variable 'obj' can be reduced. [variableScope]
  DB_OBJECT *vclass_mop, *obj;
                          ^
src/query/execute_statement.c:13049:15: style: The scope of the variable 'into_label' can be reduced. [variableScope]
  const char *into_label;
              ^
src/query/execute_statement.c:13050:13: style: The scope of the variable 'val' can be reduced. [variableScope]
  DB_VALUE *val;
            ^
src/query/execute_statement.c:13584:15: style: The scope of the variable 'into_label' can be reduced. [variableScope]
  const char *into_label, *proc;
              ^
src/query/execute_statement.c:13587:27: style: The scope of the variable 'ins_val' can be reduced. [variableScope]
  DB_VALUE target_value, *ins_val, ret_val, db_value;
                          ^
src/query/execute_statement.c:13588:39: style: The scope of the variable 'next_val_list' can be reduced. [variableScope]
  DB_VALUE_LIST *val_list = 0, *vl, **next_val_list;
                                      ^
src/query/execute_statement.c:14081:7: style: The scope of the variable 'au_save' can be reduced. [variableScope]
  int au_save;
      ^
src/query/execute_statement.c:14300:15: style: The scope of the variable 'into_label' can be reduced. [variableScope]
  const char *into_label;
              ^
src/query/execute_statement.c:14444:29: style: The scope of the variable 'i' can be reduced. [variableScope]
  int query_flag, into_cnt, i, au_save;
                            ^
src/query/execute_statement.c:14446:15: style: The scope of the variable 'into_label' can be reduced. [variableScope]
  const char *into_label;
              ^
src/query/execute_statement.c:14447:20: style: The scope of the variable 'v' can be reduced. [variableScope]
  DB_VALUE *vals, *v;
                   ^
src/query/execute_statement.c:14637:22: style: The scope of the variable 'unknown_name' can be reduced. [variableScope]
  static const char *unknown_name = "-";
                     ^
src/query/execute_statement.c:17122:7: style: The scope of the variable 'is_class' can be reduced. [variableScope]
  int is_class = 0;
      ^
src/query/execute_statement.c:17457:9: style: The scope of the variable 'fp' can be reduced. [variableScope]
  FILE *fp;
        ^
src/query/execute_statement.c:1029:91: style:inconclusive: Function 'do_change_auto_increment_serial' argument 3 names different: declaration 'new_cur_val' definition 'node_new_val'. [funcArgNamesDifferent]
do_change_auto_increment_serial (PARSER_CONTEXT * const parser, MOP serial_obj, PT_NODE * node_new_val)
                                                                                          ^
src/query/execute_statement.h:39:102: note: Function 'do_change_auto_increment_serial' argument 3 names different: declaration 'new_cur_val' definition 'node_new_val'.
extern int do_change_auto_increment_serial (PARSER_CONTEXT * const parser, MOP serial_obj, PT_NODE * new_cur_val);
                                                                                                     ^
src/query/execute_statement.c:1029:91: note: Function 'do_change_auto_increment_serial' argument 3 names different: declaration 'new_cur_val' definition 'node_new_val'.
do_change_auto_increment_serial (PARSER_CONTEXT * const parser, MOP serial_obj, PT_NODE * node_new_val)
                                                                                          ^
src/query/execute_statement.c:9478:34: style:inconclusive: Function 'delete_object_tuple' argument 1 names different: declaration 'obj' definition 'object'. [funcArgNamesDifferent]
delete_object_tuple (DB_OBJECT * object)
                                 ^
src/query/execute_statement.c:6843:45: note: Function 'delete_object_tuple' argument 1 names different: declaration 'obj' definition 'object'.
static int delete_object_tuple (DB_OBJECT * obj);
                                            ^
src/query/execute_statement.c:9478:34: note: Function 'delete_object_tuple' argument 1 names different: declaration 'obj' definition 'object'.
delete_object_tuple (DB_OBJECT * object)
                                 ^
src/query/execute_statement.c:11841:65: style:inconclusive: Function 'do_on_duplicate_key_update' argument 2 names different: declaration 'tpl' definition 'tmpl'. [funcArgNamesDifferent]
do_on_duplicate_key_update (PARSER_CONTEXT * parser, DB_OTMPL * tmpl, PT_NODE * update_stmt)
                                                                ^
src/query/execute_statement.c:10762:76: note: Function 'do_on_duplicate_key_update' argument 2 names different: declaration 'tpl' definition 'tmpl'.
static int do_on_duplicate_key_update (PARSER_CONTEXT * parser, DB_OTMPL * tpl, PT_NODE * update_stmt);
                                                                           ^
src/query/execute_statement.c:11841:65: note: Function 'do_on_duplicate_key_update' argument 2 names different: declaration 'tpl' definition 'tmpl'.
do_on_duplicate_key_update (PARSER_CONTEXT * parser, DB_OTMPL * tmpl, PT_NODE * update_stmt)
                                                                ^
src/query/execute_statement.c:13341:47: style:inconclusive: Function 'do_insert' argument 2 names different: declaration 'statement' definition 'root_statement'. [funcArgNamesDifferent]
do_insert (PARSER_CONTEXT * parser, PT_NODE * root_statement)
                                              ^
src/query/execute_statement.h:103:58: note: Function 'do_insert' argument 2 names different: declaration 'statement' definition 'root_statement'.
extern int do_insert (PARSER_CONTEXT * parser, PT_NODE * statement);
                                                         ^
src/query/execute_statement.c:13341:47: note: Function 'do_insert' argument 2 names different: declaration 'statement' definition 'root_statement'.
do_insert (PARSER_CONTEXT * parser, PT_NODE * root_statement)
                                              ^
src/query/execute_statement.c:456:18: style: Local variable 'datetime' shadows outer variable [shadowVariable]
    DB_DATETIME *datetime;
                 ^
src/query/execute_statement.c:413:16: note: Shadowed declaration
  DB_DATETIME *datetime;
               ^
src/query/execute_statement.c:456:18: note: Shadow variable
    DB_DATETIME *datetime;
                 ^
src/query/execute_statement.c:7243:29: style: Local variable 'lhs' shadows outer variable [shadowVariable]
      PT_NODE *rhs = NULL, *lhs = NULL;
                            ^
src/query/execute_statement.c:7198:12: note: Shadowed declaration
  PT_NODE *lhs;
           ^
src/query/execute_statement.c:7243:29: note: Shadow variable
      PT_NODE *rhs = NULL, *lhs = NULL;
                            ^
src/query/execute_statement.c:317:13: style: Variable 'error' is assigned a value that is never used. [unreadVariable]
  int error = NO_ERROR;
            ^
src/query/execute_statement.c:6888:11: style: Variable 'err' is assigned a value that is never used. [unreadVariable]
  int err = NO_ERROR;
          ^
src/query/execute_statement.c:7194:9: style: Variable 'i' is assigned a value that is never used. [unreadVariable]
  int i = 0;
        ^
src/query/execute_statement.c:7238:64: style: Variable 'multi_assign_cnt' is assigned a value that is never used. [unreadVariable]
      int assigns_count = 0, upd_cls_cnt = 0, multi_assign_cnt = 0;
                                                               ^
src/query/execute_statement.c:7368:14: style: Variable 'error' is assigned a value that is never used. [unreadVariable]
       error = do_set_pruning_type (parser, node, cls);
             ^
src/query/execute_statement.c:7954:11: style: Variable 'idx' is assigned a value that is never used. [unreadVariable]
  int idx = 0, assigns_count = 0;
          ^
src/query/execute_statement.c:7973:8: style: Variable 'cls' is assigned a value that is never used. [unreadVariable]
   cls = assign->cls_info;
       ^
src/query/execute_statement.c:8244:13: style: Variable 'error' is assigned a value that is never used. [unreadVariable]
  int error = NO_ERROR;
            ^
src/query/execute_statement.c:9907:18: style: Variable 'wait_msecs' is assigned a value that is never used. [unreadVariable]
  int wait_msecs = -2, old_wait_msecs = -2;
                 ^
src/query/execute_statement.c:10054:12: style: Variable 'spec' is assigned a value that is never used. [unreadVariable]
      spec = statement->info.delete_.spec;
           ^
src/query/execute_statement.c:10806:11: style: Variable 'att' is assigned a value that is never used. [unreadVariable]
      att = db_get_attribute (otemplate->classobj, name->info.name.original);
          ^
src/query/execute_statement.c:11429:13: style: Variable 'error' is assigned a value that is never used. [unreadVariable]
  int error = NO_ERROR;
            ^
src/query/execute_statement.c:11718:18: style: Variable 'oids_count' is assigned a value that is never used. [unreadVariable]
      oids_count = 0;
                 ^
src/query/execute_statement.c:13146:19: style: Variable 'has_trigger' is assigned a value that is never used. [unreadVariable]
  int has_trigger = 0;
                  ^
src/query/execute_statement.c:13399:12: style: Unused variable: attr_list [unusedVariable]
  PT_NODE *attr_list;
           ^
src/query/execute_statement.c:13488:13: style: Variable 'class_obj' is assigned a value that is never used. [unreadVariable]
  class_obj = (flat) ? flat->info.name.db_object : NULL;
            ^
src/query/execute_statement.c:17454:9: style: Variable 'i' is assigned a value that is never used. [unreadVariable]
  int i = 0;
        ^
src/query/fetch.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 14 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/query/query_evaluator.h:52:1: error: Code 'namespacecubxasl{' is invalid C code. Use --std or --language to configure the language. [syntaxError]
namespace cubxasl
^
src/query/regu_var.hpp:36:1: error: Code 'namespacecubxasl{' is invalid C code. Use --std or --language to configure the language. [syntaxError]
namespace cubxasl
^
src/query/list_file.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 15 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/query/numeric_opfunc.c:193:7: style: The scope of the variable 'num_cnt' can be reduced. [variableScope]
  int num_cnt = 1;
      ^
src/query/numeric_opfunc.c:338:8: style: The scope of the variable 'arg1_dec' can be reduced. [variableScope]
  char arg1_dec, arg2_dec;
       ^
src/query/numeric_opfunc.c:338:18: style: The scope of the variable 'arg2_dec' can be reduced. [variableScope]
  char arg1_dec, arg2_dec;
                 ^
src/query/numeric_opfunc.c:794:17: style: The scope of the variable 'narg' can be reduced. [variableScope]
  unsigned char narg[DB_NUMERIC_BUF_SIZE]; /* copy of a DB_C_NUMERIC */
                ^
src/query/numeric_opfunc.c:1324:7: style: The scope of the variable 'loop' can be reduced. [variableScope]
  int loop;
      ^
src/query/numeric_opfunc.c:2126:7: style: The scope of the variable 'prec_common' can be reduced. [variableScope]
  int prec_common = 0, scale_common = 0;
      ^
src/query/numeric_opfunc.c:2126:24: style: The scope of the variable 'scale_common' can be reduced. [variableScope]
  int prec_common = 0, scale_common = 0;
                       ^
src/query/numeric_opfunc.c:2430:7: style: The scope of the variable 'ndigits' can be reduced. [variableScope]
  int ndigits;
      ^
src/query/numeric_opfunc.c:2432:7: style: The scope of the variable 'chunk_value' can be reduced. [variableScope]
  int chunk_value;
      ^
src/query/numeric_opfunc.c:2328:21: portability: Shifting a negative value is technically undefined behaviour [shiftNegativeLHS]
       *answer = ~0 >> 1;
                    ^
src/query/numeric_opfunc.c:869:55: style:inconclusive: Function 'numeric_mul' argument 3 names different: declaration 'positive_flag' definition 'positive_ans'. [funcArgNamesDifferent]
numeric_mul (DB_C_NUMERIC a1, DB_C_NUMERIC a2, bool * positive_ans, DB_C_NUMERIC answer)
                                                      ^
src/query/numeric_opfunc.c:130:67: note: Function 'numeric_mul' argument 3 names different: declaration 'positive_flag' definition 'positive_ans'.
static void numeric_mul (DB_C_NUMERIC a1, DB_C_NUMERIC a2, bool * positive_flag, DB_C_NUMERIC answer);
                                                                  ^
src/query/numeric_opfunc.c:869:55: note: Function 'numeric_mul' argument 3 names different: declaration 'positive_flag' definition 'positive_ans'.
numeric_mul (DB_C_NUMERIC a1, DB_C_NUMERIC a2, bool * positive_ans, DB_C_NUMERIC answer)
                                                      ^
src/query/numeric_opfunc.c:2089:48: style:inconclusive: Function 'numeric_db_value_is_positive' argument 1 names different: declaration 'arg' definition 'dbvalue'. [funcArgNamesDifferent]
numeric_db_value_is_positive (const DB_VALUE * dbvalue)
                                               ^
src/query/numeric_opfunc.h:96:59: note: Function 'numeric_db_value_is_positive' argument 1 names different: declaration 'arg' definition 'dbvalue'.
extern int numeric_db_value_is_positive (const DB_VALUE * arg);
                                                          ^
src/query/numeric_opfunc.c:2089:48: note: Function 'numeric_db_value_is_positive' argument 1 names different: declaration 'arg' definition 'dbvalue'.
numeric_db_value_is_positive (const DB_VALUE * dbvalue)
                                               ^
src/query/numeric_opfunc.c:2715:85: style:inconclusive: Function 'numeric_get_fractional_part' argument 3 names different: declaration 'dst_prec' definition 'dst_scale'. [funcArgNamesDifferent]
numeric_get_fractional_part (const DB_C_NUMERIC num, const int src_scale, const int dst_scale, DB_C_NUMERIC dest)
                                                                                    ^
src/query/numeric_opfunc.c:151:97: note: Function 'numeric_get_fractional_part' argument 3 names different: declaration 'dst_prec' definition 'dst_scale'.
static void numeric_get_fractional_part (const DB_C_NUMERIC num, const int src_scale, const int dst_prec,
                                                                                                ^
src/query/numeric_opfunc.c:2715:85: note: Function 'numeric_get_fractional_part' argument 3 names different: declaration 'dst_prec' definition 'dst_scale'.
numeric_get_fractional_part (const DB_C_NUMERIC num, const int src_scale, const int dst_scale, DB_C_NUMERIC dest)
                                                                                    ^
src/query/numeric_opfunc.c:3066:56: style:inconclusive: Function 'numeric_coerce_string_to_num' argument 2 names different: declaration 'astring_len' definition 'astring_length'. [funcArgNamesDifferent]
numeric_coerce_string_to_num (const char *astring, int astring_length, INTL_CODESET codeset, DB_VALUE * result)
                                                       ^
src/query/numeric_opfunc.h:83:67: note: Function 'numeric_coerce_string_to_num' argument 2 names different: declaration 'astring_len' definition 'astring_length'.
extern int numeric_coerce_string_to_num (const char *astring, int astring_len, INTL_CODESET codeset, DB_VALUE * num);
                                                                  ^
src/query/numeric_opfunc.c:3066:56: note: Function 'numeric_coerce_string_to_num' argument 2 names different: declaration 'astring_len' definition 'astring_length'.
numeric_coerce_string_to_num (const char *astring, int astring_length, INTL_CODESET codeset, DB_VALUE * result)
                                                       ^
src/query/numeric_opfunc.c:3066:105: style:inconclusive: Function 'numeric_coerce_string_to_num' argument 4 names different: declaration 'num' definition 'result'. [funcArgNamesDifferent]
numeric_coerce_string_to_num (const char *astring, int astring_length, INTL_CODESET codeset, DB_VALUE * result)
                                                                                                        ^
src/query/numeric_opfunc.h:83:113: note: Function 'numeric_coerce_string_to_num' argument 4 names different: declaration 'num' definition 'result'.
extern int numeric_coerce_string_to_num (const char *astring, int astring_len, INTL_CODESET codeset, DB_VALUE * num);
                                                                                                                ^
src/query/numeric_opfunc.c:3066:105: note: Function 'numeric_coerce_string_to_num' argument 4 names different: declaration 'num' definition 'result'.
numeric_coerce_string_to_num (const char *astring, int astring_length, INTL_CODESET codeset, DB_VALUE * result)
                                                                                                        ^
src/query/numeric_opfunc.c:3387:83: style:inconclusive: Function 'numeric_db_value_coerce_to_num' argument 3 names different: declaration 'data_stat' definition 'data_status'. [funcArgNamesDifferent]
numeric_db_value_coerce_to_num (DB_VALUE * src, DB_VALUE * dest, DB_DATA_STATUS * data_status)
                                                                                  ^
src/query/numeric_opfunc.h:88:94: note: Function 'numeric_db_value_coerce_to_num' argument 3 names different: declaration 'data_stat' definition 'data_status'.
extern int numeric_db_value_coerce_to_num (DB_VALUE * src, DB_VALUE * dest, DB_DATA_STATUS * data_stat);
                                                                                             ^
src/query/numeric_opfunc.c:3387:83: note: Function 'numeric_db_value_coerce_to_num' argument 3 names different: declaration 'data_stat' definition 'data_status'.
numeric_db_value_coerce_to_num (DB_VALUE * src, DB_VALUE * dest, DB_DATA_STATUS * data_status)
                                                                                  ^
src/query/numeric_opfunc.c:3519:85: style:inconclusive: Function 'numeric_db_value_coerce_from_num' argument 3 names different: declaration 'data_stat' definition 'data_status'. [funcArgNamesDifferent]
numeric_db_value_coerce_from_num (DB_VALUE * src, DB_VALUE * dest, DB_DATA_STATUS * data_status)
                                                                                    ^
src/query/numeric_opfunc.h:89:96: note: Function 'numeric_db_value_coerce_from_num' argument 3 names different: declaration 'data_stat' definition 'data_status'.
extern int numeric_db_value_coerce_from_num (DB_VALUE * src, DB_VALUE * dest, DB_DATA_STATUS * data_stat);
                                                                                               ^
src/query/numeric_opfunc.c:3519:85: note: Function 'numeric_db_value_coerce_from_num' argument 3 names different: declaration 'data_stat' definition 'data_status'.
numeric_db_value_coerce_from_num (DB_VALUE * src, DB_VALUE * dest, DB_DATA_STATUS * data_status)
                                                                                    ^
src/query/numeric_opfunc.c:2124:11: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
  int ret = NO_ERROR;
          ^
src/query/numeric_opfunc.c:2126:19: style: Variable 'prec_common' is assigned a value that is never used. [unreadVariable]
  int prec_common = 0, scale_common = 0;
                  ^
src/query/numeric_opfunc.c:2126:37: style: Variable 'scale_common' is assigned a value that is never used. [unreadVariable]
  int prec_common = 0, scale_common = 0;
                                    ^
src/query/numeric_opfunc.c:2127:15: style: Variable 'cmp_rez' is assigned a value that is never used. [unreadVariable]
  int cmp_rez = 0;
              ^
src/query/numeric_opfunc.c:2908:23: style: Variable 'numeric_str[i]' is assigned a value that is never used. [unreadVariable]
       numeric_str[i] = '\0';
                      ^
src/query/numeric_opfunc.c:3830:11: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
      ret = ER_FAILED;
          ^
src/query/partition_sr.h:41:1: error: Code 'namespacecubquery{' is invalid C code. Use --std or --language to configure the language. [syntaxError]
namespace cubquery
^
src/query/query_aggregate.cpp:598:35: style: The scope of the variable 'accumulator' can be reduced. [variableScope]
  cubxasl::aggregate_accumulator *accumulator;
                                  ^
src/query/query_aggregate.cpp:1915:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/query/query_aggregate.cpp:1953:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i = 0;
      ^
src/query/query_aggregate.cpp:2062:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i = 0;
      ^
src/query/query_aggregate.cpp:2130:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i, size = 0, old_size = 0;
      ^
src/query/query_aggregate.cpp:2274:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i = 0;
      ^
src/query/query_aggregate.cpp:135:92: style:inconclusive: Function 'qdata_initialize_aggregate_list' argument 2 names different: declaration 'agg_list' definition 'agg_list_p'. [funcArgNamesDifferent]
qdata_initialize_aggregate_list (cubthread::entry *thread_p, cubxasl::aggregate_list_node *agg_list_p,
                                                                                           ^
src/query/query_aggregate.hpp:117:96: note: Function 'qdata_initialize_aggregate_list' argument 2 names different: declaration 'agg_list' definition 'agg_list_p'.
int qdata_initialize_aggregate_list (cubthread::entry *thread_p, cubxasl::aggregate_list_node *agg_list,
                                                                                               ^
src/query/query_aggregate.cpp:135:92: note: Function 'qdata_initialize_aggregate_list' argument 2 names different: declaration 'agg_list' definition 'agg_list_p'.
qdata_initialize_aggregate_list (cubthread::entry *thread_p, cubxasl::aggregate_list_node *agg_list_p,
                                                                                           ^
src/query/query_aggregate.cpp:594:90: style:inconclusive: Function 'qdata_evaluate_aggregate_list' argument 2 names different: declaration 'agg_list' definition 'agg_list_p'. [funcArgNamesDifferent]
qdata_evaluate_aggregate_list (cubthread::entry *thread_p, cubxasl::aggregate_list_node *agg_list_p,
                                                                                         ^
src/query/query_aggregate.hpp:122:94: note: Function 'qdata_evaluate_aggregate_list' argument 2 names different: declaration 'agg_list' definition 'agg_list_p'.
int qdata_evaluate_aggregate_list (cubthread::entry *thread_p, cubxasl::aggregate_list_node *agg_list, val_descr *vd,
                                                                                             ^
src/query/query_aggregate.cpp:594:90: note: Function 'qdata_evaluate_aggregate_list' argument 2 names different: declaration 'agg_list' definition 'agg_list_p'.
qdata_evaluate_aggregate_list (cubthread::entry *thread_p, cubxasl::aggregate_list_node *agg_list_p,
                                                                                         ^
src/query/query_aggregate.cpp:595:22: style:inconclusive: Function 'qdata_evaluate_aggregate_list' argument 3 names different: declaration 'vd' definition 'val_desc_p'. [funcArgNamesDifferent]
          val_descr *val_desc_p, cubxasl::aggregate_accumulator *alt_acc_list)
                     ^
src/query/query_aggregate.hpp:122:115: note: Function 'qdata_evaluate_aggregate_list' argument 3 names different: declaration 'vd' definition 'val_desc_p'.
int qdata_evaluate_aggregate_list (cubthread::entry *thread_p, cubxasl::aggregate_list_node *agg_list, val_descr *vd,
                                                                                                                  ^
src/query/query_aggregate.cpp:595:22: note: Function 'qdata_evaluate_aggregate_list' argument 3 names different: declaration 'vd' definition 'val_desc_p'.
          val_descr *val_desc_p, cubxasl::aggregate_accumulator *alt_acc_list)
                     ^
src/query/query_aggregate.cpp:962:94: style:inconclusive: Function 'qdata_evaluate_aggregate_optimize' argument 2 names different: declaration 'agg_ptr' definition 'agg_p'. [funcArgNamesDifferent]
qdata_evaluate_aggregate_optimize (cubthread::entry *thread_p, cubxasl::aggregate_list_node *agg_p, HFID *hfid_p,
                                                                                             ^
src/query/query_aggregate.hpp:124:98: note: Function 'qdata_evaluate_aggregate_optimize' argument 2 names different: declaration 'agg_ptr' definition 'agg_p'.
int qdata_evaluate_aggregate_optimize (cubthread::entry *thread_p, cubxasl::aggregate_list_node *agg_ptr, HFID *hfid,
                                                                                                 ^
src/query/query_aggregate.cpp:962:94: note: Function 'qdata_evaluate_aggregate_optimize' argument 2 names different: declaration 'agg_ptr' definition 'agg_p'.
qdata_evaluate_aggregate_optimize (cubthread::entry *thread_p, cubxasl::aggregate_list_node *agg_p, HFID *hfid_p,
                                                                                             ^
src/query/query_aggregate.cpp:962:107: style:inconclusive: Function 'qdata_evaluate_aggregate_optimize' argument 3 names different: declaration 'hfid' definition 'hfid_p'. [funcArgNamesDifferent]
qdata_evaluate_aggregate_optimize (cubthread::entry *thread_p, cubxasl::aggregate_list_node *agg_p, HFID *hfid_p,
                                                                                                          ^
src/query/query_aggregate.hpp:124:113: note: Function 'qdata_evaluate_aggregate_optimize' argument 3 names different: declaration 'hfid' definition 'hfid_p'.
int qdata_evaluate_aggregate_optimize (cubthread::entry *thread_p, cubxasl::aggregate_list_node *agg_ptr, HFID *hfid,
                                                                                                                ^
src/query/query_aggregate.cpp:962:107: note: Function 'qdata_evaluate_aggregate_optimize' argument 3 names different: declaration 'hfid' definition 'hfid_p'.
qdata_evaluate_aggregate_optimize (cubthread::entry *thread_p, cubxasl::aggregate_list_node *agg_p, HFID *hfid_p,
                                                                                                          ^
src/query/query_aggregate.cpp:963:13: style:inconclusive: Function 'qdata_evaluate_aggregate_optimize' argument 4 names different: declaration 'partition_cls_oid' definition 'super_oid'. [funcArgNamesDifferent]
       OID *super_oid)
            ^
src/query/query_aggregate.hpp:125:17: note: Function 'qdata_evaluate_aggregate_optimize' argument 4 names different: declaration 'partition_cls_oid' definition 'super_oid'.
           OID *partition_cls_oid);
                ^
src/query/query_aggregate.cpp:963:13: note: Function 'qdata_evaluate_aggregate_optimize' argument 4 names different: declaration 'partition_cls_oid' definition 'super_oid'.
       OID *super_oid)
            ^
src/query/query_aggregate.cpp:1046:95: style:inconclusive: Function 'qdata_evaluate_aggregate_hierarchy' argument 2 names different: declaration 'agg_ptr' definition 'agg_p'. [funcArgNamesDifferent]
qdata_evaluate_aggregate_hierarchy (cubthread::entry *thread_p, cubxasl::aggregate_list_node *agg_p, HFID *root_hfid,
                                                                                              ^
src/query/query_aggregate.hpp:126:99: note: Function 'qdata_evaluate_aggregate_hierarchy' argument 2 names different: declaration 'agg_ptr' definition 'agg_p'.
int qdata_evaluate_aggregate_hierarchy (cubthread::entry *thread_p, cubxasl::aggregate_list_node *agg_ptr,
                                                                                                  ^
src/query/query_aggregate.cpp:1046:95: note: Function 'qdata_evaluate_aggregate_hierarchy' argument 2 names different: declaration 'agg_ptr' definition 'agg_p'.
qdata_evaluate_aggregate_hierarchy (cubthread::entry *thread_p, cubxasl::aggregate_list_node *agg_p, HFID *root_hfid,
                                                                                              ^
src/query/query_aggregate.cpp:1180:90: style:inconclusive: Function 'qdata_finalize_aggregate_list' argument 2 names different: declaration 'agg_list' definition 'agg_list_p'. [funcArgNamesDifferent]
qdata_finalize_aggregate_list (cubthread::entry *thread_p, cubxasl::aggregate_list_node *agg_list_p,
                                                                                         ^
src/query/query_aggregate.hpp:129:94: note: Function 'qdata_finalize_aggregate_list' argument 2 names different: declaration 'agg_list' definition 'agg_list_p'.
int qdata_finalize_aggregate_list (cubthread::entry *thread_p, cubxasl::aggregate_list_node *agg_list,
                                                                                             ^
src/query/query_aggregate.cpp:1180:90: note: Function 'qdata_finalize_aggregate_list' argument 2 names different: declaration 'agg_list' definition 'agg_list_p'.
qdata_finalize_aggregate_list (cubthread::entry *thread_p, cubxasl::aggregate_list_node *agg_list_p,
                                                                                         ^
src/query/query_aggregate.cpp:2687:102: style:inconclusive: Function 'qdata_update_agg_interpolation_func_value_and_domain' argument 2 names different: declaration 'val' definition 'dbval'. [funcArgNamesDifferent]
qdata_update_agg_interpolation_func_value_and_domain (cubxasl::aggregate_list_node *agg_p, DB_VALUE *dbval)
                                                                                                     ^
src/query/query_aggregate.cpp:62:113: note: Function 'qdata_update_agg_interpolation_func_value_and_domain' argument 2 names different: declaration 'val' definition 'dbval'.
static int qdata_update_agg_interpolation_func_value_and_domain (cubxasl::aggregate_list_node *agg_p, DB_VALUE *val);
                                                                                                                ^
src/query/query_aggregate.cpp:2687:102: note: Function 'qdata_update_agg_interpolation_func_value_and_domain' argument 2 names different: declaration 'val' definition 'dbval'.
qdata_update_agg_interpolation_func_value_and_domain (cubxasl::aggregate_list_node *agg_p, DB_VALUE *dbval)
                                                                                                     ^
src/query/query_aggregate.cpp:1642:19: style: Local variable 'tmp_domain_ptr' shadows outer variable [shadowVariable]
       TP_DOMAIN *tmp_domain_ptr;
                  ^
src/query/query_aggregate.cpp:1211:18: note: Shadowed declaration
      TP_DOMAIN *tmp_domain_ptr = NULL;
                 ^
src/query/query_aggregate.cpp:1642:19: note: Shadow variable
       TP_DOMAIN *tmp_domain_ptr;
                  ^
src/query/query_aggregate.cpp:1953:9: style: Variable 'i' is assigned a value that is never used. [unreadVariable]
  int i = 0;
        ^
src/query/query_aggregate.cpp:2062:9: style: Variable 'i' is assigned a value that is never used. [unreadVariable]
  int i = 0;
        ^
src/query/query_aggregate.cpp:2274:9: style: Variable 'i' is assigned a value that is never used. [unreadVariable]
  int i = 0;
        ^
src/query/query_executor.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 15 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/query/query_manager.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 17 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/query/query_opfunc.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 13 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/query/scan_json_table.hpp:121:7: performance:inconclusive: Technically the member function 'cubscan::json_table::scanner::end' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 void end (cubthread::entry *thread_p);
      ^
src/query/scan_json_table.cpp:289:14: note: Technically the member function 'cubscan::json_table::scanner::end' can be static (but you may consider moving to unnamed namespace).
    scanner::end (cubthread::entry *thread_p)
             ^
src/query/scan_json_table.hpp:121:7: note: Technically the member function 'cubscan::json_table::scanner::end' can be static (but you may consider moving to unnamed namespace).
 void end (cubthread::entry *thread_p);
      ^
src/query/scan_json_table.hpp:140:7: performance:inconclusive: Technically the member function 'cubscan::json_table::scanner::clear_node_columns' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 void clear_node_columns (cubxasl::json_table::node &node);
      ^
src/query/scan_json_table.cpp:404:14: note: Technically the member function 'cubscan::json_table::scanner::clear_node_columns' can be static (but you may consider moving to unnamed namespace).
    scanner::clear_node_columns (cubxasl::json_table::node &node)
             ^
src/query/scan_json_table.hpp:140:7: note: Technically the member function 'cubscan::json_table::scanner::clear_node_columns' can be static (but you may consider moving to unnamed namespace).
 void clear_node_columns (cubxasl::json_table::node &node);
      ^
src/query/scan_json_table.hpp:152:6: performance:inconclusive: Technically the member function 'cubscan::json_table::scanner::set_input_document' can be static (but you may consider moving to unnamed namespace). [functionStatic]
 int set_input_document (cursor &cursor, const cubxasl::json_table::node &node, const JSON_DOC &document);
     ^
src/query/scan_json_table.cpp:358:14: note: Technically the member function 'cubscan::json_table::scanner::set_input_document' can be static (but you may consider moving to unnamed namespace).
    scanner::set_input_document (cursor &cursor_arg, const cubxasl::json_table::node &node, const JSON_DOC &document)
             ^
src/query/scan_json_table.hpp:152:6: note: Technically the member function 'cubscan::json_table::scanner::set_input_document' can be static (but you may consider moving to unnamed namespace).
 int set_input_document (cursor &cursor, const cubxasl::json_table::node &node, const JSON_DOC &document);
     ^
src/query/scan_json_table.cpp:358:42: style:inconclusive: Function 'set_input_document' argument 1 names different: declaration 'cursor' definition 'cursor_arg'. [funcArgNamesDifferent]
    scanner::set_input_document (cursor &cursor_arg, const cubxasl::json_table::node &node, const JSON_DOC &document)
                                         ^
src/query/scan_json_table.hpp:152:34: note: Function 'set_input_document' argument 1 names different: declaration 'cursor' definition 'cursor_arg'.
 int set_input_document (cursor &cursor, const cubxasl::json_table::node &node, const JSON_DOC &document);
                                 ^
src/query/scan_json_table.cpp:358:42: note: Function 'set_input_document' argument 1 names different: declaration 'cursor' definition 'cursor_arg'.
    scanner::set_input_document (cursor &cursor_arg, const cubxasl::json_table::node &node, const JSON_DOC &document)
                                         ^
src/query/scan_json_table.cpp:134:22: style: Variable 'error_code' is assigned a value that is never used. [unreadVariable]
      int error_code = NO_ERROR;
                     ^
src/query/scan_json_table.cpp:298:22: style: Variable 'error_code' is assigned a value that is never used. [unreadVariable]
      int error_code = NO_ERROR;
                     ^
src/query/scan_json_table.cpp:299:26: style: Variable 'logical' is assigned a value that is never used. [unreadVariable]
      DB_LOGICAL logical = V_FALSE;
                         ^
src/query/scan_json_table.cpp:438:22: style: Variable 'error_code' is assigned a value that is never used. [unreadVariable]
      int error_code = NO_ERROR;
                     ^
src/query/scan_manager.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 13 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/query/show_scan.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 13 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/query/query_aggregate.hpp:42:1: error: Code 'namespacecubxasl{' is invalid C code. Use --std or --language to configure the language. [syntaxError]
namespace cubxasl
^
src/query/string_opfunc.c:1937:3: error: Code 'std::vector' is invalid C code. Use --std or --language to configure the language. [syntaxError]
  std::vector<size_t> special_idx;
  ^
src/query/string_regex.cpp:557:9: style: The scope of the variable 'match_pos' can be reduced. [variableScope]
    int match_pos = -1;
        ^
src/query/string_regex.cpp:558:12: style: The scope of the variable 'match_length' can be reduced. [variableScope]
    size_t match_length = 0;
           ^
src/query/string_regex.cpp:126:29: style:inconclusive: Function 'clear' argument 1 names different: declaration 'compiled_regex' definition 'regex'. [funcArgNamesDifferent]
  clear (cub_regex_object *&regex, char *&pattern)
                            ^
src/query/string_regex.hpp:82:34: note: Function 'clear' argument 1 names different: declaration 'compiled_regex' definition 'regex'.
  void clear (cub_regex_object *&compiled_regex, char *&compiled_pattern);
                                 ^
src/query/string_regex.cpp:126:29: note: Function 'clear' argument 1 names different: declaration 'compiled_regex' definition 'regex'.
  clear (cub_regex_object *&regex, char *&pattern)
                            ^
src/query/string_regex.cpp:126:43: style:inconclusive: Function 'clear' argument 2 names different: declaration 'compiled_pattern' definition 'pattern'. [funcArgNamesDifferent]
  clear (cub_regex_object *&regex, char *&pattern)
                                          ^
src/query/string_regex.hpp:82:57: note: Function 'clear' argument 2 names different: declaration 'compiled_pattern' definition 'pattern'.
  void clear (cub_regex_object *&compiled_regex, char *&compiled_pattern);
                                                        ^
src/query/string_regex.cpp:126:43: note: Function 'clear' argument 2 names different: declaration 'compiled_pattern' definition 'pattern'.
  clear (cub_regex_object *&regex, char *&pattern)
                                          ^
src/query/string_regex.cpp:160:35: style:inconclusive: Function 'compile' argument 1 names different: declaration 'rx_compiled_regex' definition 'compiled_regex'. [funcArgNamesDifferent]
  int compile (cub_regex_object *&compiled_regex, const char *pattern,
                                  ^
src/query/string_regex.hpp:92:35: note: Function 'compile' argument 1 names different: declaration 'rx_compiled_regex' definition 'compiled_regex'.
  int compile (cub_regex_object *&rx_compiled_regex, const char *pattern,
                                  ^
src/query/string_regex.cpp:160:35: note: Function 'compile' argument 1 names different: declaration 'rx_compiled_regex' definition 'compiled_regex'.
  int compile (cub_regex_object *&compiled_regex, const char *pattern,
                                  ^
src/query/string_regex.cpp:462:9: style: The scope of the variable 'match_length' can be reduced. [variableScope]
 size_t match_length;
        ^
src/query/vacuum.c:287:1: error: Code 'classvacuum_job_cursor{' is invalid C code. Use --std or --language to configure the language. [syntaxError]
class vacuum_job_cursor
^
src/query/xasl_cache.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 13 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/session/session.c:233:1: error: Code 'session_state::session_state' is invalid C code. Use --std or --language to configure the language. [syntaxError]
session_state::session_state ()
^
src/session/session_sr.c:295:3: style:inconclusive: Consecutive return, break, continue, goto or throw statements are unnecessary. [duplicateBreak]
  return session_get_variable_no_copy (thread_p, name, value);
  ^
src/storage/btree.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 13 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/storage/btree.h:577:3: error: Code 'std::vector' is invalid C code. Use --std or --language to configure the language. [syntaxError]
  std::vector<key_oid> m_keys_oids;
  ^
src/storage/btree_unique.hpp:40:5: style: Class 'btree_unique_stats' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    btree_unique_stats (stat_type keys, stat_type nulls = 0);
    ^
src/storage/btree_unique.cpp:138:47: style: Parameter 'strbuf' can be declared with const [constParameter]
btree_unique_stats::to_string (string_buffer &strbuf) const
                                              ^
src/storage/disk_manager.c:2198:3: error:inconclusive: Address of local auto-variable assigned to a function parameter. [autoVariables]
  extinfo->name = fullname;
  ^
src/storage/disk_manager.c:2337:14: style: Variable 'error_code' is reassigned a value before the old one has been used. [redundantAssignment]
  error_code = disk_add_volume (thread_p, &ext_info, &volid_new, &nsect_free);
             ^
src/storage/disk_manager.c:2308:14: note: error_code is assigned
  error_code = csect_enter_as_reader (thread_p, CSECT_DISK_CHECK, INF_WAIT);
             ^
src/storage/disk_manager.c:2337:14: note: error_code is overwritten
  error_code = disk_add_volume (thread_p, &ext_info, &volid_new, &nsect_free);
             ^
src/storage/disk_manager.c:4428:19: style: Variable 'extend_info' is reassigned a value before the old one has been used. [redundantAssignment]
      extend_info = &disk_Cache->temp_purpose_info.extend_info;
                  ^
src/storage/disk_manager.c:4413:19: note: extend_info is assigned
      extend_info = &disk_Cache->temp_purpose_info.extend_info;
                  ^
src/storage/disk_manager.c:4428:19: note: extend_info is overwritten
      extend_info = &disk_Cache->temp_purpose_info.extend_info;
                  ^
src/storage/disk_manager.c:2562:8: style: Same expression on both sides of '<='. [duplicateExpression]
       <= disk_Cache->perm_purpose_info.extend_info.nsect_total);
       ^
src/storage/disk_manager.c:2144:10: style: The scope of the variable 'vol_realpath' can be reduced. [variableScope]
    char vol_realpath[PATH_MAX];
         ^
src/storage/disk_manager.c:2146:10: style: The scope of the variable 'link_fullname' can be reduced. [variableScope]
    char link_fullname[PATH_MAX];
         ^
src/storage/disk_manager.c:3636:19: style: The scope of the variable 'end_unit' can be reduced. [variableScope]
  DISK_STAB_UNIT *end_unit;
                  ^
src/storage/disk_manager.c:5332:7: style: The scope of the variable 'maxsize' can be reduced. [variableScope]
  int maxsize;
      ^
src/storage/disk_manager.c:851:68: style:inconclusive: Function 'disk_set_creation' argument 7 names different: declaration 'flush_page' definition 'flush'. [funcArgNamesDifferent]
     const LOG_LSA * new_chkptlsa, bool logchange, DISK_FLUSH_TYPE flush)
                                                                   ^
src/storage/disk_manager.h:98:26: note: Function 'disk_set_creation' argument 7 names different: declaration 'flush_page' definition 'flush'.
         DISK_FLUSH_TYPE flush_page);
                         ^
src/storage/disk_manager.c:851:68: note: Function 'disk_set_creation' argument 7 names different: declaration 'flush_page' definition 'flush'.
     const LOG_LSA * new_chkptlsa, bool logchange, DISK_FLUSH_TYPE flush)
                                                                   ^
src/storage/disk_manager.c:1618:58: style:inconclusive: Function 'disk_extend' argument 2 names different: declaration 'expand_info' definition 'extend_info'. [funcArgNamesDifferent]
disk_extend (THREAD_ENTRY * thread_p, DISK_EXTEND_INFO * extend_info, DISK_RESERVE_CONTEXT * reserve_context)
                                                         ^
src/storage/disk_manager.c:430:69: note: Function 'disk_extend' argument 2 names different: declaration 'expand_info' definition 'extend_info'.
static int disk_extend (THREAD_ENTRY * thread_p, DISK_EXTEND_INFO * expand_info,
                                                                    ^
src/storage/disk_manager.c:1618:58: note: Function 'disk_extend' argument 2 names different: declaration 'expand_info' definition 'extend_info'.
disk_extend (THREAD_ENTRY * thread_p, DISK_EXTEND_INFO * extend_info, DISK_RESERVE_CONTEXT * reserve_context)
                                                         ^
src/storage/disk_manager.c:2842:45: style:inconclusive: Function 'disk_cache_lock_reserve' argument 1 names different: declaration 'expand_info' definition 'extend_info'. [funcArgNamesDifferent]
disk_cache_lock_reserve (DISK_EXTEND_INFO * extend_info)
                                            ^
src/storage/disk_manager.c:414:64: note: Function 'disk_cache_lock_reserve' argument 1 names different: declaration 'expand_info' definition 'extend_info'.
STATIC_INLINE void disk_cache_lock_reserve (DISK_EXTEND_INFO * expand_info) __attribute__ ((ALWAYS_INLINE));
                                                               ^
src/storage/disk_manager.c:2842:45: note: Function 'disk_cache_lock_reserve' argument 1 names different: declaration 'expand_info' definition 'extend_info'.
disk_cache_lock_reserve (DISK_EXTEND_INFO * extend_info)
                                            ^
src/storage/disk_manager.c:2868:47: style:inconclusive: Function 'disk_cache_unlock_reserve' argument 1 names different: declaration 'expand_info' definition 'extend_info'. [funcArgNamesDifferent]
disk_cache_unlock_reserve (DISK_EXTEND_INFO * extend_info)
                                              ^
src/storage/disk_manager.c:415:66: note: Function 'disk_cache_unlock_reserve' argument 1 names different: declaration 'expand_info' definition 'extend_info'.
STATIC_INLINE void disk_cache_unlock_reserve (DISK_EXTEND_INFO * expand_info) __attribute__ ((ALWAYS_INLINE));
                                                                 ^
src/storage/disk_manager.c:2868:47: note: Function 'disk_cache_unlock_reserve' argument 1 names different: declaration 'expand_info' definition 'extend_info'.
disk_cache_unlock_reserve (DISK_EXTEND_INFO * extend_info)
                                              ^
src/storage/disk_manager.c:2896:111: style:inconclusive: Function 'disk_volume_header_start_scan' argument 5 names different: declaration 'ctx' definition 'ptr'. [funcArgNamesDifferent]
disk_volume_header_start_scan (THREAD_ENTRY * thread_p, int type, DB_VALUE ** arg_values, int arg_cnt, void **ptr)
                                                                                                              ^
src/storage/disk_manager.h:124:15: note: Function 'disk_volume_header_start_scan' argument 5 names different: declaration 'ctx' definition 'ptr'.
       void **ctx);
              ^
src/storage/disk_manager.c:2896:111: note: Function 'disk_volume_header_start_scan' argument 5 names different: declaration 'ctx' definition 'ptr'.
disk_volume_header_start_scan (THREAD_ENTRY * thread_p, int type, DB_VALUE ** arg_values, int arg_cnt, void **ptr)
                                                                                                              ^
src/storage/disk_manager.c:2948:111: style:inconclusive: Function 'disk_volume_header_next_scan' argument 5 names different: declaration 'ctx' definition 'ptr'. [funcArgNamesDifferent]
disk_volume_header_next_scan (THREAD_ENTRY * thread_p, int cursor, DB_VALUE ** out_values, int out_cnt, void *ptr)
                                                                                                              ^
src/storage/disk_manager.h:127:19: note: Function 'disk_volume_header_next_scan' argument 5 names different: declaration 'ctx' definition 'ptr'.
            void *ctx);
                  ^
src/storage/disk_manager.c:2948:111: note: Function 'disk_volume_header_next_scan' argument 5 names different: declaration 'ctx' definition 'ptr'.
disk_volume_header_next_scan (THREAD_ENTRY * thread_p, int cursor, DB_VALUE ** out_values, int out_cnt, void *ptr)
                                                                                                              ^
src/storage/disk_manager.c:3080:62: style:inconclusive: Function 'disk_volume_header_end_scan' argument 2 names different: declaration 'ctx' definition 'ptr'. [funcArgNamesDifferent]
disk_volume_header_end_scan (THREAD_ENTRY * thread_p, void **ptr)
                                                             ^
src/storage/disk_manager.h:125:73: note: Function 'disk_volume_header_end_scan' argument 2 names different: declaration 'ctx' definition 'ptr'.
extern int disk_volume_header_end_scan (THREAD_ENTRY * thread_p, void **ctx);
                                                                        ^
src/storage/disk_manager.c:3080:62: note: Function 'disk_volume_header_end_scan' argument 2 names different: declaration 'ctx' definition 'ptr'.
disk_volume_header_end_scan (THREAD_ENTRY * thread_p, void **ptr)
                                                             ^
src/storage/disk_manager.c:4933:50: style:inconclusive: Function 'disk_manager_init' argument 2 names different: declaration 'load_form_disk' definition 'load_from_disk'. [funcArgNamesDifferent]
disk_manager_init (THREAD_ENTRY * thread_p, bool load_from_disk)
                                                 ^
src/storage/disk_manager.h:81:61: note: Function 'disk_manager_init' argument 2 names different: declaration 'load_form_disk' definition 'load_from_disk'.
extern int disk_manager_init (THREAD_ENTRY * thread_p, bool load_form_disk);
                                                            ^
src/storage/disk_manager.c:4933:50: note: Function 'disk_manager_init' argument 2 names different: declaration 'load_form_disk' definition 'load_from_disk'.
disk_manager_init (THREAD_ENTRY * thread_p, bool load_from_disk)
                                                 ^
src/storage/disk_manager.c:5213:41: style:inconclusive: Function 'disk_purpose_to_string' argument 1 names different: declaration 'purpose' definition 'vol_purpose'. [funcArgNamesDifferent]
disk_purpose_to_string (DISK_VOLPURPOSE vol_purpose)
                                        ^
src/storage/disk_manager.c:361:60: note: Function 'disk_purpose_to_string' argument 1 names different: declaration 'purpose' definition 'vol_purpose'.
static const char *disk_purpose_to_string (DISK_VOLPURPOSE purpose);
                                                           ^
src/storage/disk_manager.c:5213:41: note: Function 'disk_purpose_to_string' argument 1 names different: declaration 'purpose' definition 'vol_purpose'.
disk_purpose_to_string (DISK_VOLPURPOSE vol_purpose)
                                        ^
src/storage/disk_manager.c:6071:33: style:inconclusive: Function 'disk_compare_vsids' argument 1 names different: declaration 'a' definition 'first'. [funcArgNamesDifferent]
disk_compare_vsids (const void *first, const void *second)
                                ^
src/storage/disk_manager.h:129:44: note: Function 'disk_compare_vsids' argument 1 names different: declaration 'a' definition 'first'.
extern int disk_compare_vsids (const void *a, const void *b);
                                           ^
src/storage/disk_manager.c:6071:33: note: Function 'disk_compare_vsids' argument 1 names different: declaration 'a' definition 'first'.
disk_compare_vsids (const void *first, const void *second)
                                ^
src/storage/disk_manager.c:6071:52: style:inconclusive: Function 'disk_compare_vsids' argument 2 names different: declaration 'b' definition 'second'. [funcArgNamesDifferent]
disk_compare_vsids (const void *first, const void *second)
                                                   ^
src/storage/disk_manager.h:129:59: note: Function 'disk_compare_vsids' argument 2 names different: declaration 'b' definition 'second'.
extern int disk_compare_vsids (const void *a, const void *b);
                                                          ^
src/storage/disk_manager.c:6071:52: note: Function 'disk_compare_vsids' argument 2 names different: declaration 'b' definition 'second'.
disk_compare_vsids (const void *first, const void *second)
                                                   ^
src/storage/disk_manager.c:1475:7: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
  ret = disk_vhdr_set_vol_fullname (vhdr, change->vol_fullname);
      ^
src/storage/disk_manager.c:1515:7: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
  ret = disk_vhdr_set_next_vol_fullname (vhdr, link->next_vol_fullname);
      ^
src/storage/disk_manager.c:1666:18: style: Variable 'error_code' is assigned a value that is never used. [unreadVariable]
  int error_code = NO_ERROR;
                 ^
src/storage/disk_manager.c:3638:18: style: Variable 'error_code' is assigned a value that is never used. [unreadVariable]
  int error_code = NO_ERROR;
                 ^
src/storage/disk_manager.c:4673:18: style: Variable 'error_code' is assigned a value that is never used. [unreadVariable]
  int error_code = NO_ERROR;
                 ^
src/storage/disk_manager.c:5075:22: style: Variable 'valid' is assigned a value that is never used. [unreadVariable]
  DISK_ISVALID valid = DISK_VALID;
                     ^
src/storage/disk_manager.c:5555:18: style: Variable 'error_code' is assigned a value that is never used. [unreadVariable]
  int error_code = NO_ERROR;
                 ^
src/storage/double_write_buffer.c:1379:11: warning:inconclusive: Possible null pointer dereference: slots_hash_entry [nullPointer]
  assert (slots_hash_entry->vpid.pageid == slot->io_page->prv.pageid
          ^
src/storage/double_write_buffer.c:1372:44: note: Assignment 'slots_hash_entry=NULL', assigned value is 0
  DWB_SLOTS_HASH_ENTRY *slots_hash_entry = NULL;
                                           ^
src/storage/double_write_buffer.c:1379:11: note: Null pointer dereference
  assert (slots_hash_entry->vpid.pageid == slot->io_page->prv.pageid
          ^
src/storage/double_write_buffer.c:1380:7: warning:inconclusive: Possible null pointer dereference: slots_hash_entry [nullPointer]
   && slots_hash_entry->vpid.volid == slot->io_page->prv.volid);
      ^
src/storage/double_write_buffer.c:1372:44: note: Assignment 'slots_hash_entry=NULL', assigned value is 0
  DWB_SLOTS_HASH_ENTRY *slots_hash_entry = NULL;
                                           ^
src/storage/double_write_buffer.c:1380:7: note: Null pointer dereference
   && slots_hash_entry->vpid.volid == slot->io_page->prv.volid);
      ^
src/storage/double_write_buffer.c:1384:15: warning:inconclusive: Possible null pointer dereference: slots_hash_entry [nullPointer]
      assert (slots_hash_entry->slot != NULL);
              ^
src/storage/double_write_buffer.c:1372:44: note: Assignment 'slots_hash_entry=NULL', assigned value is 0
  DWB_SLOTS_HASH_ENTRY *slots_hash_entry = NULL;
                                           ^
src/storage/double_write_buffer.c:1384:15: note: Null pointer dereference
      assert (slots_hash_entry->slot != NULL);
              ^
src/storage/double_write_buffer.c:1444:3: warning:inconclusive: Possible null pointer dereference: slots_hash_entry [nullPointer]
  slots_hash_entry->slot = slot;
  ^
src/storage/double_write_buffer.c:1372:44: note: Assignment 'slots_hash_entry=NULL', assigned value is 0
  DWB_SLOTS_HASH_ENTRY *slots_hash_entry = NULL;
                                           ^
src/storage/double_write_buffer.c:1444:3: note: Null pointer dereference
  slots_hash_entry->slot = slot;
  ^
src/storage/double_write_buffer.c:1463:16: style: The scope of the variable 'block_no' can be reduced. [variableScope]
  unsigned int block_no;
               ^
src/storage/double_write_buffer.c:1991:73: style:inconclusive: Function 'dwb_write_block' argument 3 names different: declaration 'p_dwb_slots' definition 'p_dwb_ordered_slots'. [funcArgNamesDifferent]
dwb_write_block (THREAD_ENTRY * thread_p, DWB_BLOCK * block, DWB_SLOT * p_dwb_ordered_slots,
                                                                        ^
src/storage/double_write_buffer.c:353:91: note: Function 'dwb_write_block' argument 3 names different: declaration 'p_dwb_slots' definition 'p_dwb_ordered_slots'.
STATIC_INLINE int dwb_write_block (THREAD_ENTRY * thread_p, DWB_BLOCK * block, DWB_SLOT * p_dwb_slots,
                                                                                          ^
src/storage/double_write_buffer.c:1991:73: note: Function 'dwb_write_block' argument 3 names different: declaration 'p_dwb_slots' definition 'p_dwb_ordered_slots'.
dwb_write_block (THREAD_ENTRY * thread_p, DWB_BLOCK * block, DWB_SLOT * p_dwb_ordered_slots,
                                                                        ^
src/storage/double_write_buffer.c:2909:92: style:inconclusive: Function 'dwb_debug_check_dwb' argument 3 names different: declaration 'num_pages' definition 'num_dwb_pages'. [funcArgNamesDifferent]
dwb_debug_check_dwb (THREAD_ENTRY * thread_p, DWB_SLOT * p_dwb_ordered_slots, unsigned int num_dwb_pages)
                                                                                           ^
src/storage/double_write_buffer.c:415:103: note: Function 'dwb_debug_check_dwb' argument 3 names different: declaration 'num_pages' definition 'num_dwb_pages'.
static int dwb_debug_check_dwb (THREAD_ENTRY * thread_p, DWB_SLOT * p_dwb_ordered_slots, unsigned int num_pages);
                                                                                                      ^
src/storage/double_write_buffer.c:2909:92: note: Function 'dwb_debug_check_dwb' argument 3 names different: declaration 'num_pages' definition 'num_dwb_pages'.
dwb_debug_check_dwb (THREAD_ENTRY * thread_p, DWB_SLOT * p_dwb_ordered_slots, unsigned int num_dwb_pages)
                                                                                           ^
src/storage/double_write_buffer.c:811:18: style: Variable 'error_code' is assigned a value that is never used. [unreadVariable]
  int error_code = NO_ERROR;
                 ^
src/storage/double_write_buffer.c:1371:18: style: Variable 'error_code' is assigned a value that is never used. [unreadVariable]
  int error_code = NO_ERROR;
                 ^
src/storage/double_write_buffer.c:3097:38: style: Variable 'read_fd' is assigned a value that is never used. [unreadVariable]
  int error_code = NO_ERROR, read_fd = NULL_VOLDES;
                                     ^
src/storage/double_write_buffer.c:3266:15: style: Variable 'read_fd' is assigned a value that is never used. [unreadVariable]
      read_fd = NULL_VOLDES;
              ^
src/storage/double_write_buffer.c:3359:18: style: Variable 'error_code' is assigned a value that is never used. [unreadVariable]
  int error_code = NO_ERROR;
                 ^
src/storage/double_write_buffer.c:3629:17: style: Variable 'initial_block' is assigned a value that is never used. [unreadVariable]
  initial_block = &dwb_Global.blocks[initial_block_no];
                ^
src/storage/double_write_buffer.c:3674:32: style: Variable 'all_block_pages_written' is assigned a value that is never used. [unreadVariable]
  bool all_block_pages_written = false, need_wait = false, can_flush_volume = false;
                               ^
src/storage/double_write_buffer.c:3674:51: style: Variable 'need_wait' is assigned a value that is never used. [unreadVariable]
  bool all_block_pages_written = false, need_wait = false, can_flush_volume = false;
                                                  ^
src/storage/double_write_buffer.c:3676:36: style: Variable 'first_partial_flushed_volume' is assigned a value that is never used. [unreadVariable]
  int first_partial_flushed_volume = -1;
                                   ^
src/storage/double_write_buffer.c:3872:18: style: Variable 'error_code' is assigned a value that is never used. [unreadVariable]
  int error_code = NO_ERROR;
                 ^
src/storage/double_write_buffer.c:3673:41: style: Variable 'count_flush_volumes_info' is assigned a value that is never used. [unreadVariable]
  unsigned int count_flush_volumes_info = 0;
                                        ^
src/storage/double_write_buffer.c:3914:1: error: Code 'classdwb_flush_block_daemon_task:' is invalid C code. Use --std or --language to configure the language. [syntaxError]
class dwb_flush_block_daemon_task: public cubthread::entry_task
^
src/storage/es_posix.c:332:12: style: Local variable 'buf' shadows outer argument [shadowArgument]
      char buf[PATH_MAX];
           ^
src/storage/es_posix.c:310:53: note: Shadowed declaration
xes_posix_write_file (const char *path, const void *buf, size_t count, off_t offset)
                                                    ^
src/storage/es_posix.c:332:12: note: Shadow variable
      char buf[PATH_MAX];
           ^
src/storage/extendible_hash.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 14 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/storage/extendible_hash.c:1293:12: style: The scope of the variable 'dir_page_p' can be reduced. [variableScope]
  PAGE_PTR dir_page_p;
           ^
src/storage/extendible_hash.c:1640:12: style: The scope of the variable 'target_bucket_page_p' can be reduced. [variableScope]
  PAGE_PTR target_bucket_page_p;
           ^
src/storage/extendible_hash.c:2396:9: style: The scope of the variable 'bucket_record_p' can be reduced. [variableScope]
  char *bucket_record_p;
        ^
src/storage/extendible_hash.c:3063:21: style: The scope of the variable 'dir_record_p' can be reduced. [variableScope]
  EHASH_DIR_RECORD *dir_record_p;
                    ^
src/storage/extendible_hash.c:3072:7: style: The scope of the variable 'bef_length' can be reduced. [variableScope]
  int bef_length;
      ^
src/storage/extendible_hash.c:3073:16: style: The scope of the variable 'set_bits' can be reduced. [variableScope]
  unsigned int set_bits;
               ^
src/storage/extendible_hash.c:3180:7: style: The scope of the variable 'loc' can be reduced. [variableScope]
  int loc;
      ^
src/storage/extendible_hash.c:3182:7: style: The scope of the variable 'iterations' can be reduced. [variableScope]
  int iterations;
      ^
src/storage/extendible_hash.c:3189:7: style: The scope of the variable 'check_bit' can be reduced. [variableScope]
  int check_bit;
      ^
src/storage/extendible_hash.c:3279:7: style: The scope of the variable 'transfer' can be reduced. [variableScope]
  int transfer;
      ^
src/storage/extendible_hash.c:3280:7: style: The scope of the variable 'already' can be reduced. [variableScope]
  int already;
      ^
src/storage/extendible_hash.c:3768:12: style: The scope of the variable 'bucket_page_p' can be reduced. [variableScope]
  PAGE_PTR bucket_page_p;
           ^
src/storage/extendible_hash.c:3774:7: style: The scope of the variable 'bucket_status' can be reduced. [variableScope]
  int bucket_status;
      ^
src/storage/extendible_hash.c:4154:7: style: The scope of the variable 'times' can be reduced. [variableScope]
  int times;
      ^
src/storage/extendible_hash.c:4155:7: style: The scope of the variable 'remaining' can be reduced. [variableScope]
  int remaining;
      ^
src/storage/extendible_hash.c:4779:34: style: The scope of the variable 'num_records' can be reduced. [variableScope]
  int num_pages, bucket_page_no, num_records;
                                 ^
src/storage/extendible_hash.c:5596:9: style: The scope of the variable 'log_redo_record_p' can be reduced. [variableScope]
  char *log_redo_record_p;
        ^
src/storage/extendible_hash.c:473:33: style:inconclusive: Function 'ehash_allocate_recdes' argument 1 names different: declaration 'recdes' definition 'recdes_p'. [funcArgNamesDifferent]
ehash_allocate_recdes (RECDES * recdes_p, int size, short type)
                                ^
src/storage/extendible_hash.c:252:46: note: Function 'ehash_allocate_recdes' argument 1 names different: declaration 'recdes' definition 'recdes_p'.
static char *ehash_allocate_recdes (RECDES * recdes, int size, short type);
                                             ^
src/storage/extendible_hash.c:473:33: note: Function 'ehash_allocate_recdes' argument 1 names different: declaration 'recdes' definition 'recdes_p'.
ehash_allocate_recdes (RECDES * recdes_p, int size, short type)
                                ^
src/storage/extendible_hash.c:497:29: style:inconclusive: Function 'ehash_free_recdes' argument 1 names different: declaration 'recdes' definition 'recdes_p'. [funcArgNamesDifferent]
ehash_free_recdes (RECDES * recdes_p)
                            ^
src/storage/extendible_hash.c:253:41: note: Function 'ehash_free_recdes' argument 1 names different: declaration 'recdes' definition 'recdes_p'.
static void ehash_free_recdes (RECDES * recdes);
                                        ^
src/storage/extendible_hash.c:497:29: note: Function 'ehash_free_recdes' argument 1 names different: declaration 'recdes' definition 'recdes_p'.
ehash_free_recdes (RECDES * recdes_p)
                            ^
src/storage/extendible_hash.c:626:83: style:inconclusive: Function 'ehash_initialize_bucket_new_page' argument 3 names different: declaration 'alignment_depth' definition 'args'. [funcArgNamesDifferent]
ehash_initialize_bucket_new_page (THREAD_ENTRY * thread_p, PAGE_PTR page_p, void *args)
                                                                                  ^
src/storage/extendible_hash.c:258:94: note: Function 'ehash_initialize_bucket_new_page' argument 3 names different: declaration 'alignment_depth' definition 'args'.
static int ehash_initialize_bucket_new_page (THREAD_ENTRY * thread_p, PAGE_PTR page_p, void *alignment_depth);
                                                                                             ^
src/storage/extendible_hash.c:626:83: note: Function 'ehash_initialize_bucket_new_page' argument 3 names different: declaration 'alignment_depth' definition 'args'.
ehash_initialize_bucket_new_page (THREAD_ENTRY * thread_p, PAGE_PTR page_p, void *args)
                                                                                  ^
src/storage/extendible_hash.c:733:69: style:inconclusive: Function 'ehash_rv_init_dir_new_page_redo' argument 2 names different: declaration 'recv' definition 'rcv'. [funcArgNamesDifferent]
ehash_rv_init_dir_new_page_redo (THREAD_ENTRY * thread_p, LOG_RCV * rcv)
                                                                    ^
src/storage/extendible_hash.h:68:73: note: Function 'ehash_rv_init_dir_new_page_redo' argument 2 names different: declaration 'recv' definition 'rcv'.
int ehash_rv_init_dir_new_page_redo (THREAD_ENTRY * thread_p, LOG_RCV * recv);
                                                                        ^
src/storage/extendible_hash.c:733:69: note: Function 'ehash_rv_init_dir_new_page_redo' argument 2 names different: declaration 'recv' definition 'rcv'.
ehash_rv_init_dir_new_page_redo (THREAD_ENTRY * thread_p, LOG_RCV * rcv)
                                                                    ^
src/storage/extendible_hash.c:952:54: style:inconclusive: Function 'ehash_create_helper' argument 2 names different: declaration 'ehid' definition 'ehid_p'. [funcArgNamesDifferent]
ehash_create_helper (THREAD_ENTRY * thread_p, EHID * ehid_p, DB_TYPE key_type, int exp_num_entries, OID * class_oid_p,
                                                     ^
src/storage/extendible_hash.c:261:67: note: Function 'ehash_create_helper' argument 2 names different: declaration 'ehid' definition 'ehid_p'.
static EHID *ehash_create_helper (THREAD_ENTRY * thread_p, EHID * ehid, DB_TYPE key_type, int exp_num_entries,
                                                                  ^
src/storage/extendible_hash.c:952:54: note: Function 'ehash_create_helper' argument 2 names different: declaration 'ehid' definition 'ehid_p'.
ehash_create_helper (THREAD_ENTRY * thread_p, EHID * ehid_p, DB_TYPE key_type, int exp_num_entries, OID * class_oid_p,
                                                     ^
src/storage/extendible_hash.c:952:107: style:inconclusive: Function 'ehash_create_helper' argument 5 names different: declaration 'class_oid' definition 'class_oid_p'. [funcArgNamesDifferent]
ehash_create_helper (THREAD_ENTRY * thread_p, EHID * ehid_p, DB_TYPE key_type, int exp_num_entries, OID * class_oid_p,
                                                                                                          ^
src/storage/extendible_hash.c:262:13: note: Function 'ehash_create_helper' argument 5 names different: declaration 'class_oid' definition 'class_oid_p'.
      OID * class_oid, int attr_id, bool istmp);
            ^
src/storage/extendible_hash.c:952:107: note: Function 'ehash_create_helper' argument 5 names different: declaration 'class_oid' definition 'class_oid_p'.
ehash_create_helper (THREAD_ENTRY * thread_p, EHID * ehid_p, DB_TYPE key_type, int exp_num_entries, OID * class_oid_p,
                                                                                                          ^
src/storage/extendible_hash.c:953:26: style:inconclusive: Function 'ehash_create_helper' argument 7 names different: declaration 'istmp' definition 'is_tmp'. [funcArgNamesDifferent]
       int attr_id, bool is_tmp)
                         ^
src/storage/extendible_hash.c:262:42: note: Function 'ehash_create_helper' argument 7 names different: declaration 'istmp' definition 'is_tmp'.
      OID * class_oid, int attr_id, bool istmp);
                                         ^
src/storage/extendible_hash.c:953:26: note: Function 'ehash_create_helper' argument 7 names different: declaration 'istmp' definition 'is_tmp'.
       int attr_id, bool is_tmp)
                         ^
src/storage/extendible_hash.c:1184:59: style:inconclusive: Function 'ehash_fix_old_page' argument 2 names different: declaration 'vfid' definition 'vfid_p'. [funcArgNamesDifferent]
ehash_fix_old_page (THREAD_ENTRY * thread_p, const VFID * vfid_p, const VPID * vpid_p, PGBUF_LATCH_MODE latch_mode)
                                                          ^
src/storage/extendible_hash.c:263:75: note: Function 'ehash_fix_old_page' argument 2 names different: declaration 'vfid' definition 'vfid_p'.
static PAGE_PTR ehash_fix_old_page (THREAD_ENTRY * thread_p, const VFID * vfid, const VPID * vpid,
                                                                          ^
src/storage/extendible_hash.c:1184:59: note: Function 'ehash_fix_old_page' argument 2 names different: declaration 'vfid' definition 'vfid_p'.
ehash_fix_old_page (THREAD_ENTRY * thread_p, const VFID * vfid_p, const VPID * vpid_p, PGBUF_LATCH_MODE latch_mode)
                                                          ^
src/storage/extendible_hash.c:1184:80: style:inconclusive: Function 'ehash_fix_old_page' argument 3 names different: declaration 'vpid' definition 'vpid_p'. [funcArgNamesDifferent]
ehash_fix_old_page (THREAD_ENTRY * thread_p, const VFID * vfid_p, const VPID * vpid_p, PGBUF_LATCH_MODE latch_mode)
                                                                               ^
src/storage/extendible_hash.c:263:94: note: Function 'ehash_fix_old_page' argument 3 names different: declaration 'vpid' definition 'vpid_p'.
static PAGE_PTR ehash_fix_old_page (THREAD_ENTRY * thread_p, const VFID * vfid, const VPID * vpid,
                                                                                             ^
src/storage/extendible_hash.c:1184:80: note: Function 'ehash_fix_old_page' argument 3 names different: declaration 'vpid' definition 'vpid_p'.
ehash_fix_old_page (THREAD_ENTRY * thread_p, const VFID * vfid_p, const VPID * vpid_p, PGBUF_LATCH_MODE latch_mode)
                                                                               ^
src/storage/extendible_hash.c:1184:105: style:inconclusive: Function 'ehash_fix_old_page' argument 4 names different: declaration 'mode' definition 'latch_mode'. [funcArgNamesDifferent]
ehash_fix_old_page (THREAD_ENTRY * thread_p, const VFID * vfid_p, const VPID * vpid_p, PGBUF_LATCH_MODE latch_mode)
                                                                                                        ^
src/storage/extendible_hash.c:264:26: note: Function 'ehash_fix_old_page' argument 4 names different: declaration 'mode' definition 'latch_mode'.
        PGBUF_LATCH_MODE mode);
                         ^
src/storage/extendible_hash.c:1184:105: note: Function 'ehash_fix_old_page' argument 4 names different: declaration 'mode' definition 'latch_mode'.
ehash_fix_old_page (THREAD_ENTRY * thread_p, const VFID * vfid_p, const VPID * vpid_p, PGBUF_LATCH_MODE latch_mode)
                                                                                                        ^
src/storage/extendible_hash.c:1230:59: style:inconclusive: Function 'ehash_fix_nth_page' argument 2 names different: declaration 'vfid' definition 'vfid_p'. [funcArgNamesDifferent]
ehash_fix_nth_page (THREAD_ENTRY * thread_p, const VFID * vfid_p, int offset, PGBUF_LATCH_MODE latch_mode)
                                                          ^
src/storage/extendible_hash.c:266:75: note: Function 'ehash_fix_nth_page' argument 2 names different: declaration 'vfid' definition 'vfid_p'.
static PAGE_PTR ehash_fix_nth_page (THREAD_ENTRY * thread_p, const VFID * vfid, int offset, PGBUF_LATCH_MODE mode);
                                                                          ^
src/storage/extendible_hash.c:1230:59: note: Function 'ehash_fix_nth_page' argument 2 names different: declaration 'vfid' definition 'vfid_p'.
ehash_fix_nth_page (THREAD_ENTRY * thread_p, const VFID * vfid_p, int offset, PGBUF_LATCH_MODE latch_mode)
                                                          ^
src/storage/extendible_hash.c:1230:96: style:inconclusive: Function 'ehash_fix_nth_page' argument 4 names different: declaration 'mode' definition 'latch_mode'. [funcArgNamesDifferent]
ehash_fix_nth_page (THREAD_ENTRY * thread_p, const VFID * vfid_p, int offset, PGBUF_LATCH_MODE latch_mode)
                                                                                               ^
src/storage/extendible_hash.c:266:110: note: Function 'ehash_fix_nth_page' argument 4 names different: declaration 'mode' definition 'latch_mode'.
static PAGE_PTR ehash_fix_nth_page (THREAD_ENTRY * thread_p, const VFID * vfid, int offset, PGBUF_LATCH_MODE mode);
                                                                                                             ^
src/storage/extendible_hash.c:1230:96: note: Function 'ehash_fix_nth_page' argument 4 names different: declaration 'mode' definition 'latch_mode'.
ehash_fix_nth_page (THREAD_ENTRY * thread_p, const VFID * vfid_p, int offset, PGBUF_LATCH_MODE latch_mode)
                                                                                               ^
src/storage/extendible_hash.c:1289:57: style:inconclusive: Function 'ehash_find_bucket_vpid' argument 2 names different: declaration 'ehid' definition 'ehid_p'. [funcArgNamesDifferent]
ehash_find_bucket_vpid (THREAD_ENTRY * thread_p, EHID * ehid_p, EHASH_DIR_HEADER * dir_header_p, int location,
                                                        ^
src/storage/extendible_hash.c:285:68: note: Function 'ehash_find_bucket_vpid' argument 2 names different: declaration 'ehid' definition 'ehid_p'.
static int ehash_find_bucket_vpid (THREAD_ENTRY * thread_p, EHID * ehid, EHASH_DIR_HEADER * dir_header, int location,
                                                                   ^
src/storage/extendible_hash.c:1289:57: note: Function 'ehash_find_bucket_vpid' argument 2 names different: declaration 'ehid' definition 'ehid_p'.
ehash_find_bucket_vpid (THREAD_ENTRY * thread_p, EHID * ehid_p, EHASH_DIR_HEADER * dir_header_p, int location,
                                                        ^
src/storage/extendible_hash.c:1289:84: style:inconclusive: Function 'ehash_find_bucket_vpid' argument 3 names different: declaration 'dir_header' definition 'dir_header_p'. [funcArgNamesDifferent]
ehash_find_bucket_vpid (THREAD_ENTRY * thread_p, EHID * ehid_p, EHASH_DIR_HEADER * dir_header_p, int location,
                                                                                   ^
src/storage/extendible_hash.c:285:93: note: Function 'ehash_find_bucket_vpid' argument 3 names different: declaration 'dir_header' definition 'dir_header_p'.
static int ehash_find_bucket_vpid (THREAD_ENTRY * thread_p, EHID * ehid, EHASH_DIR_HEADER * dir_header, int location,
                                                                                            ^
src/storage/extendible_hash.c:1289:84: note: Function 'ehash_find_bucket_vpid' argument 3 names different: declaration 'dir_header' definition 'dir_header_p'.
ehash_find_bucket_vpid (THREAD_ENTRY * thread_p, EHID * ehid_p, EHASH_DIR_HEADER * dir_header_p, int location,
                                                                                   ^
src/storage/extendible_hash.c:1290:35: style:inconclusive: Function 'ehash_find_bucket_vpid' argument 6 names different: declaration 'out_vpid' definition 'out_vpid_p'. [funcArgNamesDifferent]
   PGBUF_LATCH_MODE latch, VPID * out_vpid_p)
                                  ^
src/storage/extendible_hash.c:286:39: note: Function 'ehash_find_bucket_vpid' argument 6 names different: declaration 'out_vpid' definition 'out_vpid_p'.
       PGBUF_LATCH_MODE latch, VPID * out_vpid);
                                      ^
src/storage/extendible_hash.c:1290:35: note: Function 'ehash_find_bucket_vpid' argument 6 names different: declaration 'out_vpid' definition 'out_vpid_p'.
   PGBUF_LATCH_MODE latch, VPID * out_vpid_p)
                                  ^
src/storage/extendible_hash.c:1321:67: style:inconclusive: Function 'ehash_find_bucket_vpid_with_hash' argument 2 names different: declaration 'ehid' definition 'ehid_p'. [funcArgNamesDifferent]
ehash_find_bucket_vpid_with_hash (THREAD_ENTRY * thread_p, EHID * ehid_p, void *key_p, PGBUF_LATCH_MODE root_latch,
                                                                  ^
src/storage/extendible_hash.c:287:83: note: Function 'ehash_find_bucket_vpid_with_hash' argument 2 names different: declaration 'ehid' definition 'ehid_p'.
static PAGE_PTR ehash_find_bucket_vpid_with_hash (THREAD_ENTRY * thread_p, EHID * ehid, void *key,
                                                                                  ^
src/storage/extendible_hash.c:1321:67: note: Function 'ehash_find_bucket_vpid_with_hash' argument 2 names different: declaration 'ehid' definition 'ehid_p'.
ehash_find_bucket_vpid_with_hash (THREAD_ENTRY * thread_p, EHID * ehid_p, void *key_p, PGBUF_LATCH_MODE root_latch,
                                                                  ^
src/storage/extendible_hash.c:1321:81: style:inconclusive: Function 'ehash_find_bucket_vpid_with_hash' argument 3 names different: declaration 'key' definition 'key_p'. [funcArgNamesDifferent]
ehash_find_bucket_vpid_with_hash (THREAD_ENTRY * thread_p, EHID * ehid_p, void *key_p, PGBUF_LATCH_MODE root_latch,
                                                                                ^
src/storage/extendible_hash.c:287:95: note: Function 'ehash_find_bucket_vpid_with_hash' argument 3 names different: declaration 'key' definition 'key_p'.
static PAGE_PTR ehash_find_bucket_vpid_with_hash (THREAD_ENTRY * thread_p, EHID * ehid, void *key,
                                                                                              ^
src/storage/extendible_hash.c:1321:81: note: Function 'ehash_find_bucket_vpid_with_hash' argument 3 names different: declaration 'key' definition 'key_p'.
ehash_find_bucket_vpid_with_hash (THREAD_ENTRY * thread_p, EHID * ehid_p, void *key_p, PGBUF_LATCH_MODE root_latch,
                                                                                ^
src/storage/extendible_hash.c:1322:45: style:inconclusive: Function 'ehash_find_bucket_vpid_with_hash' argument 6 names different: declaration 'out_vpid' definition 'out_vpid_p'. [funcArgNamesDifferent]
      PGBUF_LATCH_MODE bucket_latch, VPID * out_vpid_p, EHASH_HASH_KEY * out_hash_key_p,
                                            ^
src/storage/extendible_hash.c:289:16: note: Function 'ehash_find_bucket_vpid_with_hash' argument 6 names different: declaration 'out_vpid' definition 'out_vpid_p'.
        VPID * out_vpid, EHASH_HASH_KEY * out_hash_key, int *out_location);
               ^
src/storage/extendible_hash.c:1322:45: note: Function 'ehash_find_bucket_vpid_with_hash' argument 6 names different: declaration 'out_vpid' definition 'out_vpid_p'.
      PGBUF_LATCH_MODE bucket_latch, VPID * out_vpid_p, EHASH_HASH_KEY * out_hash_key_p,
                                            ^
src/storage/extendible_hash.c:1322:74: style:inconclusive: Function 'ehash_find_bucket_vpid_with_hash' argument 7 names different: declaration 'out_hash_key' definition 'out_hash_key_p'. [funcArgNamesDifferent]
      PGBUF_LATCH_MODE bucket_latch, VPID * out_vpid_p, EHASH_HASH_KEY * out_hash_key_p,
                                                                         ^
src/storage/extendible_hash.c:289:43: note: Function 'ehash_find_bucket_vpid_with_hash' argument 7 names different: declaration 'out_hash_key' definition 'out_hash_key_p'.
        VPID * out_vpid, EHASH_HASH_KEY * out_hash_key, int *out_location);
                                          ^
src/storage/extendible_hash.c:1322:74: note: Function 'ehash_find_bucket_vpid_with_hash' argument 7 names different: declaration 'out_hash_key' definition 'out_hash_key_p'.
      PGBUF_LATCH_MODE bucket_latch, VPID * out_vpid_p, EHASH_HASH_KEY * out_hash_key_p,
                                                                         ^
src/storage/extendible_hash.c:1323:12: style:inconclusive: Function 'ehash_find_bucket_vpid_with_hash' argument 8 names different: declaration 'out_location' definition 'out_location_p'. [funcArgNamesDifferent]
      int *out_location_p)
           ^
src/storage/extendible_hash.c:289:62: note: Function 'ehash_find_bucket_vpid_with_hash' argument 8 names different: declaration 'out_location' definition 'out_location_p'.
        VPID * out_vpid, EHASH_HASH_KEY * out_hash_key, int *out_location);
                                                             ^
src/storage/extendible_hash.c:1323:12: note: Function 'ehash_find_bucket_vpid_with_hash' argument 8 names different: declaration 'out_location' definition 'out_location_p'.
      int *out_location_p)
           ^
src/storage/extendible_hash.c:1373:47: style:inconclusive: Function 'ehash_search' argument 2 names different: declaration 'ehid' definition 'ehid_p'. [funcArgNamesDifferent]
ehash_search (THREAD_ENTRY * thread_p, EHID * ehid_p, void *key_p, OID * value_p)
                                              ^
src/storage/extendible_hash.h:36:64: note: Function 'ehash_search' argument 2 names different: declaration 'ehid' definition 'ehid_p'.
extern EH_SEARCH ehash_search (THREAD_ENTRY * thread_p, EHID * ehid, void *key, OID * value_ptr);
                                                               ^
src/storage/extendible_hash.c:1373:47: note: Function 'ehash_search' argument 2 names different: declaration 'ehid' definition 'ehid_p'.
ehash_search (THREAD_ENTRY * thread_p, EHID * ehid_p, void *key_p, OID * value_p)
                                              ^
src/storage/extendible_hash.c:1373:61: style:inconclusive: Function 'ehash_search' argument 3 names different: declaration 'key' definition 'key_p'. [funcArgNamesDifferent]
ehash_search (THREAD_ENTRY * thread_p, EHID * ehid_p, void *key_p, OID * value_p)
                                                            ^
src/storage/extendible_hash.h:36:76: note: Function 'ehash_search' argument 3 names different: declaration 'key' definition 'key_p'.
extern EH_SEARCH ehash_search (THREAD_ENTRY * thread_p, EHID * ehid, void *key, OID * value_ptr);
                                                                           ^
src/storage/extendible_hash.c:1373:61: note: Function 'ehash_search' argument 3 names different: declaration 'key' definition 'key_p'.
ehash_search (THREAD_ENTRY * thread_p, EHID * ehid_p, void *key_p, OID * value_p)
                                                            ^
src/storage/extendible_hash.c:1373:74: style:inconclusive: Function 'ehash_search' argument 4 names different: declaration 'value_ptr' definition 'value_p'. [funcArgNamesDifferent]
ehash_search (THREAD_ENTRY * thread_p, EHID * ehid_p, void *key_p, OID * value_p)
                                                                         ^
src/storage/extendible_hash.h:36:87: note: Function 'ehash_search' argument 4 names different: declaration 'value_ptr' definition 'value_p'.
extern EH_SEARCH ehash_search (THREAD_ENTRY * thread_p, EHID * ehid, void *key, OID * value_ptr);
                                                                                      ^
src/storage/extendible_hash.c:1373:74: note: Function 'ehash_search' argument 4 names different: declaration 'value_ptr' definition 'value_p'.
ehash_search (THREAD_ENTRY * thread_p, EHID * ehid_p, void *key_p, OID * value_p)
                                                                         ^
src/storage/extendible_hash.c:1455:47: style:inconclusive: Function 'ehash_insert' argument 2 names different: declaration 'ehid' definition 'ehid_p'. [funcArgNamesDifferent]
ehash_insert (THREAD_ENTRY * thread_p, EHID * ehid_p, void *key_p, OID * value_p)
                                              ^
src/storage/extendible_hash.h:37:60: note: Function 'ehash_insert' argument 2 names different: declaration 'ehid' definition 'ehid_p'.
extern void *ehash_insert (THREAD_ENTRY * thread_p, EHID * ehid, void *key, OID * value_ptr);
                                                           ^
src/storage/extendible_hash.c:1455:47: note: Function 'ehash_insert' argument 2 names different: declaration 'ehid' definition 'ehid_p'.
ehash_insert (THREAD_ENTRY * thread_p, EHID * ehid_p, void *key_p, OID * value_p)
                                              ^
src/storage/extendible_hash.c:1455:61: style:inconclusive: Function 'ehash_insert' argument 3 names different: declaration 'key' definition 'key_p'. [funcArgNamesDifferent]
ehash_insert (THREAD_ENTRY * thread_p, EHID * ehid_p, void *key_p, OID * value_p)
                                                            ^
src/storage/extendible_hash.h:37:72: note: Function 'ehash_insert' argument 3 names different: declaration 'key' definition 'key_p'.
extern void *ehash_insert (THREAD_ENTRY * thread_p, EHID * ehid, void *key, OID * value_ptr);
                                                                       ^
src/storage/extendible_hash.c:1455:61: note: Function 'ehash_insert' argument 3 names different: declaration 'key' definition 'key_p'.
ehash_insert (THREAD_ENTRY * thread_p, EHID * ehid_p, void *key_p, OID * value_p)
                                                            ^
src/storage/extendible_hash.c:1455:74: style:inconclusive: Function 'ehash_insert' argument 4 names different: declaration 'value_ptr' definition 'value_p'. [funcArgNamesDifferent]
ehash_insert (THREAD_ENTRY * thread_p, EHID * ehid_p, void *key_p, OID * value_p)
                                                                         ^
src/storage/extendible_hash.h:37:83: note: Function 'ehash_insert' argument 4 names different: declaration 'value_ptr' definition 'value_p'.
extern void *ehash_insert (THREAD_ENTRY * thread_p, EHID * ehid, void *key, OID * value_ptr);
                                                                                  ^
src/storage/extendible_hash.c:1455:74: note: Function 'ehash_insert' argument 4 names different: declaration 'value_ptr' definition 'value_p'.
ehash_insert (THREAD_ENTRY * thread_p, EHID * ehid_p, void *key_p, OID * value_p)
                                                                         ^
src/storage/extendible_hash.c:1466:70: style:inconclusive: Function 'ehash_insert_to_bucket_after_create' argument 2 names different: declaration 'ehid' definition 'ehid_p'. [funcArgNamesDifferent]
ehash_insert_to_bucket_after_create (THREAD_ENTRY * thread_p, EHID * ehid_p, PAGE_PTR dir_root_page_p,
                                                                     ^
src/storage/extendible_hash.c:336:81: note: Function 'ehash_insert_to_bucket_after_create' argument 2 names different: declaration 'ehid' definition 'ehid_p'.
static int ehash_insert_to_bucket_after_create (THREAD_ENTRY * thread_p, EHID * ehid, PAGE_PTR dir_Rpgptr,
                                                                                ^
src/storage/extendible_hash.c:1466:70: note: Function 'ehash_insert_to_bucket_after_create' argument 2 names different: declaration 'ehid' definition 'ehid_p'.
ehash_insert_to_bucket_after_create (THREAD_ENTRY * thread_p, EHID * ehid_p, PAGE_PTR dir_root_page_p,
                                                                     ^
src/storage/extendible_hash.c:1466:87: style:inconclusive: Function 'ehash_insert_to_bucket_after_create' argument 3 names different: declaration 'dir_Rpgptr' definition 'dir_root_page_p'. [funcArgNamesDifferent]
ehash_insert_to_bucket_after_create (THREAD_ENTRY * thread_p, EHID * ehid_p, PAGE_PTR dir_root_page_p,
                                                                                      ^
src/storage/extendible_hash.c:336:96: note: Function 'ehash_insert_to_bucket_after_create' argument 3 names different: declaration 'dir_Rpgptr' definition 'dir_root_page_p'.
static int ehash_insert_to_bucket_after_create (THREAD_ENTRY * thread_p, EHID * ehid, PAGE_PTR dir_Rpgptr,
                                                                                               ^
src/storage/extendible_hash.c:1466:87: note: Function 'ehash_insert_to_bucket_after_create' argument 3 names different: declaration 'dir_Rpgptr' definition 'dir_root_page_p'.
ehash_insert_to_bucket_after_create (THREAD_ENTRY * thread_p, EHID * ehid_p, PAGE_PTR dir_root_page_p,
                                                                                      ^
src/storage/extendible_hash.c:1467:29: style:inconclusive: Function 'ehash_insert_to_bucket_after_create' argument 4 names different: declaration 'dir_header' definition 'dir_header_p'. [funcArgNamesDifferent]
         EHASH_DIR_HEADER * dir_header_p, VPID * bucket_vpid_p, int location,
                            ^
src/storage/extendible_hash.c:337:26: note: Function 'ehash_insert_to_bucket_after_create' argument 4 names different: declaration 'dir_header' definition 'dir_header_p'.
      EHASH_DIR_HEADER * dir_header, VPID * buc_vpid, int location,
                         ^
src/storage/extendible_hash.c:1467:29: note: Function 'ehash_insert_to_bucket_after_create' argument 4 names different: declaration 'dir_header' definition 'dir_header_p'.
         EHASH_DIR_HEADER * dir_header_p, VPID * bucket_vpid_p, int location,
                            ^
src/storage/extendible_hash.c:1467:50: style:inconclusive: Function 'ehash_insert_to_bucket_after_create' argument 5 names different: declaration 'buc_vpid' definition 'bucket_vpid_p'. [funcArgNamesDifferent]
         EHASH_DIR_HEADER * dir_header_p, VPID * bucket_vpid_p, int location,
                                                 ^
src/storage/extendible_hash.c:337:45: note: Function 'ehash_insert_to_bucket_after_create' argument 5 names different: declaration 'buc_vpid' definition 'bucket_vpid_p'.
      EHASH_DIR_HEADER * dir_header, VPID * buc_vpid, int location,
                                            ^
src/storage/extendible_hash.c:1467:50: note: Function 'ehash_insert_to_bucket_after_create' argument 5 names different: declaration 'buc_vpid' definition 'bucket_vpid_p'.
         EHASH_DIR_HEADER * dir_header_p, VPID * bucket_vpid_p, int location,
                                                 ^
src/storage/extendible_hash.c:1468:55: style:inconclusive: Function 'ehash_insert_to_bucket_after_create' argument 9 names different: declaration 'key' definition 'key_p'. [funcArgNamesDifferent]
         EHASH_HASH_KEY hash_key, bool is_temp, void *key_p, OID * value_p,
                                                      ^
src/storage/extendible_hash.c:338:52: note: Function 'ehash_insert_to_bucket_after_create' argument 9 names different: declaration 'key' definition 'key_p'.
      EHASH_HASH_KEY hash_key, bool is_temp, void *key,
                                                   ^
src/storage/extendible_hash.c:1468:55: note: Function 'ehash_insert_to_bucket_after_create' argument 9 names different: declaration 'key' definition 'key_p'.
         EHASH_HASH_KEY hash_key, bool is_temp, void *key_p, OID * value_p,
                                                      ^
src/storage/extendible_hash.c:1468:68: style:inconclusive: Function 'ehash_insert_to_bucket_after_create' argument 10 names different: declaration 'value_ptr' definition 'value_p'. [funcArgNamesDifferent]
         EHASH_HASH_KEY hash_key, bool is_temp, void *key_p, OID * value_p,
                                                                   ^
src/storage/extendible_hash.c:339:13: note: Function 'ehash_insert_to_bucket_after_create' argument 10 names different: declaration 'value_ptr' definition 'value_p'.
      OID * value_ptr, VPID * existing_ovf_vpid);
            ^
src/storage/extendible_hash.c:1468:68: note: Function 'ehash_insert_to_bucket_after_create' argument 10 names different: declaration 'value_ptr' definition 'value_p'.
         EHASH_HASH_KEY hash_key, bool is_temp, void *key_p, OID * value_p,
                                                                   ^
src/storage/extendible_hash.c:1469:17: style:inconclusive: Function 'ehash_insert_to_bucket_after_create' argument 11 names different: declaration 'existing_ovf_vpid' definition 'existing_ovf_vpid_p'. [funcArgNamesDifferent]
         VPID * existing_ovf_vpid_p)
                ^
src/storage/extendible_hash.c:339:31: note: Function 'ehash_insert_to_bucket_after_create' argument 11 names different: declaration 'existing_ovf_vpid' definition 'existing_ovf_vpid_p'.
      OID * value_ptr, VPID * existing_ovf_vpid);
                              ^
src/storage/extendible_hash.c:1469:17: note: Function 'ehash_insert_to_bucket_after_create' argument 11 names different: declaration 'existing_ovf_vpid' definition 'existing_ovf_vpid_p'.
         VPID * existing_ovf_vpid_p)
                ^
src/storage/extendible_hash.c:1538:54: style:inconclusive: Function 'ehash_extend_bucket' argument 2 names different: declaration 'ehid' definition 'ehid_p'. [funcArgNamesDifferent]
ehash_extend_bucket (THREAD_ENTRY * thread_p, EHID * ehid_p, PAGE_PTR dir_root_page_p, EHASH_DIR_HEADER * dir_header_p,
                                                     ^
src/storage/extendible_hash.c:333:70: note: Function 'ehash_extend_bucket' argument 2 names different: declaration 'ehid' definition 'ehid_p'.
static PAGE_PTR ehash_extend_bucket (THREAD_ENTRY * thread_p, EHID * ehid, PAGE_PTR dir_Rpgptr,
                                                                     ^
src/storage/extendible_hash.c:1538:54: note: Function 'ehash_extend_bucket' argument 2 names different: declaration 'ehid' definition 'ehid_p'.
ehash_extend_bucket (THREAD_ENTRY * thread_p, EHID * ehid_p, PAGE_PTR dir_root_page_p, EHASH_DIR_HEADER * dir_header_p,
                                                     ^
src/storage/extendible_hash.c:1538:71: style:inconclusive: Function 'ehash_extend_bucket' argument 3 names different: declaration 'dir_Rpgptr' definition 'dir_root_page_p'. [funcArgNamesDifferent]
ehash_extend_bucket (THREAD_ENTRY * thread_p, EHID * ehid_p, PAGE_PTR dir_root_page_p, EHASH_DIR_HEADER * dir_header_p,
                                                                      ^
src/storage/extendible_hash.c:333:85: note: Function 'ehash_extend_bucket' argument 3 names different: declaration 'dir_Rpgptr' definition 'dir_root_page_p'.
static PAGE_PTR ehash_extend_bucket (THREAD_ENTRY * thread_p, EHID * ehid, PAGE_PTR dir_Rpgptr,
                                                                                    ^
src/storage/extendible_hash.c:1538:71: note: Function 'ehash_extend_bucket' argument 3 names different: declaration 'dir_Rpgptr' definition 'dir_root_page_p'.
ehash_extend_bucket (THREAD_ENTRY * thread_p, EHID * ehid_p, PAGE_PTR dir_root_page_p, EHASH_DIR_HEADER * dir_header_p,
                                                                      ^
src/storage/extendible_hash.c:1538:107: style:inconclusive: Function 'ehash_extend_bucket' argument 4 names different: declaration 'dir_header' definition 'dir_header_p'. [funcArgNamesDifferent]
ehash_extend_bucket (THREAD_ENTRY * thread_p, EHID * ehid_p, PAGE_PTR dir_root_page_p, EHASH_DIR_HEADER * dir_header_p,
                                                                                                          ^
src/storage/extendible_hash.c:334:29: note: Function 'ehash_extend_bucket' argument 4 names different: declaration 'dir_header' definition 'dir_header_p'.
         EHASH_DIR_HEADER * dir_header, PAGE_PTR buc_pgptr, void *key,
                            ^
src/storage/extendible_hash.c:1538:107: note: Function 'ehash_extend_bucket' argument 4 names different: declaration 'dir_header' definition 'dir_header_p'.
ehash_extend_bucket (THREAD_ENTRY * thread_p, EHID * ehid_p, PAGE_PTR dir_root_page_p, EHASH_DIR_HEADER * dir_header_p,
                                                                                                          ^
src/storage/extendible_hash.c:1539:17: style:inconclusive: Function 'ehash_extend_bucket' argument 5 names different: declaration 'buc_pgptr' definition 'bucket_page_p'. [funcArgNamesDifferent]
       PAGE_PTR bucket_page_p, void *key_p, EHASH_HASH_KEY hash_key, int *out_new_bit_p,
                ^
src/storage/extendible_hash.c:334:50: note: Function 'ehash_extend_bucket' argument 5 names different: declaration 'buc_pgptr' definition 'bucket_page_p'.
         EHASH_DIR_HEADER * dir_header, PAGE_PTR buc_pgptr, void *key,
                                                 ^
src/storage/extendible_hash.c:1539:17: note: Function 'ehash_extend_bucket' argument 5 names different: declaration 'buc_pgptr' definition 'bucket_page_p'.
       PAGE_PTR bucket_page_p, void *key_p, EHASH_HASH_KEY hash_key, int *out_new_bit_p,
                ^
src/storage/extendible_hash.c:1539:38: style:inconclusive: Function 'ehash_extend_bucket' argument 6 names different: declaration 'key' definition 'key_p'. [funcArgNamesDifferent]
       PAGE_PTR bucket_page_p, void *key_p, EHASH_HASH_KEY hash_key, int *out_new_bit_p,
                                     ^
src/storage/extendible_hash.c:334:67: note: Function 'ehash_extend_bucket' argument 6 names different: declaration 'key' definition 'key_p'.
         EHASH_DIR_HEADER * dir_header, PAGE_PTR buc_pgptr, void *key,
                                                                  ^
src/storage/extendible_hash.c:1539:38: note: Function 'ehash_extend_bucket' argument 6 names different: declaration 'key' definition 'key_p'.
       PAGE_PTR bucket_page_p, void *key_p, EHASH_HASH_KEY hash_key, int *out_new_bit_p,
                                     ^
src/storage/extendible_hash.c:1539:75: style:inconclusive: Function 'ehash_extend_bucket' argument 8 names different: declaration 'new_bit' definition 'out_new_bit_p'. [funcArgNamesDifferent]
       PAGE_PTR bucket_page_p, void *key_p, EHASH_HASH_KEY hash_key, int *out_new_bit_p,
                                                                          ^
src/storage/extendible_hash.c:335:40: note: Function 'ehash_extend_bucket' argument 8 names different: declaration 'new_bit' definition 'out_new_bit_p'.
         EHASH_HASH_KEY hash_key, int *new_bit, VPID * buc_vpid, bool is_temp);
                                       ^
src/storage/extendible_hash.c:1539:75: note: Function 'ehash_extend_bucket' argument 8 names different: declaration 'new_bit' definition 'out_new_bit_p'.
       PAGE_PTR bucket_page_p, void *key_p, EHASH_HASH_KEY hash_key, int *out_new_bit_p,
                                                                          ^
src/storage/extendible_hash.c:1540:15: style:inconclusive: Function 'ehash_extend_bucket' argument 9 names different: declaration 'buc_vpid' definition 'bucket_vpid'. [funcArgNamesDifferent]
       VPID * bucket_vpid, bool is_temp)
              ^
src/storage/extendible_hash.c:335:56: note: Function 'ehash_extend_bucket' argument 9 names different: declaration 'buc_vpid' definition 'bucket_vpid'.
         EHASH_HASH_KEY hash_key, int *new_bit, VPID * buc_vpid, bool is_temp);
                                                       ^
src/storage/extendible_hash.c:1540:15: note: Function 'ehash_extend_bucket' argument 9 names different: declaration 'buc_vpid' definition 'bucket_vpid'.
       VPID * bucket_vpid, bool is_temp)
              ^
src/storage/extendible_hash.c:1633:75: style:inconclusive: Function 'ehash_insert_bucket_after_extend_if_need' argument 2 names different: declaration 'ehid' definition 'ehid_p'. [funcArgNamesDifferent]
ehash_insert_bucket_after_extend_if_need (THREAD_ENTRY * thread_p, EHID * ehid_p, PAGE_PTR dir_root_page_p,
                                                                          ^
src/storage/extendible_hash.c:329:95: note: Function 'ehash_insert_bucket_after_extend_if_need' argument 2 names different: declaration 'ehid' definition 'ehid_p'.
static EHASH_RESULT ehash_insert_bucket_after_extend_if_need (THREAD_ENTRY * thread_p, EHID * ehid, PAGE_PTR dir_Rpgptr,
                                                                                              ^
src/storage/extendible_hash.c:1633:75: note: Function 'ehash_insert_bucket_after_extend_if_need' argument 2 names different: declaration 'ehid' definition 'ehid_p'.
ehash_insert_bucket_after_extend_if_need (THREAD_ENTRY * thread_p, EHID * ehid_p, PAGE_PTR dir_root_page_p,
                                                                          ^
src/storage/extendible_hash.c:1633:92: style:inconclusive: Function 'ehash_insert_bucket_after_extend_if_need' argument 3 names different: declaration 'dir_Rpgptr' definition 'dir_root_page_p'. [funcArgNamesDifferent]
ehash_insert_bucket_after_extend_if_need (THREAD_ENTRY * thread_p, EHID * ehid_p, PAGE_PTR dir_root_page_p,
                                                                                           ^
src/storage/extendible_hash.c:329:110: note: Function 'ehash_insert_bucket_after_extend_if_need' argument 3 names different: declaration 'dir_Rpgptr' definition 'dir_root_page_p'.
static EHASH_RESULT ehash_insert_bucket_after_extend_if_need (THREAD_ENTRY * thread_p, EHID * ehid, PAGE_PTR dir_Rpgptr,
                                                                                                             ^
src/storage/extendible_hash.c:1633:92: note: Function 'ehash_insert_bucket_after_extend_if_need' argument 3 names different: declaration 'dir_Rpgptr' definition 'dir_root_page_p'.
ehash_insert_bucket_after_extend_if_need (THREAD_ENTRY * thread_p, EHID * ehid_p, PAGE_PTR dir_root_page_p,
                                                                                           ^
src/storage/extendible_hash.c:1634:27: style:inconclusive: Function 'ehash_insert_bucket_after_extend_if_need' argument 4 names different: declaration 'dir_header' definition 'dir_header_p'. [funcArgNamesDifferent]
       EHASH_DIR_HEADER * dir_header_p, VPID * bucket_vpid_p, void *key_p,
                          ^
src/storage/extendible_hash.c:330:33: note: Function 'ehash_insert_bucket_after_extend_if_need' argument 4 names different: declaration 'dir_header' definition 'dir_header_p'.
             EHASH_DIR_HEADER * dir_header, VPID * buc_vpid, void *key,
                                ^
src/storage/extendible_hash.c:1634:27: note: Function 'ehash_insert_bucket_after_extend_if_need' argument 4 names different: declaration 'dir_header' definition 'dir_header_p'.
       EHASH_DIR_HEADER * dir_header_p, VPID * bucket_vpid_p, void *key_p,
                          ^
src/storage/extendible_hash.c:1634:48: style:inconclusive: Function 'ehash_insert_bucket_after_extend_if_need' argument 5 names different: declaration 'buc_vpid' definition 'bucket_vpid_p'. [funcArgNamesDifferent]
       EHASH_DIR_HEADER * dir_header_p, VPID * bucket_vpid_p, void *key_p,
                                               ^
src/storage/extendible_hash.c:330:52: note: Function 'ehash_insert_bucket_after_extend_if_need' argument 5 names different: declaration 'buc_vpid' definition 'bucket_vpid_p'.
             EHASH_DIR_HEADER * dir_header, VPID * buc_vpid, void *key,
                                                   ^
src/storage/extendible_hash.c:1634:48: note: Function 'ehash_insert_bucket_after_extend_if_need' argument 5 names different: declaration 'buc_vpid' definition 'bucket_vpid_p'.
       EHASH_DIR_HEADER * dir_header_p, VPID * bucket_vpid_p, void *key_p,
                                               ^
src/storage/extendible_hash.c:1634:69: style:inconclusive: Function 'ehash_insert_bucket_after_extend_if_need' argument 6 names different: declaration 'key' definition 'key_p'. [funcArgNamesDifferent]
       EHASH_DIR_HEADER * dir_header_p, VPID * bucket_vpid_p, void *key_p,
                                                                    ^
src/storage/extendible_hash.c:330:68: note: Function 'ehash_insert_bucket_after_extend_if_need' argument 6 names different: declaration 'key' definition 'key_p'.
             EHASH_DIR_HEADER * dir_header, VPID * buc_vpid, void *key,
                                                                   ^
src/storage/extendible_hash.c:1634:69: note: Function 'ehash_insert_bucket_after_extend_if_need' argument 6 names different: declaration 'key' definition 'key_p'.
       EHASH_DIR_HEADER * dir_header_p, VPID * bucket_vpid_p, void *key_p,
                                                                    ^
src/storage/extendible_hash.c:1635:68: style:inconclusive: Function 'ehash_insert_bucket_after_extend_if_need' argument 10 names different: declaration 'value_ptr' definition 'value_p'. [funcArgNamesDifferent]
       EHASH_HASH_KEY hash_key, int lock_type, bool is_temp, OID * value_p,
                                                                   ^
src/storage/extendible_hash.c:332:34: note: Function 'ehash_insert_bucket_after_extend_if_need' argument 10 names different: declaration 'value_ptr' definition 'value_p'.
             bool is_temp, OID * value_ptr, VPID * existing_ovf_vpid);
                                 ^
src/storage/extendible_hash.c:1635:68: note: Function 'ehash_insert_bucket_after_extend_if_need' argument 10 names different: declaration 'value_ptr' definition 'value_p'.
       EHASH_HASH_KEY hash_key, int lock_type, bool is_temp, OID * value_p,
                                                                   ^
src/storage/extendible_hash.c:1636:15: style:inconclusive: Function 'ehash_insert_bucket_after_extend_if_need' argument 11 names different: declaration 'existing_ovf_vpid' definition 'existing_ovf_vpid_p'. [funcArgNamesDifferent]
       VPID * existing_ovf_vpid_p)
              ^
src/storage/extendible_hash.c:332:52: note: Function 'ehash_insert_bucket_after_extend_if_need' argument 11 names different: declaration 'existing_ovf_vpid' definition 'existing_ovf_vpid_p'.
             bool is_temp, OID * value_ptr, VPID * existing_ovf_vpid);
                                                   ^
src/storage/extendible_hash.c:1636:15: note: Function 'ehash_insert_bucket_after_extend_if_need' argument 11 names different: declaration 'existing_ovf_vpid' definition 'existing_ovf_vpid_p'.
       VPID * existing_ovf_vpid_p)
              ^
src/storage/extendible_hash.c:1707:54: style:inconclusive: Function 'ehash_insert_helper' argument 2 names different: declaration 'ehid' definition 'ehid_p'. [funcArgNamesDifferent]
ehash_insert_helper (THREAD_ENTRY * thread_p, EHID * ehid_p, void *key_p, OID * value_p, int lock_type,
                                                     ^
src/storage/extendible_hash.c:267:67: note: Function 'ehash_insert_helper' argument 2 names different: declaration 'ehid' definition 'ehid_p'.
static void *ehash_insert_helper (THREAD_ENTRY * thread_p, EHID * ehid, void *key, OID * value_ptr, int lock_type,
                                                                  ^
src/storage/extendible_hash.c:1707:54: note: Function 'ehash_insert_helper' argument 2 names different: declaration 'ehid' definition 'ehid_p'.
ehash_insert_helper (THREAD_ENTRY * thread_p, EHID * ehid_p, void *key_p, OID * value_p, int lock_type,
                                                     ^
src/storage/extendible_hash.c:1707:68: style:inconclusive: Function 'ehash_insert_helper' argument 3 names different: declaration 'key' definition 'key_p'. [funcArgNamesDifferent]
ehash_insert_helper (THREAD_ENTRY * thread_p, EHID * ehid_p, void *key_p, OID * value_p, int lock_type,
                                                                   ^
src/storage/extendible_hash.c:267:79: note: Function 'ehash_insert_helper' argument 3 names different: declaration 'key' definition 'key_p'.
static void *ehash_insert_helper (THREAD_ENTRY * thread_p, EHID * ehid, void *key, OID * value_ptr, int lock_type,
                                                                              ^
src/storage/extendible_hash.c:1707:68: note: Function 'ehash_insert_helper' argument 3 names different: declaration 'key' definition 'key_p'.
ehash_insert_helper (THREAD_ENTRY * thread_p, EHID * ehid_p, void *key_p, OID * value_p, int lock_type,
                                                                   ^
src/storage/extendible_hash.c:1707:81: style:inconclusive: Function 'ehash_insert_helper' argument 4 names different: declaration 'value_ptr' definition 'value_p'. [funcArgNamesDifferent]
ehash_insert_helper (THREAD_ENTRY * thread_p, EHID * ehid_p, void *key_p, OID * value_p, int lock_type,
                                                                                ^
src/storage/extendible_hash.c:267:90: note: Function 'ehash_insert_helper' argument 4 names different: declaration 'value_ptr' definition 'value_p'.
static void *ehash_insert_helper (THREAD_ENTRY * thread_p, EHID * ehid, void *key, OID * value_ptr, int lock_type,
                                                                                         ^
src/storage/extendible_hash.c:1707:81: note: Function 'ehash_insert_helper' argument 4 names different: declaration 'value_ptr' definition 'value_p'.
ehash_insert_helper (THREAD_ENTRY * thread_p, EHID * ehid_p, void *key_p, OID * value_p, int lock_type,
                                                                                ^
src/storage/extendible_hash.c:1708:15: style:inconclusive: Function 'ehash_insert_helper' argument 6 names different: declaration 'existing_ovf_vpid' definition 'existing_ovf_vpid_p'. [funcArgNamesDifferent]
       VPID * existing_ovf_vpid_p)
              ^
src/storage/extendible_hash.c:268:14: note: Function 'ehash_insert_helper' argument 6 names different: declaration 'existing_ovf_vpid' definition 'existing_ovf_vpid_p'.
      VPID * existing_ovf_vpid);
             ^
src/storage/extendible_hash.c:1708:15: note: Function 'ehash_insert_helper' argument 6 names different: declaration 'existing_ovf_vpid' definition 'existing_ovf_vpid_p'.
       VPID * existing_ovf_vpid_p)
              ^
src/storage/extendible_hash.c:1829:57: style:inconclusive: Function 'ehash_insert_to_bucket' argument 2 names different: declaration 'ehid' definition 'ehid_p'. [funcArgNamesDifferent]
ehash_insert_to_bucket (THREAD_ENTRY * thread_p, EHID * ehid_p, VFID * ovf_file_p, bool is_temp,
                                                        ^
src/storage/extendible_hash.c:269:77: note: Function 'ehash_insert_to_bucket' argument 2 names different: declaration 'ehid' definition 'ehid_p'.
static EHASH_RESULT ehash_insert_to_bucket (THREAD_ENTRY * thread_p, EHID * ehid, VFID * ovf_file, bool is_temp,
                                                                            ^
src/storage/extendible_hash.c:1829:57: note: Function 'ehash_insert_to_bucket' argument 2 names different: declaration 'ehid' definition 'ehid_p'.
ehash_insert_to_bucket (THREAD_ENTRY * thread_p, EHID * ehid_p, VFID * ovf_file_p, bool is_temp,
                                                        ^
src/storage/extendible_hash.c:1829:72: style:inconclusive: Function 'ehash_insert_to_bucket' argument 3 names different: declaration 'ovf_file' definition 'ovf_file_p'. [funcArgNamesDifferent]
ehash_insert_to_bucket (THREAD_ENTRY * thread_p, EHID * ehid_p, VFID * ovf_file_p, bool is_temp,
                                                                       ^
src/storage/extendible_hash.c:269:90: note: Function 'ehash_insert_to_bucket' argument 3 names different: declaration 'ovf_file' definition 'ovf_file_p'.
static EHASH_RESULT ehash_insert_to_bucket (THREAD_ENTRY * thread_p, EHID * ehid, VFID * ovf_file, bool is_temp,
                                                                                         ^
src/storage/extendible_hash.c:1829:72: note: Function 'ehash_insert_to_bucket' argument 3 names different: declaration 'ovf_file' definition 'ovf_file_p'.
ehash_insert_to_bucket (THREAD_ENTRY * thread_p, EHID * ehid_p, VFID * ovf_file_p, bool is_temp,
                                                                       ^
src/storage/extendible_hash.c:1830:13: style:inconclusive: Function 'ehash_insert_to_bucket' argument 5 names different: declaration 'buc_pgptr' definition 'bucket_page_p'. [funcArgNamesDifferent]
   PAGE_PTR bucket_page_p, DB_TYPE key_type, void *key_p, OID * value_p,
            ^
src/storage/extendible_hash.c:270:19: note: Function 'ehash_insert_to_bucket' argument 5 names different: declaration 'buc_pgptr' definition 'bucket_page_p'.
         PAGE_PTR buc_pgptr, DB_TYPE key_type, void *key_ptr, OID * value_ptr,
                  ^
src/storage/extendible_hash.c:1830:13: note: Function 'ehash_insert_to_bucket' argument 5 names different: declaration 'buc_pgptr' definition 'bucket_page_p'.
   PAGE_PTR bucket_page_p, DB_TYPE key_type, void *key_p, OID * value_p,
            ^
src/storage/extendible_hash.c:1830:52: style:inconclusive: Function 'ehash_insert_to_bucket' argument 7 names different: declaration 'key_ptr' definition 'key_p'. [funcArgNamesDifferent]
   PAGE_PTR bucket_page_p, DB_TYPE key_type, void *key_p, OID * value_p,
                                                   ^
src/storage/extendible_hash.c:270:54: note: Function 'ehash_insert_to_bucket' argument 7 names different: declaration 'key_ptr' definition 'key_p'.
         PAGE_PTR buc_pgptr, DB_TYPE key_type, void *key_ptr, OID * value_ptr,
                                                     ^
src/storage/extendible_hash.c:1830:52: note: Function 'ehash_insert_to_bucket' argument 7 names different: declaration 'key_ptr' definition 'key_p'.
   PAGE_PTR bucket_page_p, DB_TYPE key_type, void *key_p, OID * value_p,
                                                   ^
src/storage/extendible_hash.c:1830:65: style:inconclusive: Function 'ehash_insert_to_bucket' argument 8 names different: declaration 'value_ptr' definition 'value_p'. [funcArgNamesDifferent]
   PAGE_PTR bucket_page_p, DB_TYPE key_type, void *key_p, OID * value_p,
                                                                ^
src/storage/extendible_hash.c:270:69: note: Function 'ehash_insert_to_bucket' argument 8 names different: declaration 'value_ptr' definition 'value_p'.
         PAGE_PTR buc_pgptr, DB_TYPE key_type, void *key_ptr, OID * value_ptr,
                                                                    ^
src/storage/extendible_hash.c:1830:65: note: Function 'ehash_insert_to_bucket' argument 8 names different: declaration 'value_ptr' definition 'value_p'.
   PAGE_PTR bucket_page_p, DB_TYPE key_type, void *key_p, OID * value_p,
                                                                ^
src/storage/extendible_hash.c:1831:11: style:inconclusive: Function 'ehash_insert_to_bucket' argument 9 names different: declaration 'existing_ovf_vpid' definition 'existing_ovf_vpid_p'. [funcArgNamesDifferent]
   VPID * existing_ovf_vpid_p)
          ^
src/storage/extendible_hash.c:271:17: note: Function 'ehash_insert_to_bucket' argument 9 names different: declaration 'existing_ovf_vpid' definition 'existing_ovf_vpid_p'.
         VPID * existing_ovf_vpid);
                ^
src/storage/extendible_hash.c:1831:11: note: Function 'ehash_insert_to_bucket' argument 9 names different: declaration 'existing_ovf_vpid' definition 'existing_ovf_vpid_p'.
   VPID * existing_ovf_vpid_p)
          ^
src/storage/extendible_hash.c:2059:37: style:inconclusive: Function 'ehash_write_key_to_record' argument 1 names different: declaration 'recdes' definition 'recdes_p'. [funcArgNamesDifferent]
ehash_write_key_to_record (RECDES * recdes_p, DB_TYPE key_type, void *key_p, short key_size, OID * value_p,
                                    ^
src/storage/extendible_hash.c:327:48: note: Function 'ehash_write_key_to_record' argument 1 names different: declaration 'recdes' definition 'recdes_p'.
static int ehash_write_key_to_record (RECDES * recdes, DB_TYPE key_type, void *key_ptr, short key_size, OID * value_ptr,
                                               ^
src/storage/extendible_hash.c:2059:37: note: Function 'ehash_write_key_to_record' argument 1 names different: declaration 'recdes' definition 'recdes_p'.
ehash_write_key_to_record (RECDES * recdes_p, DB_TYPE key_type, void *key_p, short key_size, OID * value_p,
                                    ^
src/storage/extendible_hash.c:2059:71: style:inconclusive: Function 'ehash_write_key_to_record' argument 3 names different: declaration 'key_ptr' definition 'key_p'. [funcArgNamesDifferent]
ehash_write_key_to_record (RECDES * recdes_p, DB_TYPE key_type, void *key_p, short key_size, OID * value_p,
                                                                      ^
src/storage/extendible_hash.c:327:80: note: Function 'ehash_write_key_to_record' argument 3 names different: declaration 'key_ptr' definition 'key_p'.
static int ehash_write_key_to_record (RECDES * recdes, DB_TYPE key_type, void *key_ptr, short key_size, OID * value_ptr,
                                                                               ^
src/storage/extendible_hash.c:2059:71: note: Function 'ehash_write_key_to_record' argument 3 names different: declaration 'key_ptr' definition 'key_p'.
ehash_write_key_to_record (RECDES * recdes_p, DB_TYPE key_type, void *key_p, short key_size, OID * value_p,
                                                                      ^
src/storage/extendible_hash.c:2059:100: style:inconclusive: Function 'ehash_write_key_to_record' argument 5 names different: declaration 'value_ptr' definition 'value_p'. [funcArgNamesDifferent]
ehash_write_key_to_record (RECDES * recdes_p, DB_TYPE key_type, void *key_p, short key_size, OID * value_p,
                                                                                                   ^
src/storage/extendible_hash.c:327:111: note: Function 'ehash_write_key_to_record' argument 5 names different: declaration 'value_ptr' definition 'value_p'.
static int ehash_write_key_to_record (RECDES * recdes, DB_TYPE key_type, void *key_ptr, short key_size, OID * value_ptr,
                                                                                                              ^
src/storage/extendible_hash.c:2059:100: note: Function 'ehash_write_key_to_record' argument 5 names different: declaration 'value_ptr' definition 'value_p'.
ehash_write_key_to_record (RECDES * recdes_p, DB_TYPE key_type, void *key_p, short key_size, OID * value_p,
                                                                                                   ^
src/storage/extendible_hash.c:2060:12: style:inconclusive: Function 'ehash_write_key_to_record' argument 6 names different: declaration 'long_str' definition 'is_long_str'. [funcArgNamesDifferent]
      bool is_long_str)
           ^
src/storage/extendible_hash.c:328:16: note: Function 'ehash_write_key_to_record' argument 6 names different: declaration 'long_str' definition 'is_long_str'.
          bool long_str);
               ^
src/storage/extendible_hash.c:2060:12: note: Function 'ehash_write_key_to_record' argument 6 names different: declaration 'long_str' definition 'is_long_str'.
      bool is_long_str)
           ^
src/storage/extendible_hash.c:2164:47: style:inconclusive: Function 'ehash_compose_record' argument 2 names different: declaration 'key_ptr' definition 'key_p'. [funcArgNamesDifferent]
ehash_compose_record (DB_TYPE key_type, void *key_p, OID * value_p, RECDES * recdes_p)
                                              ^
src/storage/extendible_hash.c:272:58: note: Function 'ehash_compose_record' argument 2 names different: declaration 'key_ptr' definition 'key_p'.
static int ehash_compose_record (DB_TYPE key_type, void *key_ptr, OID * value_ptr, RECDES * recdes);
                                                         ^
src/storage/extendible_hash.c:2164:47: note: Function 'ehash_compose_record' argument 2 names different: declaration 'key_ptr' definition 'key_p'.
ehash_compose_record (DB_TYPE key_type, void *key_p, OID * value_p, RECDES * recdes_p)
                                              ^
src/storage/extendible_hash.c:2164:60: style:inconclusive: Function 'ehash_compose_record' argument 3 names different: declaration 'value_ptr' definition 'value_p'. [funcArgNamesDifferent]
ehash_compose_record (DB_TYPE key_type, void *key_p, OID * value_p, RECDES * recdes_p)
                                                           ^
src/storage/extendible_hash.c:272:73: note: Function 'ehash_compose_record' argument 3 names different: declaration 'value_ptr' definition 'value_p'.
static int ehash_compose_record (DB_TYPE key_type, void *key_ptr, OID * value_ptr, RECDES * recdes);
                                                                        ^
src/storage/extendible_hash.c:2164:60: note: Function 'ehash_compose_record' argument 3 names different: declaration 'value_ptr' definition 'value_p'.
ehash_compose_record (DB_TYPE key_type, void *key_p, OID * value_p, RECDES * recdes_p)
                                                           ^
src/storage/extendible_hash.c:2164:78: style:inconclusive: Function 'ehash_compose_record' argument 4 names different: declaration 'recdes' definition 'recdes_p'. [funcArgNamesDifferent]
ehash_compose_record (DB_TYPE key_type, void *key_p, OID * value_p, RECDES * recdes_p)
                                                                             ^
src/storage/extendible_hash.c:272:93: note: Function 'ehash_compose_record' argument 4 names different: declaration 'recdes' definition 'recdes_p'.
static int ehash_compose_record (DB_TYPE key_type, void *key_ptr, OID * value_ptr, RECDES * recdes);
                                                                                            ^
src/storage/extendible_hash.c:2164:78: note: Function 'ehash_compose_record' argument 4 names different: declaration 'recdes' definition 'recdes_p'.
ehash_compose_record (DB_TYPE key_type, void *key_p, OID * value_p, RECDES * recdes_p)
                                                                             ^
src/storage/extendible_hash.c:2215:51: style:inconclusive: Function 'ehash_compare_key' argument 2 names different: declaration 'bucrec_ptr' definition 'bucket_record_p'. [funcArgNamesDifferent]
ehash_compare_key (THREAD_ENTRY * thread_p, char *bucket_record_p, DB_TYPE key_type, void *key_p, INT16 record_type,
                                                  ^
src/storage/extendible_hash.c:325:62: note: Function 'ehash_compare_key' argument 2 names different: declaration 'bucrec_ptr' definition 'bucket_record_p'.
static int ehash_compare_key (THREAD_ENTRY * thread_p, char *bucrec_ptr, DB_TYPE key_type, void *key, INT16 rec_type,
                                                             ^
src/storage/extendible_hash.c:2215:51: note: Function 'ehash_compare_key' argument 2 names different: declaration 'bucrec_ptr' definition 'bucket_record_p'.
ehash_compare_key (THREAD_ENTRY * thread_p, char *bucket_record_p, DB_TYPE key_type, void *key_p, INT16 record_type,
                                                  ^
src/storage/extendible_hash.c:2215:92: style:inconclusive: Function 'ehash_compare_key' argument 4 names different: declaration 'key' definition 'key_p'. [funcArgNamesDifferent]
ehash_compare_key (THREAD_ENTRY * thread_p, char *bucket_record_p, DB_TYPE key_type, void *key_p, INT16 record_type,
                                                                                           ^
src/storage/extendible_hash.c:325:98: note: Function 'ehash_compare_key' argument 4 names different: declaration 'key' definition 'key_p'.
static int ehash_compare_key (THREAD_ENTRY * thread_p, char *bucrec_ptr, DB_TYPE key_type, void *key, INT16 rec_type,
                                                                                                 ^
src/storage/extendible_hash.c:2215:92: note: Function 'ehash_compare_key' argument 4 names different: declaration 'key' definition 'key_p'.
ehash_compare_key (THREAD_ENTRY * thread_p, char *bucket_record_p, DB_TYPE key_type, void *key_p, INT16 record_type,
                                                                                           ^
src/storage/extendible_hash.c:2215:105: style:inconclusive: Function 'ehash_compare_key' argument 5 names different: declaration 'rec_type' definition 'record_type'. [funcArgNamesDifferent]
ehash_compare_key (THREAD_ENTRY * thread_p, char *bucket_record_p, DB_TYPE key_type, void *key_p, INT16 record_type,
                                                                                                        ^
src/storage/extendible_hash.c:325:109: note: Function 'ehash_compare_key' argument 5 names different: declaration 'rec_type' definition 'record_type'.
static int ehash_compare_key (THREAD_ENTRY * thread_p, char *bucrec_ptr, DB_TYPE key_type, void *key, INT16 rec_type,
                                                                                                            ^
src/storage/extendible_hash.c:2215:105: note: Function 'ehash_compare_key' argument 5 names different: declaration 'rec_type' definition 'record_type'.
ehash_compare_key (THREAD_ENTRY * thread_p, char *bucket_record_p, DB_TYPE key_type, void *key_p, INT16 record_type,
                                                                                                        ^
src/storage/extendible_hash.c:2216:11: style:inconclusive: Function 'ehash_compare_key' argument 6 names different: declaration 'out_compare_result' definition 'out_compare_result_p'. [funcArgNamesDifferent]
     int *out_compare_result_p)
          ^
src/storage/extendible_hash.c:326:15: note: Function 'ehash_compare_key' argument 6 names different: declaration 'out_compare_result' definition 'out_compare_result_p'.
         int *out_compare_result);
              ^
src/storage/extendible_hash.c:2216:11: note: Function 'ehash_compare_key' argument 6 names different: declaration 'out_compare_result' definition 'out_compare_result_p'.
     int *out_compare_result_p)
          ^
src/storage/extendible_hash.c:2393:63: style:inconclusive: Function 'ehash_binary_search_bucket' argument 2 names different: declaration 'buc_pgptr' definition 'bucket_page_p'. [funcArgNamesDifferent]
ehash_binary_search_bucket (THREAD_ENTRY * thread_p, PAGE_PTR bucket_page_p, PGSLOTID num_record, DB_TYPE key_type,
                                                              ^
src/storage/extendible_hash.c:323:75: note: Function 'ehash_binary_search_bucket' argument 2 names different: declaration 'buc_pgptr' definition 'bucket_page_p'.
static bool ehash_binary_search_bucket (THREAD_ENTRY * thread_p, PAGE_PTR buc_pgptr, PGSLOTID num_record,
                                                                          ^
src/storage/extendible_hash.c:2393:63: note: Function 'ehash_binary_search_bucket' argument 2 names different: declaration 'buc_pgptr' definition 'bucket_page_p'.
ehash_binary_search_bucket (THREAD_ENTRY * thread_p, PAGE_PTR bucket_page_p, PGSLOTID num_record, DB_TYPE key_type,
                                                              ^
src/storage/extendible_hash.c:2394:14: style:inconclusive: Function 'ehash_binary_search_bucket' argument 5 names different: declaration 'key' definition 'key_p'. [funcArgNamesDifferent]
       void *key_p, PGSLOTID * out_position_p)
             ^
src/storage/extendible_hash.c:324:30: note: Function 'ehash_binary_search_bucket' argument 5 names different: declaration 'key' definition 'key_p'.
     DB_TYPE key_type, void *key, PGSLOTID * position);
                             ^
src/storage/extendible_hash.c:2394:14: note: Function 'ehash_binary_search_bucket' argument 5 names different: declaration 'key' definition 'key_p'.
       void *key_p, PGSLOTID * out_position_p)
             ^
src/storage/extendible_hash.c:2394:32: style:inconclusive: Function 'ehash_binary_search_bucket' argument 6 names different: declaration 'position' definition 'out_position_p'. [funcArgNamesDifferent]
       void *key_p, PGSLOTID * out_position_p)
                               ^
src/storage/extendible_hash.c:324:46: note: Function 'ehash_binary_search_bucket' argument 6 names different: declaration 'position' definition 'out_position_p'.
     DB_TYPE key_type, void *key, PGSLOTID * position);
                                             ^
src/storage/extendible_hash.c:2394:32: note: Function 'ehash_binary_search_bucket' argument 6 names different: declaration 'position' definition 'out_position_p'.
       void *key_p, PGSLOTID * out_position_p)
                               ^
src/storage/extendible_hash.c:2471:54: style:inconclusive: Function 'ehash_locate_slot' argument 2 names different: declaration 'page' definition 'bucket_page_p'. [funcArgNamesDifferent]
ehash_locate_slot (THREAD_ENTRY * thread_p, PAGE_PTR bucket_page_p, DB_TYPE key_type, void *key_p,
                                                     ^
src/storage/extendible_hash.c:273:66: note: Function 'ehash_locate_slot' argument 2 names different: declaration 'page' definition 'bucket_page_p'.
static bool ehash_locate_slot (THREAD_ENTRY * thread_p, PAGE_PTR page, DB_TYPE key_type, void *key,
                                                                 ^
src/storage/extendible_hash.c:2471:54: note: Function 'ehash_locate_slot' argument 2 names different: declaration 'page' definition 'bucket_page_p'.
ehash_locate_slot (THREAD_ENTRY * thread_p, PAGE_PTR bucket_page_p, DB_TYPE key_type, void *key_p,
                                                     ^
src/storage/extendible_hash.c:2471:93: style:inconclusive: Function 'ehash_locate_slot' argument 4 names different: declaration 'key' definition 'key_p'. [funcArgNamesDifferent]
ehash_locate_slot (THREAD_ENTRY * thread_p, PAGE_PTR bucket_page_p, DB_TYPE key_type, void *key_p,
                                                                                            ^
src/storage/extendible_hash.c:273:96: note: Function 'ehash_locate_slot' argument 4 names different: declaration 'key' definition 'key_p'.
static bool ehash_locate_slot (THREAD_ENTRY * thread_p, PAGE_PTR page, DB_TYPE key_type, void *key,
                                                                                               ^
src/storage/extendible_hash.c:2471:93: note: Function 'ehash_locate_slot' argument 4 names different: declaration 'key' definition 'key_p'.
ehash_locate_slot (THREAD_ENTRY * thread_p, PAGE_PTR bucket_page_p, DB_TYPE key_type, void *key_p,
                                                                                            ^
src/storage/extendible_hash.c:2472:17: style:inconclusive: Function 'ehash_locate_slot' argument 5 names different: declaration 'position' definition 'out_position_p'. [funcArgNamesDifferent]
     PGSLOTID * out_position_p)
                ^
src/storage/extendible_hash.c:274:22: note: Function 'ehash_locate_slot' argument 5 names different: declaration 'position' definition 'out_position_p'.
          PGSLOTID * position);
                     ^
src/storage/extendible_hash.c:2472:17: note: Function 'ehash_locate_slot' argument 5 names different: declaration 'position' definition 'out_position_p'.
     PGSLOTID * out_position_p)
                ^
src/storage/extendible_hash.c:2501:57: style:inconclusive: Function 'ehash_get_pseudo_key' argument 2 names different: declaration 'recdes' definition 'recdes_p'. [funcArgNamesDifferent]
ehash_get_pseudo_key (THREAD_ENTRY * thread_p, RECDES * recdes_p, DB_TYPE key_type, EHASH_HASH_KEY * out_hash_key_p)
                                                        ^
src/storage/extendible_hash.c:321:68: note: Function 'ehash_get_pseudo_key' argument 2 names different: declaration 'recdes' definition 'recdes_p'.
static int ehash_get_pseudo_key (THREAD_ENTRY * thread_p, RECDES * recdes, DB_TYPE key_type,
                                                                   ^
src/storage/extendible_hash.c:2501:57: note: Function 'ehash_get_pseudo_key' argument 2 names different: declaration 'recdes' definition 'recdes_p'.
ehash_get_pseudo_key (THREAD_ENTRY * thread_p, RECDES * recdes_p, DB_TYPE key_type, EHASH_HASH_KEY * out_hash_key_p)
                                                        ^
src/storage/extendible_hash.c:2501:102: style:inconclusive: Function 'ehash_get_pseudo_key' argument 4 names different: declaration 'out_hash_key' definition 'out_hash_key_p'. [funcArgNamesDifferent]
ehash_get_pseudo_key (THREAD_ENTRY * thread_p, RECDES * recdes_p, DB_TYPE key_type, EHASH_HASH_KEY * out_hash_key_p)
                                                                                                     ^
src/storage/extendible_hash.c:322:23: note: Function 'ehash_get_pseudo_key' argument 4 names different: declaration 'out_hash_key' definition 'out_hash_key_p'.
     EHASH_HASH_KEY * out_hash_key);
                      ^
src/storage/extendible_hash.c:2501:102: note: Function 'ehash_get_pseudo_key' argument 4 names different: declaration 'out_hash_key' definition 'out_hash_key_p'.
ehash_get_pseudo_key (THREAD_ENTRY * thread_p, RECDES * recdes_p, DB_TYPE key_type, EHASH_HASH_KEY * out_hash_key_p)
                                                                                                     ^
src/storage/extendible_hash.c:2537:76: style:inconclusive: Function 'ehash_find_first_bit_position' argument 2 names different: declaration 'dir_header' definition 'dir_header_p'. [funcArgNamesDifferent]
ehash_find_first_bit_position (THREAD_ENTRY * thread_p, EHASH_DIR_HEADER * dir_header_p, PAGE_PTR bucket_page_p,
                                                                           ^
src/storage/extendible_hash.c:318:87: note: Function 'ehash_find_first_bit_position' argument 2 names different: declaration 'dir_header' definition 'dir_header_p'.
static int ehash_find_first_bit_position (THREAD_ENTRY * thread_p, EHASH_DIR_HEADER * dir_header, PAGE_PTR buc_pgptr,
                                                                                      ^
src/storage/extendible_hash.c:2537:76: note: Function 'ehash_find_first_bit_position' argument 2 names different: declaration 'dir_header' definition 'dir_header_p'.
ehash_find_first_bit_position (THREAD_ENTRY * thread_p, EHASH_DIR_HEADER * dir_header_p, PAGE_PTR bucket_page_p,
                                                                           ^
src/storage/extendible_hash.c:2537:99: style:inconclusive: Function 'ehash_find_first_bit_position' argument 3 names different: declaration 'buc_pgptr' definition 'bucket_page_p'. [funcArgNamesDifferent]
ehash_find_first_bit_position (THREAD_ENTRY * thread_p, EHASH_DIR_HEADER * dir_header_p, PAGE_PTR bucket_page_p,
                                                                                                  ^
src/storage/extendible_hash.c:318:108: note: Function 'ehash_find_first_bit_position' argument 3 names different: declaration 'buc_pgptr' definition 'bucket_page_p'.
static int ehash_find_first_bit_position (THREAD_ENTRY * thread_p, EHASH_DIR_HEADER * dir_header, PAGE_PTR buc_pgptr,
                                                                                                           ^
src/storage/extendible_hash.c:2537:99: note: Function 'ehash_find_first_bit_position' argument 3 names different: declaration 'buc_pgptr' definition 'bucket_page_p'.
ehash_find_first_bit_position (THREAD_ENTRY * thread_p, EHASH_DIR_HEADER * dir_header_p, PAGE_PTR bucket_page_p,
                                                                                                  ^
src/storage/extendible_hash.c:2538:33: style:inconclusive: Function 'ehash_find_first_bit_position' argument 4 names different: declaration 'buc_header' definition 'bucket_header_p'. [funcArgNamesDifferent]
          EHASH_BUCKET_HEADER * bucket_header_p, void *key_p, int num_recs, PGSLOTID first_slot_id,
                                ^
src/storage/extendible_hash.c:319:30: note: Function 'ehash_find_first_bit_position' argument 4 names different: declaration 'buc_header' definition 'bucket_header_p'.
       EHASH_BUCKET_HEADER * buc_header, void *key, int num_recs,
                             ^
src/storage/extendible_hash.c:2538:33: note: Function 'ehash_find_first_bit_position' argument 4 names different: declaration 'buc_header' definition 'bucket_header_p'.
          EHASH_BUCKET_HEADER * bucket_header_p, void *key_p, int num_recs, PGSLOTID first_slot_id,
                                ^
src/storage/extendible_hash.c:2538:56: style:inconclusive: Function 'ehash_find_first_bit_position' argument 5 names different: declaration 'key' definition 'key_p'. [funcArgNamesDifferent]
          EHASH_BUCKET_HEADER * bucket_header_p, void *key_p, int num_recs, PGSLOTID first_slot_id,
                                                       ^
src/storage/extendible_hash.c:319:48: note: Function 'ehash_find_first_bit_position' argument 5 names different: declaration 'key' definition 'key_p'.
       EHASH_BUCKET_HEADER * buc_header, void *key, int num_recs,
                                               ^
src/storage/extendible_hash.c:2538:56: note: Function 'ehash_find_first_bit_position' argument 5 names different: declaration 'key' definition 'key_p'.
          EHASH_BUCKET_HEADER * bucket_header_p, void *key_p, int num_recs, PGSLOTID first_slot_id,
                                                       ^
src/storage/extendible_hash.c:2538:86: style:inconclusive: Function 'ehash_find_first_bit_position' argument 7 names different: declaration 'first_slotid' definition 'first_slot_id'. [funcArgNamesDifferent]
          EHASH_BUCKET_HEADER * bucket_header_p, void *key_p, int num_recs, PGSLOTID first_slot_id,
                                                                                     ^
src/storage/extendible_hash.c:320:17: note: Function 'ehash_find_first_bit_position' argument 7 names different: declaration 'first_slotid' definition 'first_slot_id'.
       PGSLOTID first_slotid, int *old_local_depth, int *new_local_depth);
                ^
src/storage/extendible_hash.c:2538:86: note: Function 'ehash_find_first_bit_position' argument 7 names different: declaration 'first_slotid' definition 'first_slot_id'.
          EHASH_BUCKET_HEADER * bucket_header_p, void *key_p, int num_recs, PGSLOTID first_slot_id,
                                                                                     ^
src/storage/extendible_hash.c:2539:16: style:inconclusive: Function 'ehash_find_first_bit_position' argument 8 names different: declaration 'old_local_depth' definition 'out_old_local_depth_p'. [funcArgNamesDifferent]
          int *out_old_local_depth_p, int *out_new_local_depth_p)
               ^
src/storage/extendible_hash.c:320:36: note: Function 'ehash_find_first_bit_position' argument 8 names different: declaration 'old_local_depth' definition 'out_old_local_depth_p'.
       PGSLOTID first_slotid, int *old_local_depth, int *new_local_depth);
                                   ^
src/storage/extendible_hash.c:2539:16: note: Function 'ehash_find_first_bit_position' argument 8 names different: declaration 'old_local_depth' definition 'out_old_local_depth_p'.
          int *out_old_local_depth_p, int *out_new_local_depth_p)
               ^
src/storage/extendible_hash.c:2539:44: style:inconclusive: Function 'ehash_find_first_bit_position' argument 9 names different: declaration 'new_local_depth' definition 'out_new_local_depth_p'. [funcArgNamesDifferent]
          int *out_old_local_depth_p, int *out_new_local_depth_p)
                                           ^
src/storage/extendible_hash.c:320:58: note: Function 'ehash_find_first_bit_position' argument 9 names different: declaration 'new_local_depth' definition 'out_new_local_depth_p'.
       PGSLOTID first_slotid, int *old_local_depth, int *new_local_depth);
                                                         ^
src/storage/extendible_hash.c:2539:44: note: Function 'ehash_find_first_bit_position' argument 9 names different: declaration 'new_local_depth' definition 'out_new_local_depth_p'.
          int *out_old_local_depth_p, int *out_new_local_depth_p)
                                           ^
src/storage/extendible_hash.c:2597:87: style:inconclusive: Function 'ehash_distribute_records_into_two_bucket' argument 2 names different: declaration 'dir_header' definition 'dir_header_p'. [funcArgNamesDifferent]
ehash_distribute_records_into_two_bucket (THREAD_ENTRY * thread_p, EHASH_DIR_HEADER * dir_header_p,
                                                                                      ^
src/storage/extendible_hash.c:315:98: note: Function 'ehash_distribute_records_into_two_bucket' argument 2 names different: declaration 'dir_header' definition 'dir_header_p'.
static int ehash_distribute_records_into_two_bucket (THREAD_ENTRY * thread_p, EHASH_DIR_HEADER * dir_header,
                                                                                                 ^
src/storage/extendible_hash.c:2597:87: note: Function 'ehash_distribute_records_into_two_bucket' argument 2 names different: declaration 'dir_header' definition 'dir_header_p'.
ehash_distribute_records_into_two_bucket (THREAD_ENTRY * thread_p, EHASH_DIR_HEADER * dir_header_p,
                                                                                      ^
src/storage/extendible_hash.c:2598:17: style:inconclusive: Function 'ehash_distribute_records_into_two_bucket' argument 3 names different: declaration 'buc_pgptr' definition 'bucket_page_p'. [funcArgNamesDifferent]
       PAGE_PTR bucket_page_p, EHASH_BUCKET_HEADER * bucket_header_p, int num_recs,
                ^
src/storage/extendible_hash.c:316:21: note: Function 'ehash_distribute_records_into_two_bucket' argument 3 names different: declaration 'buc_pgptr' definition 'bucket_page_p'.
           PAGE_PTR buc_pgptr, EHASH_BUCKET_HEADER * buc_header, int num_recs,
                    ^
src/storage/extendible_hash.c:2598:17: note: Function 'ehash_distribute_records_into_two_bucket' argument 3 names different: declaration 'buc_pgptr' definition 'bucket_page_p'.
       PAGE_PTR bucket_page_p, EHASH_BUCKET_HEADER * bucket_header_p, int num_recs,
                ^
src/storage/extendible_hash.c:2598:54: style:inconclusive: Function 'ehash_distribute_records_into_two_bucket' argument 4 names different: declaration 'buc_header' definition 'bucket_header_p'. [funcArgNamesDifferent]
       PAGE_PTR bucket_page_p, EHASH_BUCKET_HEADER * bucket_header_p, int num_recs,
                                                     ^
src/storage/extendible_hash.c:316:54: note: Function 'ehash_distribute_records_into_two_bucket' argument 4 names different: declaration 'buc_header' definition 'bucket_header_p'.
           PAGE_PTR buc_pgptr, EHASH_BUCKET_HEADER * buc_header, int num_recs,
                                                     ^
src/storage/extendible_hash.c:2598:54: note: Function 'ehash_distribute_records_into_two_bucket' argument 4 names different: declaration 'buc_header' definition 'bucket_header_p'.
       PAGE_PTR bucket_page_p, EHASH_BUCKET_HEADER * bucket_header_p, int num_recs,
                                                     ^
src/storage/extendible_hash.c:2599:17: style:inconclusive: Function 'ehash_distribute_records_into_two_bucket' argument 6 names different: declaration 'first_slotid' definition 'first_slot_id'. [funcArgNamesDifferent]
       PGSLOTID first_slot_id, PAGE_PTR sibling_page_p)
                ^
src/storage/extendible_hash.c:317:21: note: Function 'ehash_distribute_records_into_two_bucket' argument 6 names different: declaration 'first_slotid' definition 'first_slot_id'.
           PGSLOTID first_slotid, PAGE_PTR sib_pgptr);
                    ^
src/storage/extendible_hash.c:2599:17: note: Function 'ehash_distribute_records_into_two_bucket' argument 6 names different: declaration 'first_slotid' definition 'first_slot_id'.
       PGSLOTID first_slot_id, PAGE_PTR sibling_page_p)
                ^
src/storage/extendible_hash.c:2599:41: style:inconclusive: Function 'ehash_distribute_records_into_two_bucket' argument 7 names different: declaration 'sib_pgptr' definition 'sibling_page_p'. [funcArgNamesDifferent]
       PGSLOTID first_slot_id, PAGE_PTR sibling_page_p)
                                        ^
src/storage/extendible_hash.c:317:44: note: Function 'ehash_distribute_records_into_two_bucket' argument 7 names different: declaration 'sib_pgptr' definition 'sibling_page_p'.
           PGSLOTID first_slotid, PAGE_PTR sib_pgptr);
                                           ^
src/storage/extendible_hash.c:2599:41: note: Function 'ehash_distribute_records_into_two_bucket' argument 7 names different: declaration 'sib_pgptr' definition 'sibling_page_p'.
       PGSLOTID first_slot_id, PAGE_PTR sibling_page_p)
                                        ^
src/storage/extendible_hash.c:2676:65: style:inconclusive: Function 'ehash_split_bucket' argument 2 names different: declaration 'dir_header' definition 'dir_header_p'. [funcArgNamesDifferent]
ehash_split_bucket (THREAD_ENTRY * thread_p, EHASH_DIR_HEADER * dir_header_p, PAGE_PTR bucket_page_p, void *key_p,
                                                                ^
src/storage/extendible_hash.c:275:81: note: Function 'ehash_split_bucket' argument 2 names different: declaration 'dir_header' definition 'dir_header_p'.
static PAGE_PTR ehash_split_bucket (THREAD_ENTRY * thread_p, EHASH_DIR_HEADER * dir_header, PAGE_PTR buc_pgptr,
                                                                                ^
src/storage/extendible_hash.c:2676:65: note: Function 'ehash_split_bucket' argument 2 names different: declaration 'dir_header' definition 'dir_header_p'.
ehash_split_bucket (THREAD_ENTRY * thread_p, EHASH_DIR_HEADER * dir_header_p, PAGE_PTR bucket_page_p, void *key_p,
                                                                ^
src/storage/extendible_hash.c:2676:88: style:inconclusive: Function 'ehash_split_bucket' argument 3 names different: declaration 'buc_pgptr' definition 'bucket_page_p'. [funcArgNamesDifferent]
ehash_split_bucket (THREAD_ENTRY * thread_p, EHASH_DIR_HEADER * dir_header_p, PAGE_PTR bucket_page_p, void *key_p,
                                                                                       ^
src/storage/extendible_hash.c:275:102: note: Function 'ehash_split_bucket' argument 3 names different: declaration 'buc_pgptr' definition 'bucket_page_p'.
static PAGE_PTR ehash_split_bucket (THREAD_ENTRY * thread_p, EHASH_DIR_HEADER * dir_header, PAGE_PTR buc_pgptr,
                                                                                                     ^
src/storage/extendible_hash.c:2676:88: note: Function 'ehash_split_bucket' argument 3 names different: declaration 'buc_pgptr' definition 'bucket_page_p'.
ehash_split_bucket (THREAD_ENTRY * thread_p, EHASH_DIR_HEADER * dir_header_p, PAGE_PTR bucket_page_p, void *key_p,
                                                                                       ^
src/storage/extendible_hash.c:2676:109: style:inconclusive: Function 'ehash_split_bucket' argument 4 names different: declaration 'key' definition 'key_p'. [funcArgNamesDifferent]
ehash_split_bucket (THREAD_ENTRY * thread_p, EHASH_DIR_HEADER * dir_header_p, PAGE_PTR bucket_page_p, void *key_p,
                                                                                                            ^
src/storage/extendible_hash.c:276:15: note: Function 'ehash_split_bucket' argument 4 names different: declaration 'key' definition 'key_p'.
        void *key, int *old_local_depth, int *new_local_depth, VPID * sib_vpid,
              ^
src/storage/extendible_hash.c:2676:109: note: Function 'ehash_split_bucket' argument 4 names different: declaration 'key' definition 'key_p'.
ehash_split_bucket (THREAD_ENTRY * thread_p, EHASH_DIR_HEADER * dir_header_p, PAGE_PTR bucket_page_p, void *key_p,
                                                                                                            ^
src/storage/extendible_hash.c:2677:12: style:inconclusive: Function 'ehash_split_bucket' argument 5 names different: declaration 'old_local_depth' definition 'out_old_local_depth_p'. [funcArgNamesDifferent]
      int *out_old_local_depth_p, int *out_new_local_depth_p, VPID * sibling_vpid_p, bool is_temp)
           ^
src/storage/extendible_hash.c:276:25: note: Function 'ehash_split_bucket' argument 5 names different: declaration 'old_local_depth' definition 'out_old_local_depth_p'.
        void *key, int *old_local_depth, int *new_local_depth, VPID * sib_vpid,
                        ^
src/storage/extendible_hash.c:2677:12: note: Function 'ehash_split_bucket' argument 5 names different: declaration 'old_local_depth' definition 'out_old_local_depth_p'.
      int *out_old_local_depth_p, int *out_new_local_depth_p, VPID * sibling_vpid_p, bool is_temp)
           ^
src/storage/extendible_hash.c:2677:40: style:inconclusive: Function 'ehash_split_bucket' argument 6 names different: declaration 'new_local_depth' definition 'out_new_local_depth_p'. [funcArgNamesDifferent]
      int *out_old_local_depth_p, int *out_new_local_depth_p, VPID * sibling_vpid_p, bool is_temp)
                                       ^
src/storage/extendible_hash.c:276:47: note: Function 'ehash_split_bucket' argument 6 names different: declaration 'new_local_depth' definition 'out_new_local_depth_p'.
        void *key, int *old_local_depth, int *new_local_depth, VPID * sib_vpid,
                                              ^
src/storage/extendible_hash.c:2677:40: note: Function 'ehash_split_bucket' argument 6 names different: declaration 'new_local_depth' definition 'out_new_local_depth_p'.
      int *out_old_local_depth_p, int *out_new_local_depth_p, VPID * sibling_vpid_p, bool is_temp)
                                       ^
src/storage/extendible_hash.c:2677:70: style:inconclusive: Function 'ehash_split_bucket' argument 7 names different: declaration 'sib_vpid' definition 'sibling_vpid_p'. [funcArgNamesDifferent]
      int *out_old_local_depth_p, int *out_new_local_depth_p, VPID * sibling_vpid_p, bool is_temp)
                                                                     ^
src/storage/extendible_hash.c:276:71: note: Function 'ehash_split_bucket' argument 7 names different: declaration 'sib_vpid' definition 'sibling_vpid_p'.
        void *key, int *old_local_depth, int *new_local_depth, VPID * sib_vpid,
                                                                      ^
src/storage/extendible_hash.c:2677:70: note: Function 'ehash_split_bucket' argument 7 names different: declaration 'sib_vpid' definition 'sibling_vpid_p'.
      int *out_old_local_depth_p, int *out_new_local_depth_p, VPID * sibling_vpid_p, bool is_temp)
                                                                     ^
src/storage/extendible_hash.c:2784:57: style:inconclusive: Function 'ehash_expand_directory' argument 2 names different: declaration 'ehid' definition 'ehid_p'. [funcArgNamesDifferent]
ehash_expand_directory (THREAD_ENTRY * thread_p, EHID * ehid_p, int new_depth, bool is_temp)
                                                        ^
src/storage/extendible_hash.c:278:68: note: Function 'ehash_expand_directory' argument 2 names different: declaration 'ehid' definition 'ehid_p'.
static int ehash_expand_directory (THREAD_ENTRY * thread_p, EHID * ehid, int new_depth, bool is_temp);
                                                                   ^
src/storage/extendible_hash.c:2784:57: note: Function 'ehash_expand_directory' argument 2 names different: declaration 'ehid' definition 'ehid_p'.
ehash_expand_directory (THREAD_ENTRY * thread_p, EHID * ehid_p, int new_depth, bool is_temp)
                                                        ^
src/storage/extendible_hash.c:3059:55: style:inconclusive: Function 'ehash_connect_bucket' argument 2 names different: declaration 'ehid' definition 'ehid_p'. [funcArgNamesDifferent]
ehash_connect_bucket (THREAD_ENTRY * thread_p, EHID * ehid_p, int local_depth, EHASH_HASH_KEY hash_key,
                                                      ^
src/storage/extendible_hash.c:279:66: note: Function 'ehash_connect_bucket' argument 2 names different: declaration 'ehid' definition 'ehid_p'.
static int ehash_connect_bucket (THREAD_ENTRY * thread_p, EHID * ehid, int local_depth, EHASH_HASH_KEY hash_key,
                                                                 ^
src/storage/extendible_hash.c:3059:55: note: Function 'ehash_connect_bucket' argument 2 names different: declaration 'ehid' definition 'ehid_p'.
ehash_connect_bucket (THREAD_ENTRY * thread_p, EHID * ehid_p, int local_depth, EHASH_HASH_KEY hash_key,
                                                      ^
src/storage/extendible_hash.c:3060:16: style:inconclusive: Function 'ehash_connect_bucket' argument 5 names different: declaration 'buc_vpid' definition 'bucket_vpid_p'. [funcArgNamesDifferent]
        VPID * bucket_vpid_p, bool is_temp)
               ^
src/storage/extendible_hash.c:280:13: note: Function 'ehash_connect_bucket' argument 5 names different: declaration 'buc_vpid' definition 'bucket_vpid_p'.
     VPID * buc_vpid, bool is_temp);
            ^
src/storage/extendible_hash.c:3060:16: note: Function 'ehash_connect_bucket' argument 5 names different: declaration 'buc_vpid' definition 'bucket_vpid_p'.
        VPID * bucket_vpid_p, bool is_temp)
               ^
src/storage/extendible_hash.c:3175:51: style:inconclusive: Function 'ehash_find_depth' argument 2 names different: declaration 'ehid' definition 'ehid_p'. [funcArgNamesDifferent]
ehash_find_depth (THREAD_ENTRY * thread_p, EHID * ehid_p, int location, VPID * bucket_vpid_p, VPID * sibling_vpid_p)
                                                  ^
src/storage/extendible_hash.c:281:63: note: Function 'ehash_find_depth' argument 2 names different: declaration 'ehid' definition 'ehid_p'.
static char ehash_find_depth (THREAD_ENTRY * thread_p, EHID * ehid, int location, VPID * vpid, VPID * sib_vpid);
                                                              ^
src/storage/extendible_hash.c:3175:51: note: Function 'ehash_find_depth' argument 2 names different: declaration 'ehid' definition 'ehid_p'.
ehash_find_depth (THREAD_ENTRY * thread_p, EHID * ehid_p, int location, VPID * bucket_vpid_p, VPID * sibling_vpid_p)
                                                  ^
src/storage/extendible_hash.c:3175:80: style:inconclusive: Function 'ehash_find_depth' argument 4 names different: declaration 'vpid' definition 'bucket_vpid_p'. [funcArgNamesDifferent]
ehash_find_depth (THREAD_ENTRY * thread_p, EHID * ehid_p, int location, VPID * bucket_vpid_p, VPID * sibling_vpid_p)
                                                                               ^
src/storage/extendible_hash.c:281:90: note: Function 'ehash_find_depth' argument 4 names different: declaration 'vpid' definition 'bucket_vpid_p'.
static char ehash_find_depth (THREAD_ENTRY * thread_p, EHID * ehid, int location, VPID * vpid, VPID * sib_vpid);
                                                                                         ^
src/storage/extendible_hash.c:3175:80: note: Function 'ehash_find_depth' argument 4 names different: declaration 'vpid' definition 'bucket_vpid_p'.
ehash_find_depth (THREAD_ENTRY * thread_p, EHID * ehid_p, int location, VPID * bucket_vpid_p, VPID * sibling_vpid_p)
                                                                               ^
src/storage/extendible_hash.c:3175:102: style:inconclusive: Function 'ehash_find_depth' argument 5 names different: declaration 'sib_vpid' definition 'sibling_vpid_p'. [funcArgNamesDifferent]
ehash_find_depth (THREAD_ENTRY * thread_p, EHID * ehid_p, int location, VPID * bucket_vpid_p, VPID * sibling_vpid_p)
                                                                                                     ^
src/storage/extendible_hash.c:281:103: note: Function 'ehash_find_depth' argument 5 names different: declaration 'sib_vpid' definition 'sibling_vpid_p'.
static char ehash_find_depth (THREAD_ENTRY * thread_p, EHID * ehid, int location, VPID * vpid, VPID * sib_vpid);
                                                                                                      ^
src/storage/extendible_hash.c:3175:102: note: Function 'ehash_find_depth' argument 5 names different: declaration 'sib_vpid' definition 'sibling_vpid_p'.
ehash_find_depth (THREAD_ENTRY * thread_p, EHID * ehid_p, int location, VPID * bucket_vpid_p, VPID * sibling_vpid_p)
                                                                                                     ^
src/storage/extendible_hash.c:3266:61: style:inconclusive: Function 'ehash_check_merge_possible' argument 2 names different: declaration 'ehid' definition 'ehid_p'. [funcArgNamesDifferent]
ehash_check_merge_possible (THREAD_ENTRY * thread_p, EHID * ehid_p, EHASH_DIR_HEADER * dir_header_p,
                                                            ^
src/storage/extendible_hash.c:311:81: note: Function 'ehash_check_merge_possible' argument 2 names different: declaration 'ehid' definition 'ehid_p'.
static EHASH_RESULT ehash_check_merge_possible (THREAD_ENTRY * thread_p, EHID * ehid, EHASH_DIR_HEADER * dir_header,
                                                                                ^
src/storage/extendible_hash.c:3266:61: note: Function 'ehash_check_merge_possible' argument 2 names different: declaration 'ehid' definition 'ehid_p'.
ehash_check_merge_possible (THREAD_ENTRY * thread_p, EHID * ehid_p, EHASH_DIR_HEADER * dir_header_p,
                                                            ^
src/storage/extendible_hash.c:3266:88: style:inconclusive: Function 'ehash_check_merge_possible' argument 3 names different: declaration 'dir_header' definition 'dir_header_p'. [funcArgNamesDifferent]
ehash_check_merge_possible (THREAD_ENTRY * thread_p, EHID * ehid_p, EHASH_DIR_HEADER * dir_header_p,
                                                                                       ^
src/storage/extendible_hash.c:311:106: note: Function 'ehash_check_merge_possible' argument 3 names different: declaration 'dir_header' definition 'dir_header_p'.
static EHASH_RESULT ehash_check_merge_possible (THREAD_ENTRY * thread_p, EHID * ehid, EHASH_DIR_HEADER * dir_header,
                                                                                                         ^
src/storage/extendible_hash.c:3266:88: note: Function 'ehash_check_merge_possible' argument 3 names different: declaration 'dir_header' definition 'dir_header_p'.
ehash_check_merge_possible (THREAD_ENTRY * thread_p, EHID * ehid_p, EHASH_DIR_HEADER * dir_header_p,
                                                                                       ^
src/storage/extendible_hash.c:3267:15: style:inconclusive: Function 'ehash_check_merge_possible' argument 4 names different: declaration 'buc_vpid' definition 'bucket_vpid_p'. [funcArgNamesDifferent]
       VPID * bucket_vpid_p, PAGE_PTR bucket_page_p, int location, int lock_type,
              ^
src/storage/extendible_hash.c:312:14: note: Function 'ehash_check_merge_possible' argument 4 names different: declaration 'buc_vpid' definition 'bucket_vpid_p'.
      VPID * buc_vpid, PAGE_PTR buc_pgptr, int location, int lock_type,
             ^
src/storage/extendible_hash.c:3267:15: note: Function 'ehash_check_merge_possible' argument 4 names different: declaration 'buc_vpid' definition 'bucket_vpid_p'.
       VPID * bucket_vpid_p, PAGE_PTR bucket_page_p, int location, int lock_type,
              ^
src/storage/extendible_hash.c:3267:39: style:inconclusive: Function 'ehash_check_merge_possible' argument 5 names different: declaration 'buc_pgptr' definition 'bucket_page_p'. [funcArgNamesDifferent]
       VPID * bucket_vpid_p, PAGE_PTR bucket_page_p, int location, int lock_type,
                                      ^
src/storage/extendible_hash.c:312:33: note: Function 'ehash_check_merge_possible' argument 5 names different: declaration 'buc_pgptr' definition 'bucket_page_p'.
      VPID * buc_vpid, PAGE_PTR buc_pgptr, int location, int lock_type,
                                ^
src/storage/extendible_hash.c:3267:39: note: Function 'ehash_check_merge_possible' argument 5 names different: declaration 'buc_pgptr' definition 'bucket_page_p'.
       VPID * bucket_vpid_p, PAGE_PTR bucket_page_p, int location, int lock_type,
                                      ^
src/storage/extendible_hash.c:3268:13: style:inconclusive: Function 'ehash_check_merge_possible' argument 8 names different: declaration 'old_local_depth' definition 'out_old_local_depth_p'. [funcArgNamesDifferent]
       int *out_old_local_depth_p, VPID * sibling_vpid_p, PAGE_PTR * out_sibling_page_p,
            ^
src/storage/extendible_hash.c:313:12: note: Function 'ehash_check_merge_possible' argument 8 names different: declaration 'old_local_depth' definition 'out_old_local_depth_p'.
      int *old_local_depth, VPID * sib_vpid, PAGE_PTR * out_sib_pgptr,
           ^
src/storage/extendible_hash.c:3268:13: note: Function 'ehash_check_merge_possible' argument 8 names different: declaration 'old_local_depth' definition 'out_old_local_depth_p'.
       int *out_old_local_depth_p, VPID * sibling_vpid_p, PAGE_PTR * out_sibling_page_p,
            ^
src/storage/extendible_hash.c:3268:43: style:inconclusive: Function 'ehash_check_merge_possible' argument 9 names different: declaration 'sib_vpid' definition 'sibling_vpid_p'. [funcArgNamesDifferent]
       int *out_old_local_depth_p, VPID * sibling_vpid_p, PAGE_PTR * out_sibling_page_p,
                                          ^
src/storage/extendible_hash.c:313:36: note: Function 'ehash_check_merge_possible' argument 9 names different: declaration 'sib_vpid' definition 'sibling_vpid_p'.
      int *old_local_depth, VPID * sib_vpid, PAGE_PTR * out_sib_pgptr,
                                   ^
src/storage/extendible_hash.c:3268:43: note: Function 'ehash_check_merge_possible' argument 9 names different: declaration 'sib_vpid' definition 'sibling_vpid_p'.
       int *out_old_local_depth_p, VPID * sibling_vpid_p, PAGE_PTR * out_sibling_page_p,
                                          ^
src/storage/extendible_hash.c:3268:70: style:inconclusive: Function 'ehash_check_merge_possible' argument 10 names different: declaration 'out_sib_pgptr' definition 'out_sibling_page_p'. [funcArgNamesDifferent]
       int *out_old_local_depth_p, VPID * sibling_vpid_p, PAGE_PTR * out_sibling_page_p,
                                                                     ^
src/storage/extendible_hash.c:313:57: note: Function 'ehash_check_merge_possible' argument 10 names different: declaration 'out_sib_pgptr' definition 'out_sibling_page_p'.
      int *old_local_depth, VPID * sib_vpid, PAGE_PTR * out_sib_pgptr,
                                                        ^
src/storage/extendible_hash.c:3268:70: note: Function 'ehash_check_merge_possible' argument 10 names different: declaration 'out_sib_pgptr' definition 'out_sibling_page_p'.
       int *out_old_local_depth_p, VPID * sibling_vpid_p, PAGE_PTR * out_sibling_page_p,
                                                                     ^
src/storage/extendible_hash.c:3269:19: style:inconclusive: Function 'ehash_check_merge_possible' argument 11 names different: declaration 'out_first_slotid' definition 'out_first_slot_id_p'. [funcArgNamesDifferent]
       PGSLOTID * out_first_slot_id_p, int *out_num_records_p, int *out_location_p)
                  ^
src/storage/extendible_hash.c:314:18: note: Function 'ehash_check_merge_possible' argument 11 names different: declaration 'out_first_slotid' definition 'out_first_slot_id_p'.
      PGSLOTID * out_first_slotid, int *out_num_recs, int *out_loc);
                 ^
src/storage/extendible_hash.c:3269:19: note: Function 'ehash_check_merge_possible' argument 11 names different: declaration 'out_first_slotid' definition 'out_first_slot_id_p'.
       PGSLOTID * out_first_slot_id_p, int *out_num_records_p, int *out_location_p)
                  ^
src/storage/extendible_hash.c:3269:45: style:inconclusive: Function 'ehash_check_merge_possible' argument 12 names different: declaration 'out_num_recs' definition 'out_num_records_p'. [funcArgNamesDifferent]
       PGSLOTID * out_first_slot_id_p, int *out_num_records_p, int *out_location_p)
                                            ^
src/storage/extendible_hash.c:314:41: note: Function 'ehash_check_merge_possible' argument 12 names different: declaration 'out_num_recs' definition 'out_num_records_p'.
      PGSLOTID * out_first_slotid, int *out_num_recs, int *out_loc);
                                        ^
src/storage/extendible_hash.c:3269:45: note: Function 'ehash_check_merge_possible' argument 12 names different: declaration 'out_num_recs' definition 'out_num_records_p'.
       PGSLOTID * out_first_slot_id_p, int *out_num_records_p, int *out_location_p)
                                            ^
src/storage/extendible_hash.c:3269:69: style:inconclusive: Function 'ehash_check_merge_possible' argument 13 names different: declaration 'out_loc' definition 'out_location_p'. [funcArgNamesDifferent]
       PGSLOTID * out_first_slot_id_p, int *out_num_records_p, int *out_location_p)
                                                                    ^
src/storage/extendible_hash.c:314:60: note: Function 'ehash_check_merge_possible' argument 13 names different: declaration 'out_loc' definition 'out_location_p'.
      PGSLOTID * out_first_slotid, int *out_num_recs, int *out_loc);
                                                           ^
src/storage/extendible_hash.c:3269:69: note: Function 'ehash_check_merge_possible' argument 13 names different: declaration 'out_loc' definition 'out_location_p'.
       PGSLOTID * out_first_slot_id_p, int *out_num_records_p, int *out_location_p)
                                                                    ^
src/storage/extendible_hash.c:3410:47: style:inconclusive: Function 'ehash_delete' argument 2 names different: declaration 'ehid' definition 'ehid_p'. [funcArgNamesDifferent]
ehash_delete (THREAD_ENTRY * thread_p, EHID * ehid_p, void *key_p)
                                              ^
src/storage/extendible_hash.h:38:60: note: Function 'ehash_delete' argument 2 names different: declaration 'ehid' definition 'ehid_p'.
extern void *ehash_delete (THREAD_ENTRY * thread_p, EHID * ehid, void *key);
                                                           ^
src/storage/extendible_hash.c:3410:47: note: Function 'ehash_delete' argument 2 names different: declaration 'ehid' definition 'ehid_p'.
ehash_delete (THREAD_ENTRY * thread_p, EHID * ehid_p, void *key_p)
                                              ^
src/storage/extendible_hash.c:3410:61: style:inconclusive: Function 'ehash_delete' argument 3 names different: declaration 'key' definition 'key_p'. [funcArgNamesDifferent]
ehash_delete (THREAD_ENTRY * thread_p, EHID * ehid_p, void *key_p)
                                                            ^
src/storage/extendible_hash.h:38:72: note: Function 'ehash_delete' argument 3 names different: declaration 'key' definition 'key_p'.
extern void *ehash_delete (THREAD_ENTRY * thread_p, EHID * ehid, void *key);
                                                                       ^
src/storage/extendible_hash.c:3410:61: note: Function 'ehash_delete' argument 3 names different: declaration 'key' definition 'key_p'.
ehash_delete (THREAD_ENTRY * thread_p, EHID * ehid_p, void *key_p)
                                                            ^
src/storage/extendible_hash.c:3607:65: style:inconclusive: Function 'ehash_shrink_directory_if_need' argument 2 names different: declaration 'ehid' definition 'ehid_p'. [funcArgNamesDifferent]
ehash_shrink_directory_if_need (THREAD_ENTRY * thread_p, EHID * ehid_p, EHASH_DIR_HEADER * dir_header_p, bool is_temp)
                                                                ^
src/storage/extendible_hash.c:309:77: note: Function 'ehash_shrink_directory_if_need' argument 2 names different: declaration 'ehid' definition 'ehid_p'.
static void ehash_shrink_directory_if_need (THREAD_ENTRY * thread_p, EHID * ehid, EHASH_DIR_HEADER * dir_header,
                                                                            ^
src/storage/extendible_hash.c:3607:65: note: Function 'ehash_shrink_directory_if_need' argument 2 names different: declaration 'ehid' definition 'ehid_p'.
ehash_shrink_directory_if_need (THREAD_ENTRY * thread_p, EHID * ehid_p, EHASH_DIR_HEADER * dir_header_p, bool is_temp)
                                                                ^
src/storage/extendible_hash.c:3607:92: style:inconclusive: Function 'ehash_shrink_directory_if_need' argument 3 names different: declaration 'dir_header' definition 'dir_header_p'. [funcArgNamesDifferent]
ehash_shrink_directory_if_need (THREAD_ENTRY * thread_p, EHID * ehid_p, EHASH_DIR_HEADER * dir_header_p, bool is_temp)
                                                                                           ^
src/storage/extendible_hash.c:309:102: note: Function 'ehash_shrink_directory_if_need' argument 3 names different: declaration 'dir_header' definition 'dir_header_p'.
static void ehash_shrink_directory_if_need (THREAD_ENTRY * thread_p, EHID * ehid, EHASH_DIR_HEADER * dir_header,
                                                                                                     ^
src/storage/extendible_hash.c:3607:92: note: Function 'ehash_shrink_directory_if_need' argument 3 names different: declaration 'dir_header' definition 'dir_header_p'.
ehash_shrink_directory_if_need (THREAD_ENTRY * thread_p, EHID * ehid_p, EHASH_DIR_HEADER * dir_header_p, bool is_temp)
                                                                                           ^
src/storage/extendible_hash.c:3625:59: style:inconclusive: Function 'ehash_adjust_local_depth' argument 2 names different: declaration 'ehid' definition 'ehid_p'. [funcArgNamesDifferent]
ehash_adjust_local_depth (THREAD_ENTRY * thread_p, EHID * ehid_p, PAGE_PTR dir_root_page_p,
                                                          ^
src/storage/extendible_hash.c:299:71: note: Function 'ehash_adjust_local_depth' argument 2 names different: declaration 'ehid' definition 'ehid_p'.
static void ehash_adjust_local_depth (THREAD_ENTRY * thread_p, EHID * ehid, PAGE_PTR dir_Rpgptr,
                                                                      ^
src/storage/extendible_hash.c:3625:59: note: Function 'ehash_adjust_local_depth' argument 2 names different: declaration 'ehid' definition 'ehid_p'.
ehash_adjust_local_depth (THREAD_ENTRY * thread_p, EHID * ehid_p, PAGE_PTR dir_root_page_p,
                                                          ^
src/storage/extendible_hash.c:3625:76: style:inconclusive: Function 'ehash_adjust_local_depth' argument 3 names different: declaration 'dir_Rpgptr' definition 'dir_root_page_p'. [funcArgNamesDifferent]
ehash_adjust_local_depth (THREAD_ENTRY * thread_p, EHID * ehid_p, PAGE_PTR dir_root_page_p,
                                                                           ^
src/storage/extendible_hash.c:299:86: note: Function 'ehash_adjust_local_depth' argument 3 names different: declaration 'dir_Rpgptr' definition 'dir_root_page_p'.
static void ehash_adjust_local_depth (THREAD_ENTRY * thread_p, EHID * ehid, PAGE_PTR dir_Rpgptr,
                                                                                     ^
src/storage/extendible_hash.c:3625:76: note: Function 'ehash_adjust_local_depth' argument 3 names different: declaration 'dir_Rpgptr' definition 'dir_root_page_p'.
ehash_adjust_local_depth (THREAD_ENTRY * thread_p, EHID * ehid_p, PAGE_PTR dir_root_page_p,
                                                                           ^
src/storage/extendible_hash.c:3626:25: style:inconclusive: Function 'ehash_adjust_local_depth' argument 4 names different: declaration 'dir_header' definition 'dir_header_p'. [funcArgNamesDifferent]
     EHASH_DIR_HEADER * dir_header_p, int depth, int delta, bool is_temp)
                        ^
src/storage/extendible_hash.c:300:30: note: Function 'ehash_adjust_local_depth' argument 4 names different: declaration 'dir_header' definition 'dir_header_p'.
          EHASH_DIR_HEADER * dir_header, int depth, int delta, bool is_temp);
                             ^
src/storage/extendible_hash.c:3626:25: note: Function 'ehash_adjust_local_depth' argument 4 names different: declaration 'dir_header' definition 'dir_header_p'.
     EHASH_DIR_HEADER * dir_header_p, int depth, int delta, bool is_temp)
                        ^
src/storage/extendible_hash.c:3647:56: style:inconclusive: Function 'ehash_merge_permanent' argument 2 names different: declaration 'ehid' definition 'ehid_p'. [funcArgNamesDifferent]
ehash_merge_permanent (THREAD_ENTRY * thread_p, EHID * ehid_p, PAGE_PTR dir_root_page_p,
                                                       ^
src/storage/extendible_hash.c:305:67: note: Function 'ehash_merge_permanent' argument 2 names different: declaration 'ehid' definition 'ehid_p'.
static int ehash_merge_permanent (THREAD_ENTRY * thread_p, EHID * ehid, PAGE_PTR dir_Rpgptr,
                                                                  ^
src/storage/extendible_hash.c:3647:56: note: Function 'ehash_merge_permanent' argument 2 names different: declaration 'ehid' definition 'ehid_p'.
ehash_merge_permanent (THREAD_ENTRY * thread_p, EHID * ehid_p, PAGE_PTR dir_root_page_p,
                                                       ^
src/storage/extendible_hash.c:3647:73: style:inconclusive: Function 'ehash_merge_permanent' argument 3 names different: declaration 'dir_Rpgptr' definition 'dir_root_page_p'. [funcArgNamesDifferent]
ehash_merge_permanent (THREAD_ENTRY * thread_p, EHID * ehid_p, PAGE_PTR dir_root_page_p,
                                                                        ^
src/storage/extendible_hash.c:305:82: note: Function 'ehash_merge_permanent' argument 3 names different: declaration 'dir_Rpgptr' definition 'dir_root_page_p'.
static int ehash_merge_permanent (THREAD_ENTRY * thread_p, EHID * ehid, PAGE_PTR dir_Rpgptr,
                                                                                 ^
src/storage/extendible_hash.c:3647:73: note: Function 'ehash_merge_permanent' argument 3 names different: declaration 'dir_Rpgptr' definition 'dir_root_page_p'.
ehash_merge_permanent (THREAD_ENTRY * thread_p, EHID * ehid_p, PAGE_PTR dir_root_page_p,
                                                                        ^
src/storage/extendible_hash.c:3648:29: style:inconclusive: Function 'ehash_merge_permanent' argument 4 names different: declaration 'dir_header' definition 'dir_header_p'. [funcArgNamesDifferent]
         EHASH_DIR_HEADER * dir_header_p, PAGE_PTR bucket_page_p, PAGE_PTR sibling_page_p,
                            ^
src/storage/extendible_hash.c:306:26: note: Function 'ehash_merge_permanent' argument 4 names different: declaration 'dir_header' definition 'dir_header_p'.
      EHASH_DIR_HEADER * dir_header, PAGE_PTR buc_pgptr, PAGE_PTR sib_pgptr,
                         ^
src/storage/extendible_hash.c:3648:29: note: Function 'ehash_merge_permanent' argument 4 names different: declaration 'dir_header' definition 'dir_header_p'.
         EHASH_DIR_HEADER * dir_header_p, PAGE_PTR bucket_page_p, PAGE_PTR sibling_page_p,
                            ^
src/storage/extendible_hash.c:3648:52: style:inconclusive: Function 'ehash_merge_permanent' argument 5 names different: declaration 'buc_pgptr' definition 'bucket_page_p'. [funcArgNamesDifferent]
         EHASH_DIR_HEADER * dir_header_p, PAGE_PTR bucket_page_p, PAGE_PTR sibling_page_p,
                                                   ^
src/storage/extendible_hash.c:306:47: note: Function 'ehash_merge_permanent' argument 5 names different: declaration 'buc_pgptr' definition 'bucket_page_p'.
      EHASH_DIR_HEADER * dir_header, PAGE_PTR buc_pgptr, PAGE_PTR sib_pgptr,
                                              ^
src/storage/extendible_hash.c:3648:52: note: Function 'ehash_merge_permanent' argument 5 names different: declaration 'buc_pgptr' definition 'bucket_page_p'.
         EHASH_DIR_HEADER * dir_header_p, PAGE_PTR bucket_page_p, PAGE_PTR sibling_page_p,
                                                   ^
src/storage/extendible_hash.c:3648:76: style:inconclusive: Function 'ehash_merge_permanent' argument 6 names different: declaration 'sib_pgptr' definition 'sibling_page_p'. [funcArgNamesDifferent]
         EHASH_DIR_HEADER * dir_header_p, PAGE_PTR bucket_page_p, PAGE_PTR sibling_page_p,
                                                                           ^
src/storage/extendible_hash.c:306:67: note: Function 'ehash_merge_permanent' argument 6 names different: declaration 'sib_pgptr' definition 'sibling_page_p'.
      EHASH_DIR_HEADER * dir_header, PAGE_PTR buc_pgptr, PAGE_PTR sib_pgptr,
                                                                  ^
src/storage/extendible_hash.c:3648:76: note: Function 'ehash_merge_permanent' argument 6 names different: declaration 'sib_pgptr' definition 'sibling_page_p'.
         EHASH_DIR_HEADER * dir_header_p, PAGE_PTR bucket_page_p, PAGE_PTR sibling_page_p,
                                                                           ^
src/storage/extendible_hash.c:3649:17: style:inconclusive: Function 'ehash_merge_permanent' argument 7 names different: declaration 'buc_vpid' definition 'bucket_vpid_p'. [funcArgNamesDifferent]
         VPID * bucket_vpid_p, VPID * sibling_vpid_p, int num_records, int location,
                ^
src/storage/extendible_hash.c:307:14: note: Function 'ehash_merge_permanent' argument 7 names different: declaration 'buc_vpid' definition 'bucket_vpid_p'.
      VPID * buc_vpid, VPID * sib_vpid, int num_recs, int loc, PGSLOTID first_slotid,
             ^
src/storage/extendible_hash.c:3649:17: note: Function 'ehash_merge_permanent' argument 7 names different: declaration 'buc_vpid' definition 'bucket_vpid_p'.
         VPID * bucket_vpid_p, VPID * sibling_vpid_p, int num_records, int location,
                ^
src/storage/extendible_hash.c:3649:39: style:inconclusive: Function 'ehash_merge_permanent' argument 8 names different: declaration 'sib_vpid' definition 'sibling_vpid_p'. [funcArgNamesDifferent]
         VPID * bucket_vpid_p, VPID * sibling_vpid_p, int num_records, int location,
                                      ^
src/storage/extendible_hash.c:307:31: note: Function 'ehash_merge_permanent' argument 8 names different: declaration 'sib_vpid' definition 'sibling_vpid_p'.
      VPID * buc_vpid, VPID * sib_vpid, int num_recs, int loc, PGSLOTID first_slotid,
                              ^
src/storage/extendible_hash.c:3649:39: note: Function 'ehash_merge_permanent' argument 8 names different: declaration 'sib_vpid' definition 'sibling_vpid_p'.
         VPID * bucket_vpid_p, VPID * sibling_vpid_p, int num_records, int location,
                                      ^
src/storage/extendible_hash.c:3649:59: style:inconclusive: Function 'ehash_merge_permanent' argument 9 names different: declaration 'num_recs' definition 'num_records'. [funcArgNamesDifferent]
         VPID * bucket_vpid_p, VPID * sibling_vpid_p, int num_records, int location,
                                                          ^
src/storage/extendible_hash.c:307:45: note: Function 'ehash_merge_permanent' argument 9 names different: declaration 'num_recs' definition 'num_records'.
      VPID * buc_vpid, VPID * sib_vpid, int num_recs, int loc, PGSLOTID first_slotid,
                                            ^
src/storage/extendible_hash.c:3649:59: note: Function 'ehash_merge_permanent' argument 9 names different: declaration 'num_recs' definition 'num_records'.
         VPID * bucket_vpid_p, VPID * sibling_vpid_p, int num_records, int location,
                                                          ^
src/storage/extendible_hash.c:3649:76: style:inconclusive: Function 'ehash_merge_permanent' argument 10 names different: declaration 'loc' definition 'location'. [funcArgNamesDifferent]
         VPID * bucket_vpid_p, VPID * sibling_vpid_p, int num_records, int location,
                                                                           ^
src/storage/extendible_hash.c:307:59: note: Function 'ehash_merge_permanent' argument 10 names different: declaration 'loc' definition 'location'.
      VPID * buc_vpid, VPID * sib_vpid, int num_recs, int loc, PGSLOTID first_slotid,
                                                          ^
src/storage/extendible_hash.c:3649:76: note: Function 'ehash_merge_permanent' argument 10 names different: declaration 'loc' definition 'location'.
         VPID * bucket_vpid_p, VPID * sibling_vpid_p, int num_records, int location,
                                                                           ^
src/storage/extendible_hash.c:3650:19: style:inconclusive: Function 'ehash_merge_permanent' argument 11 names different: declaration 'first_slotid' definition 'first_slot_id'. [funcArgNamesDifferent]
         PGSLOTID first_slot_id, int *out_new_local_depth_p, bool is_temp)
                  ^
src/storage/extendible_hash.c:307:73: note: Function 'ehash_merge_permanent' argument 11 names different: declaration 'first_slotid' definition 'first_slot_id'.
      VPID * buc_vpid, VPID * sib_vpid, int num_recs, int loc, PGSLOTID first_slotid,
                                                                        ^
src/storage/extendible_hash.c:3650:19: note: Function 'ehash_merge_permanent' argument 11 names different: declaration 'first_slotid' definition 'first_slot_id'.
         PGSLOTID first_slot_id, int *out_new_local_depth_p, bool is_temp)
                  ^
src/storage/extendible_hash.c:3650:39: style:inconclusive: Function 'ehash_merge_permanent' argument 12 names different: declaration 'out_new_local_depth' definition 'out_new_local_depth_p'. [funcArgNamesDifferent]
         PGSLOTID first_slot_id, int *out_new_local_depth_p, bool is_temp)
                                      ^
src/storage/extendible_hash.c:308:12: note: Function 'ehash_merge_permanent' argument 12 names different: declaration 'out_new_local_depth' definition 'out_new_local_depth_p'.
      int *out_new_local_depth, bool is_temp);
           ^
src/storage/extendible_hash.c:3650:39: note: Function 'ehash_merge_permanent' argument 12 names different: declaration 'out_new_local_depth' definition 'out_new_local_depth_p'.
         PGSLOTID first_slot_id, int *out_new_local_depth_p, bool is_temp)
                                      ^
src/storage/extendible_hash.c:3763:46: style:inconclusive: Function 'ehash_merge' argument 2 names different: declaration 'ehid' definition 'ehid_p'. [funcArgNamesDifferent]
ehash_merge (THREAD_ENTRY * thread_p, EHID * ehid_p, void *key_p, bool is_temp)
                                             ^
src/storage/extendible_hash.c:282:58: note: Function 'ehash_merge' argument 2 names different: declaration 'ehid' definition 'ehid_p'.
static void ehash_merge (THREAD_ENTRY * thread_p, EHID * ehid, void *key, bool is_temp);
                                                         ^
src/storage/extendible_hash.c:3763:46: note: Function 'ehash_merge' argument 2 names different: declaration 'ehid' definition 'ehid_p'.
ehash_merge (THREAD_ENTRY * thread_p, EHID * ehid_p, void *key_p, bool is_temp)
                                             ^
src/storage/extendible_hash.c:3763:60: style:inconclusive: Function 'ehash_merge' argument 3 names different: declaration 'key' definition 'key_p'. [funcArgNamesDifferent]
ehash_merge (THREAD_ENTRY * thread_p, EHID * ehid_p, void *key_p, bool is_temp)
                                                           ^
src/storage/extendible_hash.c:282:70: note: Function 'ehash_merge' argument 3 names different: declaration 'key' definition 'key_p'.
static void ehash_merge (THREAD_ENTRY * thread_p, EHID * ehid, void *key, bool is_temp);
                                                                     ^
src/storage/extendible_hash.c:3763:60: note: Function 'ehash_merge' argument 3 names different: declaration 'key' definition 'key_p'.
ehash_merge (THREAD_ENTRY * thread_p, EHID * ehid_p, void *key_p, bool is_temp)
                                                           ^
src/storage/extendible_hash.c:3974:57: style:inconclusive: Function 'ehash_shrink_directory' argument 2 names different: declaration 'ehid' definition 'ehid_p'. [funcArgNamesDifferent]
ehash_shrink_directory (THREAD_ENTRY * thread_p, EHID * ehid_p, int new_depth, bool is_temp)
                                                        ^
src/storage/extendible_hash.c:283:69: note: Function 'ehash_shrink_directory' argument 2 names different: declaration 'ehid' definition 'ehid_p'.
static void ehash_shrink_directory (THREAD_ENTRY * thread_p, EHID * ehid, int new_depth, bool is_temp);
                                                                    ^
src/storage/extendible_hash.c:3974:57: note: Function 'ehash_shrink_directory' argument 2 names different: declaration 'ehid' definition 'ehid_p'.
ehash_shrink_directory (THREAD_ENTRY * thread_p, EHID * ehid_p, int new_depth, bool is_temp)
                                                        ^
src/storage/extendible_hash.c:4148:31: style:inconclusive: Function 'ehash_hash_string_type' argument 1 names different: declaration 'key' definition 'key_p'. [funcArgNamesDifferent]
ehash_hash_string_type (char *key_p, char *original_key_p)
                              ^
src/storage/extendible_hash.c:341:53: note: Function 'ehash_hash_string_type' argument 1 names different: declaration 'key' definition 'key_p'.
static EHASH_HASH_KEY ehash_hash_string_type (char *key, char *orig_key);
                                                    ^
src/storage/extendible_hash.c:4148:31: note: Function 'ehash_hash_string_type' argument 1 names different: declaration 'key' definition 'key_p'.
ehash_hash_string_type (char *key_p, char *original_key_p)
                              ^
src/storage/extendible_hash.c:4148:44: style:inconclusive: Function 'ehash_hash_string_type' argument 2 names different: declaration 'orig_key' definition 'original_key_p'. [funcArgNamesDifferent]
ehash_hash_string_type (char *key_p, char *original_key_p)
                                           ^
src/storage/extendible_hash.c:341:64: note: Function 'ehash_hash_string_type' argument 2 names different: declaration 'orig_key' definition 'original_key_p'.
static EHASH_HASH_KEY ehash_hash_string_type (char *key, char *orig_key);
                                                               ^
src/storage/extendible_hash.c:4148:44: note: Function 'ehash_hash_string_type' argument 2 names different: declaration 'orig_key' definition 'original_key_p'.
ehash_hash_string_type (char *key_p, char *original_key_p)
                                           ^
src/storage/extendible_hash.c:4236:36: style:inconclusive: Function 'ehash_hash_eight_bytes_type' argument 1 names different: declaration 'key' definition 'key_p'. [funcArgNamesDifferent]
ehash_hash_eight_bytes_type (char *key_p)
                                   ^
src/storage/extendible_hash.c:342:58: note: Function 'ehash_hash_eight_bytes_type' argument 1 names different: declaration 'key' definition 'key_p'.
static EHASH_HASH_KEY ehash_hash_eight_bytes_type (char *key);
                                                         ^
src/storage/extendible_hash.c:4236:36: note: Function 'ehash_hash_eight_bytes_type' argument 1 names different: declaration 'key' definition 'key_p'.
ehash_hash_eight_bytes_type (char *key_p)
                                   ^
src/storage/extendible_hash.c:4339:19: style:inconclusive: Function 'ehash_hash' argument 1 names different: declaration 'orig_key' definition 'original_key_p'. [funcArgNamesDifferent]
ehash_hash (void *original_key_p, DB_TYPE key_type)
                  ^
src/storage/extendible_hash.c:284:41: note: Function 'ehash_hash' argument 1 names different: declaration 'orig_key' definition 'original_key_p'.
static EHASH_HASH_KEY ehash_hash (void *orig_key, DB_TYPE key_type);
                                        ^
src/storage/extendible_hash.c:4339:19: note: Function 'ehash_hash' argument 1 names different: declaration 'orig_key' definition 'original_key_p'.
ehash_hash (void *original_key_p, DB_TYPE key_type)
                  ^
src/storage/extendible_hash.c:4652:51: style:inconclusive: Function 'ehash_apply_each' argument 2 names different: declaration 'ehid' definition 'ehid_p'. [funcArgNamesDifferent]
ehash_apply_each (THREAD_ENTRY * thread_p, EHID * ehid_p, RECDES * recdes_p, DB_TYPE key_type, char *bucket_record_p,
                                                  ^
src/storage/extendible_hash.c:301:62: note: Function 'ehash_apply_each' argument 2 names different: declaration 'ehid' definition 'ehid_p'.
static int ehash_apply_each (THREAD_ENTRY * thread_p, EHID * ehid, RECDES * recdes, DB_TYPE key_type, char *bucrec_ptr,
                                                             ^
src/storage/extendible_hash.c:4652:51: note: Function 'ehash_apply_each' argument 2 names different: declaration 'ehid' definition 'ehid_p'.
ehash_apply_each (THREAD_ENTRY * thread_p, EHID * ehid_p, RECDES * recdes_p, DB_TYPE key_type, char *bucket_record_p,
                                                  ^
src/storage/extendible_hash.c:4652:68: style:inconclusive: Function 'ehash_apply_each' argument 3 names different: declaration 'recdes' definition 'recdes_p'. [funcArgNamesDifferent]
ehash_apply_each (THREAD_ENTRY * thread_p, EHID * ehid_p, RECDES * recdes_p, DB_TYPE key_type, char *bucket_record_p,
                                                                   ^
src/storage/extendible_hash.c:301:77: note: Function 'ehash_apply_each' argument 3 names different: declaration 'recdes' definition 'recdes_p'.
static int ehash_apply_each (THREAD_ENTRY * thread_p, EHID * ehid, RECDES * recdes, DB_TYPE key_type, char *bucrec_ptr,
                                                                            ^
src/storage/extendible_hash.c:4652:68: note: Function 'ehash_apply_each' argument 3 names different: declaration 'recdes' definition 'recdes_p'.
ehash_apply_each (THREAD_ENTRY * thread_p, EHID * ehid_p, RECDES * recdes_p, DB_TYPE key_type, char *bucket_record_p,
                                                                   ^
src/storage/extendible_hash.c:4652:102: style:inconclusive: Function 'ehash_apply_each' argument 5 names different: declaration 'bucrec_ptr' definition 'bucket_record_p'. [funcArgNamesDifferent]
ehash_apply_each (THREAD_ENTRY * thread_p, EHID * ehid_p, RECDES * recdes_p, DB_TYPE key_type, char *bucket_record_p,
                                                                                                     ^
src/storage/extendible_hash.c:301:109: note: Function 'ehash_apply_each' argument 5 names different: declaration 'bucrec_ptr' definition 'bucket_record_p'.
static int ehash_apply_each (THREAD_ENTRY * thread_p, EHID * ehid, RECDES * recdes, DB_TYPE key_type, char *bucrec_ptr,
                                                                                                            ^
src/storage/extendible_hash.c:4652:102: note: Function 'ehash_apply_each' argument 5 names different: declaration 'bucrec_ptr' definition 'bucket_record_p'.
ehash_apply_each (THREAD_ENTRY * thread_p, EHID * ehid_p, RECDES * recdes_p, DB_TYPE key_type, char *bucket_record_p,
                                                                                                     ^
src/storage/extendible_hash.c:4653:11: style:inconclusive: Function 'ehash_apply_each' argument 6 names different: declaration 'assoc_value' definition 'assoc_value_p'. [funcArgNamesDifferent]
    OID * assoc_value_p, int *out_apply_error, int (*apply_function) (THREAD_ENTRY * thread_p, void *key,
          ^
src/storage/extendible_hash.c:302:15: note: Function 'ehash_apply_each' argument 6 names different: declaration 'assoc_value' definition 'assoc_value_p'.
        OID * assoc_value, int *out_apply_error, int (*apply_function) (THREAD_ENTRY * thread_p,
              ^
src/storage/extendible_hash.c:4653:11: note: Function 'ehash_apply_each' argument 6 names different: declaration 'assoc_value' definition 'assoc_value_p'.
    OID * assoc_value_p, int *out_apply_error, int (*apply_function) (THREAD_ENTRY * thread_p, void *key,
          ^
src/storage/extendible_hash.c:4775:44: style:inconclusive: Function 'ehash_map' argument 2 names different: declaration 'ehid' definition 'ehid_p'. [funcArgNamesDifferent]
ehash_map (THREAD_ENTRY * thread_p, EHID * ehid_p,
                                           ^
src/storage/extendible_hash.h:50:55: note: Function 'ehash_map' argument 2 names different: declaration 'ehid' definition 'ehid_p'.
extern int ehash_map (THREAD_ENTRY * thread_p, EHID * ehid,
                                                      ^
src/storage/extendible_hash.c:4775:44: note: Function 'ehash_map' argument 2 names different: declaration 'ehid' definition 'ehid_p'.
ehash_map (THREAD_ENTRY * thread_p, EHID * ehid_p,
                                           ^
src/storage/extendible_hash.c:4855:45: style:inconclusive: Function 'ehash_dump' argument 2 names different: declaration 'ehid' definition 'ehid_p'. [funcArgNamesDifferent]
ehash_dump (THREAD_ENTRY * thread_p, EHID * ehid_p)
                                            ^
src/storage/extendible_hash.h:54:57: note: Function 'ehash_dump' argument 2 names different: declaration 'ehid' definition 'ehid_p'.
extern void ehash_dump (THREAD_ENTRY * thread_p, EHID * ehid);
                                                        ^
src/storage/extendible_hash.c:4855:45: note: Function 'ehash_dump' argument 2 names different: declaration 'ehid' definition 'ehid_p'.
ehash_dump (THREAD_ENTRY * thread_p, EHID * ehid_p)
                                            ^
src/storage/extendible_hash.c:5129:54: style:inconclusive: Function 'ehash_dump_bucket' argument 2 names different: declaration 'buc_pgptr' definition 'bucket_page_p'. [funcArgNamesDifferent]
ehash_dump_bucket (THREAD_ENTRY * thread_p, PAGE_PTR bucket_page_p, DB_TYPE key_type)
                                                     ^
src/storage/extendible_hash.c:352:66: note: Function 'ehash_dump_bucket' argument 2 names different: declaration 'buc_pgptr' definition 'bucket_page_p'.
static void ehash_dump_bucket (THREAD_ENTRY * thread_p, PAGE_PTR buc_pgptr, DB_TYPE key_type);
                                                                 ^
src/storage/extendible_hash.c:5129:54: note: Function 'ehash_dump_bucket' argument 2 names different: declaration 'buc_pgptr' definition 'bucket_page_p'.
ehash_dump_bucket (THREAD_ENTRY * thread_p, PAGE_PTR bucket_page_p, DB_TYPE key_type)
                                                     ^
src/storage/extendible_hash.c:5316:63: style:inconclusive: Function 'ehash_rv_init_bucket_redo' argument 2 names different: declaration 'recv' definition 'recv_p'. [funcArgNamesDifferent]
ehash_rv_init_bucket_redo (THREAD_ENTRY * thread_p, LOG_RCV * recv_p)
                                                              ^
src/storage/extendible_hash.h:60:67: note: Function 'ehash_rv_init_bucket_redo' argument 2 names different: declaration 'recv' definition 'recv_p'.
int ehash_rv_init_bucket_redo (THREAD_ENTRY * thread_p, LOG_RCV * recv);
                                                                  ^
src/storage/extendible_hash.c:5316:63: note: Function 'ehash_rv_init_bucket_redo' argument 2 names different: declaration 'recv' definition 'recv_p'.
ehash_rv_init_bucket_redo (THREAD_ENTRY * thread_p, LOG_RCV * recv_p)
                                                              ^
src/storage/extendible_hash.c:5365:60: style:inconclusive: Function 'ehash_rv_init_dir_redo' argument 2 names different: declaration 'recv' definition 'recv_p'. [funcArgNamesDifferent]
ehash_rv_init_dir_redo (THREAD_ENTRY * thread_p, LOG_RCV * recv_p)
                                                           ^
src/storage/extendible_hash.h:61:64: note: Function 'ehash_rv_init_dir_redo' argument 2 names different: declaration 'recv' definition 'recv_p'.
int ehash_rv_init_dir_redo (THREAD_ENTRY * thread_p, LOG_RCV * recv);
                                                               ^
src/storage/extendible_hash.c:5365:60: note: Function 'ehash_rv_init_dir_redo' argument 2 names different: declaration 'recv' definition 'recv_p'.
ehash_rv_init_dir_redo (THREAD_ENTRY * thread_p, LOG_RCV * recv_p)
                                                           ^
src/storage/extendible_hash.c:5382:58: style:inconclusive: Function 'ehash_rv_insert_redo' argument 2 names different: declaration 'recv' definition 'recv_p'. [funcArgNamesDifferent]
ehash_rv_insert_redo (THREAD_ENTRY * thread_p, LOG_RCV * recv_p)
                                                         ^
src/storage/extendible_hash.h:62:62: note: Function 'ehash_rv_insert_redo' argument 2 names different: declaration 'recv' definition 'recv_p'.
int ehash_rv_insert_redo (THREAD_ENTRY * thread_p, LOG_RCV * recv);
                                                             ^
src/storage/extendible_hash.c:5382:58: note: Function 'ehash_rv_insert_redo' argument 2 names different: declaration 'recv' definition 'recv_p'.
ehash_rv_insert_redo (THREAD_ENTRY * thread_p, LOG_RCV * recv_p)
                                                         ^
src/storage/extendible_hash.c:5419:58: style:inconclusive: Function 'ehash_rv_insert_undo' argument 2 names different: declaration 'recv' definition 'recv_p'. [funcArgNamesDifferent]
ehash_rv_insert_undo (THREAD_ENTRY * thread_p, LOG_RCV * recv_p)
                                                         ^
src/storage/extendible_hash.h:63:62: note: Function 'ehash_rv_insert_undo' argument 2 names different: declaration 'recv' definition 'recv_p'.
int ehash_rv_insert_undo (THREAD_ENTRY * thread_p, LOG_RCV * recv);
                                                             ^
src/storage/extendible_hash.c:5419:58: note: Function 'ehash_rv_insert_undo' argument 2 names different: declaration 'recv' definition 'recv_p'.
ehash_rv_insert_undo (THREAD_ENTRY * thread_p, LOG_RCV * recv_p)
                                                         ^
src/storage/extendible_hash.c:5474:58: style:inconclusive: Function 'ehash_rv_delete_redo' argument 2 names different: declaration 'recv' definition 'recv_p'. [funcArgNamesDifferent]
ehash_rv_delete_redo (THREAD_ENTRY * thread_p, LOG_RCV * recv_p)
                                                         ^
src/storage/extendible_hash.h:64:62: note: Function 'ehash_rv_delete_redo' argument 2 names different: declaration 'recv' definition 'recv_p'.
int ehash_rv_delete_redo (THREAD_ENTRY * thread_p, LOG_RCV * recv);
                                                             ^
src/storage/extendible_hash.c:5474:58: note: Function 'ehash_rv_delete_redo' argument 2 names different: declaration 'recv' definition 'recv_p'.
ehash_rv_delete_redo (THREAD_ENTRY * thread_p, LOG_RCV * recv_p)
                                                         ^
src/storage/extendible_hash.c:5513:58: style:inconclusive: Function 'ehash_rv_delete_undo' argument 2 names different: declaration 'recv' definition 'recv_p'. [funcArgNamesDifferent]
ehash_rv_delete_undo (THREAD_ENTRY * thread_p, LOG_RCV * recv_p)
                                                         ^
src/storage/extendible_hash.h:65:62: note: Function 'ehash_rv_delete_undo' argument 2 names different: declaration 'recv' definition 'recv_p'.
int ehash_rv_delete_undo (THREAD_ENTRY * thread_p, LOG_RCV * recv);
                                                             ^
src/storage/extendible_hash.c:5513:58: note: Function 'ehash_rv_delete_undo' argument 2 names different: declaration 'recv' definition 'recv_p'.
ehash_rv_delete_undo (THREAD_ENTRY * thread_p, LOG_RCV * recv_p)
                                                         ^
src/storage/extendible_hash.c:5586:50: style:inconclusive: Function 'ehash_rv_delete' argument 2 names different: declaration 'ehid' definition 'ehid_p'. [funcArgNamesDifferent]
ehash_rv_delete (THREAD_ENTRY * thread_p, EHID * ehid_p, void *key_p)
                                                 ^
src/storage/extendible_hash.c:298:61: note: Function 'ehash_rv_delete' argument 2 names different: declaration 'ehid' definition 'ehid_p'.
static int ehash_rv_delete (THREAD_ENTRY * thread_p, EHID * ehid, void *key);
                                                            ^
src/storage/extendible_hash.c:5586:50: note: Function 'ehash_rv_delete' argument 2 names different: declaration 'ehid' definition 'ehid_p'.
ehash_rv_delete (THREAD_ENTRY * thread_p, EHID * ehid_p, void *key_p)
                                                 ^
src/storage/extendible_hash.c:5586:64: style:inconclusive: Function 'ehash_rv_delete' argument 3 names different: declaration 'key' definition 'key_p'. [funcArgNamesDifferent]
ehash_rv_delete (THREAD_ENTRY * thread_p, EHID * ehid_p, void *key_p)
                                                               ^
src/storage/extendible_hash.c:298:73: note: Function 'ehash_rv_delete' argument 3 names different: declaration 'key' definition 'key_p'.
static int ehash_rv_delete (THREAD_ENTRY * thread_p, EHID * ehid, void *key);
                                                                        ^
src/storage/extendible_hash.c:5586:64: note: Function 'ehash_rv_delete' argument 3 names different: declaration 'key' definition 'key_p'.
ehash_rv_delete (THREAD_ENTRY * thread_p, EHID * ehid_p, void *key_p)
                                                               ^
src/storage/extendible_hash.c:5698:56: style:inconclusive: Function 'ehash_rv_increment' argument 2 names different: declaration 'recv' definition 'recv_p'. [funcArgNamesDifferent]
ehash_rv_increment (THREAD_ENTRY * thread_p, LOG_RCV * recv_p)
                                                       ^
src/storage/extendible_hash.h:66:60: note: Function 'ehash_rv_increment' argument 2 names different: declaration 'recv' definition 'recv_p'.
int ehash_rv_increment (THREAD_ENTRY * thread_p, LOG_RCV * recv);
                                                           ^
src/storage/extendible_hash.c:5698:56: note: Function 'ehash_rv_increment' argument 2 names different: declaration 'recv' definition 'recv_p'.
ehash_rv_increment (THREAD_ENTRY * thread_p, LOG_RCV * recv_p)
                                                       ^
src/storage/extendible_hash.c:5722:66: style:inconclusive: Function 'ehash_rv_connect_bucket_redo' argument 2 names different: declaration 'recv' definition 'recv_p'. [funcArgNamesDifferent]
ehash_rv_connect_bucket_redo (THREAD_ENTRY * thread_p, LOG_RCV * recv_p)
                                                                 ^
src/storage/extendible_hash.h:67:70: note: Function 'ehash_rv_connect_bucket_redo' argument 2 names different: declaration 'recv' definition 'recv_p'.
int ehash_rv_connect_bucket_redo (THREAD_ENTRY * thread_p, LOG_RCV * recv);
                                                                     ^
src/storage/extendible_hash.c:5722:66: note: Function 'ehash_rv_connect_bucket_redo' argument 2 names different: declaration 'recv' definition 'recv_p'.
ehash_rv_connect_bucket_redo (THREAD_ENTRY * thread_p, LOG_RCV * recv_p)
                                                                 ^
src/storage/extendible_hash.c:5749:35: style:inconclusive: Function 'ehash_read_oid_from_record' argument 1 names different: declaration 'rec_p' definition 'record_p'. [funcArgNamesDifferent]
ehash_read_oid_from_record (char *record_p, OID * oid_p)
                                  ^
src/storage/extendible_hash.c:294:48: note: Function 'ehash_read_oid_from_record' argument 1 names different: declaration 'rec_p' definition 'record_p'.
static char *ehash_read_oid_from_record (char *rec_p, OID * oid_p);
                                               ^
src/storage/extendible_hash.c:5749:35: note: Function 'ehash_read_oid_from_record' argument 1 names different: declaration 'rec_p' definition 'record_p'.
ehash_read_oid_from_record (char *record_p, OID * oid_p)
                                  ^
src/storage/extendible_hash.c:5764:34: style:inconclusive: Function 'ehash_write_oid_to_record' argument 1 names different: declaration 'rec_p' definition 'record_p'. [funcArgNamesDifferent]
ehash_write_oid_to_record (char *record_p, OID * oid_p)
                                 ^
src/storage/extendible_hash.c:295:47: note: Function 'ehash_write_oid_to_record' argument 1 names different: declaration 'rec_p' definition 'record_p'.
static char *ehash_write_oid_to_record (char *rec_p, OID * oid_p);
                                              ^
src/storage/extendible_hash.c:5764:34: note: Function 'ehash_write_oid_to_record' argument 1 names different: declaration 'rec_p' definition 'record_p'.
ehash_write_oid_to_record (char *record_p, OID * oid_p)
                                 ^
src/storage/extendible_hash.c:5779:36: style:inconclusive: Function 'ehash_read_ehid_from_record' argument 1 names different: declaration 'rec_p' definition 'record_p'. [funcArgNamesDifferent]
ehash_read_ehid_from_record (char *record_p, EHID * ehid_p)
                                   ^
src/storage/extendible_hash.c:296:49: note: Function 'ehash_read_ehid_from_record' argument 1 names different: declaration 'rec_p' definition 'record_p'.
static char *ehash_read_ehid_from_record (char *rec_p, EHID * ehid_p);
                                                ^
src/storage/extendible_hash.c:5779:36: note: Function 'ehash_read_ehid_from_record' argument 1 names different: declaration 'rec_p' definition 'record_p'.
ehash_read_ehid_from_record (char *record_p, EHID * ehid_p)
                                   ^
src/storage/extendible_hash.c:5794:35: style:inconclusive: Function 'ehash_write_ehid_to_record' argument 1 names different: declaration 'rec_p' definition 'record_p'. [funcArgNamesDifferent]
ehash_write_ehid_to_record (char *record_p, EHID * ehid_p)
                                  ^
src/storage/extendible_hash.c:297:48: note: Function 'ehash_write_ehid_to_record' argument 1 names different: declaration 'rec_p' definition 'record_p'.
static char *ehash_write_ehid_to_record (char *rec_p, EHID * ehid_p);
                                               ^
src/storage/extendible_hash.c:5794:35: note: Function 'ehash_write_ehid_to_record' argument 1 names different: declaration 'rec_p' definition 'record_p'.
ehash_write_ehid_to_record (char *record_p, EHID * ehid_p)
                                  ^
src/storage/extendible_hash.c:3084:32: warning: Division by result of sizeof(). memcpy() expects a size in bytes, did you intend to multiply instead? [sizeofDivisionMemfunc]
  memcpy (&dir_header, page_p, EHASH_DIR_HEADER_SIZE);
                               ^
src/storage/extendible_hash.c:3197:32: warning: Division by result of sizeof(). memcpy() expects a size in bytes, did you intend to multiply instead? [sizeofDivisionMemfunc]
  memcpy (&dir_header, page_p, EHASH_DIR_HEADER_SIZE);
                               ^
src/storage/extendible_hash.c:3576:73: error: Uninitialized variable: ovf_vpid [uninitvar]
       (void) overflow_delete (thread_p, &dir_header_p->overflow_file, &ovf_vpid);
                                                                        ^
src/storage/extendible_hash.c:4783:35: style: Variable 'first_slot_id' is assigned a value that is never used. [unreadVariable]
  PGSLOTID slot_id, first_slot_id = NULL_SLOTID;
                                  ^
src/storage/extendible_hash.c:5483:20: style: Variable 'recdes.area_size' is assigned a value that is never used. [unreadVariable]
  recdes.area_size = recdes.length = recv_p->length - sizeof (recdes.type);
                   ^
src/storage/extendible_hash.c:800:7: warning: fprintf format string requires 1 parameter but 2 are given. [wrongPrintfScanfArgNum]
      fprintf (stdout, "key:%d", ((DB_TIMESTAMPTZ *) key)->timestamp, ((DB_TIMESTAMPTZ *) key)->tz_id);
      ^
src/storage/extendible_hash.c:809:7: warning: fprintf format string requires 2 parameters but 3 are given. [wrongPrintfScanfArgNum]
      fprintf (stdout, "key:%d,%d", ((DB_DATETIMETZ *) key)->datetime.date, ((DB_DATETIMETZ *) key)->datetime.time,
      ^
src/storage/extendible_hash.c:2095:8: portability: Casting between signed char * and float * which have an incompatible binary data representation. [invalidPointerCast]
      *(float *) record_p = *(float *) key_p;
       ^
src/storage/extendible_hash.c:2284:14: portability: Casting between signed char * and float * which have an incompatible binary data representation. [invalidPointerCast]
      f2 = *((float *) bucket_record_p);
             ^
src/storage/extendible_hash.c:4713:9: portability: Casting between signed char * * and float * which have an incompatible binary data representation. [invalidPointerCast]
      *((float *) &next_key) = *(float *) bucket_record_p;
        ^
src/storage/extendible_hash.c:4713:33: portability: Casting between signed char * and float * which have an incompatible binary data representation. [invalidPointerCast]
      *((float *) &next_key) = *(float *) bucket_record_p;
                                ^
src/storage/extendible_hash.c:5206:31: portability: Casting between signed char * and float * which have an incompatible binary data representation. [invalidPointerCast]
   printf ("    %20f      ", *(float *) bucket_record_p);
                              ^
src/storage/extendible_hash.c:524:63: style:inconclusive: Function 'ehash_compare_overflow' argument 2 names different: declaration 'ovf_vpid' definition 'ovf_vpid_p'. [funcArgNamesDifferent]
ehash_compare_overflow (THREAD_ENTRY * thread_p, const VPID * ovf_vpid_p, char *key_p, int *out_comp_result)
                                                              ^
src/storage/extendible_hash.c:255:74: note: Function 'ehash_compare_overflow' argument 2 names different: declaration 'ovf_vpid' definition 'ovf_vpid_p'.
static int ehash_compare_overflow (THREAD_ENTRY * thread_p, const VPID * ovf_vpid, char *key, int *comp_result);
                                                                         ^
src/storage/extendible_hash.c:524:63: note: Function 'ehash_compare_overflow' argument 2 names different: declaration 'ovf_vpid' definition 'ovf_vpid_p'.
ehash_compare_overflow (THREAD_ENTRY * thread_p, const VPID * ovf_vpid_p, char *key_p, int *out_comp_result)
                                                              ^
src/storage/extendible_hash.c:524:81: style:inconclusive: Function 'ehash_compare_overflow' argument 3 names different: declaration 'key' definition 'key_p'. [funcArgNamesDifferent]
ehash_compare_overflow (THREAD_ENTRY * thread_p, const VPID * ovf_vpid_p, char *key_p, int *out_comp_result)
                                                                                ^
src/storage/extendible_hash.c:255:90: note: Function 'ehash_compare_overflow' argument 3 names different: declaration 'key' definition 'key_p'.
static int ehash_compare_overflow (THREAD_ENTRY * thread_p, const VPID * ovf_vpid, char *key, int *comp_result);
                                                                                         ^
src/storage/extendible_hash.c:524:81: note: Function 'ehash_compare_overflow' argument 3 names different: declaration 'key' definition 'key_p'.
ehash_compare_overflow (THREAD_ENTRY * thread_p, const VPID * ovf_vpid_p, char *key_p, int *out_comp_result)
                                                                                ^
src/storage/extendible_hash.c:524:93: style:inconclusive: Function 'ehash_compare_overflow' argument 4 names different: declaration 'comp_result' definition 'out_comp_result'. [funcArgNamesDifferent]
ehash_compare_overflow (THREAD_ENTRY * thread_p, const VPID * ovf_vpid_p, char *key_p, int *out_comp_result)
                                                                                            ^
src/storage/extendible_hash.c:255:100: note: Function 'ehash_compare_overflow' argument 4 names different: declaration 'comp_result' definition 'out_comp_result'.
static int ehash_compare_overflow (THREAD_ENTRY * thread_p, const VPID * ovf_vpid, char *key, int *comp_result);
                                                                                                   ^
src/storage/extendible_hash.c:524:93: note: Function 'ehash_compare_overflow' argument 4 names different: declaration 'comp_result' definition 'out_comp_result'.
ehash_compare_overflow (THREAD_ENTRY * thread_p, const VPID * ovf_vpid_p, char *key_p, int *out_comp_result)
                                                                                            ^
src/storage/extendible_hash.c:574:59: style:inconclusive: Function 'ehash_compose_overflow' argument 2 names different: declaration 'recdes' definition 'recdes_p'. [funcArgNamesDifferent]
ehash_compose_overflow (THREAD_ENTRY * thread_p, RECDES * recdes_p)
                                                          ^
src/storage/extendible_hash.c:256:72: note: Function 'ehash_compose_overflow' argument 2 names different: declaration 'recdes' definition 'recdes_p'.
static char *ehash_compose_overflow (THREAD_ENTRY * thread_p, RECDES * recdes);
                                                                       ^
src/storage/extendible_hash.c:574:59: note: Function 'ehash_compose_overflow' argument 2 names different: declaration 'recdes' definition 'recdes_p'.
ehash_compose_overflow (THREAD_ENTRY * thread_p, RECDES * recdes_p)
                                                          ^
src/storage/extendible_hash.c:4266:35: style:inconclusive: Function 'ehash_hash_four_bytes_type' argument 1 names different: declaration 'key' definition 'key_p'. [funcArgNamesDifferent]
ehash_hash_four_bytes_type (char *key_p)
                                  ^
src/storage/extendible_hash.c:344:57: note: Function 'ehash_hash_four_bytes_type' argument 1 names different: declaration 'key' definition 'key_p'.
static EHASH_HASH_KEY ehash_hash_four_bytes_type (char *key);
                                                        ^
src/storage/extendible_hash.c:4266:35: note: Function 'ehash_hash_four_bytes_type' argument 1 names different: declaration 'key' definition 'key_p'.
ehash_hash_four_bytes_type (char *key_p)
                                  ^
src/storage/extendible_hash.c:4296:34: style:inconclusive: Function 'ehash_hash_two_bytes_type' argument 1 names different: declaration 'key' definition 'key_p'. [funcArgNamesDifferent]
ehash_hash_two_bytes_type (char *key_p)
                                 ^
src/storage/extendible_hash.c:345:56: note: Function 'ehash_hash_two_bytes_type' argument 1 names different: declaration 'key' definition 'key_p'.
static EHASH_HASH_KEY ehash_hash_two_bytes_type (char *key);
                                                       ^
src/storage/extendible_hash.c:4296:34: note: Function 'ehash_hash_two_bytes_type' argument 1 names different: declaration 'key' definition 'key_p'.
ehash_hash_two_bytes_type (char *key_p)
                                 ^
src/storage/extendible_hash.c:5084:53: style:inconclusive: Function 'ehash_print_bucket' argument 2 names different: declaration 'ehid' definition 'ehid_p'. [funcArgNamesDifferent]
ehash_print_bucket (THREAD_ENTRY * thread_p, EHID * ehid_p, int nth_ptr)
                                                    ^
src/storage/extendible_hash.h:56:65: note: Function 'ehash_print_bucket' argument 2 names different: declaration 'ehid' definition 'ehid_p'.
extern void ehash_print_bucket (THREAD_ENTRY * thread_p, EHID * ehid, int offset);
                                                                ^
src/storage/extendible_hash.c:5084:53: note: Function 'ehash_print_bucket' argument 2 names different: declaration 'ehid' definition 'ehid_p'.
ehash_print_bucket (THREAD_ENTRY * thread_p, EHID * ehid_p, int nth_ptr)
                                                    ^
src/storage/extendible_hash.c:5084:65: style:inconclusive: Function 'ehash_print_bucket' argument 3 names different: declaration 'offset' definition 'nth_ptr'. [funcArgNamesDifferent]
ehash_print_bucket (THREAD_ENTRY * thread_p, EHID * ehid_p, int nth_ptr)
                                                                ^
src/storage/extendible_hash.h:56:75: note: Function 'ehash_print_bucket' argument 3 names different: declaration 'offset' definition 'nth_ptr'.
extern void ehash_print_bucket (THREAD_ENTRY * thread_p, EHID * ehid, int offset);
                                                                          ^
src/storage/extendible_hash.c:5084:65: note: Function 'ehash_print_bucket' argument 3 names different: declaration 'offset' definition 'nth_ptr'.
ehash_print_bucket (THREAD_ENTRY * thread_p, EHID * ehid_p, int nth_ptr)
                                                                ^
src/storage/external_sort.c:1726:3: error: Code 'cubthread::entry_callable_task' is invalid C code. Use --std or --language to configure the language. [syntaxError]
  cubthread::entry_callable_task *task =
  ^
src/storage/external_sort.c:3033:46: error: Array 'sort_param->file_contents[8]' accessed at index -1, which is out of bounds. [negativeIndex]
        first_run = sort_param->file_contents[act].first_run;
                                             ^
src/storage/external_sort.c:3021:16: note: Assignment 'act=-1', assigned value is -1
        act = -1;
               ^
src/storage/external_sort.c:3033:46: note: Negative array index
        first_run = sort_param->file_contents[act].first_run;
                                             ^
src/storage/external_sort.c:3034:45: error: Array 'sort_param->file_contents[8]' accessed at index -1, which is out of bounds. [negativeIndex]
        cp_pages = sort_param->file_contents[act].num_pages[first_run];
                                            ^
src/storage/external_sort.c:3021:16: note: Assignment 'act=-1', assigned value is -1
        act = -1;
               ^
src/storage/external_sort.c:3034:45: note: Negative array index
        cp_pages = sort_param->file_contents[act].num_pages[first_run];
                                            ^
src/storage/external_sort.c:3813:46: error: Array 'sort_param->file_contents[8]' accessed at index -1, which is out of bounds. [negativeIndex]
        first_run = sort_param->file_contents[act].first_run;
                                             ^
src/storage/external_sort.c:3801:16: note: Assignment 'act=-1', assigned value is -1
        act = -1;
               ^
src/storage/external_sort.c:3813:46: note: Negative array index
        first_run = sort_param->file_contents[act].first_run;
                                             ^
src/storage/external_sort.c:3814:45: error: Array 'sort_param->file_contents[8]' accessed at index -1, which is out of bounds. [negativeIndex]
        cp_pages = sort_param->file_contents[act].num_pages[first_run];
                                            ^
src/storage/external_sort.c:3801:16: note: Assignment 'act=-1', assigned value is -1
        act = -1;
               ^
src/storage/external_sort.c:3814:45: note: Negative array index
        cp_pages = sort_param->file_contents[act].num_pages[first_run];
                                            ^
src/storage/external_sort.c:1226:4: style: Redundant condition: src_top<limit. 'A || (!A && B)' is equivalent to 'A || B' [redundantCondition]
   || ((src_top < limit) /* case 2: non-final merge stage */
   ^
src/storage/external_sort.c:3474:13: warning: Either the condition 'p==NULL' is redundant or there is possible null pointer dereference: s. [nullPointerRedundantCheck]
        p = s->next;
            ^
src/storage/external_sort.c:3475:15: note: Assuming that condition 'p==NULL' is not redundant
        if (p == NULL)
              ^
src/storage/external_sort.c:3474:14: note: Assignment to 'p=s->next'
        p = s->next;
             ^
src/storage/external_sort.c:3472:24: note: Assignment from 's=s->next'
    for (s = min_p; s; s = s->next)
                       ^
src/storage/external_sort.c:3474:13: note: Null pointer dereference
        p = s->next;
            ^
src/storage/external_sort.c:4217:13: warning: Either the condition 'p==NULL' is redundant or there is possible null pointer dereference: s. [nullPointerRedundantCheck]
        p = s->next;
            ^
src/storage/external_sort.c:4218:15: note: Assuming that condition 'p==NULL' is not redundant
        if (p == NULL)
              ^
src/storage/external_sort.c:4217:14: note: Assignment to 'p=s->next'
        p = s->next;
             ^
src/storage/external_sort.c:4215:24: note: Assignment from 's=s->next'
    for (s = min_p; s; s = s->next)
                       ^
src/storage/external_sort.c:4217:13: note: Null pointer dereference
        p = s->next;
            ^
src/storage/external_sort.c:2108:10: style: Variable 'result' is reassigned a value before the old one has been used. [redundantAssignment]
  result = px_node->px_result = sort_run_sort (thread_p, sort_param, vector, vector_size, 0 /* dummy */ ,
         ^
src/storage/external_sort.c:1816:10: note: result is assigned
  result = px_node->px_result;
         ^
src/storage/external_sort.c:2108:10: note: result is overwritten
  result = px_node->px_result = sort_run_sort (thread_p, sort_param, vector, vector_size, 0 /* dummy */ ,
         ^
src/storage/external_sort.c:2110:15: style: Variable 'result_size' is reassigned a value before the old one has been used. [redundantAssignment]
  result_size = px_node->px_result_size;
              ^
src/storage/external_sort.c:1817:15: note: result_size is assigned
  result_size = px_node->px_result_size;
              ^
src/storage/external_sort.c:2110:15: note: result_size is overwritten
  result_size = px_node->px_result_size;
              ^
src/storage/external_sort.c:1590:3: style:inconclusive: Statements following return, break, continue, goto or throw will never be executed. [unreachableCode]
  for (k = 0; k < size - 1; k++)
  ^
src/storage/external_sort.c:588:24: style: The scope of the variable 'sphdr' can be reduced. [variableScope]
  SLOTTED_PAGE_HEADER *sphdr;
                       ^
src/storage/external_sort.c:896:10: style: The scope of the variable 'non_dup' can be reduced. [variableScope]
  char **non_dup;
         ^
src/storage/external_sort.c:1014:9: style: The scope of the variable 'left_srun_p' can be reduced. [variableScope]
  SRUN *left_srun_p, *right_srun_p;
        ^
src/storage/external_sort.c:1015:7: style: The scope of the variable 'cmp' can be reduced. [variableScope]
  int cmp;
      ^
src/storage/external_sort.c:1016:7: style: The scope of the variable 'dup_num' can be reduced. [variableScope]
  int dup_num;
      ^
src/storage/external_sort.c:4372:7: style: The scope of the variable 'f' can be reduced. [variableScope]
  int f;
      ^
src/storage/external_sort.c:4642:7: style: The scope of the variable 'exp_num_runs' can be reduced. [variableScope]
  int exp_num_runs;
      ^
src/storage/external_sort.c:4696:7: style: The scope of the variable 'out_file' can be reduced. [variableScope]
  int out_file;
      ^
src/storage/external_sort.c:4701:10: style: The scope of the variable 'j' can be reduced. [variableScope]
  int i, j;
         ^
src/storage/external_sort.c:4865:7: style: The scope of the variable 'new_total_elements' can be reduced. [variableScope]
  int new_total_elements;
      ^
src/storage/external_sort.c:382:35: style:inconclusive: Function 'sort_spage_offsetcmp' argument 1 names different: declaration 's1' definition 'sp1'. [funcArgNamesDifferent]
sort_spage_offsetcmp (const void *sp1, const void *sp2)
                                  ^
src/storage/external_sort.c:293:46: note: Function 'sort_spage_offsetcmp' argument 1 names different: declaration 's1' definition 'sp1'.
static int sort_spage_offsetcmp (const void *s1, const void *s2);
                                             ^
src/storage/external_sort.c:382:35: note: Function 'sort_spage_offsetcmp' argument 1 names different: declaration 's1' definition 'sp1'.
sort_spage_offsetcmp (const void *sp1, const void *sp2)
                                  ^
src/storage/external_sort.c:382:52: style:inconclusive: Function 'sort_spage_offsetcmp' argument 2 names different: declaration 's2' definition 'sp2'. [funcArgNamesDifferent]
sort_spage_offsetcmp (const void *sp1, const void *sp2)
                                                   ^
src/storage/external_sort.c:293:62: note: Function 'sort_spage_offsetcmp' argument 2 names different: declaration 's2' definition 'sp2'.
static int sort_spage_offsetcmp (const void *s1, const void *s2);
                                                             ^
src/storage/external_sort.c:382:52: note: Function 'sort_spage_offsetcmp' argument 2 names different: declaration 's2' definition 'sp2'.
sort_spage_offsetcmp (const void *sp1, const void *sp2)
                                                   ^
src/storage/external_sort.c:2165:100: style:inconclusive: Function 'sort_inphase_sort' argument 4 names different: declaration 'arguments' definition 'get_arg'. [funcArgNamesDifferent]
sort_inphase_sort (THREAD_ENTRY * thread_p, SORT_PARAM * sort_param, SORT_GET_FUNC * get_fn, void *get_arg,
                                                                                                   ^
src/storage/external_sort.c:255:16: note: Function 'sort_inphase_sort' argument 4 names different: declaration 'arguments' definition 'get_arg'.
         void *arguments, unsigned int *total_numrecs);
               ^
src/storage/external_sort.c:2165:100: note: Function 'sort_inphase_sort' argument 4 names different: declaration 'arguments' definition 'get_arg'.
sort_inphase_sort (THREAD_ENTRY * thread_p, SORT_PARAM * sort_param, SORT_GET_FUNC * get_fn, void *get_arg,
                                                                                                   ^
src/storage/external_sort.c:2687:71: style:inconclusive: Function 'sort_run_flush' argument 3 names different: declaration 'out_curfile' definition 'out_file'. [funcArgNamesDifferent]
sort_run_flush (THREAD_ENTRY * thread_p, SORT_PARAM * sort_param, int out_file, int *cur_page, char *output_buffer,
                                                                      ^
src/storage/external_sort.c:280:82: note: Function 'sort_run_flush' argument 3 names different: declaration 'out_curfile' definition 'out_file'.
static int sort_run_flush (THREAD_ENTRY * thread_p, SORT_PARAM * sort_param, int out_curfile, int *cur_page,
                                                                                 ^
src/storage/external_sort.c:2687:71: note: Function 'sort_run_flush' argument 3 names different: declaration 'out_curfile' definition 'out_file'.
sort_run_flush (THREAD_ENTRY * thread_p, SORT_PARAM * sort_param, int out_file, int *cur_page, char *output_buffer,
                                                                      ^
src/storage/external_sort.c:607:13: style: Variable 'sphdr' is assigned a value that is never used. [unreadVariable]
      sphdr = (SLOTTED_PAGE_HEADER *) pgptr;
            ^
src/storage/external_sort.c:4600:11: style: Variable 'ret' is assigned a value that is never used. [unreadVariable]
  int ret = NO_ERROR;
          ^
src/storage/external_sort.c:4703:18: style: Variable 'error_code' is assigned a value that is never used. [unreadVariable]
  int error_code = NO_ERROR;
                 ^
src/storage/file_io.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 34 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/storage/file_io.c:1525:18: style: Condition 'result==FILEIO_LOCKF' is always true [knownConditionTrueFalse]
      if (result == FILEIO_LOCKF)
                 ^
src/storage/file_io.c:1403:30: note: Assignment 'result=FILEIO_LOCKF', assigned value is 0
  FILEIO_LOCKF_TYPE result = FILEIO_LOCKF;
                             ^
src/storage/file_io.c:1525:18: note: Condition 'result==FILEIO_LOCKF' is always true
      if (result == FILEIO_LOCKF)
                 ^
src/storage/file_io.c:7519:14: style: Condition 'node_p==NULL' is always false [knownConditionTrueFalse]
  if (node_p == NULL)
             ^
src/storage/file_io.c:7509:14: note: Assuming that condition 'node_p==NULL' is not redundant
  if (node_p == NULL)
             ^
src/storage/file_io.c:7519:14: note: Condition 'node_p==NULL' is always false
  if (node_p == NULL)
             ^
src/storage/file_io.c:9236:22: style: Condition 'to_read_nbytes>0' is always false [knownConditionTrueFalse]
  if (to_read_nbytes > 0)
                     ^
src/storage/file_io.c:9200:25: note: Assuming that condition 'to_read_nbytes>0' is not redundant
  while (to_read_nbytes > 0)
                        ^
src/storage/file_io.c:9236:22: note: Condition 'to_read_nbytes>0' is always false
  if (to_read_nbytes > 0)
                     ^
src/storage/file_io.c:10039:23: style: Condition 'malloc_io_pgptr==NULL' is always true [knownConditionTrueFalse]
  if (malloc_io_pgptr == NULL)
                      ^
src/storage/file_io.c:10037:34: note: Assignment 'malloc_io_pgptr=NULL', assigned value is 0
  FILEIO_PAGE *malloc_io_pgptr = NULL;
                                 ^
src/storage/file_io.c:10039:23: note: Condition 'malloc_io_pgptr==NULL' is always true
  if (malloc_io_pgptr == NULL)
                      ^
src/storage/file_io.c:10067:23: style: Condition 'malloc_io_pgptr!=NULL' is always true [knownConditionTrueFalse]
  if (malloc_io_pgptr != NULL)
                      ^
src/storage/file_io.c:10042:27: note: Assuming that condition 'malloc_io_pgptr==NULL' is not redundant
      if (malloc_io_pgptr == NULL)
                          ^
src/storage/file_io.c:10067:23: note: Condition 'malloc_io_pgptr!=NULL' is always true
  if (malloc_io_pgptr != NULL)
                      ^
src/storage/file_io.c:1519:14: error: Read and write operations without a call to a positioning function (fseek, fsetpos or rewind) or fflush in between result in undefined behaviour. [IOWithoutPositioning]
      (void) fprintf (fp, "%-10d %s %d %s %ld", *last_deleted_arv_num, login_name, (int) GETPID (), host, time (NULL));
             ^
src/storage/file_io.c:11386:16: style: Variable 'rc' is reassigned a value before the old one has been used. [redundantAssignment]
       && ((rc = sscanf (line_buf, format_string, user_response_p)) > 0))
               ^
src/storage/file_io.c:11384:7: note: rc is assigned
   rc = -1;
      ^
src/storage/file_io.c:11386:16: note: rc is overwritten
       && ((rc = sscanf (line_buf, format_string, user_response_p)) > 0))
               ^
src/storage/file_io.c:924:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i, n;
      ^
src/storage/file_io.c:924:10: style: The scope of the variable 'n' can be reduced. [variableScope]
  int i, n;
         ^
src/storage/file_io.c:1775:8: style: The scope of the variable 'login_name' can be reduced. [variableScope]
  char login_name[FILEIO_USER_NAME_SIZE];
       ^
src/storage/file_io.c:1776:8: style: The scope of the variable 'user' can be reduced. [variableScope]
  char user[FILEIO_USER_NAME_SIZE];
       ^
src/storage/file_io.c:1777:8: style: The scope of the variable 'host' can be reduced. [variableScope]
  char host[CUB_MAXHOSTNAMELEN];
       ^
src/storage/file_io.c:1778:8: style: The scope of the variable 'host2' can be reduced. [variableScope]
  char host2[CUB_MAXHOSTNAMELEN];
       ^
src/storage/file_io.c:1779:8: style: The scope of the variable 'format_string' can be reduced. [variableScope]
  char format_string[32];
       ^
src/storage/file_io.c:1823:8: style: The scope of the variable 'name_info_lock' can be reduced. [variableScope]
  char name_info_lock[PATH_MAX];
       ^
src/storage/file_io.c:3239:13: style: The scope of the variable 'max_j' can be reduced. [variableScope]
  int i, j, max_j;
            ^
src/storage/file_io.c:3265:13: style: The scope of the variable 'max_j' can be reduced. [variableScope]
  int i, j, max_j;
            ^
src/storage/file_io.c:3291:13: style: The scope of the variable 'min_j' can be reduced. [variableScope]
  int i, j, min_j, num_temp_vols;
            ^
src/storage/file_io.c:3320:13: style: The scope of the variable 'min_j' can be reduced. [variableScope]
  int i, j, min_j, num_temp_vols;
            ^
src/storage/file_io.c:3468:13: style: The scope of the variable 'max_j' can be reduced. [variableScope]
  int i, j, max_j, min_j, num_temp_vols;
            ^
src/storage/file_io.c:3468:20: style: The scope of the variable 'min_j' can be reduced. [variableScope]
  int i, j, max_j, min_j, num_temp_vols;
                   ^
src/storage/file_io.c:4033:7: style: The scope of the variable 'error_code' can be reduced. [variableScope]
  int error_code;
      ^
src/storage/file_io.c:5570:10: style: The scope of the variable 'path_size' can be reduced. [variableScope]
  size_t path_size;
         ^
src/storage/file_io.c:6184:23: style: The scope of the variable 'vol_info_p' can be reduced. [variableScope]
  FILEIO_VOLUME_INFO *vol_info_p;
                      ^
src/storage/file_io.c:6185:30: style: The scope of the variable 'sys_vol_info_p' can be reduced. [variableScope]
  FILEIO_SYSTEM_VOLUME_INFO *sys_vol_info_p;
                             ^
src/storage/file_io.c:6187:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i, j, rv;
      ^
src/storage/file_io.c:6187:10: style: The scope of the variable 'j' can be reduced. [variableScope]
  int i, j, rv;
         ^
src/storage/file_io.c:6187:13: style: The scope of the variable 'rv' can be reduced. [variableScope]
  int i, j, rv;
            ^
src/storage/file_io.c:6493:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i, j, rv;
      ^
src/storage/file_io.c:6493:10: style: The scope of the variable 'j' can be reduced. [variableScope]
  int i, j, rv;
         ^
src/storage/file_io.c:6493:13: style: The scope of the variable 'rv' can be reduced. [variableScope]
  int i, j, rv;
            ^
src/storage/file_io.c:7257:7: style: The scope of the variable 'vdes' can be reduced. [variableScope]
  int vdes, nbytes;
      ^
src/storage/file_io.c:7257:13: style: The scope of the variable 'nbytes' can be reduced. [variableScope]
  int vdes, nbytes;
            ^
src/storage/file_io.c:7448:7: style: The scope of the variable 'unit_num' can be reduced. [variableScope]
  int unit_num;
      ^
src/storage/file_io.c:8836:11: style: The scope of the variable 'nbytes' can be reduced. [variableScope]
  ssize_t nbytes;
          ^
src/storage/file_io.c:8889:14: style: The scope of the variable 'nbytes' can be reduced. [variableScope]
  int count, nbytes;
             ^
src/storage/file_io.c:9193:7: style: The scope of the variable 'nbytes' can be reduced. [variableScope]
  int nbytes;
      ^
src/storage/file_io.c:9850:15: style: The scope of the variable 'volnameptr' can be reduced. [variableScope]
  const char *volnameptr;
              ^
src/storage/file_io.c:9964:8: style: The scope of the variable 'file_path' can be reduced. [variableScope]
  char file_path[PATH_MAX];
       ^
src/storage/file_io.c:1029:61: style:inconclusive: Function 'fileio_expand_permanent_volume_info' argument 1 names different: declaration 'header' definition 'header_p'. [funcArgNamesDifferent]
fileio_expand_permanent_volume_info (FILEIO_VOLUME_HEADER * header_p, int volid)
                                                            ^
src/storage/file_io.c:507:72: note: Function 'fileio_expand_permanent_volume_info' argument 1 names different: declaration 'header' definition 'header_p'.
static int fileio_expand_permanent_volume_info (FILEIO_VOLUME_HEADER * header, int volid);
                                                                       ^
src/storage/file_io.c:1029:61: note: Function 'fileio_expand_permanent_volume_info' argument 1 names different: declaration 'header' definition 'header_p'.
fileio_expand_permanent_volume_info (FILEIO_VOLUME_HEADER * header_p, int volid)
                                                            ^
src/storage/file_io.c:1074:61: style:inconclusive: Function 'fileio_expand_temporary_volume_info' argument 1 names different: declaration 'header' definition 'header_p'. [funcArgNamesDifferent]
fileio_expand_temporary_volume_info (FILEIO_VOLUME_HEADER * header_p, int volid)
                                                            ^
src/storage/file_io.c:508:72: note: Function 'fileio_expand_temporary_volume_info' argument 1 names different: declaration 'header' definition 'header_p'.
static int fileio_expand_temporary_volume_info (FILEIO_VOLUME_HEADER * header, int volid);
                                                                       ^
src/storage/file_io.c:1074:61: note: Function 'fileio_expand_temporary_volume_info' argument 1 names different: declaration 'header' definition 'header_p'.
fileio_expand_temporary_volume_info (FILEIO_VOLUME_HEADER * header_p, int volid)
                                                            ^
src/storage/file_io.c:1118:23: style:inconclusive: Function 'fileio_ctime' argument 1 names different: declaration 'clock' definition 'clock_p'. [funcArgNamesDifferent]
fileio_ctime (INT64 * clock_p, char *buffer_p)
                      ^
src/storage/file_io.c:558:36: note: Function 'fileio_ctime' argument 1 names different: declaration 'clock' definition 'clock_p'.
static char *fileio_ctime (INT64 * clock, char *buf);
                                   ^
src/storage/file_io.c:1118:23: note: Function 'fileio_ctime' argument 1 names different: declaration 'clock' definition 'clock_p'.
fileio_ctime (INT64 * clock_p, char *buffer_p)
                      ^
src/storage/file_io.c:1118:38: style:inconclusive: Function 'fileio_ctime' argument 2 names different: declaration 'buf' definition 'buffer_p'. [funcArgNamesDifferent]
fileio_ctime (INT64 * clock_p, char *buffer_p)
                                     ^
src/storage/file_io.c:558:49: note: Function 'fileio_ctime' argument 2 names different: declaration 'buf' definition 'buffer_p'.
static char *fileio_ctime (INT64 * clock, char *buf);
                                                ^
src/storage/file_io.c:1118:38: note: Function 'fileio_ctime' argument 2 names different: declaration 'buf' definition 'buffer_p'.
fileio_ctime (INT64 * clock_p, char *buffer_p)
                                     ^
src/storage/file_io.c:1179:26: style:inconclusive: Function 'fileio_lock' argument 1 names different: declaration 'db_fullname' definition 'db_full_name_p'. [funcArgNamesDifferent]
fileio_lock (const char *db_full_name_p, const char *vol_label_p, int vol_fd, bool dowait)
                         ^
src/storage/file_io.c:519:51: note: Function 'fileio_lock' argument 1 names different: declaration 'db_fullname' definition 'db_full_name_p'.
static FILEIO_LOCKF_TYPE fileio_lock (const char *db_fullname, const char *vlabel, int vdes, bool dowait);
                                                  ^
src/storage/file_io.c:1179:26: note: Function 'fileio_lock' argument 1 names different: declaration 'db_fullname' definition 'db_full_name_p'.
fileio_lock (const char *db_full_name_p, const char *vol_label_p, int vol_fd, bool dowait)
                         ^
src/storage/file_io.c:1179:54: style:inconclusive: Function 'fileio_lock' argument 2 names different: declaration 'vlabel' definition 'vol_label_p'. [funcArgNamesDifferent]
fileio_lock (const char *db_full_name_p, const char *vol_label_p, int vol_fd, bool dowait)
                                                     ^
src/storage/file_io.c:519:76: note: Function 'fileio_lock' argument 2 names different: declaration 'vlabel' definition 'vol_label_p'.
static FILEIO_LOCKF_TYPE fileio_lock (const char *db_fullname, const char *vlabel, int vdes, bool dowait);
                                                                           ^
src/storage/file_io.c:1179:54: note: Function 'fileio_lock' argument 2 names different: declaration 'vlabel' definition 'vol_label_p'.
fileio_lock (const char *db_full_name_p, const char *vol_label_p, int vol_fd, bool dowait)
                                                     ^
src/storage/file_io.c:1179:71: style:inconclusive: Function 'fileio_lock' argument 3 names different: declaration 'vdes' definition 'vol_fd'. [funcArgNamesDifferent]
fileio_lock (const char *db_full_name_p, const char *vol_label_p, int vol_fd, bool dowait)
                                                                      ^
src/storage/file_io.c:519:88: note: Function 'fileio_lock' argument 3 names different: declaration 'vdes' definition 'vol_fd'.
static FILEIO_LOCKF_TYPE fileio_lock (const char *db_fullname, const char *vlabel, int vdes, bool dowait);
                                                                                       ^
src/storage/file_io.c:1179:71: note: Function 'fileio_lock' argument 3 names different: declaration 'vdes' definition 'vol_fd'.
fileio_lock (const char *db_full_name_p, const char *vol_label_p, int vol_fd, bool dowait)
                                                                      ^
src/storage/file_io.c:1392:38: style:inconclusive: Function 'fileio_lock_la_log_path' argument 1 names different: declaration 'db_fullname' definition 'db_full_name_p'. [funcArgNamesDifferent]
fileio_lock_la_log_path (const char *db_full_name_p, const char *lock_path_p, int vol_fd, int *last_deleted_arv_num)
                                     ^
src/storage/file_io.h:599:63: note: Function 'fileio_lock_la_log_path' argument 1 names different: declaration 'db_fullname' definition 'db_full_name_p'.
extern FILEIO_LOCKF_TYPE fileio_lock_la_log_path (const char *db_fullname, const char *lock_path, int vdes,
                                                              ^
src/storage/file_io.c:1392:38: note: Function 'fileio_lock_la_log_path' argument 1 names different: declaration 'db_fullname' definition 'db_full_name_p'.
fileio_lock_la_log_path (const char *db_full_name_p, const char *lock_path_p, int vol_fd, int *last_deleted_arv_num)
                                     ^
src/storage/file_io.c:1392:66: style:inconclusive: Function 'fileio_lock_la_log_path' argument 2 names different: declaration 'lock_path' definition 'lock_path_p'. [funcArgNamesDifferent]
fileio_lock_la_log_path (const char *db_full_name_p, const char *lock_path_p, int vol_fd, int *last_deleted_arv_num)
                                                                 ^
src/storage/file_io.h:599:88: note: Function 'fileio_lock_la_log_path' argument 2 names different: declaration 'lock_path' definition 'lock_path_p'.
extern FILEIO_LOCKF_TYPE fileio_lock_la_log_path (const char *db_fullname, const char *lock_path, int vdes,
                                                                                       ^
src/storage/file_io.c:1392:66: note: Function 'fileio_lock_la_log_path' argument 2 names different: declaration 'lock_path' definition 'lock_path_p'.
fileio_lock_la_log_path (const char *db_full_name_p, const char *lock_path_p, int vol_fd, int *last_deleted_arv_num)
                                                                 ^
src/storage/file_io.c:1392:83: style:inconclusive: Function 'fileio_lock_la_log_path' argument 3 names different: declaration 'vdes' definition 'vol_fd'. [funcArgNamesDifferent]
fileio_lock_la_log_path (const char *db_full_name_p, const char *lock_path_p, int vol_fd, int *last_deleted_arv_num)
                                                                                  ^
src/storage/file_io.h:599:103: note: Function 'fileio_lock_la_log_path' argument 3 names different: declaration 'vdes' definition 'vol_fd'.
extern FILEIO_LOCKF_TYPE fileio_lock_la_log_path (const char *db_fullname, const char *lock_path, int vdes,
                                                                                                      ^
src/storage/file_io.c:1392:83: note: Function 'fileio_lock_la_log_path' argument 3 names different: declaration 'vdes' definition 'vol_fd'.
fileio_lock_la_log_path (const char *db_full_name_p, const char *lock_path_p, int vol_fd, int *last_deleted_arv_num)
                                                                                  ^
src/storage/file_io.c:1821:28: style:inconclusive: Function 'fileio_unlock' argument 1 names different: declaration 'vlabel' definition 'vol_label_p'. [funcArgNamesDifferent]
fileio_unlock (const char *vol_label_p, int vol_fd, FILEIO_LOCKF_TYPE lockf_type)
                           ^
src/storage/file_io.c:520:40: note: Function 'fileio_unlock' argument 1 names different: declaration 'vlabel' definition 'vol_label_p'.
static void fileio_unlock (const char *vlabel, int vdes, FILEIO_LOCKF_TYPE lockf_type);
                                       ^
src/storage/file_io.c:1821:28: note: Function 'fileio_unlock' argument 1 names different: declaration 'vlabel' definition 'vol_label_p'.
fileio_unlock (const char *vol_label_p, int vol_fd, FILEIO_LOCKF_TYPE lockf_type)
                           ^
src/storage/file_io.c:1821:45: style:inconclusive: Function 'fileio_unlock' argument 2 names different: declaration 'vdes' definition 'vol_fd'. [funcArgNamesDifferent]
fileio_unlock (const char *vol_label_p, int vol_fd, FILEIO_LOCKF_TYPE lockf_type)
                                            ^
src/storage/file_io.c:520:52: note: Function 'fileio_unlock' argument 2 names different: declaration 'vdes' definition 'vol_fd'.
static void fileio_unlock (const char *vlabel, int vdes, FILEIO_LOCKF_TYPE lockf_type);
                                                   ^
src/storage/file_io.c:1821:45: note: Function 'fileio_unlock' argument 2 names different: declaration 'vdes' definition 'vol_fd'.
fileio_unlock (const char *vol_label_p, int vol_fd, FILEIO_LOCKF_TYPE lockf_type)
                                            ^
src/storage/file_io.c:1864:55: style:inconclusive: Function 'fileio_initialize_pages' argument 2 names different: declaration 'vdes' definition 'vol_fd'. [funcArgNamesDifferent]
fileio_initialize_pages (THREAD_ENTRY * thread_p, int vol_fd, FILEIO_PAGE * io_page_p, DKNPAGES start_pageid,
                                                      ^
src/storage/file_io.h:465:68: note: Function 'fileio_initialize_pages' argument 2 names different: declaration 'vdes' definition 'vol_fd'.
extern void *fileio_initialize_pages (THREAD_ENTRY * thread_p, int vdes, FILEIO_PAGE * io_pgptr, DKNPAGES start_pageid,
                                                                   ^
src/storage/file_io.c:1864:55: note: Function 'fileio_initialize_pages' argument 2 names different: declaration 'vdes' definition 'vol_fd'.
fileio_initialize_pages (THREAD_ENTRY * thread_p, int vol_fd, FILEIO_PAGE * io_page_p, DKNPAGES start_pageid,
                                                      ^
src/storage/file_io.c:1864:77: style:inconclusive: Function 'fileio_initialize_pages' argument 3 names different: declaration 'io_pgptr' definition 'io_page_p'. [funcArgNamesDifferent]
fileio_initialize_pages (THREAD_ENTRY * thread_p, int vol_fd, FILEIO_PAGE * io_page_p, DKNPAGES start_pageid,
                                                                            ^
src/storage/file_io.h:465:88: note: Function 'fileio_initialize_pages' argument 3 names different: declaration 'io_pgptr' definition 'io_page_p'.
extern void *fileio_initialize_pages (THREAD_ENTRY * thread_p, int vdes, FILEIO_PAGE * io_pgptr, DKNPAGES start_pageid,
                                                                                       ^
src/storage/file_io.c:1864:77: note: Function 'fileio_initialize_pages' argument 3 names different: declaration 'io_pgptr' definition 'io_page_p'.
fileio_initialize_pages (THREAD_ENTRY * thread_p, int vol_fd, FILEIO_PAGE * io_page_p, DKNPAGES start_pageid,
                                                                            ^
src/storage/file_io.c:1957:26: style:inconclusive: Function 'fileio_open' argument 1 names different: declaration 'vlabel' definition 'vol_label_p'. [funcArgNamesDifferent]
fileio_open (const char *vol_label_p, int flags, int mode)
                         ^
src/storage/file_io.h:457:37: note: Function 'fileio_open' argument 1 names different: declaration 'vlabel' definition 'vol_label_p'.
extern int fileio_open (const char *vlabel, int flags, int mode);
                                    ^
src/storage/file_io.c:1957:26: note: Function 'fileio_open' argument 1 names different: declaration 'vlabel' definition 'vol_label_p'.
fileio_open (const char *vol_label_p, int flags, int mode)
                         ^
src/storage/file_io.c:2002:36: style:inconclusive: Function 'fileio_set_permission' argument 1 names different: declaration 'vlabel' definition 'vol_label_p'. [funcArgNamesDifferent]
fileio_set_permission (const char *vol_label_p)
                                   ^
src/storage/file_io.h:604:47: note: Function 'fileio_set_permission' argument 1 names different: declaration 'vlabel' definition 'vol_label_p'.
extern int fileio_set_permission (const char *vlabel);
                                              ^
src/storage/file_io.c:2002:36: note: Function 'fileio_set_permission' argument 1 names different: declaration 'vlabel' definition 'vol_label_p'.
fileio_set_permission (const char *vol_label_p)
                                   ^
src/storage/file_io.c:2039:38: style:inconclusive: Function 'fileio_get_lock' argument 2 names different: declaration 'vlabel' definition 'vol_label_p'. [funcArgNamesDifferent]
fileio_get_lock (int fd, const char *vol_label_p)
                                     ^
src/storage/file_io.c:568:49: note: Function 'fileio_get_lock' argument 2 names different: declaration 'vlabel' definition 'vol_label_p'.
static int fileio_get_lock (int fd, const char *vlabel);
                                                ^
src/storage/file_io.c:2039:38: note: Function 'fileio_get_lock' argument 2 names different: declaration 'vlabel' definition 'vol_label_p'.
fileio_get_lock (int fd, const char *vol_label_p)
                                     ^
src/storage/file_io.c:2078:19: style:inconclusive: Function 'fileio_close' argument 1 names different: declaration 'vdes' definition 'vol_fd'. [funcArgNamesDifferent]
fileio_close (int vol_fd)
                  ^
src/storage/file_io.h:458:31: note: Function 'fileio_close' argument 1 names different: declaration 'vdes' definition 'vol_fd'.
extern void fileio_close (int vdes);
                              ^
src/storage/file_io.c:2078:19: note: Function 'fileio_close' argument 1 names different: declaration 'vdes' definition 'vol_fd'.
fileio_close (int vol_fd)
                  ^
src/storage/file_io.c:2104:53: style:inconclusive: Function 'fileio_create' argument 2 names different: declaration 'db_fullname' definition 'db_full_name_p'. [funcArgNamesDifferent]
fileio_create (THREAD_ENTRY * thread_p, const char *db_full_name_p, const char *vol_label_p, VOLID vol_id,
                                                    ^
src/storage/file_io.c:470:64: note: Function 'fileio_create' argument 2 names different: declaration 'db_fullname' definition 'db_full_name_p'.
static int fileio_create (THREAD_ENTRY * thread_p, const char *db_fullname, const char *vlabel, VOLID volid,
                                                               ^
src/storage/file_io.c:2104:53: note: Function 'fileio_create' argument 2 names different: declaration 'db_fullname' definition 'db_full_name_p'.
fileio_create (THREAD_ENTRY * thread_p, const char *db_full_name_p, const char *vol_label_p, VOLID vol_id,
                                                    ^
src/storage/file_io.c:2104:81: style:inconclusive: Function 'fileio_create' argument 3 names different: declaration 'vlabel' definition 'vol_label_p'. [funcArgNamesDifferent]
fileio_create (THREAD_ENTRY * thread_p, const char *db_full_name_p, const char *vol_label_p, VOLID vol_id,
                                                                                ^
src/storage/file_io.c:470:89: note: Function 'fileio_create' argument 3 names different: declaration 'vlabel' definition 'vol_label_p'.
static int fileio_create (THREAD_ENTRY * thread_p, const char *db_fullname, const char *vlabel, VOLID volid,
                                                                                        ^
src/storage/file_io.c:2104:81: note: Function 'fileio_create' argument 3 names different: declaration 'vlabel' definition 'vol_label_p'.
fileio_create (THREAD_ENTRY * thread_p, const char *db_full_name_p, const char *vol_label_p, VOLID vol_id,
                                                                                ^
src/storage/file_io.c:2104:100: style:inconclusive: Function 'fileio_create' argument 4 names different: declaration 'volid' definition 'vol_id'. [funcArgNamesDifferent]
fileio_create (THREAD_ENTRY * thread_p, const char *db_full_name_p, const char *vol_label_p, VOLID vol_id,
                                                                                                   ^
src/storage/file_io.c:470:103: note: Function 'fileio_create' argument 4 names different: declaration 'volid' definition 'vol_id'.
static int fileio_create (THREAD_ENTRY * thread_p, const char *db_fullname, const char *vlabel, VOLID volid,
                                                                                                      ^
src/storage/file_io.c:2104:100: note: Function 'fileio_create' argument 4 names different: declaration 'volid' definition 'vol_id'.
fileio_create (THREAD_ENTRY * thread_p, const char *db_full_name_p, const char *vol_label_p, VOLID vol_id,
                                                                                                   ^
src/storage/file_io.c:2105:14: style:inconclusive: Function 'fileio_create' argument 5 names different: declaration 'dolock' definition 'is_do_lock'. [funcArgNamesDifferent]
        bool is_do_lock, bool is_do_sync)
             ^
src/storage/file_io.c:471:11: note: Function 'fileio_create' argument 5 names different: declaration 'dolock' definition 'is_do_lock'.
     bool dolock, bool dosync);
          ^
src/storage/file_io.c:2105:14: note: Function 'fileio_create' argument 5 names different: declaration 'dolock' definition 'is_do_lock'.
        bool is_do_lock, bool is_do_sync)
             ^
src/storage/file_io.c:2105:31: style:inconclusive: Function 'fileio_create' argument 6 names different: declaration 'dosync' definition 'is_do_sync'. [funcArgNamesDifferent]
        bool is_do_lock, bool is_do_sync)
                              ^
src/storage/file_io.c:471:24: note: Function 'fileio_create' argument 6 names different: declaration 'dosync' definition 'is_do_sync'.
     bool dolock, bool dosync);
                       ^
src/storage/file_io.c:2105:31: note: Function 'fileio_create' argument 6 names different: declaration 'dosync' definition 'is_do_sync'.
        bool is_do_lock, bool is_do_sync)
                              ^
src/storage/file_io.c:2236:67: style:inconclusive: Function 'fileio_create_backup_volume' argument 2 names different: declaration 'db_fullname' definition 'db_full_name_p'. [funcArgNamesDifferent]
fileio_create_backup_volume (THREAD_ENTRY * thread_p, const char *db_full_name_p, const char *vol_label_p, VOLID vol_id,
                                                                  ^
src/storage/file_io.c:472:78: note: Function 'fileio_create_backup_volume' argument 2 names different: declaration 'db_fullname' definition 'db_full_name_p'.
static int fileio_create_backup_volume (THREAD_ENTRY * thread_p, const char *db_fullname, const char *vlabel,
                                                                             ^
src/storage/file_io.c:2236:67: note: Function 'fileio_create_backup_volume' argument 2 names different: declaration 'db_fullname' definition 'db_full_name_p'.
fileio_create_backup_volume (THREAD_ENTRY * thread_p, const char *db_full_name_p, const char *vol_label_p, VOLID vol_id,
                                                                  ^
src/storage/file_io.c:2236:95: style:inconclusive: Function 'fileio_create_backup_volume' argument 3 names different: declaration 'vlabel' definition 'vol_label_p'. [funcArgNamesDifferent]
fileio_create_backup_volume (THREAD_ENTRY * thread_p, const char *db_full_name_p, const char *vol_label_p, VOLID vol_id,
                                                                                              ^
src/storage/file_io.c:472:103: note: Function 'fileio_create_backup_volume' argument 3 names different: declaration 'vlabel' definition 'vol_label_p'.
static int fileio_create_backup_volume (THREAD_ENTRY * thread_p, const char *db_fullname, const char *vlabel,
                                                                                                      ^
src/storage/file_io.c:2236:95: note: Function 'fileio_create_backup_volume' argument 3 names different: declaration 'vlabel' definition 'vol_label_p'.
fileio_create_backup_volume (THREAD_ENTRY * thread_p, const char *db_full_name_p, const char *vol_label_p, VOLID vol_id,
                                                                                              ^
src/storage/file_io.c:2236:114: style:inconclusive: Function 'fileio_create_backup_volume' argument 4 names different: declaration 'volid' definition 'vol_id'. [funcArgNamesDifferent]
fileio_create_backup_volume (THREAD_ENTRY * thread_p, const char *db_full_name_p, const char *vol_label_p, VOLID vol_id,
                                                                                                                 ^
src/storage/file_io.c:473:12: note: Function 'fileio_create_backup_volume' argument 4 names different: declaration 'volid' definition 'vol_id'.
     VOLID volid, bool dolock, bool dosync, int atleast_pages);
           ^
src/storage/file_io.c:2236:114: note: Function 'fileio_create_backup_volume' argument 4 names different: declaration 'volid' definition 'vol_id'.
fileio_create_backup_volume (THREAD_ENTRY * thread_p, const char *db_full_name_p, const char *vol_label_p, VOLID vol_id,
                                                                                                                 ^
src/storage/file_io.c:2237:14: style:inconclusive: Function 'fileio_create_backup_volume' argument 5 names different: declaration 'dolock' definition 'is_do_lock'. [funcArgNamesDifferent]
        bool is_do_lock, bool is_do_sync, int atleast_npages)
             ^
src/storage/file_io.c:473:24: note: Function 'fileio_create_backup_volume' argument 5 names different: declaration 'dolock' definition 'is_do_lock'.
     VOLID volid, bool dolock, bool dosync, int atleast_pages);
                       ^
src/storage/file_io.c:2237:14: note: Function 'fileio_create_backup_volume' argument 5 names different: declaration 'dolock' definition 'is_do_lock'.
        bool is_do_lock, bool is_do_sync, int atleast_npages)
             ^
src/storage/file_io.c:2237:31: style:inconclusive: Function 'fileio_create_backup_volume' argument 6 names different: declaration 'dosync' definition 'is_do_sync'. [funcArgNamesDifferent]
        bool is_do_lock, bool is_do_sync, int atleast_npages)
                              ^
src/storage/file_io.c:473:37: note: Function 'fileio_create_backup_volume' argument 6 names different: declaration 'dosync' definition 'is_do_sync'.
     VOLID volid, bool dolock, bool dosync, int atleast_pages);
                                    ^
src/storage/file_io.c:2237:31: note: Function 'fileio_create_backup_volume' argument 6 names different: declaration 'dosync' definition 'is_do_sync'.
        bool is_do_lock, bool is_do_sync, int atleast_npages)
                              ^
src/storage/file_io.c:2237:47: style:inconclusive: Function 'fileio_create_backup_volume' argument 7 names different: declaration 'atleast_pages' definition 'atleast_npages'. [funcArgNamesDifferent]
        bool is_do_lock, bool is_do_sync, int atleast_npages)
                                              ^
src/storage/file_io.c:473:49: note: Function 'fileio_create_backup_volume' argument 7 names different: declaration 'atleast_pages' definition 'atleast_npages'.
     VOLID volid, bool dolock, bool dosync, int atleast_pages);
                                                ^
src/storage/file_io.c:2237:47: note: Function 'fileio_create_backup_volume' argument 7 names different: declaration 'atleast_pages' definition 'atleast_npages'.
        bool is_do_lock, bool is_do_sync, int atleast_npages)
                                              ^
src/storage/file_io.c:2314:53: style:inconclusive: Function 'fileio_format' argument 2 names different: declaration 'db_fullname' definition 'db_full_name_p'. [funcArgNamesDifferent]
fileio_format (THREAD_ENTRY * thread_p, const char *db_full_name_p, const char *vol_label_p, VOLID vol_id,
                                                    ^
src/storage/file_io.h:459:64: note: Function 'fileio_format' argument 2 names different: declaration 'db_fullname' definition 'db_full_name_p'.
extern int fileio_format (THREAD_ENTRY * thread_p, const char *db_fullname, const char *vlabel, VOLID volid,
                                                               ^
src/storage/file_io.c:2314:53: note: Function 'fileio_format' argument 2 names different: declaration 'db_fullname' definition 'db_full_name_p'.
fileio_format (THREAD_ENTRY * thread_p, const char *db_full_name_p, const char *vol_label_p, VOLID vol_id,
                                                    ^
src/storage/file_io.c:2314:81: style:inconclusive: Function 'fileio_format' argument 3 names different: declaration 'vlabel' definition 'vol_label_p'. [funcArgNamesDifferent]
fileio_format (THREAD_ENTRY * thread_p, const char *db_full_name_p, const char *vol_label_p, VOLID vol_id,
                                                                                ^
src/storage/file_io.h:459:89: note: Function 'fileio_format' argument 3 names different: declaration 'vlabel' definition 'vol_label_p'.
extern int fileio_format (THREAD_ENTRY * thread_p, const char *db_fullname, const char *vlabel, VOLID volid,
                                                                                        ^
src/storage/file_io.c:2314:81: note: Function 'fileio_format' argument 3 names different: declaration 'vlabel' definition 'vol_label_p'.
fileio_format (THREAD_ENTRY * thread_p, const char *db_full_name_p, const char *vol_label_p, VOLID vol_id,
                                                                                ^
src/storage/file_io.c:2314:100: style:inconclusive: Function 'fileio_format' argument 4 names different: declaration 'volid' definition 'vol_id'. [funcArgNamesDifferent]
fileio_format (THREAD_ENTRY * thread_p, const char *db_full_name_p, const char *vol_label_p, VOLID vol_id,
                                                                                                   ^
src/storage/file_io.h:459:103: note: Function 'fileio_format' argument 4 names different: declaration 'volid' definition 'vol_id'.
extern int fileio_format (THREAD_ENTRY * thread_p, const char *db_fullname, const char *vlabel, VOLID volid,
                                                                                                      ^
src/storage/file_io.c:2314:100: note: Function 'fileio_format' argument 4 names different: declaration 'volid' definition 'vol_id'.
fileio_format (THREAD_ENTRY * thread_p, const char *db_full_name_p, const char *vol_label_p, VOLID vol_id,
                                                                                                   ^
src/storage/file_io.c:2315:31: style:inconclusive: Function 'fileio_format' argument 6 names different: declaration 'sweep_clean' definition 'is_sweep_clean'. [funcArgNamesDifferent]
        DKNPAGES npages, bool is_sweep_clean, bool is_do_lock, bool is_do_sync, size_t page_size,
                              ^
src/storage/file_io.h:460:28: note: Function 'fileio_format' argument 6 names different: declaration 'sweep_clean' definition 'is_sweep_clean'.
     DKNPAGES npages, bool sweep_clean, bool dolock, bool dosync, size_t page_size,
                           ^
src/storage/file_io.c:2315:31: note: Function 'fileio_format' argument 6 names different: declaration 'sweep_clean' definition 'is_sweep_clean'.
        DKNPAGES npages, bool is_sweep_clean, bool is_do_lock, bool is_do_sync, size_t page_size,
                              ^
src/storage/file_io.c:2315:52: style:inconclusive: Function 'fileio_format' argument 7 names different: declaration 'dolock' definition 'is_do_lock'. [funcArgNamesDifferent]
        DKNPAGES npages, bool is_sweep_clean, bool is_do_lock, bool is_do_sync, size_t page_size,
                                                   ^
src/storage/file_io.h:460:46: note: Function 'fileio_format' argument 7 names different: declaration 'dolock' definition 'is_do_lock'.
     DKNPAGES npages, bool sweep_clean, bool dolock, bool dosync, size_t page_size,
                                             ^
src/storage/file_io.c:2315:52: note: Function 'fileio_format' argument 7 names different: declaration 'dolock' definition 'is_do_lock'.
        DKNPAGES npages, bool is_sweep_clean, bool is_do_lock, bool is_do_sync, size_t page_size,
                                                   ^
src/storage/file_io.c:2315:69: style:inconclusive: Function 'fileio_format' argument 8 names different: declaration 'dosync' definition 'is_do_sync'. [funcArgNamesDifferent]
        DKNPAGES npages, bool is_sweep_clean, bool is_do_lock, bool is_do_sync, size_t page_size,
                                                                    ^
src/storage/file_io.h:460:59: note: Function 'fileio_format' argument 8 names different: declaration 'dosync' definition 'is_do_sync'.
     DKNPAGES npages, bool sweep_clean, bool dolock, bool dosync, size_t page_size,
                                                          ^
src/storage/file_io.c:2315:69: note: Function 'fileio_format' argument 8 names different: declaration 'dosync' definition 'is_do_sync'.
        DKNPAGES npages, bool is_sweep_clean, bool is_do_lock, bool is_do_sync, size_t page_size,
                                                                    ^
src/storage/file_io.c:2512:34: style:inconclusive: Function 'fileio_expand_to' argument 1 names different: declaration 'threda_p' definition 'thread_p'. [funcArgNamesDifferent]
fileio_expand_to (THREAD_ENTRY * thread_p, VOLID vol_id, DKNPAGES size_npages, DB_VOLTYPE voltype)
                                 ^
src/storage/file_io.h:463:45: note: Function 'fileio_expand_to' argument 1 names different: declaration 'threda_p' definition 'thread_p'.
extern int fileio_expand_to (THREAD_ENTRY * threda_p, VOLID volid, DKNPAGES npages_toadd, DB_VOLTYPE voltype);
                                            ^
src/storage/file_io.c:2512:34: note: Function 'fileio_expand_to' argument 1 names different: declaration 'threda_p' definition 'thread_p'.
fileio_expand_to (THREAD_ENTRY * thread_p, VOLID vol_id, DKNPAGES size_npages, DB_VOLTYPE voltype)
                                 ^
src/storage/file_io.c:2512:50: style:inconclusive: Function 'fileio_expand_to' argument 2 names different: declaration 'volid' definition 'vol_id'. [funcArgNamesDifferent]
fileio_expand_to (THREAD_ENTRY * thread_p, VOLID vol_id, DKNPAGES size_npages, DB_VOLTYPE voltype)
                                                 ^
src/storage/file_io.h:463:61: note: Function 'fileio_expand_to' argument 2 names different: declaration 'volid' definition 'vol_id'.
extern int fileio_expand_to (THREAD_ENTRY * threda_p, VOLID volid, DKNPAGES npages_toadd, DB_VOLTYPE voltype);
                                                            ^
src/storage/file_io.c:2512:50: note: Function 'fileio_expand_to' argument 2 names different: declaration 'volid' definition 'vol_id'.
fileio_expand_to (THREAD_ENTRY * thread_p, VOLID vol_id, DKNPAGES size_npages, DB_VOLTYPE voltype)
                                                 ^
src/storage/file_io.c:2512:67: style:inconclusive: Function 'fileio_expand_to' argument 3 names different: declaration 'npages_toadd' definition 'size_npages'. [funcArgNamesDifferent]
fileio_expand_to (THREAD_ENTRY * thread_p, VOLID vol_id, DKNPAGES size_npages, DB_VOLTYPE voltype)
                                                                  ^
src/storage/file_io.h:463:77: note: Function 'fileio_expand_to' argument 3 names different: declaration 'npages_toadd' definition 'size_npages'.
extern int fileio_expand_to (THREAD_ENTRY * threda_p, VOLID volid, DKNPAGES npages_toadd, DB_VOLTYPE voltype);
                                                                            ^
src/storage/file_io.c:2512:67: note: Function 'fileio_expand_to' argument 3 names different: declaration 'npages_toadd' definition 'size_npages'.
fileio_expand_to (THREAD_ENTRY * thread_p, VOLID vol_id, DKNPAGES size_npages, DB_VOLTYPE voltype)
                                                                  ^
src/storage/file_io.c:2721:55: style:inconclusive: Function 'fileio_unformat' argument 2 names different: declaration 'vlabel' definition 'vol_label_p'. [funcArgNamesDifferent]
fileio_unformat (THREAD_ENTRY * thread_p, const char *vol_label_p)
                                                      ^
src/storage/file_io.h:471:67: note: Function 'fileio_unformat' argument 2 names different: declaration 'vlabel' definition 'vol_label_p'.
extern void fileio_unformat (THREAD_ENTRY * thread_p, const char *vlabel);
                                                                  ^
src/storage/file_io.c:2721:55: note: Function 'fileio_unformat' argument 2 names different: declaration 'vlabel' definition 'vol_label_p'.
fileio_unformat (THREAD_ENTRY * thread_p, const char *vol_label_p)
                                                      ^
src/storage/file_io.c:2736:66: style:inconclusive: Function 'fileio_unformat_and_rename' argument 2 names different: declaration 'vlabel' definition 'vol_label_p'. [funcArgNamesDifferent]
fileio_unformat_and_rename (THREAD_ENTRY * thread_p, const char *vol_label_p, const char *new_label_p)
                                                                 ^
src/storage/file_io.h:472:78: note: Function 'fileio_unformat_and_rename' argument 2 names different: declaration 'vlabel' definition 'vol_label_p'.
extern void fileio_unformat_and_rename (THREAD_ENTRY * thread_p, const char *vlabel, const char *new_vlabel);
                                                                             ^
src/storage/file_io.c:2736:66: note: Function 'fileio_unformat_and_rename' argument 2 names different: declaration 'vlabel' definition 'vol_label_p'.
fileio_unformat_and_rename (THREAD_ENTRY * thread_p, const char *vol_label_p, const char *new_label_p)
                                                                 ^
src/storage/file_io.c:2736:91: style:inconclusive: Function 'fileio_unformat_and_rename' argument 3 names different: declaration 'new_vlabel' definition 'new_label_p'. [funcArgNamesDifferent]
fileio_unformat_and_rename (THREAD_ENTRY * thread_p, const char *vol_label_p, const char *new_label_p)
                                                                                          ^
src/storage/file_io.h:472:98: note: Function 'fileio_unformat_and_rename' argument 3 names different: declaration 'new_vlabel' definition 'new_label_p'.
extern void fileio_unformat_and_rename (THREAD_ENTRY * thread_p, const char *vlabel, const char *new_vlabel);
                                                                                                 ^
src/storage/file_io.c:2736:91: note: Function 'fileio_unformat_and_rename' argument 3 names different: declaration 'new_vlabel' definition 'new_label_p'.
fileio_unformat_and_rename (THREAD_ENTRY * thread_p, const char *vol_label_p, const char *new_label_p)
                                                                                          ^
src/storage/file_io.c:2809:50: style:inconclusive: Function 'fileio_copy_volume' argument 2 names different: declaration 'from_vdes' definition 'from_vol_desc'. [funcArgNamesDifferent]
fileio_copy_volume (THREAD_ENTRY * thread_p, int from_vol_desc, DKNPAGES npages, const char *to_vol_label_p,
                                                 ^
src/storage/file_io.h:473:61: note: Function 'fileio_copy_volume' argument 2 names different: declaration 'from_vdes' definition 'from_vol_desc'.
extern int fileio_copy_volume (THREAD_ENTRY * thread_p, int from_vdes, DKNPAGES npages, const char *to_vlabel,
                                                            ^
src/storage/file_io.c:2809:50: note: Function 'fileio_copy_volume' argument 2 names different: declaration 'from_vdes' definition 'from_vol_desc'.
fileio_copy_volume (THREAD_ENTRY * thread_p, int from_vol_desc, DKNPAGES npages, const char *to_vol_label_p,
                                                 ^
src/storage/file_io.c:2809:94: style:inconclusive: Function 'fileio_copy_volume' argument 4 names different: declaration 'to_vlabel' definition 'to_vol_label_p'. [funcArgNamesDifferent]
fileio_copy_volume (THREAD_ENTRY * thread_p, int from_vol_desc, DKNPAGES npages, const char *to_vol_label_p,
                                                                                             ^
src/storage/file_io.h:473:101: note: Function 'fileio_copy_volume' argument 4 names different: declaration 'to_vlabel' definition 'to_vol_label_p'.
extern int fileio_copy_volume (THREAD_ENTRY * thread_p, int from_vdes, DKNPAGES npages, const char *to_vlabel,
                                                                                                    ^
src/storage/file_io.c:2809:94: note: Function 'fileio_copy_volume' argument 4 names different: declaration 'to_vlabel' definition 'to_vol_label_p'.
fileio_copy_volume (THREAD_ENTRY * thread_p, int from_vol_desc, DKNPAGES npages, const char *to_vol_label_p,
                                                                                             ^
src/storage/file_io.c:2810:13: style:inconclusive: Function 'fileio_copy_volume' argument 5 names different: declaration 'to_volid' definition 'to_vol_id'. [funcArgNamesDifferent]
      VOLID to_vol_id, bool is_reset_recovery_info)
            ^
src/storage/file_io.h:474:17: note: Function 'fileio_copy_volume' argument 5 names different: declaration 'to_volid' definition 'to_vol_id'.
          VOLID to_volid, bool reset_recvinfo);
                ^
src/storage/file_io.c:2810:13: note: Function 'fileio_copy_volume' argument 5 names different: declaration 'to_volid' definition 'to_vol_id'.
      VOLID to_vol_id, bool is_reset_recovery_info)
            ^
src/storage/file_io.c:2810:29: style:inconclusive: Function 'fileio_copy_volume' argument 6 names different: declaration 'reset_recvinfo' definition 'is_reset_recovery_info'. [funcArgNamesDifferent]
      VOLID to_vol_id, bool is_reset_recovery_info)
                            ^
src/storage/file_io.h:474:32: note: Function 'fileio_copy_volume' argument 6 names different: declaration 'reset_recvinfo' definition 'is_reset_recovery_info'.
          VOLID to_volid, bool reset_recvinfo);
                               ^
src/storage/file_io.c:2810:29: note: Function 'fileio_copy_volume' argument 6 names different: declaration 'reset_recvinfo' definition 'is_reset_recovery_info'.
      VOLID to_vol_id, bool is_reset_recovery_info)
                            ^
src/storage/file_io.c:2903:51: style:inconclusive: Function 'fileio_reset_volume' argument 2 names different: declaration 'vdes' definition 'vol_fd'. [funcArgNamesDifferent]
fileio_reset_volume (THREAD_ENTRY * thread_p, int vol_fd, const char *vlabel, DKNPAGES npages,
                                                  ^
src/storage/file_io.h:475:62: note: Function 'fileio_reset_volume' argument 2 names different: declaration 'vdes' definition 'vol_fd'.
extern int fileio_reset_volume (THREAD_ENTRY * thread_p, int vdes, const char *vlabel, DKNPAGES npages,
                                                             ^
src/storage/file_io.c:2903:51: note: Function 'fileio_reset_volume' argument 2 names different: declaration 'vdes' definition 'vol_fd'.
fileio_reset_volume (THREAD_ENTRY * thread_p, int vol_fd, const char *vlabel, DKNPAGES npages,
                                                  ^
src/storage/file_io.c:2904:24: style:inconclusive: Function 'fileio_reset_volume' argument 5 names different: declaration 'reset_lsa' definition 'reset_lsa_p'. [funcArgNamesDifferent]
       const LOG_LSA * reset_lsa_p)
                       ^
src/storage/file_io.h:476:21: note: Function 'fileio_reset_volume' argument 5 names different: declaration 'reset_lsa' definition 'reset_lsa_p'.
    const LOG_LSA * reset_lsa);
                    ^
src/storage/file_io.c:2904:24: note: Function 'fileio_reset_volume' argument 5 names different: declaration 'reset_lsa' definition 'reset_lsa_p'.
       const LOG_LSA * reset_lsa_p)
                       ^
src/storage/file_io.c:2957:52: style:inconclusive: Function 'fileio_mount' argument 2 names different: declaration 'db_fullname' definition 'db_full_name_p'. [funcArgNamesDifferent]
fileio_mount (THREAD_ENTRY * thread_p, const char *db_full_name_p, const char *vol_label_p, VOLID vol_id, int lock_wait,
                                                   ^
src/storage/file_io.h:477:63: note: Function 'fileio_mount' argument 2 names different: declaration 'db_fullname' definition 'db_full_name_p'.
extern int fileio_mount (THREAD_ENTRY * thread_p, const char *db_fullname, const char *vlabel, VOLID volid,
                                                              ^
src/storage/file_io.c:2957:52: note: Function 'fileio_mount' argument 2 names different: declaration 'db_fullname' definition 'db_full_name_p'.
fileio_mount (THREAD_ENTRY * thread_p, const char *db_full_name_p, const char *vol_label_p, VOLID vol_id, int lock_wait,
                                                   ^
src/storage/file_io.c:2957:80: style:inconclusive: Function 'fileio_mount' argument 3 names different: declaration 'vlabel' definition 'vol_label_p'. [funcArgNamesDifferent]
fileio_mount (THREAD_ENTRY * thread_p, const char *db_full_name_p, const char *vol_label_p, VOLID vol_id, int lock_wait,
                                                                               ^
src/storage/file_io.h:477:88: note: Function 'fileio_mount' argument 3 names different: declaration 'vlabel' definition 'vol_label_p'.
extern int fileio_mount (THREAD_ENTRY * thread_p, const char *db_fullname, const char *vlabel, VOLID volid,
                                                                                       ^
src/storage/file_io.c:2957:80: note: Function 'fileio_mount' argument 3 names different: declaration 'vlabel' definition 'vol_label_p'.
fileio_mount (THREAD_ENTRY * thread_p, const char *db_full_name_p, const char *vol_label_p, VOLID vol_id, int lock_wait,
                                                                               ^
src/storage/file_io.c:2957:99: style:inconclusive: Function 'fileio_mount' argument 4 names different: declaration 'volid' definition 'vol_id'. [funcArgNamesDifferent]
fileio_mount (THREAD_ENTRY * thread_p, const char *db_full_name_p, const char *vol_label_p, VOLID vol_id, int lock_wait,
                                                                                                  ^
src/storage/file_io.h:477:102: note: Function 'fileio_mount' argument 4 names different: declaration 'volid' definition 'vol_id'.
extern int fileio_mount (THREAD_ENTRY * thread_p, const char *db_fullname, const char *vlabel, VOLID volid,
                                                                                                     ^
src/storage/file_io.c:2957:99: note: Function 'fileio_mount' argument 4 names different: declaration 'volid' definition 'vol_id'.
fileio_mount (THREAD_ENTRY * thread_p, const char *db_full_name_p, const char *vol_label_p, VOLID vol_id, int lock_wait,
                                                                                                  ^
src/storage/file_io.c:2957:111: style:inconclusive: Function 'fileio_mount' argument 5 names different: declaration 'lockwait' definition 'lock_wait'. [funcArgNamesDifferent]
fileio_mount (THREAD_ENTRY * thread_p, const char *db_full_name_p, const char *vol_label_p, VOLID vol_id, int lock_wait,
                                                                                                              ^
src/storage/file_io.h:478:9: note: Function 'fileio_mount' argument 5 names different: declaration 'lockwait' definition 'lock_wait'.
    int lockwait, bool dosync);
        ^
src/storage/file_io.c:2957:111: note: Function 'fileio_mount' argument 5 names different: declaration 'lockwait' definition 'lock_wait'.
fileio_mount (THREAD_ENTRY * thread_p, const char *db_full_name_p, const char *vol_label_p, VOLID vol_id, int lock_wait,
                                                                                                              ^
src/storage/file_io.c:2958:13: style:inconclusive: Function 'fileio_mount' argument 6 names different: declaration 'dosync' definition 'is_do_sync'. [funcArgNamesDifferent]
       bool is_do_sync)
            ^
src/storage/file_io.h:478:24: note: Function 'fileio_mount' argument 6 names different: declaration 'dosync' definition 'is_do_sync'.
    int lockwait, bool dosync);
                       ^
src/storage/file_io.c:2958:13: note: Function 'fileio_mount' argument 6 names different: declaration 'dosync' definition 'is_do_sync'.
       bool is_do_sync)
            ^
src/storage/file_io.c:3134:47: style:inconclusive: Function 'fileio_dismount' argument 2 names different: declaration 'vdes' definition 'vol_fd'. [funcArgNamesDifferent]
fileio_dismount (THREAD_ENTRY * thread_p, int vol_fd)
                                              ^
src/storage/file_io.h:479:59: note: Function 'fileio_dismount' argument 2 names different: declaration 'vdes' definition 'vol_fd'.
extern void fileio_dismount (THREAD_ENTRY * thread_p, int vdes);
                                                          ^
src/storage/file_io.c:3134:47: note: Function 'fileio_dismount' argument 2 names different: declaration 'vdes' definition 'vol_fd'.
fileio_dismount (THREAD_ENTRY * thread_p, int vol_fd)
                                              ^
src/storage/file_io.c:3170:61: style:inconclusive: Function 'fileio_dismount_without_fsync' argument 2 names different: declaration 'vdes' definition 'vol_fd'. [funcArgNamesDifferent]
fileio_dismount_without_fsync (THREAD_ENTRY * thread_p, int vol_fd)
                                                            ^
src/storage/file_io.h:480:73: note: Function 'fileio_dismount_without_fsync' argument 2 names different: declaration 'vdes' definition 'vol_fd'.
extern void fileio_dismount_without_fsync (THREAD_ENTRY * thread_p, int vdes);
                                                                        ^
src/storage/file_io.c:3170:61: note: Function 'fileio_dismount_without_fsync' argument 2 names different: declaration 'vdes' definition 'vol_fd'.
fileio_dismount_without_fsync (THREAD_ENTRY * thread_p, int vol_fd)
                                                            ^
src/storage/file_io.c:3597:36: style:inconclusive: Function 'fileio_page_hexa_dump' argument 1 names different: declaration 'data' definition 'src_data'. [funcArgNamesDifferent]
fileio_page_hexa_dump (const char *src_data, int length)
                                   ^
src/storage/file_io.h:628:48: note: Function 'fileio_page_hexa_dump' argument 1 names different: declaration 'data' definition 'src_data'.
extern void fileio_page_hexa_dump (const char *data, int length);
                                               ^
src/storage/file_io.c:3597:36: note: Function 'fileio_page_hexa_dump' argument 1 names different: declaration 'data' definition 'src_data'.
fileio_page_hexa_dump (const char *src_data, int length)
                                   ^
src/storage/file_io.c:4412:45: style:inconclusive: Function 'fileio_writev' argument 2 names different: declaration 'vdes' definition 'vol_fd'. [funcArgNamesDifferent]
fileio_writev (THREAD_ENTRY * thread_p, int vol_fd, void **io_page_array, PAGEID start_page_id, DKNPAGES npages,
                                            ^
src/storage/file_io.h:491:58: note: Function 'fileio_writev' argument 2 names different: declaration 'vdes' definition 'vol_fd'.
extern void *fileio_writev (THREAD_ENTRY * thread_p, int vdes, void **arrayof_io_pgptr, PAGEID start_pageid,
                                                         ^
src/storage/file_io.c:4412:45: note: Function 'fileio_writev' argument 2 names different: declaration 'vdes' definition 'vol_fd'.
fileio_writev (THREAD_ENTRY * thread_p, int vol_fd, void **io_page_array, PAGEID start_page_id, DKNPAGES npages,
                                            ^
src/storage/file_io.c:4412:60: style:inconclusive: Function 'fileio_writev' argument 3 names different: declaration 'arrayof_io_pgptr' definition 'io_page_array'. [funcArgNamesDifferent]
fileio_writev (THREAD_ENTRY * thread_p, int vol_fd, void **io_page_array, PAGEID start_page_id, DKNPAGES npages,
                                                           ^
src/storage/file_io.h:491:71: note: Function 'fileio_writev' argument 3 names different: declaration 'arrayof_io_pgptr' definition 'io_page_array'.
extern void *fileio_writev (THREAD_ENTRY * thread_p, int vdes, void **arrayof_io_pgptr, PAGEID start_pageid,
                                                                      ^
src/storage/file_io.c:4412:60: note: Function 'fileio_writev' argument 3 names different: declaration 'arrayof_io_pgptr' definition 'io_page_array'.
fileio_writev (THREAD_ENTRY * thread_p, int vol_fd, void **io_page_array, PAGEID start_page_id, DKNPAGES npages,
                                                           ^
src/storage/file_io.c:4412:82: style:inconclusive: Function 'fileio_writev' argument 4 names different: declaration 'start_pageid' definition 'start_page_id'. [funcArgNamesDifferent]
fileio_writev (THREAD_ENTRY * thread_p, int vol_fd, void **io_page_array, PAGEID start_page_id, DKNPAGES npages,
                                                                                 ^
src/storage/file_io.h:491:96: note: Function 'fileio_writev' argument 4 names different: declaration 'start_pageid' definition 'start_page_id'.
extern void *fileio_writev (THREAD_ENTRY * thread_p, int vdes, void **arrayof_io_pgptr, PAGEID start_pageid,
                                                                                               ^
src/storage/file_io.c:4412:82: note: Function 'fileio_writev' argument 4 names different: declaration 'start_pageid' definition 'start_page_id'.
fileio_writev (THREAD_ENTRY * thread_p, int vol_fd, void **io_page_array, PAGEID start_page_id, DKNPAGES npages,
                                                                                 ^
src/storage/file_io.c:4441:50: style:inconclusive: Function 'fileio_synchronize' argument 2 names different: declaration 'vdes' definition 'vol_fd'. [funcArgNamesDifferent]
fileio_synchronize (THREAD_ENTRY * thread_p, int vol_fd, const char *vlabel, FILEIO_SYNC_OPTION sync_dwb)
                                                 ^
src/storage/file_io.h:493:61: note: Function 'fileio_synchronize' argument 2 names different: declaration 'vdes' definition 'vol_fd'.
extern int fileio_synchronize (THREAD_ENTRY * thread_p, int vdes, const char *vlabel,
                                                            ^
src/storage/file_io.c:4441:50: note: Function 'fileio_synchronize' argument 2 names different: declaration 'vdes' definition 'vol_fd'.
fileio_synchronize (THREAD_ENTRY * thread_p, int vol_fd, const char *vlabel, FILEIO_SYNC_OPTION sync_dwb)
                                                 ^
src/storage/file_io.c:4441:97: style:inconclusive: Function 'fileio_synchronize' argument 4 names different: declaration 'check_sync_dwb' definition 'sync_dwb'. [funcArgNamesDifferent]
fileio_synchronize (THREAD_ENTRY * thread_p, int vol_fd, const char *vlabel, FILEIO_SYNC_OPTION sync_dwb)
                                                                                                ^
src/storage/file_io.h:494:30: note: Function 'fileio_synchronize' argument 4 names different: declaration 'check_sync_dwb' definition 'sync_dwb'.
          FILEIO_SYNC_OPTION check_sync_dwb);
                             ^
src/storage/file_io.c:4441:97: note: Function 'fileio_synchronize' argument 4 names different: declaration 'check_sync_dwb' definition 'sync_dwb'.
fileio_synchronize (THREAD_ENTRY * thread_p, int vol_fd, const char *vlabel, FILEIO_SYNC_OPTION sync_dwb)
                                                                                                ^
src/storage/file_io.c:4546:85: style:inconclusive: Function 'fileio_synchronize_sys_volume' argument 2 names different: declaration 'vol_sys_info_p' definition 'sys_vol_info_p'. [funcArgNamesDifferent]
fileio_synchronize_sys_volume (THREAD_ENTRY * thread_p, FILEIO_SYSTEM_VOLUME_INFO * sys_vol_info_p, APPLY_ARG * arg)
                                                                                    ^
src/storage/file_io.c:500:97: note: Function 'fileio_synchronize_sys_volume' argument 2 names different: declaration 'vol_sys_info_p' definition 'sys_vol_info_p'.
static bool fileio_synchronize_sys_volume (THREAD_ENTRY * thread_p, FILEIO_SYSTEM_VOLUME_INFO * vol_sys_info_p,
                                                                                                ^
src/storage/file_io.c:4546:85: note: Function 'fileio_synchronize_sys_volume' argument 2 names different: declaration 'vol_sys_info_p' definition 'sys_vol_info_p'.
fileio_synchronize_sys_volume (THREAD_ENTRY * thread_p, FILEIO_SYSTEM_VOLUME_INFO * sys_vol_info_p, APPLY_ARG * arg)
                                                                                    ^
src/storage/file_io.c:4618:55: style:inconclusive: Function 'fileio_synchronize_all' argument 2 names different: declaration 'include_log' definition 'is_include'. [funcArgNamesDifferent]
fileio_synchronize_all (THREAD_ENTRY * thread_p, bool is_include)
                                                      ^
src/storage/file_io.h:495:66: note: Function 'fileio_synchronize_all' argument 2 names different: declaration 'include_log' definition 'is_include'.
extern int fileio_synchronize_all (THREAD_ENTRY * thread_p, bool include_log);
                                                                 ^
src/storage/file_io.c:4618:55: note: Function 'fileio_synchronize_all' argument 2 names different: declaration 'include_log' definition 'is_include'.
fileio_synchronize_all (THREAD_ENTRY * thread_p, bool is_include)
                                                      ^
src/storage/file_io.c:4918:40: style:inconclusive: Function 'fileio_get_number_of_volume_pages' argument 1 names different: declaration 'vdes' definition 'vol_fd'. [funcArgNamesDifferent]
fileio_get_number_of_volume_pages (int vol_fd, size_t page_size)
                                       ^
src/storage/file_io.h:503:56: note: Function 'fileio_get_number_of_volume_pages' argument 1 names different: declaration 'vdes' definition 'vol_fd'.
extern DKNPAGES fileio_get_number_of_volume_pages (int vdes, size_t page_size);
                                                       ^
src/storage/file_io.c:4918:40: note: Function 'fileio_get_number_of_volume_pages' argument 1 names different: declaration 'vdes' definition 'vol_fd'.
fileio_get_number_of_volume_pages (int vol_fd, size_t page_size)
                                       ^
src/storage/file_io.c:4937:56: style:inconclusive: Function 'fileio_get_number_of_partition_free_pages' argument 1 names different: declaration 'path' definition 'path_p'. [funcArgNamesDifferent]
fileio_get_number_of_partition_free_pages (const char *path_p, size_t page_size)
                                                       ^
src/storage/file_io.h:516:67: note: Function 'fileio_get_number_of_partition_free_pages' argument 1 names different: declaration 'path' definition 'path_p'.
extern int fileio_get_number_of_partition_free_pages (const char *path, size_t page_size); /* remove me */
                                                                  ^
src/storage/file_io.c:4937:56: note: Function 'fileio_get_number_of_partition_free_pages' argument 1 names different: declaration 'path' definition 'path_p'.
fileio_get_number_of_partition_free_pages (const char *path_p, size_t page_size)
                                                       ^
src/storage/file_io.c:5070:22: style:inconclusive: Function 'fileio_rename' argument 1 names different: declaration 'volid' definition 'vol_id'. [funcArgNamesDifferent]
fileio_rename (VOLID vol_id, const char *old_label_p, const char *new_label_p)
                     ^
src/storage/file_io.h:518:41: note: Function 'fileio_rename' argument 1 names different: declaration 'volid' definition 'vol_id'.
extern const char *fileio_rename (VOLID volid, const char *old_vlabel, const char *new_vlabel);
                                        ^
src/storage/file_io.c:5070:22: note: Function 'fileio_rename' argument 1 names different: declaration 'volid' definition 'vol_id'.
fileio_rename (VOLID vol_id, const char *old_label_p, const char *new_label_p)
                     ^
src/storage/file_io.c:5070:42: style:inconclusive: Function 'fileio_rename' argument 2 names different: declaration 'old_vlabel' definition 'old_label_p'. [funcArgNamesDifferent]
fileio_rename (VOLID vol_id, const char *old_label_p, const char *new_label_p)
                                         ^
src/storage/file_io.h:518:60: note: Function 'fileio_rename' argument 2 names different: declaration 'old_vlabel' definition 'old_label_p'.
extern const char *fileio_rename (VOLID volid, const char *old_vlabel, const char *new_vlabel);
                                                           ^
src/storage/file_io.c:5070:42: note: Function 'fileio_rename' argument 2 names different: declaration 'old_vlabel' definition 'old_label_p'.
fileio_rename (VOLID vol_id, const char *old_label_p, const char *new_label_p)
                                         ^
src/storage/file_io.c:5070:67: style:inconclusive: Function 'fileio_rename' argument 3 names different: declaration 'new_vlabel' definition 'new_label_p'. [funcArgNamesDifferent]
fileio_rename (VOLID vol_id, const char *old_label_p, const char *new_label_p)
                                                                  ^
src/storage/file_io.h:518:84: note: Function 'fileio_rename' argument 3 names different: declaration 'new_vlabel' definition 'new_label_p'.
extern const char *fileio_rename (VOLID volid, const char *old_vlabel, const char *new_vlabel);
                                                                                   ^
src/storage/file_io.c:5070:67: note: Function 'fileio_rename' argument 3 names different: declaration 'new_vlabel' definition 'new_label_p'.
fileio_rename (VOLID vol_id, const char *old_label_p, const char *new_label_p)
                                                                  ^
src/storage/file_io.c:5094:37: style:inconclusive: Function 'fileio_is_volume_exist' argument 1 names different: declaration 'vlabel' definition 'vol_label_p'. [funcArgNamesDifferent]
fileio_is_volume_exist (const char *vol_label_p)
                                    ^
src/storage/file_io.h:519:49: note: Function 'fileio_is_volume_exist' argument 1 names different: declaration 'vlabel' definition 'vol_label_p'.
extern bool fileio_is_volume_exist (const char *vlabel);
                                                ^
src/storage/file_io.c:5094:37: note: Function 'fileio_is_volume_exist' argument 1 names different: declaration 'vlabel' definition 'vol_label_p'.
fileio_is_volume_exist (const char *vol_label_p)
                                    ^
src/storage/file_io.c:5132:46: style:inconclusive: Function 'fileio_is_volume_exist_and_file' argument 1 names different: declaration 'vlabel' definition 'vol_label_p'. [funcArgNamesDifferent]
fileio_is_volume_exist_and_file (const char *vol_label_p)
                                             ^
src/storage/file_io.h:502:58: note: Function 'fileio_is_volume_exist_and_file' argument 1 names different: declaration 'vlabel' definition 'vol_label_p'.
extern bool fileio_is_volume_exist_and_file (const char *vlabel);
                                                         ^
src/storage/file_io.c:5132:46: note: Function 'fileio_is_volume_exist_and_file' argument 1 names different: declaration 'vlabel' definition 'vol_label_p'.
fileio_is_volume_exist_and_file (const char *vol_label_p)
                                             ^
src/storage/file_io.c:5227:43: style:inconclusive: Function 'fileio_get_primitive_way_max' argument 1 names different: declaration 'path' definition 'path_p'. [funcArgNamesDifferent]
fileio_get_primitive_way_max (const char *path_p, long int *file_name_max_p, long int *path_name_max_p)
                                          ^
src/storage/file_io.c:524:54: note: Function 'fileio_get_primitive_way_max' argument 1 names different: declaration 'path' definition 'path_p'.
static int fileio_get_primitive_way_max (const char *path, long int *filename_max, long int *pathname_max);
                                                     ^
src/storage/file_io.c:5227:43: note: Function 'fileio_get_primitive_way_max' argument 1 names different: declaration 'path' definition 'path_p'.
fileio_get_primitive_way_max (const char *path_p, long int *file_name_max_p, long int *path_name_max_p)
                                          ^
src/storage/file_io.c:5227:61: style:inconclusive: Function 'fileio_get_primitive_way_max' argument 2 names different: declaration 'filename_max' definition 'file_name_max_p'. [funcArgNamesDifferent]
fileio_get_primitive_way_max (const char *path_p, long int *file_name_max_p, long int *path_name_max_p)
                                                            ^
src/storage/file_io.c:524:70: note: Function 'fileio_get_primitive_way_max' argument 2 names different: declaration 'filename_max' definition 'file_name_max_p'.
static int fileio_get_primitive_way_max (const char *path, long int *filename_max, long int *pathname_max);
                                                                     ^
src/storage/file_io.c:5227:61: note: Function 'fileio_get_primitive_way_max' argument 2 names different: declaration 'filename_max' definition 'file_name_max_p'.
fileio_get_primitive_way_max (const char *path_p, long int *file_name_max_p, long int *path_name_max_p)
                                                            ^
src/storage/file_io.c:5227:88: style:inconclusive: Function 'fileio_get_primitive_way_max' argument 3 names different: declaration 'pathname_max' definition 'path_name_max_p'. [funcArgNamesDifferent]
fileio_get_primitive_way_max (const char *path_p, long int *file_name_max_p, long int *path_name_max_p)
                                                                                       ^
src/storage/file_io.c:524:94: note: Function 'fileio_get_primitive_way_max' argument 3 names different: declaration 'pathname_max' definition 'path_name_max_p'.
static int fileio_get_primitive_way_max (const char *path, long int *filename_max, long int *pathname_max);
                                                                                             ^
src/storage/file_io.c:5227:88: note: Function 'fileio_get_primitive_way_max' argument 3 names different: declaration 'pathname_max' definition 'path_name_max_p'.
fileio_get_primitive_way_max (const char *path_p, long int *file_name_max_p, long int *path_name_max_p)
                                                                                       ^
src/storage/file_io.c:5459:34: style:inconclusive: Function 'fileio_get_max_name' argument 1 names different: declaration 'path' definition 'given_path_p'. [funcArgNamesDifferent]
fileio_get_max_name (const char *given_path_p, long int *file_name_max_p, long int *path_name_max_p)
                                 ^
src/storage/file_io.h:521:45: note: Function 'fileio_get_max_name' argument 1 names different: declaration 'path' definition 'given_path_p'.
extern int fileio_get_max_name (const char *path, long int *filename_max, long int *pathname_max);
                                            ^
src/storage/file_io.c:5459:34: note: Function 'fileio_get_max_name' argument 1 names different: declaration 'path' definition 'given_path_p'.
fileio_get_max_name (const char *given_path_p, long int *file_name_max_p, long int *path_name_max_p)
                                 ^
src/storage/file_io.c:5459:58: style:inconclusive: Function 'fileio_get_max_name' argument 2 names different: declaration 'filename_max' definition 'file_name_max_p'. [funcArgNamesDifferent]
fileio_get_max_name (const char *given_path_p, long int *file_name_max_p, long int *path_name_max_p)
                                                         ^
src/storage/file_io.h:521:61: note: Function 'fileio_get_max_name' argument 2 names different: declaration 'filename_max' definition 'file_name_max_p'.
extern int fileio_get_max_name (const char *path, long int *filename_max, long int *pathname_max);
                                                            ^
src/storage/file_io.c:5459:58: note: Function 'fileio_get_max_name' argument 2 names different: declaration 'filename_max' definition 'file_name_max_p'.
fileio_get_max_name (const char *given_path_p, long int *file_name_max_p, long int *path_name_max_p)
                                                         ^
src/storage/file_io.c:5459:85: style:inconclusive: Function 'fileio_get_max_name' argument 3 names different: declaration 'pathname_max' definition 'path_name_max_p'. [funcArgNamesDifferent]
fileio_get_max_name (const char *given_path_p, long int *file_name_max_p, long int *path_name_max_p)
                                                                                    ^
src/storage/file_io.h:521:85: note: Function 'fileio_get_max_name' argument 3 names different: declaration 'pathname_max' definition 'path_name_max_p'.
extern int fileio_get_max_name (const char *path, long int *filename_max, long int *pathname_max);
                                                                                    ^
src/storage/file_io.c:5459:85: note: Function 'fileio_get_max_name' argument 3 names different: declaration 'pathname_max' definition 'path_name_max_p'.
fileio_get_max_name (const char *given_path_p, long int *file_name_max_p, long int *path_name_max_p)
                                                                                    ^
src/storage/file_io.c:5533:40: style:inconclusive: Function 'fileio_get_base_file_name' argument 1 names different: declaration 'fullname' definition 'full_name_p'. [funcArgNamesDifferent]
fileio_get_base_file_name (const char *full_name_p)
                                       ^
src/storage/file_io.h:522:59: note: Function 'fileio_get_base_file_name' argument 1 names different: declaration 'fullname' definition 'full_name_p'.
extern const char *fileio_get_base_file_name (const char *fullname);
                                                          ^
src/storage/file_io.c:5533:40: note: Function 'fileio_get_base_file_name' argument 1 names different: declaration 'fullname' definition 'full_name_p'.
fileio_get_base_file_name (const char *full_name_p)
                                       ^
src/storage/file_io.c:5567:34: style:inconclusive: Function 'fileio_get_directory_path' argument 1 names different: declaration 'path' definition 'path_p'. [funcArgNamesDifferent]
fileio_get_directory_path (char *path_p, const char *full_name_p)
                                 ^
src/storage/file_io.h:523:47: note: Function 'fileio_get_directory_path' argument 1 names different: declaration 'path' definition 'path_p'.
extern char *fileio_get_directory_path (char *path, const char *fullname);
                                              ^
src/storage/file_io.c:5567:34: note: Function 'fileio_get_directory_path' argument 1 names different: declaration 'path' definition 'path_p'.
fileio_get_directory_path (char *path_p, const char *full_name_p)
                                 ^
src/storage/file_io.c:5567:54: style:inconclusive: Function 'fileio_get_directory_path' argument 2 names different: declaration 'fullname' definition 'full_name_p'. [funcArgNamesDifferent]
fileio_get_directory_path (char *path_p, const char *full_name_p)
                                                     ^
src/storage/file_io.h:523:65: note: Function 'fileio_get_directory_path' argument 2 names different: declaration 'fullname' definition 'full_name_p'.
extern char *fileio_get_directory_path (char *path, const char *fullname);
                                                                ^
src/storage/file_io.c:5567:54: note: Function 'fileio_get_directory_path' argument 2 names different: declaration 'fullname' definition 'full_name_p'.
fileio_get_directory_path (char *path_p, const char *full_name_p)
                                                     ^
src/storage/file_io.c:5620:37: style:inconclusive: Function 'fileio_make_volume_lock_name' argument 1 names different: declaration 'vol_lockname' definition 'vol_lock_name_p'. [funcArgNamesDifferent]
fileio_make_volume_lock_name (char *vol_lock_name_p, const char *vol_full_name_p)
                                    ^
src/storage/file_io.c:469:49: note: Function 'fileio_make_volume_lock_name' argument 1 names different: declaration 'vol_lockname' definition 'vol_lock_name_p'.
static void fileio_make_volume_lock_name (char *vol_lockname, const char *vol_fullname);
                                                ^
src/storage/file_io.c:5620:37: note: Function 'fileio_make_volume_lock_name' argument 1 names different: declaration 'vol_lockname' definition 'vol_lock_name_p'.
fileio_make_volume_lock_name (char *vol_lock_name_p, const char *vol_full_name_p)
                                    ^
src/storage/file_io.c:5620:66: style:inconclusive: Function 'fileio_make_volume_lock_name' argument 2 names different: declaration 'vol_fullname' definition 'vol_full_name_p'. [funcArgNamesDifferent]
fileio_make_volume_lock_name (char *vol_lock_name_p, const char *vol_full_name_p)
                                                                 ^
src/storage/file_io.c:469:75: note: Function 'fileio_make_volume_lock_name' argument 2 names different: declaration 'vol_fullname' definition 'vol_full_name_p'.
static void fileio_make_volume_lock_name (char *vol_lockname, const char *vol_fullname);
                                                                          ^
src/storage/file_io.c:5620:66: note: Function 'fileio_make_volume_lock_name' argument 2 names different: declaration 'vol_fullname' definition 'vol_full_name_p'.
fileio_make_volume_lock_name (char *vol_lock_name_p, const char *vol_full_name_p)
                                                                 ^
src/storage/file_io.c:5636:37: style:inconclusive: Function 'fileio_make_volume_info_name' argument 1 names different: declaration 'volinfo_name' definition 'vol_info_name_p'. [funcArgNamesDifferent]
fileio_make_volume_info_name (char *vol_info_name_p, const char *db_full_name_p)
                                    ^
src/storage/file_io.h:525:49: note: Function 'fileio_make_volume_info_name' argument 1 names different: declaration 'volinfo_name' definition 'vol_info_name_p'.
extern void fileio_make_volume_info_name (char *volinfo_name, const char *db_fullname);
                                                ^
src/storage/file_io.c:5636:37: note: Function 'fileio_make_volume_info_name' argument 1 names different: declaration 'volinfo_name' definition 'vol_info_name_p'.
fileio_make_volume_info_name (char *vol_info_name_p, const char *db_full_name_p)
                                    ^
src/storage/file_io.c:5636:66: style:inconclusive: Function 'fileio_make_volume_info_name' argument 2 names different: declaration 'db_fullname' definition 'db_full_name_p'. [funcArgNamesDifferent]
fileio_make_volume_info_name (char *vol_info_name_p, const char *db_full_name_p)
                                                                 ^
src/storage/file_io.h:525:75: note: Function 'fileio_make_volume_info_name' argument 2 names different: declaration 'db_fullname' definition 'db_full_name_p'.
extern void fileio_make_volume_info_name (char *volinfo_name, const char *db_fullname);
                                                                          ^
src/storage/file_io.c:5636:66: note: Function 'fileio_make_volume_info_name' argument 2 names different: declaration 'db_fullname' definition 'db_full_name_p'.
fileio_make_volume_info_name (char *vol_info_name_p, const char *db_full_name_p)
                                                                 ^
src/storage/file_io.c:5654:36: style:inconclusive: Function 'fileio_make_volume_ext_name' argument 1 names different: declaration 'volext_fullname' definition 'vol_ext_full_name_p'. [funcArgNamesDifferent]
fileio_make_volume_ext_name (char *vol_ext_full_name_p, const char *ext_path_p, const char *ext_name_p, VOLID vol_id)
                                   ^
src/storage/file_io.h:526:48: note: Function 'fileio_make_volume_ext_name' argument 1 names different: declaration 'volext_fullname' definition 'vol_ext_full_name_p'.
extern void fileio_make_volume_ext_name (char *volext_fullname, const char *ext_path, const char *ext_name,
                                               ^
src/storage/file_io.c:5654:36: note: Function 'fileio_make_volume_ext_name' argument 1 names different: declaration 'volext_fullname' definition 'vol_ext_full_name_p'.
fileio_make_volume_ext_name (char *vol_ext_full_name_p, const char *ext_path_p, const char *ext_name_p, VOLID vol_id)
                                   ^
src/storage/file_io.c:5654:69: style:inconclusive: Function 'fileio_make_volume_ext_name' argument 2 names different: declaration 'ext_path' definition 'ext_path_p'. [funcArgNamesDifferent]
fileio_make_volume_ext_name (char *vol_ext_full_name_p, const char *ext_path_p, const char *ext_name_p, VOLID vol_id)
                                                                    ^
src/storage/file_io.h:526:77: note: Function 'fileio_make_volume_ext_name' argument 2 names different: declaration 'ext_path' definition 'ext_path_p'.
extern void fileio_make_volume_ext_name (char *volext_fullname, const char *ext_path, const char *ext_name,
                                                                            ^
src/storage/file_io.c:5654:69: note: Function 'fileio_make_volume_ext_name' argument 2 names different: declaration 'ext_path' definition 'ext_path_p'.
fileio_make_volume_ext_name (char *vol_ext_full_name_p, const char *ext_path_p, const char *ext_name_p, VOLID vol_id)
                                                                    ^
src/storage/file_io.c:5654:93: style:inconclusive: Function 'fileio_make_volume_ext_name' argument 3 names different: declaration 'ext_name' definition 'ext_name_p'. [funcArgNamesDifferent]
fileio_make_volume_ext_name (char *vol_ext_full_name_p, const char *ext_path_p, const char *ext_name_p, VOLID vol_id)
                                                                                            ^
src/storage/file_io.h:526:99: note: Function 'fileio_make_volume_ext_name' argument 3 names different: declaration 'ext_name' definition 'ext_name_p'.
extern void fileio_make_volume_ext_name (char *volext_fullname, const char *ext_path, const char *ext_name,
                                                                                                  ^
src/storage/file_io.c:5654:93: note: Function 'fileio_make_volume_ext_name' argument 3 names different: declaration 'ext_name' definition 'ext_name_p'.
fileio_make_volume_ext_name (char *vol_ext_full_name_p, const char *ext_path_p, const char *ext_name_p, VOLID vol_id)
                                                                                            ^
src/storage/file_io.c:5654:111: style:inconclusive: Function 'fileio_make_volume_ext_name' argument 4 names different: declaration 'volid' definition 'vol_id'. [funcArgNamesDifferent]
fileio_make_volume_ext_name (char *vol_ext_full_name_p, const char *ext_path_p, const char *ext_name_p, VOLID vol_id)
                                                                                                              ^
src/storage/file_io.h:527:13: note: Function 'fileio_make_volume_ext_name' argument 4 names different: declaration 'volid' definition 'vol_id'.
      VOLID volid);
            ^
src/storage/file_io.c:5654:111: note: Function 'fileio_make_volume_ext_name' argument 4 names different: declaration 'volid' definition 'vol_id'.
fileio_make_volume_ext_name (char *vol_ext_full_name_p, const char *ext_path_p, const char *ext_name_p, VOLID vol_id)
                                                                                                              ^
src/storage/file_io.c:5672:42: style:inconclusive: Function 'fileio_make_volume_ext_given_name' argument 1 names different: declaration 'volext_fullname' definition 'vol_ext_full_name_p'. [funcArgNamesDifferent]
fileio_make_volume_ext_given_name (char *vol_ext_full_name_p, const char *ext_path_p, const char *ext_name_p)
                                         ^
src/storage/file_io.h:528:54: note: Function 'fileio_make_volume_ext_given_name' argument 1 names different: declaration 'volext_fullname' definition 'vol_ext_full_name_p'.
extern void fileio_make_volume_ext_given_name (char *volext_fullname, const char *ext_path, const char *ext_name);
                                                     ^
src/storage/file_io.c:5672:42: note: Function 'fileio_make_volume_ext_given_name' argument 1 names different: declaration 'volext_fullname' definition 'vol_ext_full_name_p'.
fileio_make_volume_ext_given_name (char *vol_ext_full_name_p, const char *ext_path_p, const char *ext_name_p)
                                         ^
src/storage/file_io.c:5672:75: style:inconclusive: Function 'fileio_make_volume_ext_given_name' argument 2 names different: declaration 'ext_path' definition 'ext_path_p'. [funcArgNamesDifferent]
fileio_make_volume_ext_given_name (char *vol_ext_full_name_p, const char *ext_path_p, const char *ext_name_p)
                                                                          ^
src/storage/file_io.h:528:83: note: Function 'fileio_make_volume_ext_given_name' argument 2 names different: declaration 'ext_path' definition 'ext_path_p'.
extern void fileio_make_volume_ext_given_name (char *volext_fullname, const char *ext_path, const char *ext_name);
                                                                                  ^
src/storage/file_io.c:5672:75: note: Function 'fileio_make_volume_ext_given_name' argument 2 names different: declaration 'ext_path' definition 'ext_path_p'.
fileio_make_volume_ext_given_name (char *vol_ext_full_name_p, const char *ext_path_p, const char *ext_name_p)
                                                                          ^
src/storage/file_io.c:5672:99: style:inconclusive: Function 'fileio_make_volume_ext_given_name' argument 3 names different: declaration 'ext_name' definition 'ext_name_p'. [funcArgNamesDifferent]
fileio_make_volume_ext_given_name (char *vol_ext_full_name_p, const char *ext_path_p, const char *ext_name_p)
                                                                                                  ^
src/storage/file_io.h:528:105: note: Function 'fileio_make_volume_ext_given_name' argument 3 names different: declaration 'ext_name' definition 'ext_name_p'.
extern void fileio_make_volume_ext_given_name (char *volext_fullname, const char *ext_path, const char *ext_name);
                                                                                                        ^
src/storage/file_io.c:5672:99: note: Function 'fileio_make_volume_ext_given_name' argument 3 names different: declaration 'ext_name' definition 'ext_name_p'.
fileio_make_volume_ext_given_name (char *vol_ext_full_name_p, const char *ext_path_p, const char *ext_name_p)
                                                                                                  ^
src/storage/file_io.c:5690:37: style:inconclusive: Function 'fileio_make_volume_temp_name' argument 1 names different: declaration 'voltmp_fullname' definition 'vol_tmp_full_name_p'. [funcArgNamesDifferent]
fileio_make_volume_temp_name (char *vol_tmp_full_name_p, const char *tmp_path_p, const char *tmp_name_p, VOLID vol_id)
                                    ^
src/storage/file_io.h:529:49: note: Function 'fileio_make_volume_temp_name' argument 1 names different: declaration 'voltmp_fullname' definition 'vol_tmp_full_name_p'.
extern void fileio_make_volume_temp_name (char *voltmp_fullname, const char *tmp_path, const char *tmp_name,
                                                ^
src/storage/file_io.c:5690:37: note: Function 'fileio_make_volume_temp_name' argument 1 names different: declaration 'voltmp_fullname' definition 'vol_tmp_full_name_p'.
fileio_make_volume_temp_name (char *vol_tmp_full_name_p, const char *tmp_path_p, const char *tmp_name_p, VOLID vol_id)
                                    ^
src/storage/file_io.c:5690:70: style:inconclusive: Function 'fileio_make_volume_temp_name' argument 2 names different: declaration 'tmp_path' definition 'tmp_path_p'. [funcArgNamesDifferent]
fileio_make_volume_temp_name (char *vol_tmp_full_name_p, const char *tmp_path_p, const char *tmp_name_p, VOLID vol_id)
                                                                     ^
src/storage/file_io.h:529:78: note: Function 'fileio_make_volume_temp_name' argument 2 names different: declaration 'tmp_path' definition 'tmp_path_p'.
extern void fileio_make_volume_temp_name (char *voltmp_fullname, const char *tmp_path, const char *tmp_name,
                                                                             ^
src/storage/file_io.c:5690:70: note: Function 'fileio_make_volume_temp_name' argument 2 names different: declaration 'tmp_path' definition 'tmp_path_p'.
fileio_make_volume_temp_name (char *vol_tmp_full_name_p, const char *tmp_path_p, const char *tmp_name_p, VOLID vol_id)
                                                                     ^
src/storage/file_io.c:5690:94: style:inconclusive: Function 'fileio_make_volume_temp_name' argument 3 names different: declaration 'tmp_name' definition 'tmp_name_p'. [funcArgNamesDifferent]
fileio_make_volume_temp_name (char *vol_tmp_full_name_p, const char *tmp_path_p, const char *tmp_name_p, VOLID vol_id)
                                                                                             ^
src/storage/file_io.h:529:100: note: Function 'fileio_make_volume_temp_name' argument 3 names different: declaration 'tmp_name' definition 'tmp_name_p'.
extern void fileio_make_volume_temp_name (char *voltmp_fullname, const char *tmp_path, const char *tmp_name,
                                                                                                   ^
src/storage/file_io.c:5690:94: note: Function 'fileio_make_volume_temp_name' argument 3 names different: declaration 'tmp_name' definition 'tmp_name_p'.
fileio_make_volume_temp_name (char *vol_tmp_full_name_p, const char *tmp_path_p, const char *tmp_name_p, VOLID vol_id)
                                                                                             ^
src/storage/file_io.c:5690:112: style:inconclusive: Function 'fileio_make_volume_temp_name' argument 4 names different: declaration 'volid' definition 'vol_id'. [funcArgNamesDifferent]
fileio_make_volume_temp_name (char *vol_tmp_full_name_p, const char *tmp_path_p, const char *tmp_name_p, VOLID vol_id)
                                                                                                               ^
src/storage/file_io.h:530:14: note: Function 'fileio_make_volume_temp_name' argument 4 names different: declaration 'volid' definition 'vol_id'.
       VOLID volid);
             ^
src/storage/file_io.c:5690:112: note: Function 'fileio_make_volume_temp_name' argument 4 names different: declaration 'volid' definition 'vol_id'.
fileio_make_volume_temp_name (char *vol_tmp_full_name_p, const char *tmp_path_p, const char *tmp_name_p, VOLID vol_id)
                                                                                                               ^
src/storage/file_io.c:5707:36: style:inconclusive: Function 'fileio_make_log_active_name' argument 1 names different: declaration 'logactive_name' definition 'log_active_name_p'. [funcArgNamesDifferent]
fileio_make_log_active_name (char *log_active_name_p, const char *log_path_p, const char *db_name_p)
                                   ^
src/storage/file_io.h:531:48: note: Function 'fileio_make_log_active_name' argument 1 names different: declaration 'logactive_name' definition 'log_active_name_p'.
extern void fileio_make_log_active_name (char *logactive_name, const char *log_path, const char *dbname);
                                               ^
src/storage/file_io.c:5707:36: note: Function 'fileio_make_log_active_name' argument 1 names different: declaration 'logactive_name' definition 'log_active_name_p'.
fileio_make_log_active_name (char *log_active_name_p, const char *log_path_p, const char *db_name_p)
                                   ^
src/storage/file_io.c:5707:67: style:inconclusive: Function 'fileio_make_log_active_name' argument 2 names different: declaration 'log_path' definition 'log_path_p'. [funcArgNamesDifferent]
fileio_make_log_active_name (char *log_active_name_p, const char *log_path_p, const char *db_name_p)
                                                                  ^
src/storage/file_io.h:531:76: note: Function 'fileio_make_log_active_name' argument 2 names different: declaration 'log_path' definition 'log_path_p'.
extern void fileio_make_log_active_name (char *logactive_name, const char *log_path, const char *dbname);
                                                                           ^
src/storage/file_io.c:5707:67: note: Function 'fileio_make_log_active_name' argument 2 names different: declaration 'log_path' definition 'log_path_p'.
fileio_make_log_active_name (char *log_active_name_p, const char *log_path_p, const char *db_name_p)
                                                                  ^
src/storage/file_io.c:5707:91: style:inconclusive: Function 'fileio_make_log_active_name' argument 3 names different: declaration 'dbname' definition 'db_name_p'. [funcArgNamesDifferent]
fileio_make_log_active_name (char *log_active_name_p, const char *log_path_p, const char *db_name_p)
                                                                                          ^
src/storage/file_io.h:531:98: note: Function 'fileio_make_log_active_name' argument 3 names different: declaration 'dbname' definition 'db_name_p'.
extern void fileio_make_log_active_name (char *logactive_name, const char *log_path, const char *dbname);
                                                                                                 ^
src/storage/file_io.c:5707:91: note: Function 'fileio_make_log_active_name' argument 3 names different: declaration 'dbname' definition 'db_name_p'.
fileio_make_log_active_name (char *log_active_name_p, const char *log_path_p, const char *db_name_p)
                                                                                          ^
src/storage/file_io.c:5726:68: style:inconclusive: Function 'fileio_make_temp_log_files_from_backup' argument 2 names different: declaration 'volid' definition 'to_volid'. [funcArgNamesDifferent]
fileio_make_temp_log_files_from_backup (char *temp_log_name, VOLID to_volid, FILEIO_BACKUP_LEVEL level,
                                                                   ^
src/storage/file_io.h:532:80: note: Function 'fileio_make_temp_log_files_from_backup' argument 2 names different: declaration 'volid' definition 'to_volid'.
extern void fileio_make_temp_log_files_from_backup (char *temp_log_name, VOLID volid, FILEIO_BACKUP_LEVEL level,
                                                                               ^
src/storage/file_io.c:5726:68: note: Function 'fileio_make_temp_log_files_from_backup' argument 2 names different: declaration 'volid' definition 'to_volid'.
fileio_make_temp_log_files_from_backup (char *temp_log_name, VOLID to_volid, FILEIO_BACKUP_LEVEL level,
                                                                   ^
src/storage/file_io.c:5758:37: style:inconclusive: Function 'fileio_make_log_archive_name' argument 1 names different: declaration 'logarchive_name' definition 'log_archive_name_p'. [funcArgNamesDifferent]
fileio_make_log_archive_name (char *log_archive_name_p, const char *log_path_p, const char *db_name_p,
                                    ^
src/storage/file_io.h:534:49: note: Function 'fileio_make_log_archive_name' argument 1 names different: declaration 'logarchive_name' definition 'log_archive_name_p'.
extern void fileio_make_log_archive_name (char *logarchive_name, const char *log_path, const char *dbname, int arvnum);
                                                ^
src/storage/file_io.c:5758:37: note: Function 'fileio_make_log_archive_name' argument 1 names different: declaration 'logarchive_name' definition 'log_archive_name_p'.
fileio_make_log_archive_name (char *log_archive_name_p, const char *log_path_p, const char *db_name_p,
                                    ^
src/storage/file_io.c:5758:69: style:inconclusive: Function 'fileio_make_log_archive_name' argument 2 names different: declaration 'log_path' definition 'log_path_p'. [funcArgNamesDifferent]
fileio_make_log_archive_name (char *log_archive_name_p, const char *log_path_p, const char *db_name_p,
                                                                    ^
src/storage/file_io.h:534:78: note: Function 'fileio_make_log_archive_name' argument 2 names different: declaration 'log_path' definition 'log_path_p'.
extern void fileio_make_log_archive_name (char *logarchive_name, const char *log_path, const char *dbname, int arvnum);
                                                                             ^
src/storage/file_io.c:5758:69: note: Function 'fileio_make_log_archive_name' argument 2 names different: declaration 'log_path' definition 'log_path_p'.
fileio_make_log_archive_name (char *log_archive_name_p, const char *log_path_p, const char *db_name_p,
                                                                    ^
src/storage/file_io.c:5758:93: style:inconclusive: Function 'fileio_make_log_archive_name' argument 3 names different: declaration 'dbname' definition 'db_name_p'. [funcArgNamesDifferent]
fileio_make_log_archive_name (char *log_archive_name_p, const char *log_path_p, const char *db_name_p,
                                                                                            ^
src/storage/file_io.h:534:100: note: Function 'fileio_make_log_archive_name' argument 3 names different: declaration 'dbname' definition 'db_name_p'.
extern void fileio_make_log_archive_name (char *logarchive_name, const char *log_path, const char *dbname, int arvnum);
                                                                                                   ^
src/storage/file_io.c:5758:93: note: Function 'fileio_make_log_archive_name' argument 3 names different: declaration 'dbname' definition 'db_name_p'.
fileio_make_log_archive_name (char *log_archive_name_p, const char *log_path_p, const char *db_name_p,
                                                                                            ^
src/storage/file_io.c:5759:14: style:inconclusive: Function 'fileio_make_log_archive_name' argument 4 names different: declaration 'arvnum' definition 'archive_number'. [funcArgNamesDifferent]
         int archive_number)
             ^
src/storage/file_io.h:534:112: note: Function 'fileio_make_log_archive_name' argument 4 names different: declaration 'arvnum' definition 'archive_number'.
extern void fileio_make_log_archive_name (char *logarchive_name, const char *log_path, const char *dbname, int arvnum);
                                                                                                               ^
src/storage/file_io.c:5759:14: note: Function 'fileio_make_log_archive_name' argument 4 names different: declaration 'arvnum' definition 'archive_number'.
         int archive_number)
             ^
src/storage/file_io.c:5777:45: style:inconclusive: Function 'fileio_make_removed_log_archive_name' argument 1 names different: declaration 'logarchive_name' definition 'log_archive_name_p'. [funcArgNamesDifferent]
fileio_make_removed_log_archive_name (char *log_archive_name_p, const char *log_path_p, const char *db_name_p)
                                            ^
src/storage/file_io.h:535:57: note: Function 'fileio_make_removed_log_archive_name' argument 1 names different: declaration 'logarchive_name' definition 'log_archive_name_p'.
extern void fileio_make_removed_log_archive_name (char *logarchive_name, const char *log_path, const char *dbname);
                                                        ^
src/storage/file_io.c:5777:45: note: Function 'fileio_make_removed_log_archive_name' argument 1 names different: declaration 'logarchive_name' definition 'log_archive_name_p'.
fileio_make_removed_log_archive_name (char *log_archive_name_p, const char *log_path_p, const char *db_name_p)
                                            ^
src/storage/file_io.c:5777:77: style:inconclusive: Function 'fileio_make_removed_log_archive_name' argument 2 names different: declaration 'log_path' definition 'log_path_p'. [funcArgNamesDifferent]
fileio_make_removed_log_archive_name (char *log_archive_name_p, const char *log_path_p, const char *db_name_p)
                                                                            ^
src/storage/file_io.h:535:86: note: Function 'fileio_make_removed_log_archive_name' argument 2 names different: declaration 'log_path' definition 'log_path_p'.
extern void fileio_make_removed_log_archive_name (char *logarchive_name, const char *log_path, const char *dbname);
                                                                                     ^
src/storage/file_io.c:5777:77: note: Function 'fileio_make_removed_log_archive_name' argument 2 names different: declaration 'log_path' definition 'log_path_p'.
fileio_make_removed_log_archive_name (char *log_archive_name_p, const char *log_path_p, const char *db_name_p)
                                                                            ^
src/storage/file_io.c:5777:101: style:inconclusive: Function 'fileio_make_removed_log_archive_name' argument 3 names different: declaration 'dbname' definition 'db_name_p'. [funcArgNamesDifferent]
fileio_make_removed_log_archive_name (char *log_archive_name_p, const char *log_path_p, const char *db_name_p)
                                                                                                    ^
src/storage/file_io.h:535:108: note: Function 'fileio_make_removed_log_archive_name' argument 3 names different: declaration 'dbname' definition 'db_name_p'.
extern void fileio_make_removed_log_archive_name (char *logarchive_name, const char *log_path, const char *dbname);
                                                                                                           ^
src/storage/file_io.c:5777:101: note: Function 'fileio_make_removed_log_archive_name' argument 3 names different: declaration 'dbname' definition 'db_name_p'.
fileio_make_removed_log_archive_name (char *log_archive_name_p, const char *log_path_p, const char *db_name_p)
                                                                                                    ^
src/storage/file_io.c:5815:34: style:inconclusive: Function 'fileio_make_log_info_name' argument 1 names different: declaration 'loginfo_name' definition 'log_info_name_p'. [funcArgNamesDifferent]
fileio_make_log_info_name (char *log_info_name_p, const char *log_path_p, const char *db_name_p)
                                 ^
src/storage/file_io.h:538:46: note: Function 'fileio_make_log_info_name' argument 1 names different: declaration 'loginfo_name' definition 'log_info_name_p'.
extern void fileio_make_log_info_name (char *loginfo_name, const char *log_path, const char *dbname);
                                             ^
src/storage/file_io.c:5815:34: note: Function 'fileio_make_log_info_name' argument 1 names different: declaration 'loginfo_name' definition 'log_info_name_p'.
fileio_make_log_info_name (char *log_info_name_p, const char *log_path_p, const char *db_name_p)
                                 ^
src/storage/file_io.c:5815:63: style:inconclusive: Function 'fileio_make_log_info_name' argument 2 names different: declaration 'log_path' definition 'log_path_p'. [funcArgNamesDifferent]
fileio_make_log_info_name (char *log_info_name_p, const char *log_path_p, const char *db_name_p)
                                                              ^
src/storage/file_io.h:538:72: note: Function 'fileio_make_log_info_name' argument 2 names different: declaration 'log_path' definition 'log_path_p'.
extern void fileio_make_log_info_name (char *loginfo_name, const char *log_path, const char *dbname);
                                                                       ^
src/storage/file_io.c:5815:63: note: Function 'fileio_make_log_info_name' argument 2 names different: declaration 'log_path' definition 'log_path_p'.
fileio_make_log_info_name (char *log_info_name_p, const char *log_path_p, const char *db_name_p)
                                                              ^
src/storage/file_io.c:5815:87: style:inconclusive: Function 'fileio_make_log_info_name' argument 3 names different: declaration 'dbname' definition 'db_name_p'. [funcArgNamesDifferent]
fileio_make_log_info_name (char *log_info_name_p, const char *log_path_p, const char *db_name_p)
                                                                                      ^
src/storage/file_io.h:538:94: note: Function 'fileio_make_log_info_name' argument 3 names different: declaration 'dbname' definition 'db_name_p'.
extern void fileio_make_log_info_name (char *loginfo_name, const char *log_path, const char *dbname);
                                                                                             ^
src/storage/file_io.c:5815:87: note: Function 'fileio_make_log_info_name' argument 3 names different: declaration 'dbname' definition 'db_name_p'.
fileio_make_log_info_name (char *log_info_name_p, const char *log_path_p, const char *db_name_p)
                                                                                      ^
src/storage/file_io.c:5833:44: style:inconclusive: Function 'fileio_make_backup_volume_info_name' argument 1 names different: declaration 'backup_volinfo_name' definition 'backup_volinfo_name_p'. [funcArgNamesDifferent]
fileio_make_backup_volume_info_name (char *backup_volinfo_name_p, const char *backup_info_path_p, const char *db_name_p)
                                           ^
src/storage/file_io.h:539:56: note: Function 'fileio_make_backup_volume_info_name' argument 1 names different: declaration 'backup_volinfo_name' definition 'backup_volinfo_name_p'.
extern void fileio_make_backup_volume_info_name (char *backup_volinfo_name, const char *backinfo_path,
                                                       ^
src/storage/file_io.c:5833:44: note: Function 'fileio_make_backup_volume_info_name' argument 1 names different: declaration 'backup_volinfo_name' definition 'backup_volinfo_name_p'.
fileio_make_backup_volume_info_name (char *backup_volinfo_name_p, const char *backup_info_path_p, const char *db_name_p)
                                           ^
src/storage/file_io.c:5833:79: style:inconclusive: Function 'fileio_make_backup_volume_info_name' argument 2 names different: declaration 'backinfo_path' definition 'backup_info_path_p'. [funcArgNamesDifferent]
fileio_make_backup_volume_info_name (char *backup_volinfo_name_p, const char *backup_info_path_p, const char *db_name_p)
                                                                              ^
src/storage/file_io.h:539:89: note: Function 'fileio_make_backup_volume_info_name' argument 2 names different: declaration 'backinfo_path' definition 'backup_info_path_p'.
extern void fileio_make_backup_volume_info_name (char *backup_volinfo_name, const char *backinfo_path,
                                                                                        ^
src/storage/file_io.c:5833:79: note: Function 'fileio_make_backup_volume_info_name' argument 2 names different: declaration 'backinfo_path' definition 'backup_info_path_p'.
fileio_make_backup_volume_info_name (char *backup_volinfo_name_p, const char *backup_info_path_p, const char *db_name_p)
                                                                              ^
src/storage/file_io.c:5833:111: style:inconclusive: Function 'fileio_make_backup_volume_info_name' argument 3 names different: declaration 'dbname' definition 'db_name_p'. [funcArgNamesDifferent]
fileio_make_backup_volume_info_name (char *backup_volinfo_name_p, const char *backup_info_path_p, const char *db_name_p)
                                                                                                              ^
src/storage/file_io.h:540:20: note: Function 'fileio_make_backup_volume_info_name' argument 3 names different: declaration 'dbname' definition 'db_name_p'.
       const char *dbname);
                   ^
src/storage/file_io.c:5833:111: note: Function 'fileio_make_backup_volume_info_name' argument 3 names different: declaration 'dbname' definition 'db_name_p'.
fileio_make_backup_volume_info_name (char *backup_volinfo_name_p, const char *backup_info_path_p, const char *db_name_p)
                                                                                                              ^
src/storage/file_io.c:5853:32: style:inconclusive: Function 'fileio_make_backup_name' argument 1 names different: declaration 'backup_name' definition 'backup_name_p'. [funcArgNamesDifferent]
fileio_make_backup_name (char *backup_name_p, const char *no_path_vol_name_p, const char *backup_path_p,
                               ^
src/storage/file_io.h:541:44: note: Function 'fileio_make_backup_name' argument 1 names different: declaration 'backup_name' definition 'backup_name_p'.
extern void fileio_make_backup_name (char *backup_name, const char *nopath_volname, const char *backup_path,
                                           ^
src/storage/file_io.c:5853:32: note: Function 'fileio_make_backup_name' argument 1 names different: declaration 'backup_name' definition 'backup_name_p'.
fileio_make_backup_name (char *backup_name_p, const char *no_path_vol_name_p, const char *backup_path_p,
                               ^
src/storage/file_io.c:5853:59: style:inconclusive: Function 'fileio_make_backup_name' argument 2 names different: declaration 'nopath_volname' definition 'no_path_vol_name_p'. [funcArgNamesDifferent]
fileio_make_backup_name (char *backup_name_p, const char *no_path_vol_name_p, const char *backup_path_p,
                                                          ^
src/storage/file_io.h:541:69: note: Function 'fileio_make_backup_name' argument 2 names different: declaration 'nopath_volname' definition 'no_path_vol_name_p'.
extern void fileio_make_backup_name (char *backup_name, const char *nopath_volname, const char *backup_path,
                                                                    ^
src/storage/file_io.c:5853:59: note: Function 'fileio_make_backup_name' argument 2 names different: declaration 'nopath_volname' definition 'no_path_vol_name_p'.
fileio_make_backup_name (char *backup_name_p, const char *no_path_vol_name_p, const char *backup_path_p,
                                                          ^
src/storage/file_io.c:5853:91: style:inconclusive: Function 'fileio_make_backup_name' argument 3 names different: declaration 'backup_path' definition 'backup_path_p'. [funcArgNamesDifferent]
fileio_make_backup_name (char *backup_name_p, const char *no_path_vol_name_p, const char *backup_path_p,
                                                                                          ^
src/storage/file_io.h:541:97: note: Function 'fileio_make_backup_name' argument 3 names different: declaration 'backup_path' definition 'backup_path_p'.
extern void fileio_make_backup_name (char *backup_name, const char *nopath_volname, const char *backup_path,
                                                                                                ^
src/storage/file_io.c:5853:91: note: Function 'fileio_make_backup_name' argument 3 names different: declaration 'backup_path' definition 'backup_path_p'.
fileio_make_backup_name (char *backup_name_p, const char *no_path_vol_name_p, const char *backup_path_p,
                                                                                          ^
src/storage/file_io.c:5897:55: style:inconclusive: Function 'fileio_make_keys_name' argument 2 names different: declaration 'db_name_p' definition 'db_full_name_p'. [funcArgNamesDifferent]
fileio_make_keys_name (char *keys_name_p, const char *db_full_name_p)
                                                      ^
src/storage/file_io.h:544:67: note: Function 'fileio_make_keys_name' argument 2 names different: declaration 'db_name_p' definition 'db_full_name_p'.
extern void fileio_make_keys_name (char *keys_name_p, const char *db_name_p);
                                                                  ^
src/storage/file_io.c:5897:55: note: Function 'fileio_make_keys_name' argument 2 names different: declaration 'db_name_p' definition 'db_full_name_p'.
fileio_make_keys_name (char *keys_name_p, const char *db_full_name_p)
                                                      ^
src/storage/file_io.c:5946:21: style:inconclusive: Function 'fileio_cache' argument 1 names different: declaration 'volid' definition 'vol_id'. [funcArgNamesDifferent]
fileio_cache (VOLID vol_id, const char *vol_label_p, int vol_fd, FILEIO_LOCKF_TYPE lockf_type)
                    ^
src/storage/file_io.c:503:32: note: Function 'fileio_cache' argument 1 names different: declaration 'volid' definition 'vol_id'.
static int fileio_cache (VOLID volid, const char *vlabel, int vdes, FILEIO_LOCKF_TYPE lockf_type);
                               ^
src/storage/file_io.c:5946:21: note: Function 'fileio_cache' argument 1 names different: declaration 'volid' definition 'vol_id'.
fileio_cache (VOLID vol_id, const char *vol_label_p, int vol_fd, FILEIO_LOCKF_TYPE lockf_type)
                    ^
src/storage/file_io.c:5946:41: style:inconclusive: Function 'fileio_cache' argument 2 names different: declaration 'vlabel' definition 'vol_label_p'. [funcArgNamesDifferent]
fileio_cache (VOLID vol_id, const char *vol_label_p, int vol_fd, FILEIO_LOCKF_TYPE lockf_type)
                                        ^
src/storage/file_io.c:503:51: note: Function 'fileio_cache' argument 2 names different: declaration 'vlabel' definition 'vol_label_p'.
static int fileio_cache (VOLID volid, const char *vlabel, int vdes, FILEIO_LOCKF_TYPE lockf_type);
                                                  ^
src/storage/file_io.c:5946:41: note: Function 'fileio_cache' argument 2 names different: declaration 'vlabel' definition 'vol_label_p'.
fileio_cache (VOLID vol_id, const char *vol_label_p, int vol_fd, FILEIO_LOCKF_TYPE lockf_type)
                                        ^
src/storage/file_io.c:5946:58: style:inconclusive: Function 'fileio_cache' argument 3 names different: declaration 'vdes' definition 'vol_fd'. [funcArgNamesDifferent]
fileio_cache (VOLID vol_id, const char *vol_label_p, int vol_fd, FILEIO_LOCKF_TYPE lockf_type)
                                                         ^
src/storage/file_io.c:503:63: note: Function 'fileio_cache' argument 3 names different: declaration 'vdes' definition 'vol_fd'.
static int fileio_cache (VOLID volid, const char *vlabel, int vdes, FILEIO_LOCKF_TYPE lockf_type);
                                                              ^
src/storage/file_io.c:5946:58: note: Function 'fileio_cache' argument 3 names different: declaration 'vdes' definition 'vol_fd'.
fileio_cache (VOLID vol_id, const char *vol_label_p, int vol_fd, FILEIO_LOCKF_TYPE lockf_type)
                                                         ^
src/storage/file_io.c:6065:46: style:inconclusive: Function 'fileio_decache' argument 2 names different: declaration 'vdes' definition 'vol_fd'. [funcArgNamesDifferent]
fileio_decache (THREAD_ENTRY * thread_p, int vol_fd)
                                             ^
src/storage/file_io.c:504:58: note: Function 'fileio_decache' argument 2 names different: declaration 'vdes' definition 'vol_fd'.
static void fileio_decache (THREAD_ENTRY * thread_p, int vdes);
                                                         ^
src/storage/file_io.c:6065:46: note: Function 'fileio_decache' argument 2 names different: declaration 'vdes' definition 'vol_fd'.
fileio_decache (THREAD_ENTRY * thread_p, int vol_fd)
                                             ^
src/storage/file_io.c:6182:32: style:inconclusive: Function 'fileio_get_volume_label' argument 1 names different: declaration 'volid' definition 'vol_id'. [funcArgNamesDifferent]
fileio_get_volume_label (VOLID vol_id, bool is_peek)
                               ^
src/storage/file_io.h:504:45: note: Function 'fileio_get_volume_label' argument 1 names different: declaration 'volid' definition 'vol_id'.
extern char *fileio_get_volume_label (VOLID volid, bool is_peek);
                                            ^
src/storage/file_io.c:6182:32: note: Function 'fileio_get_volume_label' argument 1 names different: declaration 'volid' definition 'vol_id'.
fileio_get_volume_label (VOLID vol_id, bool is_peek)
                               ^
src/storage/file_io.c:6267:27: style:inconclusive: Function 'fileio_get_volume_id' argument 1 names different: declaration 'vdes' definition 'vol_fd'. [funcArgNamesDifferent]
fileio_get_volume_id (int vol_fd)
                          ^
src/storage/file_io.c:505:40: note: Function 'fileio_get_volume_id' argument 1 names different: declaration 'vdes' definition 'vol_fd'.
static VOLID fileio_get_volume_id (int vdes);
                                       ^
src/storage/file_io.c:6267:27: note: Function 'fileio_get_volume_id' argument 1 names different: declaration 'vdes' definition 'vol_fd'.
fileio_get_volume_id (int vol_fd)
                          ^
src/storage/file_io.c:6319:72: style:inconclusive: Function 'fileio_find_volume_id_with_label' argument 2 names different: declaration 'vlabel' definition 'vol_label_p'. [funcArgNamesDifferent]
fileio_find_volume_id_with_label (THREAD_ENTRY * thread_p, const char *vol_label_p)
                                                                       ^
src/storage/file_io.h:506:85: note: Function 'fileio_find_volume_id_with_label' argument 2 names different: declaration 'vlabel' definition 'vol_label_p'.
extern VOLID fileio_find_volume_id_with_label (THREAD_ENTRY * thread_p, const char *vlabel);
                                                                                    ^
src/storage/file_io.c:6319:72: note: Function 'fileio_find_volume_id_with_label' argument 2 names different: declaration 'vlabel' definition 'vol_label_p'.
fileio_find_volume_id_with_label (THREAD_ENTRY * thread_p, const char *vol_label_p)
                                                                       ^
src/storage/file_io.c:6488:37: style:inconclusive: Function 'fileio_get_volume_descriptor' argument 1 names different: declaration 'volid' definition 'vol_id'. [funcArgNamesDifferent]
fileio_get_volume_descriptor (VOLID vol_id)
                                    ^
src/storage/file_io.h:513:48: note: Function 'fileio_get_volume_descriptor' argument 1 names different: declaration 'volid' definition 'vol_id'.
extern int fileio_get_volume_descriptor (VOLID volid);
                                               ^
src/storage/file_io.c:6488:37: note: Function 'fileio_get_volume_descriptor' argument 1 names different: declaration 'volid' definition 'vol_id'.
fileio_get_volume_descriptor (VOLID vol_id)
                                    ^
src/storage/file_io.c:6588:28: style:inconclusive: Function 'fileio_get_lockf_type' argument 1 names different: declaration 'vdes' definition 'vol_fd'. [funcArgNamesDifferent]
fileio_get_lockf_type (int vol_fd)
                           ^
src/storage/file_io.c:521:53: note: Function 'fileio_get_lockf_type' argument 1 names different: declaration 'vdes' definition 'vol_fd'.
static FILEIO_LOCKF_TYPE fileio_get_lockf_type (int vdes);
                                                    ^
src/storage/file_io.c:6588:28: note: Function 'fileio_get_lockf_type' argument 1 names different: declaration 'vdes' definition 'vol_fd'.
fileio_get_lockf_type (int vol_fd)
                           ^
src/storage/file_io.c:6729:39: style:inconclusive: Function 'fileio_initialize_backup' argument 1 names different: declaration 'db_fullname' definition 'db_full_name_p'. [funcArgNamesDifferent]
fileio_initialize_backup (const char *db_full_name_p, const char *backup_destination_p,
                                      ^
src/storage/file_io.h:550:69: note: Function 'fileio_initialize_backup' argument 1 names different: declaration 'db_fullname' definition 'db_full_name_p'.
extern FILEIO_BACKUP_SESSION *fileio_initialize_backup (const char *db_fullname, const char *backup_destination,
                                                                    ^
src/storage/file_io.c:6729:39: note: Function 'fileio_initialize_backup' argument 1 names different: declaration 'db_fullname' definition 'db_full_name_p'.
fileio_initialize_backup (const char *db_full_name_p, const char *backup_destination_p,
                                      ^
src/storage/file_io.c:6729:67: style:inconclusive: Function 'fileio_initialize_backup' argument 2 names different: declaration 'backup_destination' definition 'backup_destination_p'. [funcArgNamesDifferent]
fileio_initialize_backup (const char *db_full_name_p, const char *backup_destination_p,
                                                                  ^
src/storage/file_io.h:550:94: note: Function 'fileio_initialize_backup' argument 2 names different: declaration 'backup_destination' definition 'backup_destination_p'.
extern FILEIO_BACKUP_SESSION *fileio_initialize_backup (const char *db_fullname, const char *backup_destination,
                                                                                             ^
src/storage/file_io.c:6729:67: note: Function 'fileio_initialize_backup' argument 2 names different: declaration 'backup_destination' definition 'backup_destination_p'.
fileio_initialize_backup (const char *db_full_name_p, const char *backup_destination_p,
                                                                  ^
src/storage/file_io.c:6730:30: style:inconclusive: Function 'fileio_initialize_backup' argument 3 names different: declaration 'session' definition 'session_p'. [funcArgNamesDifferent]
     FILEIO_BACKUP_SESSION * session_p, FILEIO_BACKUP_LEVEL level, const char *verbose_file_path,
                             ^
src/storage/file_io.h:551:32: note: Function 'fileio_initialize_backup' argument 3 names different: declaration 'session' definition 'session_p'.
       FILEIO_BACKUP_SESSION * session, FILEIO_BACKUP_LEVEL level,
                               ^
src/storage/file_io.c:6730:30: note: Function 'fileio_initialize_backup' argument 3 names different: declaration 'session' definition 'session_p'.
     FILEIO_BACKUP_SESSION * session_p, FILEIO_BACKUP_LEVEL level, const char *verbose_file_path,
                             ^
src/storage/file_io.c:7051:71: style:inconclusive: Function 'fileio_abort_backup' argument 2 names different: declaration 'session' definition 'session_p'. [funcArgNamesDifferent]
fileio_abort_backup (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session_p, bool does_unformat_bk)
                                                                      ^
src/storage/file_io.h:561:83: note: Function 'fileio_abort_backup' argument 2 names different: declaration 'session' definition 'session_p'.
extern void fileio_abort_backup (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session, bool does_unformat_bk);
                                                                                  ^
src/storage/file_io.c:7051:71: note: Function 'fileio_abort_backup' argument 2 names different: declaration 'session' definition 'session_p'.
fileio_abort_backup (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session_p, bool does_unformat_bk)
                                                                      ^
src/storage/file_io.c:7154:59: style:inconclusive: Function 'fileio_start_backup' argument 2 names different: declaration 'db_fullname' definition 'db_full_name_p'. [funcArgNamesDifferent]
fileio_start_backup (THREAD_ENTRY * thread_p, const char *db_full_name_p, INT64 * db_creation_time_p,
                                                          ^
src/storage/file_io.h:554:89: note: Function 'fileio_start_backup' argument 2 names different: declaration 'db_fullname' definition 'db_full_name_p'.
extern FILEIO_BACKUP_SESSION *fileio_start_backup (THREAD_ENTRY * thread_p, const char *db_fullname,
                                                                                        ^
src/storage/file_io.c:7154:59: note: Function 'fileio_start_backup' argument 2 names different: declaration 'db_fullname' definition 'db_full_name_p'.
fileio_start_backup (THREAD_ENTRY * thread_p, const char *db_full_name_p, INT64 * db_creation_time_p,
                                                          ^
src/storage/file_io.c:7154:83: style:inconclusive: Function 'fileio_start_backup' argument 3 names different: declaration 'db_creation' definition 'db_creation_time_p'. [funcArgNamesDifferent]
fileio_start_backup (THREAD_ENTRY * thread_p, const char *db_full_name_p, INT64 * db_creation_time_p,
                                                                                  ^
src/storage/file_io.h:555:18: note: Function 'fileio_start_backup' argument 3 names different: declaration 'db_creation' definition 'db_creation_time_p'.
         INT64 * db_creation, FILEIO_BACKUP_LEVEL backup_level,
                 ^
src/storage/file_io.c:7154:83: note: Function 'fileio_start_backup' argument 3 names different: declaration 'db_creation' definition 'db_creation_time_p'.
fileio_start_backup (THREAD_ENTRY * thread_p, const char *db_full_name_p, INT64 * db_creation_time_p,
                                                                                  ^
src/storage/file_io.c:7155:52: style:inconclusive: Function 'fileio_start_backup' argument 5 names different: declaration 'backup_start_lsa' definition 'backup_start_lsa_p'. [funcArgNamesDifferent]
       FILEIO_BACKUP_LEVEL backup_level, LOG_LSA * backup_start_lsa_p, LOG_LSA * backup_checkpoint_lsa_p,
                                                   ^
src/storage/file_io.h:556:20: note: Function 'fileio_start_backup' argument 5 names different: declaration 'backup_start_lsa' definition 'backup_start_lsa_p'.
         LOG_LSA * backup_start_lsa, LOG_LSA * backup_ckpt_lsa,
                   ^
src/storage/file_io.c:7155:52: note: Function 'fileio_start_backup' argument 5 names different: declaration 'backup_start_lsa' definition 'backup_start_lsa_p'.
       FILEIO_BACKUP_LEVEL backup_level, LOG_LSA * backup_start_lsa_p, LOG_LSA * backup_checkpoint_lsa_p,
                                                   ^
src/storage/file_io.c:7155:82: style:inconclusive: Function 'fileio_start_backup' argument 6 names different: declaration 'backup_ckpt_lsa' definition 'backup_checkpoint_lsa_p'. [funcArgNamesDifferent]
       FILEIO_BACKUP_LEVEL backup_level, LOG_LSA * backup_start_lsa_p, LOG_LSA * backup_checkpoint_lsa_p,
                                                                                 ^
src/storage/file_io.h:556:48: note: Function 'fileio_start_backup' argument 6 names different: declaration 'backup_ckpt_lsa' definition 'backup_checkpoint_lsa_p'.
         LOG_LSA * backup_start_lsa, LOG_LSA * backup_ckpt_lsa,
                                               ^
src/storage/file_io.c:7155:82: note: Function 'fileio_start_backup' argument 6 names different: declaration 'backup_ckpt_lsa' definition 'backup_checkpoint_lsa_p'.
       FILEIO_BACKUP_LEVEL backup_level, LOG_LSA * backup_start_lsa_p, LOG_LSA * backup_checkpoint_lsa_p,
                                                                                 ^
src/storage/file_io.c:7156:36: style:inconclusive: Function 'fileio_start_backup' argument 7 names different: declaration 'all_levels_info' definition 'all_levels_info_p'. [funcArgNamesDifferent]
       FILEIO_BACKUP_RECORD_INFO * all_levels_info_p, FILEIO_BACKUP_SESSION * session_p,
                                   ^
src/storage/file_io.h:557:38: note: Function 'fileio_start_backup' argument 7 names different: declaration 'all_levels_info' definition 'all_levels_info_p'.
         FILEIO_BACKUP_RECORD_INFO * all_levels_info,
                                     ^
src/storage/file_io.c:7156:36: note: Function 'fileio_start_backup' argument 7 names different: declaration 'all_levels_info' definition 'all_levels_info_p'.
       FILEIO_BACKUP_RECORD_INFO * all_levels_info_p, FILEIO_BACKUP_SESSION * session_p,
                                   ^
src/storage/file_io.c:7156:79: style:inconclusive: Function 'fileio_start_backup' argument 8 names different: declaration 'session' definition 'session_p'. [funcArgNamesDifferent]
       FILEIO_BACKUP_RECORD_INFO * all_levels_info_p, FILEIO_BACKUP_SESSION * session_p,
                                                                              ^
src/storage/file_io.h:558:34: note: Function 'fileio_start_backup' argument 8 names different: declaration 'session' definition 'session_p'.
         FILEIO_BACKUP_SESSION * session, FILEIO_ZIP_METHOD zip_method,
                                 ^
src/storage/file_io.c:7156:79: note: Function 'fileio_start_backup' argument 8 names different: declaration 'session' definition 'session_p'.
       FILEIO_BACKUP_RECORD_INFO * all_levels_info_p, FILEIO_BACKUP_SESSION * session_p,
                                                                              ^
src/storage/file_io.c:7335:72: style:inconclusive: Function 'fileio_finish_backup' argument 2 names different: declaration 'session' definition 'session_p'. [funcArgNamesDifferent]
fileio_finish_backup (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session_p)
                                                                       ^
src/storage/file_io.h:560:102: note: Function 'fileio_finish_backup' argument 2 names different: declaration 'session' definition 'session_p'.
extern FILEIO_BACKUP_SESSION *fileio_finish_backup (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session);
                                                                                                     ^
src/storage/file_io.c:7335:72: note: Function 'fileio_finish_backup' argument 2 names different: declaration 'session' definition 'session_p'.
fileio_finish_backup (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session_p)
                                                                       ^
src/storage/file_io.c:7445:56: style:inconclusive: Function 'fileio_remove_all_backup' argument 2 names different: declaration 'level' definition 'start_level'. [funcArgNamesDifferent]
fileio_remove_all_backup (THREAD_ENTRY * thread_p, int start_level)
                                                       ^
src/storage/file_io.h:549:68: note: Function 'fileio_remove_all_backup' argument 2 names different: declaration 'level' definition 'start_level'.
extern void fileio_remove_all_backup (THREAD_ENTRY * thread_p, int level);
                                                                   ^
src/storage/file_io.c:7445:56: note: Function 'fileio_remove_all_backup' argument 2 names different: declaration 'level' definition 'start_level'.
fileio_remove_all_backup (THREAD_ENTRY * thread_p, int start_level)
                                                       ^
src/storage/file_io.c:7494:38: style:inconclusive: Function 'fileio_allocate_node' argument 1 names different: declaration 'qp' definition 'queue_p'. [funcArgNamesDifferent]
fileio_allocate_node (FILEIO_QUEUE * queue_p, FILEIO_BACKUP_HEADER * backup_header_p)
                                     ^
src/storage/file_io.c:552:58: note: Function 'fileio_allocate_node' argument 1 names different: declaration 'qp' definition 'queue_p'.
static FILEIO_NODE *fileio_allocate_node (FILEIO_QUEUE * qp, FILEIO_BACKUP_HEADER * backup_hdr);
                                                         ^
src/storage/file_io.c:7494:38: note: Function 'fileio_allocate_node' argument 1 names different: declaration 'qp' definition 'queue_p'.
fileio_allocate_node (FILEIO_QUEUE * queue_p, FILEIO_BACKUP_HEADER * backup_header_p)
                                     ^
src/storage/file_io.c:7494:70: style:inconclusive: Function 'fileio_allocate_node' argument 2 names different: declaration 'backup_hdr' definition 'backup_header_p'. [funcArgNamesDifferent]
fileio_allocate_node (FILEIO_QUEUE * queue_p, FILEIO_BACKUP_HEADER * backup_header_p)
                                                                     ^
src/storage/file_io.c:552:85: note: Function 'fileio_allocate_node' argument 2 names different: declaration 'backup_hdr' definition 'backup_header_p'.
static FILEIO_NODE *fileio_allocate_node (FILEIO_QUEUE * qp, FILEIO_BACKUP_HEADER * backup_hdr);
                                                                                    ^
src/storage/file_io.c:7494:70: note: Function 'fileio_allocate_node' argument 2 names different: declaration 'backup_hdr' definition 'backup_header_p'.
fileio_allocate_node (FILEIO_QUEUE * queue_p, FILEIO_BACKUP_HEADER * backup_header_p)
                                                                     ^
src/storage/file_io.c:7579:34: style:inconclusive: Function 'fileio_free_node' argument 1 names different: declaration 'qp' definition 'queue_p'. [funcArgNamesDifferent]
fileio_free_node (FILEIO_QUEUE * queue_p, FILEIO_NODE * node_p)
                                 ^
src/storage/file_io.c:553:54: note: Function 'fileio_free_node' argument 1 names different: declaration 'qp' definition 'queue_p'.
static FILEIO_NODE *fileio_free_node (FILEIO_QUEUE * qp, FILEIO_NODE * node);
                                                     ^
src/storage/file_io.c:7579:34: note: Function 'fileio_free_node' argument 1 names different: declaration 'qp' definition 'queue_p'.
fileio_free_node (FILEIO_QUEUE * queue_p, FILEIO_NODE * node_p)
                                 ^
src/storage/file_io.c:7579:57: style:inconclusive: Function 'fileio_free_node' argument 2 names different: declaration 'node' definition 'node_p'. [funcArgNamesDifferent]
fileio_free_node (FILEIO_QUEUE * queue_p, FILEIO_NODE * node_p)
                                                        ^
src/storage/file_io.c:553:72: note: Function 'fileio_free_node' argument 2 names different: declaration 'node' definition 'node_p'.
static FILEIO_NODE *fileio_free_node (FILEIO_QUEUE * qp, FILEIO_NODE * node);
                                                                       ^
src/storage/file_io.c:7579:57: note: Function 'fileio_free_node' argument 2 names different: declaration 'node' definition 'node_p'.
fileio_free_node (FILEIO_QUEUE * queue_p, FILEIO_NODE * node_p)
                                                        ^
src/storage/file_io.c:7629:42: style:inconclusive: Function 'fileio_delete_queue_head' argument 1 names different: declaration 'qp' definition 'queue_p'. [funcArgNamesDifferent]
fileio_delete_queue_head (FILEIO_QUEUE * queue_p)
                                         ^
src/storage/file_io.c:554:62: note: Function 'fileio_delete_queue_head' argument 1 names different: declaration 'qp' definition 'queue_p'.
static FILEIO_NODE *fileio_delete_queue_head (FILEIO_QUEUE * qp);
                                                             ^
src/storage/file_io.c:7629:42: note: Function 'fileio_delete_queue_head' argument 1 names different: declaration 'qp' definition 'queue_p'.
fileio_delete_queue_head (FILEIO_QUEUE * queue_p)
                                         ^
src/storage/file_io.c:7659:44: style:inconclusive: Function 'fileio_compress_backup_node' argument 1 names different: declaration 'node' definition 'node_p'. [funcArgNamesDifferent]
fileio_compress_backup_node (FILEIO_NODE * node_p, FILEIO_BACKUP_HEADER * backup_header_p)
                                           ^
src/storage/file_io.c:555:55: note: Function 'fileio_compress_backup_node' argument 1 names different: declaration 'node' definition 'node_p'.
static int fileio_compress_backup_node (FILEIO_NODE * node, FILEIO_BACKUP_HEADER * backup_hdr);
                                                      ^
src/storage/file_io.c:7659:44: note: Function 'fileio_compress_backup_node' argument 1 names different: declaration 'node' definition 'node_p'.
fileio_compress_backup_node (FILEIO_NODE * node_p, FILEIO_BACKUP_HEADER * backup_header_p)
                                           ^
src/storage/file_io.c:7659:75: style:inconclusive: Function 'fileio_compress_backup_node' argument 2 names different: declaration 'backup_hdr' definition 'backup_header_p'. [funcArgNamesDifferent]
fileio_compress_backup_node (FILEIO_NODE * node_p, FILEIO_BACKUP_HEADER * backup_header_p)
                                                                          ^
src/storage/file_io.c:555:84: note: Function 'fileio_compress_backup_node' argument 2 names different: declaration 'backup_hdr' definition 'backup_header_p'.
static int fileio_compress_backup_node (FILEIO_NODE * node, FILEIO_BACKUP_HEADER * backup_hdr);
                                                                                   ^
src/storage/file_io.c:7659:75: note: Function 'fileio_compress_backup_node' argument 2 names different: declaration 'backup_hdr' definition 'backup_header_p'.
fileio_compress_backup_node (FILEIO_NODE * node_p, FILEIO_BACKUP_HEADER * backup_header_p)
                                                                          ^
src/storage/file_io.c:7742:76: style:inconclusive: Function 'fileio_write_backup_node' argument 2 names different: declaration 'session' definition 'session_p'. [funcArgNamesDifferent]
fileio_write_backup_node (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session_p, FILEIO_NODE * node_p,
                                                                           ^
src/storage/file_io.c:556:87: note: Function 'fileio_write_backup_node' argument 2 names different: declaration 'session' definition 'session_p'.
static int fileio_write_backup_node (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session, FILEIO_NODE * node,
                                                                                      ^
src/storage/file_io.c:7742:76: note: Function 'fileio_write_backup_node' argument 2 names different: declaration 'session' definition 'session_p'.
fileio_write_backup_node (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session_p, FILEIO_NODE * node_p,
                                                                           ^
src/storage/file_io.c:7742:101: style:inconclusive: Function 'fileio_write_backup_node' argument 3 names different: declaration 'node' definition 'node_p'. [funcArgNamesDifferent]
fileio_write_backup_node (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session_p, FILEIO_NODE * node_p,
                                                                                                    ^
src/storage/file_io.c:556:110: note: Function 'fileio_write_backup_node' argument 3 names different: declaration 'node' definition 'node_p'.
static int fileio_write_backup_node (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session, FILEIO_NODE * node,
                                                                                                             ^
src/storage/file_io.c:7742:101: note: Function 'fileio_write_backup_node' argument 3 names different: declaration 'node' definition 'node_p'.
fileio_write_backup_node (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session_p, FILEIO_NODE * node_p,
                                                                                                    ^
src/storage/file_io.c:7743:29: style:inconclusive: Function 'fileio_write_backup_node' argument 4 names different: declaration 'backup_hdr' definition 'backup_header_p'. [funcArgNamesDifferent]
     FILEIO_BACKUP_HEADER * backup_header_p)
                            ^
src/storage/file_io.c:557:33: note: Function 'fileio_write_backup_node' argument 4 names different: declaration 'backup_hdr' definition 'backup_header_p'.
         FILEIO_BACKUP_HEADER * backup_hdr);
                                ^
src/storage/file_io.c:7743:29: note: Function 'fileio_write_backup_node' argument 4 names different: declaration 'backup_hdr' definition 'backup_header_p'.
     FILEIO_BACKUP_HEADER * backup_header_p)
                            ^
src/storage/file_io.c:8214:72: style:inconclusive: Function 'fileio_backup_volume' argument 2 names different: declaration 'session' definition 'session_p'. [funcArgNamesDifferent]
fileio_backup_volume (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session_p, const char *from_vol_label_p,
                                                                       ^
src/storage/file_io.h:562:83: note: Function 'fileio_backup_volume' argument 2 names different: declaration 'session' definition 'session_p'.
extern int fileio_backup_volume (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session, const char *from_vlabel,
                                                                                  ^
src/storage/file_io.c:8214:72: note: Function 'fileio_backup_volume' argument 2 names different: declaration 'session' definition 'session_p'.
fileio_backup_volume (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session_p, const char *from_vol_label_p,
                                                                       ^
src/storage/file_io.c:8214:95: style:inconclusive: Function 'fileio_backup_volume' argument 3 names different: declaration 'from_vlabel' definition 'from_vol_label_p'. [funcArgNamesDifferent]
fileio_backup_volume (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session_p, const char *from_vol_label_p,
                                                                                              ^
src/storage/file_io.h:562:104: note: Function 'fileio_backup_volume' argument 3 names different: declaration 'from_vlabel' definition 'from_vol_label_p'.
extern int fileio_backup_volume (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session, const char *from_vlabel,
                                                                                                       ^
src/storage/file_io.c:8214:95: note: Function 'fileio_backup_volume' argument 3 names different: declaration 'from_vlabel' definition 'from_vol_label_p'.
fileio_backup_volume (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session_p, const char *from_vol_label_p,
                                                                                              ^
src/storage/file_io.c:8215:15: style:inconclusive: Function 'fileio_backup_volume' argument 4 names different: declaration 'from_volid' definition 'from_vol_id'. [funcArgNamesDifferent]
        VOLID from_vol_id, PAGEID last_page, bool is_only_updated_pages)
              ^
src/storage/file_io.h:563:12: note: Function 'fileio_backup_volume' argument 4 names different: declaration 'from_volid' definition 'from_vol_id'.
     VOLID from_volid, PAGEID last_page, bool only_updated_pages);
           ^
src/storage/file_io.c:8215:15: note: Function 'fileio_backup_volume' argument 4 names different: declaration 'from_volid' definition 'from_vol_id'.
        VOLID from_vol_id, PAGEID last_page, bool is_only_updated_pages)
              ^
src/storage/file_io.c:8215:51: style:inconclusive: Function 'fileio_backup_volume' argument 6 names different: declaration 'only_updated_pages' definition 'is_only_updated_pages'. [funcArgNamesDifferent]
        VOLID from_vol_id, PAGEID last_page, bool is_only_updated_pages)
                                                  ^
src/storage/file_io.h:563:47: note: Function 'fileio_backup_volume' argument 6 names different: declaration 'only_updated_pages' definition 'is_only_updated_pages'.
     VOLID from_volid, PAGEID last_page, bool only_updated_pages);
                                              ^
src/storage/file_io.c:8215:51: note: Function 'fileio_backup_volume' argument 6 names different: declaration 'only_updated_pages' definition 'is_only_updated_pages'.
        VOLID from_vol_id, PAGEID last_page, bool is_only_updated_pages)
                                                  ^
src/storage/file_io.c:8576:71: style:inconclusive: Function 'fileio_flush_backup' argument 2 names different: declaration 'session' definition 'session_p'. [funcArgNamesDifferent]
fileio_flush_backup (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session_p)
                                                                      ^
src/storage/file_io.c:525:82: note: Function 'fileio_flush_backup' argument 2 names different: declaration 'session' definition 'session_p'.
static int fileio_flush_backup (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session);
                                                                                 ^
src/storage/file_io.c:8576:71: note: Function 'fileio_flush_backup' argument 2 names different: declaration 'session' definition 'session_p'.
fileio_flush_backup (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session_p)
                                                                      ^
src/storage/file_io.c:8722:70: style:inconclusive: Function 'fileio_read_backup' argument 2 names different: declaration 'session' definition 'session_p'. [funcArgNamesDifferent]
fileio_read_backup (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session_p, int page_id)
                                                                     ^
src/storage/file_io.c:526:85: note: Function 'fileio_read_backup' argument 2 names different: declaration 'session' definition 'session_p'.
static ssize_t fileio_read_backup (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session, int pageid);
                                                                                    ^
src/storage/file_io.c:8722:70: note: Function 'fileio_read_backup' argument 2 names different: declaration 'session' definition 'session_p'.
fileio_read_backup (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session_p, int page_id)
                                                                     ^
src/storage/file_io.c:8722:85: style:inconclusive: Function 'fileio_read_backup' argument 3 names different: declaration 'pageid' definition 'page_id'. [funcArgNamesDifferent]
fileio_read_backup (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session_p, int page_id)
                                                                                    ^
src/storage/file_io.c:526:98: note: Function 'fileio_read_backup' argument 3 names different: declaration 'pageid' definition 'page_id'.
static ssize_t fileio_read_backup (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session, int pageid);
                                                                                                 ^
src/storage/file_io.c:8722:85: note: Function 'fileio_read_backup' argument 3 names different: declaration 'pageid' definition 'page_id'.
fileio_read_backup (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session_p, int page_id)
                                                                                    ^
src/storage/file_io.c:8833:71: style:inconclusive: Function 'fileio_write_backup' argument 2 names different: declaration 'session' definition 'session_p'. [funcArgNamesDifferent]
fileio_write_backup (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session_p, ssize_t to_write_nbytes)
                                                                      ^
src/storage/file_io.c:527:82: note: Function 'fileio_write_backup' argument 2 names different: declaration 'session' definition 'session_p'.
static int fileio_write_backup (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session, ssize_t towrite_nbytes);
                                                                                 ^
src/storage/file_io.c:8833:71: note: Function 'fileio_write_backup' argument 2 names different: declaration 'session' definition 'session_p'.
fileio_write_backup (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session_p, ssize_t to_write_nbytes)
                                                                      ^
src/storage/file_io.c:8833:90: style:inconclusive: Function 'fileio_write_backup' argument 3 names different: declaration 'towrite_nbytes' definition 'to_write_nbytes'. [funcArgNamesDifferent]
fileio_write_backup (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session_p, ssize_t to_write_nbytes)
                                                                                         ^
src/storage/file_io.c:527:99: note: Function 'fileio_write_backup' argument 3 names different: declaration 'towrite_nbytes' definition 'to_write_nbytes'.
static int fileio_write_backup (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session, ssize_t towrite_nbytes);
                                                                                                  ^
src/storage/file_io.c:8833:90: note: Function 'fileio_write_backup' argument 3 names different: declaration 'towrite_nbytes' definition 'to_write_nbytes'.
fileio_write_backup (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session_p, ssize_t to_write_nbytes)
                                                                                         ^
src/storage/file_io.c:8886:53: style:inconclusive: Function 'fileio_write_backup_header' argument 1 names different: declaration 'session' definition 'session_p'. [funcArgNamesDifferent]
fileio_write_backup_header (FILEIO_BACKUP_SESSION * session_p)
                                                    ^
src/storage/file_io.c:528:64: note: Function 'fileio_write_backup_header' argument 1 names different: declaration 'session' definition 'session_p'.
static int fileio_write_backup_header (FILEIO_BACKUP_SESSION * session);
                                                               ^
src/storage/file_io.c:8886:53: note: Function 'fileio_write_backup_header' argument 1 names different: declaration 'session' definition 'session_p'.
fileio_write_backup_header (FILEIO_BACKUP_SESSION * session_p)
                                                    ^
src/storage/file_io.c:8943:65: style:inconclusive: Function 'fileio_initialize_restore' argument 2 names different: declaration 'db_fullname' definition 'db_full_name_p'. [funcArgNamesDifferent]
fileio_initialize_restore (THREAD_ENTRY * thread_p, const char *db_full_name_p, char *backup_source_p,
                                                                ^
src/storage/file_io.c:530:95: note: Function 'fileio_initialize_restore' argument 2 names different: declaration 'db_fullname' definition 'db_full_name_p'.
static FILEIO_BACKUP_SESSION *fileio_initialize_restore (THREAD_ENTRY * thread_p, const char *db_fullname,
                                                                                              ^
src/storage/file_io.c:8943:65: note: Function 'fileio_initialize_restore' argument 2 names different: declaration 'db_fullname' definition 'db_full_name_p'.
fileio_initialize_restore (THREAD_ENTRY * thread_p, const char *db_full_name_p, char *backup_source_p,
                                                                ^
src/storage/file_io.c:8943:87: style:inconclusive: Function 'fileio_initialize_restore' argument 3 names different: declaration 'backup_src' definition 'backup_source_p'. [funcArgNamesDifferent]
fileio_initialize_restore (THREAD_ENTRY * thread_p, const char *db_full_name_p, char *backup_source_p,
                                                                                      ^
src/storage/file_io.c:531:15: note: Function 'fileio_initialize_restore' argument 3 names different: declaration 'backup_src' definition 'backup_source_p'.
        char *backup_src, FILEIO_BACKUP_SESSION * session,
              ^
src/storage/file_io.c:8943:87: note: Function 'fileio_initialize_restore' argument 3 names different: declaration 'backup_src' definition 'backup_source_p'.
fileio_initialize_restore (THREAD_ENTRY * thread_p, const char *db_full_name_p, char *backup_source_p,
                                                                                      ^
src/storage/file_io.c:8944:31: style:inconclusive: Function 'fileio_initialize_restore' argument 4 names different: declaration 'session' definition 'session_p'. [funcArgNamesDifferent]
      FILEIO_BACKUP_SESSION * session_p, FILEIO_BACKUP_LEVEL level,
                              ^
src/storage/file_io.c:531:51: note: Function 'fileio_initialize_restore' argument 4 names different: declaration 'session' definition 'session_p'.
        char *backup_src, FILEIO_BACKUP_SESSION * session,
                                                  ^
src/storage/file_io.c:8944:31: note: Function 'fileio_initialize_restore' argument 4 names different: declaration 'session' definition 'session_p'.
      FILEIO_BACKUP_SESSION * session_p, FILEIO_BACKUP_LEVEL level,
                              ^
src/storage/file_io.c:8945:51: style:inconclusive: Function 'fileio_initialize_restore' argument 7 names different: declaration 'newvolpath' definition 'is_new_vol_path'. [funcArgNamesDifferent]
      const char *restore_verbose_file_path, bool is_new_vol_path)
                                                  ^
src/storage/file_io.c:533:53: note: Function 'fileio_initialize_restore' argument 7 names different: declaration 'newvolpath' definition 'is_new_vol_path'.
        const char *restore_verbose_file_path, bool newvolpath);
                                                    ^
src/storage/file_io.c:8945:51: note: Function 'fileio_initialize_restore' argument 7 names different: declaration 'newvolpath' definition 'is_new_vol_path'.
      const char *restore_verbose_file_path, bool is_new_vol_path)
                                                  ^
src/storage/file_io.c:8979:72: style:inconclusive: Function 'fileio_abort_restore' argument 2 names different: declaration 'session' definition 'session_p'. [funcArgNamesDifferent]
fileio_abort_restore (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session_p)
                                                                       ^
src/storage/file_io.h:571:84: note: Function 'fileio_abort_restore' argument 2 names different: declaration 'session' definition 'session_p'.
extern void fileio_abort_restore (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session);
                                                                                   ^
src/storage/file_io.c:8979:72: note: Function 'fileio_abort_restore' argument 2 names different: declaration 'session' definition 'session_p'.
fileio_abort_restore (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session_p)
                                                                       ^
src/storage/file_io.c:8995:71: style:inconclusive: Function 'fileio_read_restore' argument 2 names different: declaration 'session' definition 'session_p'. [funcArgNamesDifferent]
fileio_read_restore (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session_p, int to_read_nbytes)
                                                                      ^
src/storage/file_io.c:534:82: note: Function 'fileio_read_restore' argument 2 names different: declaration 'session' definition 'session_p'.
static int fileio_read_restore (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session, int toread_nbytes);
                                                                                 ^
src/storage/file_io.c:8995:71: note: Function 'fileio_read_restore' argument 2 names different: declaration 'session' definition 'session_p'.
fileio_read_restore (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session_p, int to_read_nbytes)
                                                                      ^
src/storage/file_io.c:8995:86: style:inconclusive: Function 'fileio_read_restore' argument 3 names different: declaration 'toread_nbytes' definition 'to_read_nbytes'. [funcArgNamesDifferent]
fileio_read_restore (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session_p, int to_read_nbytes)
                                                                                     ^
src/storage/file_io.c:534:95: note: Function 'fileio_read_restore' argument 3 names different: declaration 'toread_nbytes' definition 'to_read_nbytes'.
static int fileio_read_restore (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session, int toread_nbytes);
                                                                                              ^
src/storage/file_io.c:8995:86: note: Function 'fileio_read_restore' argument 3 names different: declaration 'toread_nbytes' definition 'to_read_nbytes'.
fileio_read_restore (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session_p, int to_read_nbytes)
                                                                                     ^
src/storage/file_io.c:9190:53: style:inconclusive: Function 'fileio_read_restore_header' argument 1 names different: declaration 'session' definition 'session_p'. [funcArgNamesDifferent]
fileio_read_restore_header (FILEIO_BACKUP_SESSION * session_p)
                                                    ^
src/storage/file_io.c:537:64: note: Function 'fileio_read_restore_header' argument 1 names different: declaration 'session' definition 'session_p'.
static int fileio_read_restore_header (FILEIO_BACKUP_SESSION * session);
                                                               ^
src/storage/file_io.c:9190:53: note: Function 'fileio_read_restore_header' argument 1 names different: declaration 'session' definition 'session_p'.
fileio_read_restore_header (FILEIO_BACKUP_SESSION * session_p)
                                                    ^
src/storage/file_io.c:9263:60: style:inconclusive: Function 'fileio_start_restore' argument 2 names different: declaration 'db_fullname' definition 'db_full_name_p'. [funcArgNamesDifferent]
fileio_start_restore (THREAD_ENTRY * thread_p, const char *db_full_name_p, char *backup_source_p,
                                                           ^
src/storage/file_io.h:564:90: note: Function 'fileio_start_restore' argument 2 names different: declaration 'db_fullname' definition 'db_full_name_p'.
extern FILEIO_BACKUP_SESSION *fileio_start_restore (THREAD_ENTRY * thread_p, const char *db_fullname,
                                                                                         ^
src/storage/file_io.c:9263:60: note: Function 'fileio_start_restore' argument 2 names different: declaration 'db_fullname' definition 'db_full_name_p'.
fileio_start_restore (THREAD_ENTRY * thread_p, const char *db_full_name_p, char *backup_source_p,
                                                           ^
src/storage/file_io.c:9263:82: style:inconclusive: Function 'fileio_start_restore' argument 3 names different: declaration 'backup_source' definition 'backup_source_p'. [funcArgNamesDifferent]
fileio_start_restore (THREAD_ENTRY * thread_p, const char *db_full_name_p, char *backup_source_p,
                                                                                 ^
src/storage/file_io.h:565:17: note: Function 'fileio_start_restore' argument 3 names different: declaration 'backup_source' definition 'backup_source_p'.
          char *backup_source, INT64 match_dbcreation,
                ^
src/storage/file_io.c:9263:82: note: Function 'fileio_start_restore' argument 3 names different: declaration 'backup_source' definition 'backup_source_p'.
fileio_start_restore (THREAD_ENTRY * thread_p, const char *db_full_name_p, char *backup_source_p,
                                                                                 ^
src/storage/file_io.c:9264:15: style:inconclusive: Function 'fileio_start_restore' argument 4 names different: declaration 'match_dbcreation' definition 'match_db_creation_time'. [funcArgNamesDifferent]
        INT64 match_db_creation_time, PGLENGTH * db_io_page_size_p, float *db_compatibility_p,
              ^
src/storage/file_io.h:565:38: note: Function 'fileio_start_restore' argument 4 names different: declaration 'match_dbcreation' definition 'match_db_creation_time'.
          char *backup_source, INT64 match_dbcreation,
                                     ^
src/storage/file_io.c:9264:15: note: Function 'fileio_start_restore' argument 4 names different: declaration 'match_dbcreation' definition 'match_db_creation_time'.
        INT64 match_db_creation_time, PGLENGTH * db_io_page_size_p, float *db_compatibility_p,
              ^
src/storage/file_io.c:9264:50: style:inconclusive: Function 'fileio_start_restore' argument 5 names different: declaration 'db_iopagesize' definition 'db_io_page_size_p'. [funcArgNamesDifferent]
        INT64 match_db_creation_time, PGLENGTH * db_io_page_size_p, float *db_compatibility_p,
                                                 ^
src/storage/file_io.h:566:22: note: Function 'fileio_start_restore' argument 5 names different: declaration 'db_iopagesize' definition 'db_io_page_size_p'.
          PGLENGTH * db_iopagesize, float *db_compatibility,
                     ^
src/storage/file_io.c:9264:50: note: Function 'fileio_start_restore' argument 5 names different: declaration 'db_iopagesize' definition 'db_io_page_size_p'.
        INT64 match_db_creation_time, PGLENGTH * db_io_page_size_p, float *db_compatibility_p,
                                                 ^
src/storage/file_io.c:9264:76: style:inconclusive: Function 'fileio_start_restore' argument 6 names different: declaration 'db_compatibility' definition 'db_compatibility_p'. [funcArgNamesDifferent]
        INT64 match_db_creation_time, PGLENGTH * db_io_page_size_p, float *db_compatibility_p,
                                                                           ^
src/storage/file_io.h:566:44: note: Function 'fileio_start_restore' argument 6 names different: declaration 'db_compatibility' definition 'db_compatibility_p'.
          PGLENGTH * db_iopagesize, float *db_compatibility,
                                           ^
src/storage/file_io.c:9264:76: note: Function 'fileio_start_restore' argument 6 names different: declaration 'db_compatibility' definition 'db_compatibility_p'.
        INT64 match_db_creation_time, PGLENGTH * db_io_page_size_p, float *db_compatibility_p,
                                                                           ^
src/storage/file_io.c:9265:33: style:inconclusive: Function 'fileio_start_restore' argument 7 names different: declaration 'session' definition 'session_p'. [funcArgNamesDifferent]
        FILEIO_BACKUP_SESSION * session_p, FILEIO_BACKUP_LEVEL level, bool is_authenticate,
                                ^
src/storage/file_io.h:567:35: note: Function 'fileio_start_restore' argument 7 names different: declaration 'session' definition 'session_p'.
          FILEIO_BACKUP_SESSION * session, FILEIO_BACKUP_LEVEL level,
                                  ^
src/storage/file_io.c:9265:33: note: Function 'fileio_start_restore' argument 7 names different: declaration 'session' definition 'session_p'.
        FILEIO_BACKUP_SESSION * session_p, FILEIO_BACKUP_LEVEL level, bool is_authenticate,
                                ^
src/storage/file_io.c:9265:76: style:inconclusive: Function 'fileio_start_restore' argument 9 names different: declaration 'authenticate' definition 'is_authenticate'. [funcArgNamesDifferent]
        FILEIO_BACKUP_SESSION * session_p, FILEIO_BACKUP_LEVEL level, bool is_authenticate,
                                                                           ^
src/storage/file_io.h:568:16: note: Function 'fileio_start_restore' argument 9 names different: declaration 'authenticate' definition 'is_authenticate'.
          bool authenticate, INT64 match_bkupcreation,
               ^
src/storage/file_io.c:9265:76: note: Function 'fileio_start_restore' argument 9 names different: declaration 'authenticate' definition 'is_authenticate'.
        FILEIO_BACKUP_SESSION * session_p, FILEIO_BACKUP_LEVEL level, bool is_authenticate,
                                                                           ^
src/storage/file_io.c:9266:15: style:inconclusive: Function 'fileio_start_restore' argument 10 names different: declaration 'match_bkupcreation' definition 'match_backup_creation_time'. [funcArgNamesDifferent]
        INT64 match_backup_creation_time, const char *restore_verbose_file_path, bool is_new_vol_path)
              ^
src/storage/file_io.h:568:36: note: Function 'fileio_start_restore' argument 10 names different: declaration 'match_bkupcreation' definition 'match_backup_creation_time'.
          bool authenticate, INT64 match_bkupcreation,
                                   ^
src/storage/file_io.c:9266:15: note: Function 'fileio_start_restore' argument 10 names different: declaration 'match_bkupcreation' definition 'match_backup_creation_time'.
        INT64 match_backup_creation_time, const char *restore_verbose_file_path, bool is_new_vol_path)
              ^
src/storage/file_io.c:9266:87: style:inconclusive: Function 'fileio_start_restore' argument 12 names different: declaration 'newvolpath' definition 'is_new_vol_path'. [funcArgNamesDifferent]
        INT64 match_backup_creation_time, const char *restore_verbose_file_path, bool is_new_vol_path)
                                                                                      ^
src/storage/file_io.h:569:55: note: Function 'fileio_start_restore' argument 12 names different: declaration 'newvolpath' definition 'is_new_vol_path'.
          const char *restore_verbose_file_path, bool newvolpath);
                                                      ^
src/storage/file_io.c:9266:87: note: Function 'fileio_start_restore' argument 12 names different: declaration 'newvolpath' definition 'is_new_vol_path'.
        INT64 match_backup_creation_time, const char *restore_verbose_file_path, bool is_new_vol_path)
                                                                                      ^
src/storage/file_io.c:9334:63: style:inconclusive: Function 'fileio_continue_restore' argument 2 names different: declaration 'db_fullname' definition 'db_full_name_p'. [funcArgNamesDifferent]
fileio_continue_restore (THREAD_ENTRY * thread_p, const char *db_full_name_p, INT64 db_creation_time,
                                                              ^
src/storage/file_io.c:546:93: note: Function 'fileio_continue_restore' argument 2 names different: declaration 'db_fullname' definition 'db_full_name_p'.
static FILEIO_BACKUP_SESSION *fileio_continue_restore (THREAD_ENTRY * thread_p, const char *db_fullname,
                                                                                            ^
src/storage/file_io.c:9334:63: note: Function 'fileio_continue_restore' argument 2 names different: declaration 'db_fullname' definition 'db_full_name_p'.
fileio_continue_restore (THREAD_ENTRY * thread_p, const char *db_full_name_p, INT64 db_creation_time,
                                                              ^
src/storage/file_io.c:9334:85: style:inconclusive: Function 'fileio_continue_restore' argument 3 names different: declaration 'db_creation' definition 'db_creation_time'. [funcArgNamesDifferent]
fileio_continue_restore (THREAD_ENTRY * thread_p, const char *db_full_name_p, INT64 db_creation_time,
                                                                                    ^
src/storage/file_io.c:547:20: note: Function 'fileio_continue_restore' argument 3 names different: declaration 'db_creation' definition 'db_creation_time'.
             INT64 db_creation, FILEIO_BACKUP_SESSION * session,
                   ^
src/storage/file_io.c:9334:85: note: Function 'fileio_continue_restore' argument 3 names different: declaration 'db_creation' definition 'db_creation_time'.
fileio_continue_restore (THREAD_ENTRY * thread_p, const char *db_full_name_p, INT64 db_creation_time,
                                                                                    ^
src/storage/file_io.c:9335:29: style:inconclusive: Function 'fileio_continue_restore' argument 4 names different: declaration 'session' definition 'session_p'. [funcArgNamesDifferent]
    FILEIO_BACKUP_SESSION * session_p, bool is_first_time, bool is_authenticate,
                            ^
src/storage/file_io.c:547:57: note: Function 'fileio_continue_restore' argument 4 names different: declaration 'session' definition 'session_p'.
             INT64 db_creation, FILEIO_BACKUP_SESSION * session,
                                                        ^
src/storage/file_io.c:9335:29: note: Function 'fileio_continue_restore' argument 4 names different: declaration 'session' definition 'session_p'.
    FILEIO_BACKUP_SESSION * session_p, bool is_first_time, bool is_authenticate,
                            ^
src/storage/file_io.c:9335:45: style:inconclusive: Function 'fileio_continue_restore' argument 5 names different: declaration 'first_time' definition 'is_first_time'. [funcArgNamesDifferent]
    FILEIO_BACKUP_SESSION * session_p, bool is_first_time, bool is_authenticate,
                                            ^
src/storage/file_io.c:548:19: note: Function 'fileio_continue_restore' argument 5 names different: declaration 'first_time' definition 'is_first_time'.
             bool first_time, bool authenticate, INT64 match_bkupcreation);
                  ^
src/storage/file_io.c:9335:45: note: Function 'fileio_continue_restore' argument 5 names different: declaration 'first_time' definition 'is_first_time'.
    FILEIO_BACKUP_SESSION * session_p, bool is_first_time, bool is_authenticate,
                                            ^
src/storage/file_io.c:9335:65: style:inconclusive: Function 'fileio_continue_restore' argument 6 names different: declaration 'authenticate' definition 'is_authenticate'. [funcArgNamesDifferent]
    FILEIO_BACKUP_SESSION * session_p, bool is_first_time, bool is_authenticate,
                                                                ^
src/storage/file_io.c:548:36: note: Function 'fileio_continue_restore' argument 6 names different: declaration 'authenticate' definition 'is_authenticate'.
             bool first_time, bool authenticate, INT64 match_bkupcreation);
                                   ^
src/storage/file_io.c:9335:65: note: Function 'fileio_continue_restore' argument 6 names different: declaration 'authenticate' definition 'is_authenticate'.
    FILEIO_BACKUP_SESSION * session_p, bool is_first_time, bool is_authenticate,
                                                                ^
src/storage/file_io.c:9336:11: style:inconclusive: Function 'fileio_continue_restore' argument 7 names different: declaration 'match_bkupcreation' definition 'match_backup_creation_time'. [funcArgNamesDifferent]
    INT64 match_backup_creation_time)
          ^
src/storage/file_io.c:548:56: note: Function 'fileio_continue_restore' argument 7 names different: declaration 'match_bkupcreation' definition 'match_backup_creation_time'.
             bool first_time, bool authenticate, INT64 match_bkupcreation);
                                                       ^
src/storage/file_io.c:9336:11: note: Function 'fileio_continue_restore' argument 7 names different: declaration 'match_bkupcreation' definition 'match_backup_creation_time'.
    INT64 match_backup_creation_time)
          ^
src/storage/file_io.c:9682:73: style:inconclusive: Function 'fileio_finish_restore' argument 2 names different: declaration 'session' definition 'session_p'. [funcArgNamesDifferent]
fileio_finish_restore (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session_p)
                                                                        ^
src/storage/file_io.h:570:84: note: Function 'fileio_finish_restore' argument 2 names different: declaration 'session' definition 'session_p'.
extern int fileio_finish_restore (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session);
                                                                                   ^
src/storage/file_io.c:9682:73: note: Function 'fileio_finish_restore' argument 2 names different: declaration 'session' definition 'session_p'.
fileio_finish_restore (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session_p)
                                                                        ^
src/storage/file_io.c:9702:59: style:inconclusive: Function 'fileio_list_restore' argument 2 names different: declaration 'db_fullname' definition 'db_full_name_p'. [funcArgNamesDifferent]
fileio_list_restore (THREAD_ENTRY * thread_p, const char *db_full_name_p, char *backup_source_p,
                                                          ^
src/storage/file_io.h:572:70: note: Function 'fileio_list_restore' argument 2 names different: declaration 'db_fullname' definition 'db_full_name_p'.
extern int fileio_list_restore (THREAD_ENTRY * thread_p, const char *db_fullname, char *backup_source,
                                                                     ^
src/storage/file_io.c:9702:59: note: Function 'fileio_list_restore' argument 2 names different: declaration 'db_fullname' definition 'db_full_name_p'.
fileio_list_restore (THREAD_ENTRY * thread_p, const char *db_full_name_p, char *backup_source_p,
                                                          ^
src/storage/file_io.c:9702:81: style:inconclusive: Function 'fileio_list_restore' argument 3 names different: declaration 'backup_source' definition 'backup_source_p'. [funcArgNamesDifferent]
fileio_list_restore (THREAD_ENTRY * thread_p, const char *db_full_name_p, char *backup_source_p,
                                                                                ^
src/storage/file_io.h:572:89: note: Function 'fileio_list_restore' argument 3 names different: declaration 'backup_source' definition 'backup_source_p'.
extern int fileio_list_restore (THREAD_ENTRY * thread_p, const char *db_fullname, char *backup_source,
                                                                                        ^
src/storage/file_io.c:9702:81: note: Function 'fileio_list_restore' argument 3 names different: declaration 'backup_source' definition 'backup_source_p'.
fileio_list_restore (THREAD_ENTRY * thread_p, const char *db_full_name_p, char *backup_source_p,
                                                                                ^
src/storage/file_io.c:9703:40: style:inconclusive: Function 'fileio_list_restore' argument 5 names different: declaration 'newvolpath' definition 'is_new_vol_path'. [funcArgNamesDifferent]
       FILEIO_BACKUP_LEVEL level, bool is_new_vol_path)
                                       ^
src/storage/file_io.h:573:37: note: Function 'fileio_list_restore' argument 5 names different: declaration 'newvolpath' definition 'is_new_vol_path'.
    FILEIO_BACKUP_LEVEL level, bool newvolpath);
                                    ^
src/storage/file_io.c:9703:40: note: Function 'fileio_list_restore' argument 5 names different: declaration 'newvolpath' definition 'is_new_vol_path'.
       FILEIO_BACKUP_LEVEL level, bool is_new_vol_path)
                                       ^
src/storage/file_io.c:9959:80: style:inconclusive: Function 'fileio_get_next_restore_file' argument 2 names different: declaration 'session' definition 'session_p'. [funcArgNamesDifferent]
fileio_get_next_restore_file (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session_p, char *file_name_p,
                                                                               ^
src/storage/file_io.h:576:91: note: Function 'fileio_get_next_restore_file' argument 2 names different: declaration 'session' definition 'session_p'.
extern int fileio_get_next_restore_file (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session, char *filename,
                                                                                          ^
src/storage/file_io.c:9959:80: note: Function 'fileio_get_next_restore_file' argument 2 names different: declaration 'session' definition 'session_p'.
fileio_get_next_restore_file (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session_p, char *file_name_p,
                                                                               ^
src/storage/file_io.c:9959:97: style:inconclusive: Function 'fileio_get_next_restore_file' argument 3 names different: declaration 'filename' definition 'file_name_p'. [funcArgNamesDifferent]
fileio_get_next_restore_file (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session_p, char *file_name_p,
                                                                                                ^
src/storage/file_io.h:576:106: note: Function 'fileio_get_next_restore_file' argument 3 names different: declaration 'filename' definition 'file_name_p'.
extern int fileio_get_next_restore_file (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session, char *filename,
                                                                                                         ^
src/storage/file_io.c:9959:97: note: Function 'fileio_get_next_restore_file' argument 3 names different: declaration 'filename' definition 'file_name_p'.
fileio_get_next_restore_file (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session_p, char *file_name_p,
                                                                                                ^
src/storage/file_io.c:9960:18: style:inconclusive: Function 'fileio_get_next_restore_file' argument 4 names different: declaration 'volid' definition 'vol_id_p'. [funcArgNamesDifferent]
         VOLID * vol_id_p)
                 ^
src/storage/file_io.h:577:15: note: Function 'fileio_get_next_restore_file' argument 4 names different: declaration 'volid' definition 'vol_id_p'.
      VOLID * volid);
              ^
src/storage/file_io.c:9960:18: note: Function 'fileio_get_next_restore_file' argument 4 names different: declaration 'volid' definition 'vol_id_p'.
         VOLID * vol_id_p)
                 ^
src/storage/file_io.c:10034:64: style:inconclusive: Function 'fileio_fill_hole_during_restore' argument 2 names different: declaration 'next_pageid' definition 'next_page_id_p'. [funcArgNamesDifferent]
fileio_fill_hole_during_restore (THREAD_ENTRY * thread_p, int *next_page_id_p, int stop_page_id,
                                                               ^
src/storage/file_io.c:549:75: note: Function 'fileio_fill_hole_during_restore' argument 2 names different: declaration 'next_pageid' definition 'next_page_id_p'.
static int fileio_fill_hole_during_restore (THREAD_ENTRY * thread_p, int *next_pageid, int stop_pageid,
                                                                          ^
src/storage/file_io.c:10034:64: note: Function 'fileio_fill_hole_during_restore' argument 2 names different: declaration 'next_pageid' definition 'next_page_id_p'.
fileio_fill_hole_during_restore (THREAD_ENTRY * thread_p, int *next_page_id_p, int stop_page_id,
                                                               ^
src/storage/file_io.c:10034:84: style:inconclusive: Function 'fileio_fill_hole_during_restore' argument 3 names different: declaration 'stop_pageid' definition 'stop_page_id'. [funcArgNamesDifferent]
fileio_fill_hole_during_restore (THREAD_ENTRY * thread_p, int *next_page_id_p, int stop_page_id,
                                                                                   ^
src/storage/file_io.c:549:92: note: Function 'fileio_fill_hole_during_restore' argument 3 names different: declaration 'stop_pageid' definition 'stop_page_id'.
static int fileio_fill_hole_during_restore (THREAD_ENTRY * thread_p, int *next_pageid, int stop_pageid,
                                                                                           ^
src/storage/file_io.c:10034:84: note: Function 'fileio_fill_hole_during_restore' argument 3 names different: declaration 'stop_pageid' definition 'stop_page_id'.
fileio_fill_hole_during_restore (THREAD_ENTRY * thread_p, int *next_page_id_p, int stop_page_id,
                                                                                   ^
src/storage/file_io.c:10035:30: style:inconclusive: Function 'fileio_fill_hole_during_restore' argument 4 names different: declaration 'session' definition 'session_p'. [funcArgNamesDifferent]
     FILEIO_BACKUP_SESSION * session_p, FILEIO_RESTORE_PAGE_BITMAP * page_bitmap)
                             ^
src/storage/file_io.c:550:34: note: Function 'fileio_fill_hole_during_restore' argument 4 names different: declaration 'session' definition 'session_p'.
         FILEIO_BACKUP_SESSION * session, FILEIO_RESTORE_PAGE_BITMAP * page_bitmap);
                                 ^
src/storage/file_io.c:10035:30: note: Function 'fileio_fill_hole_during_restore' argument 4 names different: declaration 'session' definition 'session_p'.
     FILEIO_BACKUP_SESSION * session_p, FILEIO_RESTORE_PAGE_BITMAP * page_bitmap)
                             ^
src/storage/file_io.c:10083:84: style:inconclusive: Function 'fileio_decompress_restore_volume' argument 2 names different: declaration 'session' definition 'session_p'. [funcArgNamesDifferent]
fileio_decompress_restore_volume (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session_p, int nbytes)
                                                                                   ^
src/storage/file_io.c:551:95: note: Function 'fileio_decompress_restore_volume' argument 2 names different: declaration 'session' definition 'session_p'.
static int fileio_decompress_restore_volume (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session, int nbytes);
                                                                                              ^
src/storage/file_io.c:10083:84: note: Function 'fileio_decompress_restore_volume' argument 2 names different: declaration 'session' definition 'session_p'.
fileio_decompress_restore_volume (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session_p, int nbytes)
                                                                                   ^
src/storage/file_io.c:10234:73: style:inconclusive: Function 'fileio_restore_volume' argument 2 names different: declaration 'session' definition 'session_p'. [funcArgNamesDifferent]
fileio_restore_volume (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session_p, char *to_vol_label_p,
                                                                        ^
src/storage/file_io.h:578:84: note: Function 'fileio_restore_volume' argument 2 names different: declaration 'session' definition 'session_p'.
extern int fileio_restore_volume (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session, char *to_vlabel,
                                                                                   ^
src/storage/file_io.c:10234:73: note: Function 'fileio_restore_volume' argument 2 names different: declaration 'session' definition 'session_p'.
fileio_restore_volume (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session_p, char *to_vol_label_p,
                                                                        ^
src/storage/file_io.c:10234:90: style:inconclusive: Function 'fileio_restore_volume' argument 3 names different: declaration 'to_vlabel' definition 'to_vol_label_p'. [funcArgNamesDifferent]
fileio_restore_volume (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session_p, char *to_vol_label_p,
                                                                                         ^
src/storage/file_io.h:578:99: note: Function 'fileio_restore_volume' argument 3 names different: declaration 'to_vlabel' definition 'to_vol_label_p'.
extern int fileio_restore_volume (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session, char *to_vlabel,
                                                                                                  ^
src/storage/file_io.c:10234:90: note: Function 'fileio_restore_volume' argument 3 names different: declaration 'to_vlabel' definition 'to_vol_label_p'.
fileio_restore_volume (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session_p, char *to_vol_label_p,
                                                                                         ^
src/storage/file_io.c:10235:16: style:inconclusive: Function 'fileio_restore_volume' argument 4 names different: declaration 'verbose_to_vlabel' definition 'verbose_to_vol_label_p'. [funcArgNamesDifferent]
         char *verbose_to_vol_label_p, char *prev_vol_label_p, FILEIO_RESTORE_PAGE_BITMAP * page_bitmap,
               ^
src/storage/file_io.h:579:13: note: Function 'fileio_restore_volume' argument 4 names different: declaration 'verbose_to_vlabel' definition 'verbose_to_vol_label_p'.
      char *verbose_to_vlabel, char *prev_vlabel, FILEIO_RESTORE_PAGE_BITMAP * page_bitmap,
            ^
src/storage/file_io.c:10235:16: note: Function 'fileio_restore_volume' argument 4 names different: declaration 'verbose_to_vlabel' definition 'verbose_to_vol_label_p'.
         char *verbose_to_vol_label_p, char *prev_vol_label_p, FILEIO_RESTORE_PAGE_BITMAP * page_bitmap,
               ^
src/storage/file_io.c:10235:46: style:inconclusive: Function 'fileio_restore_volume' argument 5 names different: declaration 'prev_vlabel' definition 'prev_vol_label_p'. [funcArgNamesDifferent]
         char *verbose_to_vol_label_p, char *prev_vol_label_p, FILEIO_RESTORE_PAGE_BITMAP * page_bitmap,
                                             ^
src/storage/file_io.h:579:38: note: Function 'fileio_restore_volume' argument 5 names different: declaration 'prev_vlabel' definition 'prev_vol_label_p'.
      char *verbose_to_vlabel, char *prev_vlabel, FILEIO_RESTORE_PAGE_BITMAP * page_bitmap,
                                     ^
src/storage/file_io.c:10235:46: note: Function 'fileio_restore_volume' argument 5 names different: declaration 'prev_vlabel' definition 'prev_vol_label_p'.
         char *verbose_to_vol_label_p, char *prev_vol_label_p, FILEIO_RESTORE_PAGE_BITMAP * page_bitmap,
                                             ^
src/storage/file_io.c:10236:15: style:inconclusive: Function 'fileio_restore_volume' argument 7 names different: declaration 'remember_pages' definition 'is_remember_pages'. [funcArgNamesDifferent]
         bool is_remember_pages)
              ^
src/storage/file_io.h:580:12: note: Function 'fileio_restore_volume' argument 7 names different: declaration 'remember_pages' definition 'is_remember_pages'.
      bool remember_pages);
           ^
src/storage/file_io.c:10236:15: note: Function 'fileio_restore_volume' argument 7 names different: declaration 'remember_pages' definition 'is_remember_pages'.
         bool is_remember_pages)
              ^
src/storage/file_io.c:10505:94: style:inconclusive: Function 'fileio_write_restore' argument 3 names different: declaration 'vdes' definition 'vol_fd'. [funcArgNamesDifferent]
fileio_write_restore (THREAD_ENTRY * thread_p, FILEIO_RESTORE_PAGE_BITMAP * page_bitmap, int vol_fd, void *io_page_p,
                                                                                             ^
src/storage/file_io.c:535:107: note: Function 'fileio_write_restore' argument 3 names different: declaration 'vdes' definition 'vol_fd'.
static void *fileio_write_restore (THREAD_ENTRY * thread_p, FILEIO_RESTORE_PAGE_BITMAP * page_bitmap, int vdes,
                                                                                                          ^
src/storage/file_io.c:10505:94: note: Function 'fileio_write_restore' argument 3 names different: declaration 'vdes' definition 'vol_fd'.
fileio_write_restore (THREAD_ENTRY * thread_p, FILEIO_RESTORE_PAGE_BITMAP * page_bitmap, int vol_fd, void *io_page_p,
                                                                                             ^
src/storage/file_io.c:10505:108: style:inconclusive: Function 'fileio_write_restore' argument 4 names different: declaration 'io_pgptr' definition 'io_page_p'. [funcArgNamesDifferent]
fileio_write_restore (THREAD_ENTRY * thread_p, FILEIO_RESTORE_PAGE_BITMAP * page_bitmap, int vol_fd, void *io_page_p,
                                                                                                           ^
src/storage/file_io.c:536:14: note: Function 'fileio_write_restore' argument 4 names different: declaration 'io_pgptr' definition 'io_page_p'.
       void *io_pgptr, VOLID vol_id, PAGEID page_id, FILEIO_BACKUP_LEVEL level);
             ^
src/storage/file_io.c:10505:108: note: Function 'fileio_write_restore' argument 4 names different: declaration 'io_pgptr' definition 'io_page_p'.
fileio_write_restore (THREAD_ENTRY * thread_p, FILEIO_RESTORE_PAGE_BITMAP * page_bitmap, int vol_fd, void *io_page_p,
                                                                                                           ^
src/storage/file_io.c:10558:78: style:inconclusive: Function 'fileio_skip_restore_volume' argument 2 names different: declaration 'session' definition 'session_p'. [funcArgNamesDifferent]
fileio_skip_restore_volume (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session_p)
                                                                             ^
src/storage/file_io.h:581:89: note: Function 'fileio_skip_restore_volume' argument 2 names different: declaration 'session' definition 'session_p'.
extern int fileio_skip_restore_volume (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session);
                                                                                        ^
src/storage/file_io.c:10558:78: note: Function 'fileio_skip_restore_volume' argument 2 names different: declaration 'session' definition 'session_p'.
fileio_skip_restore_volume (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session_p)
                                                                             ^
src/storage/file_io.c:10621:66: style:inconclusive: Function 'fileio_find_restore_volume' argument 2 names different: declaration 'dbname' definition 'db_name_p'. [funcArgNamesDifferent]
fileio_find_restore_volume (THREAD_ENTRY * thread_p, const char *db_name_p, char *to_vol_name_p, int unit_num,
                                                                 ^
src/storage/file_io.c:538:98: note: Function 'fileio_find_restore_volume' argument 2 names different: declaration 'dbname' definition 'db_name_p'.
static FILEIO_RELOCATION_VOLUME fileio_find_restore_volume (THREAD_ENTRY * thread_p, const char *dbname,
                                                                                                 ^
src/storage/file_io.c:10621:66: note: Function 'fileio_find_restore_volume' argument 2 names different: declaration 'dbname' definition 'db_name_p'.
fileio_find_restore_volume (THREAD_ENTRY * thread_p, const char *db_name_p, char *to_vol_name_p, int unit_num,
                                                                 ^
src/storage/file_io.c:10621:83: style:inconclusive: Function 'fileio_find_restore_volume' argument 3 names different: declaration 'to_volname' definition 'to_vol_name_p'. [funcArgNamesDifferent]
fileio_find_restore_volume (THREAD_ENTRY * thread_p, const char *db_name_p, char *to_vol_name_p, int unit_num,
                                                                                  ^
src/storage/file_io.c:539:18: note: Function 'fileio_find_restore_volume' argument 3 names different: declaration 'to_volname' definition 'to_vol_name_p'.
           char *to_volname, int unit_num, FILEIO_BACKUP_LEVEL level,
                 ^
src/storage/file_io.c:10621:83: note: Function 'fileio_find_restore_volume' argument 3 names different: declaration 'to_volname' definition 'to_vol_name_p'.
fileio_find_restore_volume (THREAD_ENTRY * thread_p, const char *db_name_p, char *to_vol_name_p, int unit_num,
                                                                                  ^
src/storage/file_io.c:10802:81: style:inconclusive: Function 'fileio_get_next_backup_volume' argument 2 names different: declaration 'session' definition 'session_p'. [funcArgNamesDifferent]
fileio_get_next_backup_volume (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session_p, bool is_new_user)
                                                                                ^
src/storage/file_io.c:542:92: note: Function 'fileio_get_next_backup_volume' argument 2 names different: declaration 'session' definition 'session_p'.
static int fileio_get_next_backup_volume (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session, bool user_new);
                                                                                           ^
src/storage/file_io.c:10802:81: note: Function 'fileio_get_next_backup_volume' argument 2 names different: declaration 'session' definition 'session_p'.
fileio_get_next_backup_volume (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session_p, bool is_new_user)
                                                                                ^
src/storage/file_io.c:10802:97: style:inconclusive: Function 'fileio_get_next_backup_volume' argument 3 names different: declaration 'user_new' definition 'is_new_user'. [funcArgNamesDifferent]
fileio_get_next_backup_volume (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session_p, bool is_new_user)
                                                                                                ^
src/storage/file_io.c:542:106: note: Function 'fileio_get_next_backup_volume' argument 3 names different: declaration 'user_new' definition 'is_new_user'.
static int fileio_get_next_backup_volume (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session, bool user_new);
                                                                                                         ^
src/storage/file_io.c:10802:97: note: Function 'fileio_get_next_backup_volume' argument 3 names different: declaration 'user_new' definition 'is_new_user'.
fileio_get_next_backup_volume (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session_p, bool is_new_user)
                                                                                                ^
src/storage/file_io.c:10953:47: style:inconclusive: Function 'fileio_add_volume_to_backup_info' argument 1 names different: declaration 'name' definition 'name_p'. [funcArgNamesDifferent]
fileio_add_volume_to_backup_info (const char *name_p, FILEIO_BACKUP_LEVEL level, int unit_num, int which_bkvinf)
                                              ^
src/storage/file_io.h:589:58: note: Function 'fileio_add_volume_to_backup_info' argument 1 names different: declaration 'name' definition 'name_p'.
extern int fileio_add_volume_to_backup_info (const char *name, FILEIO_BACKUP_LEVEL level, int unit_num,
                                                         ^
src/storage/file_io.c:10953:47: note: Function 'fileio_add_volume_to_backup_info' argument 1 names different: declaration 'name' definition 'name_p'.
fileio_add_volume_to_backup_info (const char *name_p, FILEIO_BACKUP_LEVEL level, int unit_num, int which_bkvinf)
                                              ^
src/storage/file_io.c:11244:49: style:inconclusive: Function 'fileio_clear_backup_info_level' argument 2 names different: declaration 'dealloc' definition 'is_dealloc'. [funcArgNamesDifferent]
fileio_clear_backup_info_level (int level, bool is_dealloc, int which_bkvinf)
                                                ^
src/storage/file_io.h:591:60: note: Function 'fileio_clear_backup_info_level' argument 2 names different: declaration 'dealloc' definition 'is_dealloc'.
extern int fileio_clear_backup_info_level (int level, bool dealloc, int which_bkvinf);
                                                           ^
src/storage/file_io.c:11244:49: note: Function 'fileio_clear_backup_info_level' argument 2 names different: declaration 'dealloc' definition 'is_dealloc'.
fileio_clear_backup_info_level (int level, bool is_dealloc, int which_bkvinf)
                                                ^
src/storage/file_io.c:11303:105: style:inconclusive: Function 'fileio_request_user_response' argument 3 names different: declaration 'prompt' definition 'prompt_p'. [funcArgNamesDifferent]
fileio_request_user_response (THREAD_ENTRY * thread_p, FILEIO_REMOTE_PROMPT_TYPE prompt_id, const char *prompt_p,
                                                                                                        ^
src/storage/file_io.h:595:19: note: Function 'fileio_request_user_response' argument 3 names different: declaration 'prompt' definition 'prompt_p'.
      const char *prompt, char *response, const char *failure_prompt, int range_low,
                  ^
src/storage/file_io.c:11303:105: note: Function 'fileio_request_user_response' argument 3 names different: declaration 'prompt' definition 'prompt_p'.
fileio_request_user_response (THREAD_ENTRY * thread_p, FILEIO_REMOTE_PROMPT_TYPE prompt_id, const char *prompt_p,
                                                                                                        ^
src/storage/file_io.c:11304:16: style:inconclusive: Function 'fileio_request_user_response' argument 4 names different: declaration 'response' definition 'response_p'. [funcArgNamesDifferent]
         char *response_p, const char *failure_prompt_p, int range_low, int range_high,
               ^
src/storage/file_io.h:595:33: note: Function 'fileio_request_user_response' argument 4 names different: declaration 'response' definition 'response_p'.
      const char *prompt, char *response, const char *failure_prompt, int range_low,
                                ^
src/storage/file_io.c:11304:16: note: Function 'fileio_request_user_response' argument 4 names different: declaration 'response' definition 'response_p'.
         char *response_p, const char *failure_prompt_p, int range_low, int range_high,
               ^
src/storage/file_io.c:11304:40: style:inconclusive: Function 'fileio_request_user_response' argument 5 names different: declaration 'failure_prompt' definition 'failure_prompt_p'. [funcArgNamesDifferent]
         char *response_p, const char *failure_prompt_p, int range_low, int range_high,
                                       ^
src/storage/file_io.h:595:55: note: Function 'fileio_request_user_response' argument 5 names different: declaration 'failure_prompt' definition 'failure_prompt_p'.
      const char *prompt, char *response, const char *failure_prompt, int range_low,
                                                      ^
src/storage/file_io.c:11304:40: note: Function 'fileio_request_user_response' argument 5 names different: declaration 'failure_prompt' definition 'failure_prompt_p'.
         char *response_p, const char *failure_prompt_p, int range_low, int range_high,
                                       ^
src/storage/file_io.c:11305:22: style:inconclusive: Function 'fileio_request_user_response' argument 8 names different: declaration 'secondary_prompt' definition 'secondary_prompt_p'. [funcArgNamesDifferent]
         const char *secondary_prompt_p, int reprompt_value)
                     ^
src/storage/file_io.h:596:35: note: Function 'fileio_request_user_response' argument 8 names different: declaration 'secondary_prompt' definition 'secondary_prompt_p'.
      int range_high, const char *secondary_prompt, int reprompt_value);
                                  ^
src/storage/file_io.c:11305:22: note: Function 'fileio_request_user_response' argument 8 names different: declaration 'secondary_prompt' definition 'secondary_prompt_p'.
         const char *secondary_prompt_p, int reprompt_value)
                     ^
src/storage/file_io.c:11502:29: style:inconclusive: Function 'fileio_symlink' argument 1 names different: declaration 'src' definition 'src_p'. [funcArgNamesDifferent]
fileio_symlink (const char *src_p, const char *dest_p, int overwrite)
                            ^
src/storage/file_io.h:603:40: note: Function 'fileio_symlink' argument 1 names different: declaration 'src' definition 'src_p'.
extern int fileio_symlink (const char *src, const char *dest, int overwrite);
                                       ^
src/storage/file_io.c:11502:29: note: Function 'fileio_symlink' argument 1 names different: declaration 'src' definition 'src_p'.
fileio_symlink (const char *src_p, const char *dest_p, int overwrite)
                            ^
src/storage/file_io.c:11502:48: style:inconclusive: Function 'fileio_symlink' argument 2 names different: declaration 'dest' definition 'dest_p'. [funcArgNamesDifferent]
fileio_symlink (const char *src_p, const char *dest_p, int overwrite)
                                               ^
src/storage/file_io.h:603:57: note: Function 'fileio_symlink' argument 2 names different: declaration 'dest' definition 'dest_p'.
extern int fileio_symlink (const char *src, const char *dest, int overwrite);
                                                        ^
src/storage/file_io.c:11502:48: note: Function 'fileio_symlink' argument 2 names different: declaration 'dest' definition 'dest_p'.
fileio_symlink (const char *src_p, const char *dest_p, int overwrite)
                                               ^
src/storage/file_io.c:925:7: style: Local variable 'rv' shadows outer variable [shadowVariable]
  int rv;
      ^
src/storage/file_io.c:309:12: note: Shadowed declaration
static int rv;
           ^
src/storage/file_io.c:925:7: note: Shadow variable
  int rv;
      ^
src/storage/file_io.c:1032:7: style: Local variable 'rv' shadows outer variable [shadowVariable]
  int rv;
      ^
src/storage/file_io.c:309:12: note: Shadowed declaration
static int rv;
           ^
src/storage/file_io.c:1032:7: note: Shadow variable
  int rv;
      ^
src/storage/file_io.c:1077:7: style: Local variable 'rv' shadows outer variable [shadowVariable]
  int rv;
      ^
src/storage/file_io.c:309:12: note: Shadowed declaration
static int rv;
           ^
src/storage/file_io.c:1077:7: note: Shadow variable
  int rv;
      ^
src/storage/file_io.c:3218:7: style: Local variable 'rv' shadows outer variable [shadowVariable]
  int rv;
      ^
src/storage/file_io.c:309:12: note: Shadowed declaration
static int rv;
           ^
src/storage/file_io.c:3218:7: note: Shadow variable
  int rv;
      ^
src/storage/file_io.c:3380:7: style: Local variable 'rv' shadows outer variable [shadowVariable]
  int rv;
      ^
src/storage/file_io.c:309:12: note: Shadowed declaration
static int rv;
           ^
src/storage/file_io.c:3380:7: note: Shadow variable
  int rv;
      ^
src/storage/file_io.c:5951:13: style: Local variable 'rv' shadows outer variable [shadowVariable]
  int i, j, rv;
            ^
src/storage/file_io.c:309:12: note: Shadowed declaration
static int rv;
           ^
src/storage/file_io.c:5951:13: note: Shadow variable
  int i, j, rv;
            ^
src/storage/file_io.c:6070:7: style: Local variable 'rv' shadows outer variable [shadowVariable]
  int rv;
      ^
src/storage/file_io.c:309:12: note: Shadowed declaration
static int rv;
           ^
src/storage/file_io.c:6070:7: note: Shadow variable
  int rv;
      ^
src/storage/file_io.c:6187:13: style: Local variable 'rv' shadows outer variable [shadowVariable]
  int i, j, rv;
            ^
src/storage/file_io.c:309:12: note: Shadowed declaration
static int rv;
           ^
src/storage/file_io.c:6187:13: note: Shadow variable
  int i, j, rv;
            ^
src/storage/file_io.c:6272:7: style: Local variable 'rv' shadows outer variable [shadowVariable]
  int rv;
      ^
src/storage/file_io.c:309:12: note: Shadowed declaration
static int rv;
           ^
src/storage/file_io.c:6272:7: note: Shadow variable
  int rv;
      ^
src/storage/file_io.c:6324:7: style: Local variable 'rv' shadows outer variable [shadowVariable]
  int rv;
      ^
src/storage/file_io.c:309:12: note: Shadowed declaration
static int rv;
           ^
src/storage/file_io.c:6324:7: note: Shadow variable
  int rv;
      ^
src/storage/file_io.c:6493:13: style: Local variable 'rv' shadows outer variable [shadowVariable]
  int i, j, rv;
            ^
src/storage/file_io.c:309:12: note: Shadowed declaration
static int rv;
           ^
src/storage/file_io.c:6493:13: note: Shadow variable
  int i, j, rv;
            ^
src/storage/file_io.c:6549:7: style: Local variable 'rv' shadows outer variable [shadowVariable]
  int rv;
      ^
src/storage/file_io.c:309:12: note: Shadowed declaration
static int rv;
           ^
src/storage/file_io.c:6549:7: note: Shadow variable
  int rv;
      ^
src/storage/file_io.c:6593:7: style: Local variable 'rv' shadows outer variable [shadowVariable]
  int rv;
      ^
src/storage/file_io.c:309:12: note: Shadowed declaration
static int rv;
           ^
src/storage/file_io.c:6593:7: note: Shadow variable
  int rv;
      ^
src/storage/file_io.c:8229:7: style: Local variable 'rv' shadows outer variable [shadowVariable]
  int rv;
      ^
src/storage/file_io.c:309:12: note: Shadowed declaration
static int rv;
           ^
src/storage/file_io.c:8229:7: note: Shadow variable
  int rv;
      ^
src/storage/file_io.c:10112:6: style: Local variable 'rv' shadows outer variable [shadowVariable]
 int rv;
     ^
src/storage/file_io.c:309:12: note: Shadowed declaration
static int rv;
           ^
src/storage/file_io.c:10112:6: note: Shadow variable
 int rv;
     ^
src/storage/file_io.c:11778:68: style: Clarify calculation precedence for '&' and '?'. [clarifyCalculation]
  is_set = page_bitmap->bitmap[page_id / 8] & (1 << (page_id % 8)) ? true : false;
                                                                   ^
src/storage/file_io.c:927:6: style: Variable 'rv' is assigned a value that is never used. [unreadVariable]
  rv = pthread_mutex_lock (&fileio_Vol_info_header.mutex);
     ^
src/storage/file_io.c:1034:6: style: Variable 'rv' is assigned a value that is never used. [unreadVariable]
  rv = pthread_mutex_lock (&header_p->mutex);
     ^
src/storage/file_io.c:1079:6: style: Variable 'rv' is assigned a value that is never used. [unreadVariable]
  rv = pthread_mutex_lock (&header_p->mutex);
     ^
src/storage/file_io.c:1447:13: style: Variable 'retry' is assigned a value that is never used. [unreadVariable]
      retry = false;
            ^
src/storage/file_io.c:2909:19: style: Variable 'skip_flush' is assigned a value that is never used. [unreadVariable]
  bool skip_flush = false;
                  ^
src/storage/file_io.c:3220:6: style: Variable 'rv' is assigned a value that is never used. [unreadVariable]
  rv = pthread_mutex_lock (&fileio_Sys_vol_info_header.mutex);
     ^
src/storage/file_io.c:3420:6: style: Variable 'rv' is assigned a value that is never used. [unreadVariable]
  rv = pthread_mutex_lock (&vol_header_p->mutex);
     ^
src/storage/file_io.c:3421:17: style: Variable 'num_perm_vols' is assigned a value that is never used. [unreadVariable]
  num_perm_vols = vol_header_p->next_perm_volid;
                ^
src/storage/file_io.c:3428:17: style: Variable 'num_temp_vols' is assigned a value that is never used. [unreadVariable]
  num_temp_vols = LOG_MAX_DBVOLID - vol_header_p->next_temp_volid;
                ^
src/storage/file_io.c:5988:10: style: Variable 'rv' is assigned a value that is never used. [unreadVariable]
      rv = pthread_mutex_lock (&fileio_Vol_info_header.mutex);
         ^
src/storage/file_io.c:6014:10: style: Variable 'rv' is assigned a value that is never used. [unreadVariable]
      rv = pthread_mutex_lock (&fileio_Sys_vol_info_header.mutex);
         ^
src/storage/file_io.c:6073:6: style: Variable 'rv' is assigned a value that is never used. [unreadVariable]
  rv = pthread_mutex_lock (&fileio_Sys_vol_info_header.mutex);
     ^
src/storage/file_io.c:6130:10: style: Variable 'rv' is assigned a value that is never used. [unreadVariable]
      rv = pthread_mutex_lock (&fileio_Vol_info_header.mutex);
         ^
src/storage/file_io.c:6154:10: style: Variable 'rv' is assigned a value that is never used. [unreadVariable]
      rv = pthread_mutex_lock (&fileio_Vol_info_header.mutex);
         ^
src/storage/file_io.c:6221:10: style: Variable 'rv' is assigned a value that is never used. [unreadVariable]
      rv = pthread_mutex_lock (&fileio_Sys_vol_info_header.mutex);
         ^
src/storage/file_io.c:6277:6: style: Variable 'rv' is assigned a value that is never used. [unreadVariable]
  rv = pthread_mutex_lock (&fileio_Sys_vol_info_header.mutex);
     ^
src/storage/file_io.c:6328:6: style: Variable 'rv' is assigned a value that is never used. [unreadVariable]
  rv = pthread_mutex_lock (&fileio_Sys_vol_info_header.mutex);
     ^
src/storage/file_io.c:6524:10: style: Variable 'rv' is assigned a value that is never used. [unreadVariable]
      rv = pthread_mutex_lock (&fileio_Sys_vol_info_header.mutex);
         ^
src/storage/file_io.c:6553:6: style: Variable 'rv' is assigned a value that is never used. [unreadVariable]
  rv = pthread_mutex_lock (&fileio_Sys_vol_info_header.mutex);
     ^
src/storage/file_io.c:6597:6: style: Variable 'rv' is assigned a value that is never used. [unreadVariable]
  rv = pthread_mutex_lock (&fileio_Sys_vol_info_header.mutex);
     ^
src/storage/file_io.c:8581:32: style: Variable 'is_interactive_need_new' is assigned a value that is never used. [unreadVariable]
  bool is_interactive_need_new = false;
                               ^
src/storage/file_io.c:8582:27: style: Variable 'is_force_new_bkvol' is assigned a value that is never used. [unreadVariable]
  bool is_force_new_bkvol = false;
                          ^
src/storage/file_io.c:9005:25: style: Variable 'is_need_next_vol' is assigned a value that is never used. [unreadVariable]
  bool is_need_next_vol = false;
                        ^
src/storage/file_io.c:4491:35: style: The comparison 'all_sync == false' is always true because 'all_sync' and 'false' represent the same value. [knownConditionTrueFalse]
  if (ret == NO_ERROR && all_sync == false)
                                  ^
src/storage/file_io.c:4444:19: note: 'all_sync' is assigned value 'false' here.
  bool all_sync = false;
                  ^
src/storage/file_io.c:4491:35: note: The comparison 'all_sync == false' is always true because 'all_sync' and 'false' represent the same value.
  if (ret == NO_ERROR && all_sync == false)
                                  ^
src/storage/file_io.c:4645:39: style: The comparison 'all_sync == false' is always true because 'all_sync' and 'false' represent the same value. [knownConditionTrueFalse]
  if (success == NO_ERROR && all_sync == false)
                                      ^
src/storage/file_io.c:4621:19: note: 'all_sync' is assigned value 'false' here.
  bool all_sync = false;
                  ^
src/storage/file_io.c:4645:39: note: The comparison 'all_sync == false' is always true because 'all_sync' and 'false' represent the same value.
  if (success == NO_ERROR && all_sync == false)
                                      ^
src/storage/file_io.c:3006:32: style: Variable 'lockf_type' is assigned a value that is never used. [unreadVariable]
  FILEIO_LOCKF_TYPE lockf_type = FILEIO_NOT_LOCKF;
                               ^
src/storage/file_io.c:7687:4: portability: %d in format string (no. 2) requires 'int' but the argument type is 'ssize_t {aka signed long}'. [invalidPrintfArgType_sint]
   fprintf (stdout,
   ^
src/storage/file_io.c:8769:8: portability: %d in format string (no. 2) requires 'int' but the argument type is 'ssize_t {aka signed long}'. [invalidPrintfArgType_sint]
       fprintf (stdout, "io_backup_read: io_pagesize = %d, nread = %d, voltotalio = %d : ADD FILLER\n",
       ^
src/storage/file_io.c:11567:18: style: Condition 'nprocs>1' is always false [knownConditionTrueFalse]
  return (nprocs > 1) ? (int) nprocs : 1;
                 ^
src/storage/file_io.c:11549:18: note: Assignment 'nprocs=-1', assigned value is -1
  long nprocs = -1;
                 ^
src/storage/file_io.c:11567:18: note: Condition 'nprocs>1' is always false
  return (nprocs > 1) ? (int) nprocs : 1;
                 ^
src/storage/file_io.c:3420:6: style: Variable 'rv' is reassigned a value before the old one has been used. [redundantAssignment]
  rv = pthread_mutex_lock (&vol_header_p->mutex);
     ^
src/storage/file_io.c:3385:6: note: rv is assigned
  rv = pthread_mutex_lock (&sys_header_p->mutex);
     ^
src/storage/file_io.c:3420:6: note: rv is overwritten
  rv = pthread_mutex_lock (&vol_header_p->mutex);
     ^
src/storage/file_io.c:7599:37: style:inconclusive: Function 'fileio_append_queue' argument 1 names different: declaration 'qp' definition 'queue_p'. [funcArgNamesDifferent]
fileio_append_queue (FILEIO_QUEUE * queue_p, FILEIO_NODE * node_p)
                                    ^
src/storage/file_io.c:576:57: note: Function 'fileio_append_queue' argument 1 names different: declaration 'qp' definition 'queue_p'.
static FILEIO_NODE *fileio_append_queue (FILEIO_QUEUE * qp, FILEIO_NODE * node);
                                                        ^
src/storage/file_io.c:7599:37: note: Function 'fileio_append_queue' argument 1 names different: declaration 'qp' definition 'queue_p'.
fileio_append_queue (FILEIO_QUEUE * queue_p, FILEIO_NODE * node_p)
                                    ^
src/storage/file_io.c:7599:60: style:inconclusive: Function 'fileio_append_queue' argument 2 names different: declaration 'node' definition 'node_p'. [funcArgNamesDifferent]
fileio_append_queue (FILEIO_QUEUE * queue_p, FILEIO_NODE * node_p)
                                                           ^
src/storage/file_io.c:576:75: note: Function 'fileio_append_queue' argument 2 names different: declaration 'node' definition 'node_p'.
static FILEIO_NODE *fileio_append_queue (FILEIO_QUEUE * qp, FILEIO_NODE * node);
                                                                          ^
src/storage/file_io.c:7599:60: note: Function 'fileio_append_queue' argument 2 names different: declaration 'node' definition 'node_p'.
fileio_append_queue (FILEIO_QUEUE * queue_p, FILEIO_NODE * node_p)
                                                           ^
src/storage/file_io.c:7798:77: style:inconclusive: Function 'fileio_read_backup_volume' argument 2 names different: declaration 'session' definition 'session_p'. [funcArgNamesDifferent]
fileio_read_backup_volume (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session_p)
                                                                            ^
src/storage/file_io.c:574:89: note: Function 'fileio_read_backup_volume' argument 2 names different: declaration 'session' definition 'session_p'.
static void fileio_read_backup_volume (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session);
                                                                                        ^
src/storage/file_io.c:7798:77: note: Function 'fileio_read_backup_volume' argument 2 names different: declaration 'session' definition 'session_p'.
fileio_read_backup_volume (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session_p)
                                                                            ^
src/storage/file_io.c:8011:78: style:inconclusive: Function 'fileio_write_backup_volume' argument 2 names different: declaration 'session' definition 'session_p'. [funcArgNamesDifferent]
fileio_write_backup_volume (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session_p)
                                                                             ^
src/storage/file_io.c:575:97: note: Function 'fileio_write_backup_volume' argument 2 names different: declaration 'session' definition 'session_p'.
static FILEIO_TYPE fileio_write_backup_volume (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session);
                                                                                                ^
src/storage/file_io.c:8011:78: note: Function 'fileio_write_backup_volume' argument 2 names different: declaration 'session' definition 'session_p'.
fileio_write_backup_volume (THREAD_ENTRY * thread_p, FILEIO_BACKUP_SESSION * session_p)
                                                                             ^
src/storage/file_io.c:737:10: style: Variable 'rv' is assigned a value that is never used. [unreadVariable]
  int rv = NO_ERROR;
         ^
src/storage/file_io.c:797:10: style: Variable 'rv' is assigned a value that is never used. [unreadVariable]
      rv = pthread_cond_wait (&tb->waiter_cond, &tb->token_mutex);
         ^
src/storage/file_io.c:4458:9: style: Variable 'r' is assigned a value that is never used. [unreadVariable]
      r = pthread_mutex_lock (&inc_cnt_mutex);
        ^
src/storage/file_io.c:7804:20: style: Variable 'need_unlock' is assigned a value that is never used. [unreadVariable]
  bool need_unlock = false;
                   ^
src/storage/file_io.c:8017:20: style: Variable 'need_unlock' is assigned a value that is never used. [unreadVariable]
  bool need_unlock = false;
                   ^
src/storage/file_io.c:2107:20: style: Variable 'tmp_vol_desc' is assigned a value that is never used. [unreadVariable]
  int tmp_vol_desc = NULL_VOLDES;
                   ^
src/storage/file_io.c:2109:32: style: Variable 'lockf_type' is assigned a value that is never used. [unreadVariable]
  FILEIO_LOCKF_TYPE lockf_type = FILEIO_NOT_LOCKF;
                               ^
src/storage/file_io.c:3861:6: style: Variable 'rv' is assigned a value that is never used. [unreadVariable]
  rv = pthread_mutex_lock (&fileio_Sys_vol_info_header.mutex);
     ^
src/storage/file_io.c:8065:8: portability: %d in format string (no. 2) requires 'int' but the argument type is 'ssize_t {aka signed long}'. [invalidPrintfArgType_sint]
       fprintf (stdout, "write_thread node->pageid = %d, node->nread = %d\n", node_p->pageid, node_p->nread);
       ^
src/storage/file_io.c:4770:19: warning: Either the condition 'io_page_p!=NULL' is redundant or there is possible null pointer dereference: io_page_p. [nullPointerRedundantCheck]
  memcpy (area_p, io_page_p->page + start_offset, nbytes);
                  ^
src/storage/file_io.c:4772:17: note: Assuming that condition 'io_page_p!=NULL' is not redundant
  if (io_page_p != NULL)
                ^
src/storage/file_io.c:4770:19: note: Null pointer dereference
  memcpy (area_p, io_page_p->page + start_offset, nbytes);
                  ^
src/storage/file_io.c:2669:24: style:inconclusive: Function 'fileio_truncate' argument 1 names different: declaration 'volid' definition 'vol_id'. [funcArgNamesDifferent]
fileio_truncate (VOLID vol_id, DKNPAGES npages_to_resize)
                       ^
src/storage/file_io.h:469:40: note: Function 'fileio_truncate' argument 1 names different: declaration 'volid' definition 'vol_id'.
extern DKNPAGES fileio_truncate (VOLID volid, DKNPAGES npages_to_resize);
                                       ^
src/storage/file_io.c:2669:24: note: Function 'fileio_truncate' argument 1 names different: declaration 'volid' definition 'vol_id'.
fileio_truncate (VOLID vol_id, DKNPAGES npages_to_resize)
                       ^
src/storage/file_io.c:4680:53: style:inconclusive: Function 'fileio_read_user_area' argument 2 names different: declaration 'vdes' definition 'vol_fd'. [funcArgNamesDifferent]
fileio_read_user_area (THREAD_ENTRY * thread_p, int vol_fd, PAGEID page_id, off_t start_offset, size_t nbytes,
                                                    ^
src/storage/file_io.h:497:66: note: Function 'fileio_read_user_area' argument 2 names different: declaration 'vdes' definition 'vol_fd'.
extern void *fileio_read_user_area (THREAD_ENTRY * thread_p, int vdes, PAGEID pageid, off_t start_offset, size_t nbytes,
                                                                 ^
src/storage/file_io.c:4680:53: note: Function 'fileio_read_user_area' argument 2 names different: declaration 'vdes' definition 'vol_fd'.
fileio_read_user_area (THREAD_ENTRY * thread_p, int vol_fd, PAGEID page_id, off_t start_offset, size_t nbytes,
                                                    ^
src/storage/file_io.c:4680:68: style:inconclusive: Function 'fileio_read_user_area' argument 3 names different: declaration 'pageid' definition 'page_id'. [funcArgNamesDifferent]
fileio_read_user_area (THREAD_ENTRY * thread_p, int vol_fd, PAGEID page_id, off_t start_offset, size_t nbytes,
                                                                   ^
src/storage/file_io.h:497:79: note: Function 'fileio_read_user_area' argument 3 names different: declaration 'pageid' definition 'page_id'.
extern void *fileio_read_user_area (THREAD_ENTRY * thread_p, int vdes, PAGEID pageid, off_t start_offset, size_t nbytes,
                                                                              ^
src/storage/file_io.c:4680:68: note: Function 'fileio_read_user_area' argument 3 names different: declaration 'pageid' definition 'page_id'.
fileio_read_user_area (THREAD_ENTRY * thread_p, int vol_fd, PAGEID page_id, off_t start_offset, size_t nbytes,
                                                                   ^
src/storage/file_io.c:4681:16: style:inconclusive: Function 'fileio_read_user_area' argument 6 names different: declaration 'area' definition 'area_p'. [funcArgNamesDifferent]
         void *area_p)
               ^
src/storage/file_io.h:498:15: note: Function 'fileio_read_user_area' argument 6 names different: declaration 'area' definition 'area_p'.
        void *area);
              ^
src/storage/file_io.c:4681:16: note: Function 'fileio_read_user_area' argument 6 names different: declaration 'area' definition 'area_p'.
         void *area_p)
               ^
src/storage/file_io.c:4795:54: style:inconclusive: Function 'fileio_write_user_area' argument 2 names different: declaration 'vdes' definition 'vol_fd'. [funcArgNamesDifferent]
fileio_write_user_area (THREAD_ENTRY * thread_p, int vol_fd, PAGEID page_id, off_t start_offset, int nbytes,
                                                     ^
src/storage/file_io.h:499:67: note: Function 'fileio_write_user_area' argument 2 names different: declaration 'vdes' definition 'vol_fd'.
extern void *fileio_write_user_area (THREAD_ENTRY * thread_p, int vdes, PAGEID pageid, off_t start_offset, int nbytes,
                                                                  ^
src/storage/file_io.c:4795:54: note: Function 'fileio_write_user_area' argument 2 names different: declaration 'vdes' definition 'vol_fd'.
fileio_write_user_area (THREAD_ENTRY * thread_p, int vol_fd, PAGEID page_id, off_t start_offset, int nbytes,
                                                     ^
src/storage/file_io.c:4795:69: style:inconclusive: Function 'fileio_write_user_area' argument 3 names different: declaration 'pageid' definition 'page_id'. [funcArgNamesDifferent]
fileio_write_user_area (THREAD_ENTRY * thread_p, int vol_fd, PAGEID page_id, off_t start_offset, int nbytes,
                                                                    ^
src/storage/file_io.h:499:80: note: Function 'fileio_write_user_area' argument 3 names different: declaration 'pageid' definition 'page_id'.
extern void *fileio_write_user_area (THREAD_ENTRY * thread_p, int vdes, PAGEID pageid, off_t start_offset, int nbytes,
                                                                               ^
src/storage/file_io.c:4795:69: note: Function 'fileio_write_user_area' argument 3 names different: declaration 'pageid' definition 'page_id'.
fileio_write_user_area (THREAD_ENTRY * thread_p, int vol_fd, PAGEID page_id, off_t start_offset, int nbytes,
                                                                    ^
src/storage/file_io.c:4796:10: style:inconclusive: Function 'fileio_write_user_area' argument 6 names different: declaration 'area' definition 'area_p'. [funcArgNamesDifferent]
   void *area_p)
         ^
src/storage/file_io.h:500:16: note: Function 'fileio_write_user_area' argument 6 names different: declaration 'area' definition 'area_p'.
         void *area);
               ^
src/storage/file_io.c:4796:10: note: Function 'fileio_write_user_area' argument 6 names different: declaration 'area' definition 'area_p'.
   void *area_p)
         ^
src/storage/file_manager.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 13 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/storage/heap_file.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 15 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/storage/heap_file.h:172:5: error: Code 'cubmem::single_block_allocator' is invalid C code. Use --std or --language to configure the language. [syntaxError]
    cubmem::single_block_allocator * m_area;
    ^
src/storage/oid.c:243:26: style:inconclusive: Function 'oid_compare' argument 1 names different: declaration 'oid1' definition 'a'. [funcArgNamesDifferent]
oid_compare (const void *a, const void *b)
                         ^
src/storage/oid.h:212:37: note: Function 'oid_compare' argument 1 names different: declaration 'oid1' definition 'a'.
extern int oid_compare (const void *oid1, const void *oid2);
                                    ^
src/storage/oid.c:243:26: note: Function 'oid_compare' argument 1 names different: declaration 'oid1' definition 'a'.
oid_compare (const void *a, const void *b)
                         ^
src/storage/oid.c:243:41: style:inconclusive: Function 'oid_compare' argument 2 names different: declaration 'oid2' definition 'b'. [funcArgNamesDifferent]
oid_compare (const void *a, const void *b)
                                        ^
src/storage/oid.h:212:55: note: Function 'oid_compare' argument 2 names different: declaration 'oid2' definition 'b'.
extern int oid_compare (const void *oid1, const void *oid2);
                                                      ^
src/storage/oid.c:243:41: note: Function 'oid_compare' argument 2 names different: declaration 'oid2' definition 'b'.
oid_compare (const void *a, const void *b)
                                        ^
src/storage/page_buffer.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/storage/page_buffer.c:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
src/storage/record_descriptor.cpp:65:3: performance: Variable 'm_recdes' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
  m_recdes = other.m_recdes;
  ^
src/storage/record_descriptor.cpp:66:3: performance: Variable 'm_own_data' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
  m_own_data = std::move (other.m_own_data);
  ^
src/storage/record_descriptor.hpp:73:5: style: Class 'record_descriptor' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    record_descriptor (const recdes &rec, const cubmem::block_allocator &alloc = cubmem::PRIVATE_BLOCK_ALLOCATOR);
    ^
src/storage/record_descriptor.cpp:149:47: style:inconclusive: Function 'resize_buffer' argument 1 names different: declaration 'size' definition 'required_size'. [funcArgNamesDifferent]
record_descriptor::resize_buffer (std::size_t required_size)
                                              ^
src/storage/record_descriptor.hpp:128:37: note: Function 'resize_buffer' argument 1 names different: declaration 'size' definition 'required_size'.
    void resize_buffer (std::size_t size);
                                    ^
src/storage/record_descriptor.cpp:149:47: note: Function 'resize_buffer' argument 1 names different: declaration 'size' definition 'required_size'.
record_descriptor::resize_buffer (std::size_t required_size)
                                              ^
src/storage/slotted_page.c:239:1: error: Code 'spage_save_head::spage_save_head' is invalid C code. Use --std or --language to configure the language. [syntaxError]
spage_save_head::spage_save_head ()
^
src/storage/statistics_cl.c:255:15: style: The scope of the variable 'attr_statsp' can be reduced. [variableScope]
  ATTR_STATS *attr_statsp;
              ^
src/storage/statistics_cl.c:256:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i, j;
      ^
src/storage/statistics_cl.c:256:10: style: The scope of the variable 'j' can be reduced. [variableScope]
  int i, j;
         ^
src/storage/statistics_cl.c:298:15: style: The scope of the variable 'attr_stats_p' can be reduced. [variableScope]
  ATTR_STATS *attr_stats_p;
              ^
src/storage/statistics_cl.c:302:15: style: The scope of the variable 'name_p' can be reduced. [variableScope]
  const char *name_p;
              ^
src/storage/statistics_cl.c:54:29: style:inconclusive: Function 'stats_get_statistics' argument 1 names different: declaration 'classoid' definition 'class_oid_p'. [funcArgNamesDifferent]
stats_get_statistics (OID * class_oid_p, unsigned int time_stamp, CLASS_STATS ** stats_p)
                            ^
src/storage/statistics.h:96:40: note: Function 'stats_get_statistics' argument 1 names different: declaration 'classoid' definition 'class_oid_p'.
extern int stats_get_statistics (OID * classoid, unsigned int timestamp, CLASS_STATS ** stats_p);
                                       ^
src/storage/statistics_cl.c:54:29: note: Function 'stats_get_statistics' argument 1 names different: declaration 'classoid' definition 'class_oid_p'.
stats_get_statistics (OID * class_oid_p, unsigned int time_stamp, CLASS_STATS ** stats_p)
                            ^
src/storage/statistics_cl.c:54:55: style:inconclusive: Function 'stats_get_statistics' argument 2 names different: declaration 'timestamp' definition 'time_stamp'. [funcArgNamesDifferent]
stats_get_statistics (OID * class_oid_p, unsigned int time_stamp, CLASS_STATS ** stats_p)
                                                      ^
src/storage/statistics.h:96:63: note: Function 'stats_get_statistics' argument 2 names different: declaration 'timestamp' definition 'time_stamp'.
extern int stats_get_statistics (OID * classoid, unsigned int timestamp, CLASS_STATS ** stats_p);
                                                              ^
src/storage/statistics_cl.c:54:55: note: Function 'stats_get_statistics' argument 2 names different: declaration 'timestamp' definition 'time_stamp'.
stats_get_statistics (OID * class_oid_p, unsigned int time_stamp, CLASS_STATS ** stats_p)
                                                      ^
src/storage/statistics_cl.c:83:39: style:inconclusive: Function 'stats_client_unpack_statistics' argument 1 names different: declaration 'buffer' definition 'buf_p'. [funcArgNamesDifferent]
stats_client_unpack_statistics (char *buf_p)
                                      ^
src/storage/statistics_cl.c:39:59: note: Function 'stats_client_unpack_statistics' argument 1 names different: declaration 'buffer' definition 'buf_p'.
static CLASS_STATS *stats_client_unpack_statistics (char *buffer);
                                                          ^
src/storage/statistics_cl.c:83:39: note: Function 'stats_client_unpack_statistics' argument 1 names different: declaration 'buffer' definition 'buf_p'.
stats_client_unpack_statistics (char *buf_p)
                                      ^
src/storage/statistics_cl.c:253:38: style:inconclusive: Function 'stats_free_statistics' argument 1 names different: declaration 'stats' definition 'class_statsp'. [funcArgNamesDifferent]
stats_free_statistics (CLASS_STATS * class_statsp)
                                     ^
src/storage/statistics.h:97:50: note: Function 'stats_free_statistics' argument 1 names different: declaration 'stats' definition 'class_statsp'.
extern void stats_free_statistics (CLASS_STATS * stats);
                                                 ^
src/storage/statistics_cl.c:253:38: note: Function 'stats_free_statistics' argument 1 names different: declaration 'stats' definition 'class_statsp'.
stats_free_statistics (CLASS_STATS * class_statsp)
                                     ^
src/storage/statistics_cl.c:294:25: style:inconclusive: Function 'stats_dump' argument 1 names different: declaration 'classname' definition 'class_name_p'. [funcArgNamesDifferent]
stats_dump (const char *class_name_p, FILE * file_p)
                        ^
src/storage/statistics.h:98:37: note: Function 'stats_dump' argument 1 names different: declaration 'classname' definition 'class_name_p'.
extern void stats_dump (const char *classname, FILE * fp);
                                    ^
src/storage/statistics_cl.c:294:25: note: Function 'stats_dump' argument 1 names different: declaration 'classname' definition 'class_name_p'.
stats_dump (const char *class_name_p, FILE * file_p)
                        ^
src/storage/statistics_cl.c:294:46: style:inconclusive: Function 'stats_dump' argument 2 names different: declaration 'fp' definition 'file_p'. [funcArgNamesDifferent]
stats_dump (const char *class_name_p, FILE * file_p)
                                             ^
src/storage/statistics.h:98:55: note: Function 'stats_dump' argument 2 names different: declaration 'fp' definition 'file_p'.
extern void stats_dump (const char *classname, FILE * fp);
                                                      ^
src/storage/statistics_cl.c:294:46: note: Function 'stats_dump' argument 2 names different: declaration 'fp' definition 'file_p'.
stats_dump (const char *class_name_p, FILE * file_p)
                                             ^
src/storage/system_catalog.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 13 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/storage/tde.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 13 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/storage/tde.c:1664:4: portability: %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'size_t {aka unsigned long}'. [invalidPrintfArgType_uint]
   printf ("Key Index: %lu ", TDE_MK_FILE_ITEM_INDEX (location));
   ^
src/storage/tde.c:1677:1: style: Label 'exit' is not used. There is #if in function body so the label might be used in code that is removed by the preprocessor. [unusedLabelConfiguration]
exit:
^
src/storage/tde.c:1635:7: style: Unused variable: i [unusedVariable]
  int i;
      ^
src/thread/thread_compat.hpp:33:1: error: Code 'namespacecubthread{' is invalid C code. Use --std or --language to configure the language. [syntaxError]
namespace cubthread
^
src/thread/critical_section_tracker.hpp:61:12: style:inconclusive: Technically the member function 'cubsync::critical_section_tracker::is_started' can be const. [functionConst]
      bool is_started (void);
           ^
src/thread/critical_section_tracker.cpp:195:29: note: Technically the member function 'cubsync::critical_section_tracker::is_started' can be const.
  critical_section_tracker::is_started (void)
                            ^
src/thread/critical_section_tracker.hpp:61:12: note: Technically the member function 'cubsync::critical_section_tracker::is_started' can be const.
      bool is_started (void);
           ^
src/thread/thread_waiter.hpp:124:26: error: No 'return' statement in non-void function causes undefined behavior. [operatorEqMissingReturnStatement]
    const wait_duration &operator= (const D &duration)
                         ^
src/thread/thread_entry.hpp:302:31: style:inconclusive: Technically the member function 'cubthread::entry::get_alloc_tracker' can be const. [functionConst]
      cubbase::alloc_tracker &get_alloc_tracker (void)
                              ^
src/thread/thread_entry.hpp:306:31: style:inconclusive: Technically the member function 'cubthread::entry::get_pgbuf_tracker' can be const. [functionConst]
      cubbase::pgbuf_tracker &get_pgbuf_tracker (void)
                              ^
src/thread/thread_entry_task.hpp:130:12: performance:inconclusive: Technically the member function 'cubthread::daemon_entry_manager::on_recycle' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      void on_recycle (entry &) final
           ^
src/thread/thread_worker_pool.hpp:305:12: style:inconclusive: Technically the member function 'cubthread::core::finished_task_notification' can be const. [functionConst]
      void finished_task_notification (void);
           ^
src/thread/thread_worker_pool.hpp:891:31: note: Technically the member function 'cubthread::core::finished_task_notification' can be const.
  worker_pool<Context>::core::finished_task_notification (void)
                              ^
src/thread/thread_worker_pool.hpp:305:12: note: Technically the member function 'cubthread::core::finished_task_notification' can be const.
      void finished_task_notification (void);
           ^
src/thread/thread_worker_pool.hpp:431:12: style:inconclusive: Technically the member function 'cubthread::worker::map_context_if_running' can be const. [functionConst]
      void map_context_if_running (bool &stop, Func &&func, Args &&... args);
           ^
src/thread/thread_worker_pool.hpp:1435:39: note: Technically the member function 'cubthread::worker::map_context_if_running' can be const.
  worker_pool<Context>::core::worker::map_context_if_running (bool &stop, Func &&func, Args &&... args)
                                      ^
src/thread/thread_worker_pool.hpp:431:12: note: Technically the member function 'cubthread::worker::map_context_if_running' can be const.
      void map_context_if_running (bool &stop, Func &&func, Args &&... args);
           ^
src/thread/thread_worker_pool.hpp:440:12: style:inconclusive: Technically the member function 'cubthread::worker::has_thread' can be const. [functionConst]
      bool has_thread (void)
           ^
src/thread/thread_task.hpp:92:7: style: Class 'callable_task' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
      callable_task (const F &f, bool delete_on_retire = true);
      ^
src/thread/thread_task.hpp:94:7: style: Class 'callable_task' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
      callable_task (F &&f, bool delete_on_retire = true);
      ^
src/thread/thread_task.hpp:142:7: style: Class 'callable_task < void >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
      callable_task (const F &f, bool delete_on_retire = true);
      ^
src/thread/thread_task.hpp:144:7: style: Class 'callable_task < void >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
      callable_task (F &&f, bool delete_on_retire = true);
      ^
src/thread/thread_waiter.hpp:117:5: style: Struct 'wait_duration < std :: chrono :: seconds >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    wait_duration (const D &duration)
    ^
src/thread/thread_manager.hpp:357:6: style: Condition 'stop' is always false [knownConditionTrueFalse]
 if (stop)
     ^
src/thread/thread_manager.hpp:353:17: note: Assignment 'stop=false', assigned value is 0
    bool stop = false;
                ^
src/thread/thread_manager.hpp:357:6: note: Condition 'stop' is always false
 if (stop)
     ^
src/thread/thread_worker_pool.hpp:778:17: style: The scope of the variable 'core_p' can be reduced. [variableScope]
    const core *core_p;
                ^
src/thread/thread_worker_pool.hpp:656:10: style: The scope of the variable 'is_not_stopped' can be reduced. [variableScope]
    bool is_not_stopped;
         ^
src/thread/thread_worker_pool.hpp:810:17: style: The scope of the variable 'next_index' can be reduced. [variableScope]
    std::size_t next_index;
                ^
src/thread/thread_worker_pool.hpp:1106:63: style:inconclusive: Function 'get_stats' argument 1 names different: declaration 'sum_inout' definition 'stats_out'. [funcArgNamesDifferent]
  worker_pool<Context>::core::get_stats (cubperf::stat_value *stats_out) const
                                                              ^
src/thread/thread_worker_pool.hpp:301:44: note: Function 'get_stats' argument 1 names different: declaration 'sum_inout' definition 'stats_out'.
      void get_stats (cubperf::stat_value *sum_inout) const;
                                           ^
src/thread/thread_worker_pool.hpp:1106:63: note: Function 'get_stats' argument 1 names different: declaration 'sum_inout' definition 'stats_out'.
  worker_pool<Context>::core::get_stats (cubperf::stat_value *stats_out) const
                                                              ^
src/thread/thread_worker_pool.hpp:653:28: style: Variable 'stop_count' is assigned a value that is never used. [unreadVariable]
    std::size_t stop_count = 0;
                           ^
src/thread/thread_daemon.hpp:98:12: style:inconclusive: Technically the member function 'cubthread::daemon::was_woken_up' can be const. [functionConst]
      bool was_woken_up (void);   // return true if daemon was woken up before timeout
           ^
src/thread/thread_daemon.cpp:106:11: note: Technically the member function 'cubthread::daemon::was_woken_up' can be const.
  daemon::was_woken_up (void)
          ^
src/thread/thread_daemon.hpp:98:12: note: Technically the member function 'cubthread::daemon::was_woken_up' can be const.
      bool was_woken_up (void);   // return true if daemon was woken up before timeout
           ^
src/thread/thread_looper.hpp:94:7: style: Class 'looper' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
      looper (const period_function &setup_period_function);
      ^
src/thread/thread_looper.hpp:97:7: style: Class 'looper' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
      looper (const delta_time &fixed_period);
      ^
src/thread/thread_looper.hpp:104:7: style: Class 'looper' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
      looper (const std::array<delta_time, Count> periods);
      ^
src/thread/thread_waiter.hpp:117:5: style: Struct 'wait_duration' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    wait_duration (const D &duration)
    ^
src/thread/thread_entry.cpp:307:13: warning: Assert statement calls a function which may have desired side effects: 'get_posix_id'. [assertWithSideEffect]
    assert (get_posix_id () == pthread_self ());
            ^
src/thread/thread_entry.hpp:286:19: style:inconclusive: Technically the member function 'cubthread::entry::get_id' can be const. [functionConst]
      thread_id_t get_id ();
                  ^
src/thread/thread_entry.cpp:280:10: note: Technically the member function 'cubthread::entry::get_id' can be const.
  entry::get_id ()
         ^
src/thread/thread_entry.hpp:286:19: note: Technically the member function 'cubthread::entry::get_id' can be const.
      thread_id_t get_id ();
                  ^
src/thread/thread_entry.hpp:287:17: style:inconclusive: Technically the member function 'cubthread::entry::get_posix_id' can be const. [functionConst]
      pthread_t get_posix_id ();
                ^
src/thread/thread_entry.cpp:286:10: note: Technically the member function 'cubthread::entry::get_posix_id' can be const.
  entry::get_posix_id ()
         ^
src/thread/thread_entry.hpp:287:17: note: Technically the member function 'cubthread::entry::get_posix_id' can be const.
      pthread_t get_posix_id ();
                ^
src/thread/thread_entry.hpp:336:29: style:inconclusive: Technically the member function 'cubthread::entry::get_lf_tran_index' can be const. [functionConst]
      lockfree::tran::index get_lf_tran_index ();
                            ^
src/thread/thread_entry.cpp:419:10: note: Technically the member function 'cubthread::entry::get_lf_tran_index' can be const.
  entry::get_lf_tran_index ()
         ^
src/thread/thread_entry.hpp:336:29: note: Technically the member function 'cubthread::entry::get_lf_tran_index' can be const.
      lockfree::tran::index get_lf_tran_index ();
                            ^
src/thread/thread_entry.cpp:461:59: style:inconclusive: Function 'thread_suspend_wakeup_and_unlock_entry' argument 1 names different: declaration 'p' definition 'thread_p'. [funcArgNamesDifferent]
thread_suspend_wakeup_and_unlock_entry (cubthread::entry *thread_p, thread_resume_suspend_status suspended_reason)
                                                          ^
src/thread/thread_entry.hpp:452:64: note: Function 'thread_suspend_wakeup_and_unlock_entry' argument 1 names different: declaration 'p' definition 'thread_p'.
void thread_suspend_wakeup_and_unlock_entry (cubthread::entry *p, thread_resume_suspend_status suspended_reason);
                                                               ^
src/thread/thread_entry.cpp:461:59: note: Function 'thread_suspend_wakeup_and_unlock_entry' argument 1 names different: declaration 'p' definition 'thread_p'.
thread_suspend_wakeup_and_unlock_entry (cubthread::entry *thread_p, thread_resume_suspend_status suspended_reason)
                                                          ^
src/thread/thread_entry.cpp:509:67: style:inconclusive: Function 'thread_suspend_timeout_wakeup_and_unlock_entry' argument 1 names different: declaration 'p' definition 'thread_p'. [funcArgNamesDifferent]
thread_suspend_timeout_wakeup_and_unlock_entry (cubthread::entry *thread_p, struct timespec *time_p,
                                                                  ^
src/thread/thread_entry.hpp:453:71: note: Function 'thread_suspend_timeout_wakeup_and_unlock_entry' argument 1 names different: declaration 'p' definition 'thread_p'.
int thread_suspend_timeout_wakeup_and_unlock_entry (cubthread::entry *p, struct timespec *t,
                                                                      ^
src/thread/thread_entry.cpp:509:67: note: Function 'thread_suspend_timeout_wakeup_and_unlock_entry' argument 1 names different: declaration 'p' definition 'thread_p'.
thread_suspend_timeout_wakeup_and_unlock_entry (cubthread::entry *thread_p, struct timespec *time_p,
                                                                  ^
src/thread/thread_entry.cpp:509:94: style:inconclusive: Function 'thread_suspend_timeout_wakeup_and_unlock_entry' argument 2 names different: declaration 't' definition 'time_p'. [funcArgNamesDifferent]
thread_suspend_timeout_wakeup_and_unlock_entry (cubthread::entry *thread_p, struct timespec *time_p,
                                                                                             ^
src/thread/thread_entry.hpp:453:91: note: Function 'thread_suspend_timeout_wakeup_and_unlock_entry' argument 2 names different: declaration 't' definition 'time_p'.
int thread_suspend_timeout_wakeup_and_unlock_entry (cubthread::entry *p, struct timespec *t,
                                                                                          ^
src/thread/thread_entry.cpp:509:94: note: Function 'thread_suspend_timeout_wakeup_and_unlock_entry' argument 2 names different: declaration 't' definition 'time_p'.
thread_suspend_timeout_wakeup_and_unlock_entry (cubthread::entry *thread_p, struct timespec *time_p,
                                                                                             ^
src/thread/thread_entry.cpp:604:34: style:inconclusive: Function 'thread_wakeup' argument 1 names different: declaration 'p' definition 'thread_p'. [funcArgNamesDifferent]
thread_wakeup (cubthread::entry *thread_p, thread_resume_suspend_status resume_reason)
                                 ^
src/thread/thread_entry.hpp:455:39: note: Function 'thread_wakeup' argument 1 names different: declaration 'p' definition 'thread_p'.
void thread_wakeup (cubthread::entry *p, thread_resume_suspend_status resume_reason);
                                      ^
src/thread/thread_entry.cpp:604:34: note: Function 'thread_wakeup' argument 1 names different: declaration 'p' definition 'thread_p'.
thread_wakeup (cubthread::entry *thread_p, thread_resume_suspend_status resume_reason)
                                 ^
src/thread/thread_entry.cpp:623:52: style:inconclusive: Function 'thread_wakeup_already_had_mutex' argument 1 names different: declaration 'p' definition 'thread_p'. [funcArgNamesDifferent]
thread_wakeup_already_had_mutex (cubthread::entry *thread_p, thread_resume_suspend_status resume_reason)
                                                   ^
src/thread/thread_entry.hpp:458:57: note: Function 'thread_wakeup_already_had_mutex' argument 1 names different: declaration 'p' definition 'thread_p'.
void thread_wakeup_already_had_mutex (cubthread::entry *p, thread_resume_suspend_status resume_reason);
                                                        ^
src/thread/thread_entry.cpp:623:52: note: Function 'thread_wakeup_already_had_mutex' argument 1 names different: declaration 'p' definition 'thread_p'.
thread_wakeup_already_had_mutex (cubthread::entry *thread_p, thread_resume_suspend_status resume_reason)
                                                   ^
src/thread/thread_entry.cpp:638:52: style:inconclusive: Function 'thread_suspend_with_other_mutex' argument 1 names different: declaration 'p' definition 'thread_p'. [funcArgNamesDifferent]
thread_suspend_with_other_mutex (cubthread::entry *thread_p, pthread_mutex_t *mutex_p, int timeout,
                                                   ^
src/thread/thread_entry.hpp:459:56: note: Function 'thread_suspend_with_other_mutex' argument 1 names different: declaration 'p' definition 'thread_p'.
int thread_suspend_with_other_mutex (cubthread::entry *p, pthread_mutex_t *mutexp, int timeout, struct timespec *to,
                                                       ^
src/thread/thread_entry.cpp:638:52: note: Function 'thread_suspend_with_other_mutex' argument 1 names different: declaration 'p' definition 'thread_p'.
thread_suspend_with_other_mutex (cubthread::entry *thread_p, pthread_mutex_t *mutex_p, int timeout,
                                                   ^
src/thread/thread_entry.cpp:638:79: style:inconclusive: Function 'thread_suspend_with_other_mutex' argument 2 names different: declaration 'mutexp' definition 'mutex_p'. [funcArgNamesDifferent]
thread_suspend_with_other_mutex (cubthread::entry *thread_p, pthread_mutex_t *mutex_p, int timeout,
                                                                              ^
src/thread/thread_entry.hpp:459:76: note: Function 'thread_suspend_with_other_mutex' argument 2 names different: declaration 'mutexp' definition 'mutex_p'.
int thread_suspend_with_other_mutex (cubthread::entry *p, pthread_mutex_t *mutexp, int timeout, struct timespec *to,
                                                                           ^
src/thread/thread_entry.cpp:638:79: note: Function 'thread_suspend_with_other_mutex' argument 2 names different: declaration 'mutexp' definition 'mutex_p'.
thread_suspend_with_other_mutex (cubthread::entry *thread_p, pthread_mutex_t *mutex_p, int timeout,
                                                                              ^
src/thread/thread_lockfree_hash_map.hpp:119:29: warning: Member variable 'lockfree_hashmap::m_entry_idx' is not initialized in the constructor. [uninitMemberVar]
  lockfree_hashmap<Key, T>::lockfree_hashmap ()
                            ^
src/thread/thread_manager.cpp:61:5: warning: Class 'manager' does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s). [noCopyConstructor]
    m_entry_manager = new entry_manager ();
    ^
src/thread/thread_manager.cpp:61:5: warning: Class 'manager' does not have a operator= which is recommended since it has dynamic memory/resource allocation(s). [noOperatorEq]
    m_entry_manager = new entry_manager ();
    ^
src/thread/thread_manager.cpp:117:5: warning: Possible leak in public function. The pointer 'm_lf_tran_sys' is not deallocated before it is allocated. [publicAllocationError]
    m_lf_tran_sys = new lockfree::tran::system (1);   // a single thread = main
    ^
src/thread/thread_manager.cpp:115:5: warning: Possible leak in public function. The pointer 'm_lf_tran_sys' is not deallocated before it is allocated. [publicAllocationError]
    m_lf_tran_sys = new lockfree::tran::system (m_max_threads + 1);
    ^
src/thread/thread_manager.cpp:536:37: style: Variable 'old_manager_thread_count' is assigned a value that is never used. [unreadVariable]
    size_t old_manager_thread_count = 0;
                                    ^
src/thread/thread_waiter.hpp:86:19: style: Unused private function: 'waiter::check_wake' [unusedPrivateFunction]
      inline bool check_wake (void);      // check wake condition; used to avoid spurious wakeups
                  ^
src/thread/thread_waiter.hpp:86:19: style:inconclusive: Technically the member function 'cubthread::waiter::check_wake' can be const. [functionConst]
      inline bool check_wake (void);      // check wake condition; used to avoid spurious wakeups
                  ^
src/thread/thread_waiter.cpp:102:11: note: Technically the member function 'cubthread::waiter::check_wake' can be const.
  waiter::check_wake (void)
          ^
src/thread/thread_waiter.hpp:86:19: note: Technically the member function 'cubthread::waiter::check_wake' can be const.
      inline bool check_wake (void);      // check wake condition; used to avoid spurious wakeups
                  ^
src/thread/thread_waiter.cpp:89:18: warning: Identical condition 'm_status!=SLEEPING', second condition is always false [identicalConditionAfterEarlyExit]
    if (m_status != SLEEPING)
                 ^
src/thread/thread_waiter.cpp:80:18: note: If condition 'm_status!=SLEEPING' is true, the function will return/exit
    if (m_status != SLEEPING)
                 ^
src/thread/thread_waiter.cpp:89:18: note: Testing identical condition 'm_status!=SLEEPING'
    if (m_status != SLEEPING)
                 ^
src/thread/thread_worker_pool.hpp:566:5: warning: Class 'worker_pool' does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s). [noCopyConstructor]
    m_core_array = new core[m_core_count];
    ^
src/thread/thread_worker_pool.hpp:566:5: warning: Class 'worker_pool' does not have a operator= which is recommended since it has dynamic memory/resource allocation(s). [noOperatorEq]
    m_core_array = new core[m_core_count];
    ^
src/thread/thread_worker_pool.hpp:538:15: style:inconclusive: Function 'worker_pool' argument 6 names different: declaration 'debug_logging' definition 'debug_log'. [funcArgNamesDifferent]
         bool debug_log, bool pool_threads, wait_seconds wait_for_task_time)
              ^
src/thread/thread_worker_pool.hpp:145:57: note: Function 'worker_pool' argument 6 names different: declaration 'debug_logging' definition 'debug_log'.
     const char *name, std::size_t core_count = 1, bool debug_logging = false, bool pool_threads = false,
                                                        ^
src/thread/thread_worker_pool.hpp:538:15: note: Function 'worker_pool' argument 6 names different: declaration 'debug_logging' definition 'debug_log'.
         bool debug_log, bool pool_threads, wait_seconds wait_for_task_time)
              ^
src/tools/cci_applier.c:669:9: style: The scope of the variable 'sql_log_fp' can be reduced. [variableScope]
  FILE *sql_log_fp;
        ^
src/tools/cci_applier.c:672:7: style: The scope of the variable 'error' can be reduced. [variableScope]
  int error = ER_CA_NO_ERROR;
      ^
src/tools/cci_applier.c:804:8: style: The scope of the variable 'err_msg' can be reduced. [variableScope]
  char err_msg[255];
       ^
src/tools/cci_applier.c:840:9: style: The scope of the variable 'p' can be reduced. [variableScope]
  char *p, *token;
        ^
src/tools/cci_applier.c:840:13: style: The scope of the variable 'token' can be reduced. [variableScope]
  char *p, *token;
            ^
src/tools/cci_applier.c:672:13: style: Variable 'error' is assigned a value that is never used. [unreadVariable]
  int error = ER_CA_NO_ERROR;
            ^
src/transaction/boot_cl.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 23 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/transaction/client_credentials.hpp:42:5: error: Code 'std::string' is invalid C code. Use --std or --language to configure the language. [syntaxError]
    std::string client_info;
    ^
src/transaction/boot_sr.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 22 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/transaction/log_impl.h:1117:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  return LOG_FIND_TDES (LOG_FIND_THREAD_TRAN_INDEX (thread_p));
^
src/transaction/boot_sr.c:2916:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      return LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/boot_sr.c:3352:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      save_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/client_credentials.cpp:81:36: style:inconclusive: Function 'set_ids' argument 1 names different: declaration 'type' definition 'type_arg'. [funcArgNamesDifferent]
clientids::set_ids (db_client_type type_arg, const char *client_info_arg, const char *db_user_arg,
                                   ^
src/transaction/client_credentials.hpp:58:34: note: Function 'set_ids' argument 1 names different: declaration 'type' definition 'type_arg'.
    void set_ids (db_client_type type, const char *client_info, const char *db_user, const char *program_name,
                                 ^
src/transaction/client_credentials.cpp:81:36: note: Function 'set_ids' argument 1 names different: declaration 'type' definition 'type_arg'.
clientids::set_ids (db_client_type type_arg, const char *client_info_arg, const char *db_user_arg,
                                   ^
src/transaction/client_credentials.cpp:81:58: style:inconclusive: Function 'set_ids' argument 2 names different: declaration 'client_info' definition 'client_info_arg'. [funcArgNamesDifferent]
clientids::set_ids (db_client_type type_arg, const char *client_info_arg, const char *db_user_arg,
                                                         ^
src/transaction/client_credentials.hpp:58:52: note: Function 'set_ids' argument 2 names different: declaration 'client_info' definition 'client_info_arg'.
    void set_ids (db_client_type type, const char *client_info, const char *db_user, const char *program_name,
                                                   ^
src/transaction/client_credentials.cpp:81:58: note: Function 'set_ids' argument 2 names different: declaration 'client_info' definition 'client_info_arg'.
clientids::set_ids (db_client_type type_arg, const char *client_info_arg, const char *db_user_arg,
                                                         ^
src/transaction/client_credentials.cpp:81:87: style:inconclusive: Function 'set_ids' argument 3 names different: declaration 'db_user' definition 'db_user_arg'. [funcArgNamesDifferent]
clientids::set_ids (db_client_type type_arg, const char *client_info_arg, const char *db_user_arg,
                                                                                      ^
src/transaction/client_credentials.hpp:58:77: note: Function 'set_ids' argument 3 names different: declaration 'db_user' definition 'db_user_arg'.
    void set_ids (db_client_type type, const char *client_info, const char *db_user, const char *program_name,
                                                                            ^
src/transaction/client_credentials.cpp:81:87: note: Function 'set_ids' argument 3 names different: declaration 'db_user' definition 'db_user_arg'.
clientids::set_ids (db_client_type type_arg, const char *client_info_arg, const char *db_user_arg,
                                                                                      ^
src/transaction/client_credentials.cpp:82:19: style:inconclusive: Function 'set_ids' argument 4 names different: declaration 'program_name' definition 'program_name_arg'. [funcArgNamesDifferent]
      const char *program_name_arg, const char *login_name_arg, const char *host_name_arg,
                  ^
src/transaction/client_credentials.hpp:58:98: note: Function 'set_ids' argument 4 names different: declaration 'program_name' definition 'program_name_arg'.
    void set_ids (db_client_type type, const char *client_info, const char *db_user, const char *program_name,
                                                                                                 ^
src/transaction/client_credentials.cpp:82:19: note: Function 'set_ids' argument 4 names different: declaration 'program_name' definition 'program_name_arg'.
      const char *program_name_arg, const char *login_name_arg, const char *host_name_arg,
                  ^
src/transaction/client_credentials.cpp:82:49: style:inconclusive: Function 'set_ids' argument 5 names different: declaration 'login_name' definition 'login_name_arg'. [funcArgNamesDifferent]
      const char *program_name_arg, const char *login_name_arg, const char *host_name_arg,
                                                ^
src/transaction/client_credentials.hpp:59:17: note: Function 'set_ids' argument 5 names different: declaration 'login_name' definition 'login_name_arg'.
    const char *login_name, const char *host_name, int process_id);
                ^
src/transaction/client_credentials.cpp:82:49: note: Function 'set_ids' argument 5 names different: declaration 'login_name' definition 'login_name_arg'.
      const char *program_name_arg, const char *login_name_arg, const char *host_name_arg,
                                                ^
src/transaction/client_credentials.cpp:82:77: style:inconclusive: Function 'set_ids' argument 6 names different: declaration 'host_name' definition 'host_name_arg'. [funcArgNamesDifferent]
      const char *program_name_arg, const char *login_name_arg, const char *host_name_arg,
                                                                            ^
src/transaction/client_credentials.hpp:59:41: note: Function 'set_ids' argument 6 names different: declaration 'host_name' definition 'host_name_arg'.
    const char *login_name, const char *host_name, int process_id);
                                        ^
src/transaction/client_credentials.cpp:82:77: note: Function 'set_ids' argument 6 names different: declaration 'host_name' definition 'host_name_arg'.
      const char *program_name_arg, const char *login_name_arg, const char *host_name_arg,
                                                                            ^
src/transaction/client_credentials.cpp:83:11: style:inconclusive: Function 'set_ids' argument 7 names different: declaration 'process_id' definition 'process_id_arg'. [funcArgNamesDifferent]
      int process_id_arg)
          ^
src/transaction/client_credentials.hpp:59:56: note: Function 'set_ids' argument 7 names different: declaration 'process_id' definition 'process_id_arg'.
    const char *login_name, const char *host_name, int process_id);
                                                       ^
src/transaction/client_credentials.cpp:83:11: note: Function 'set_ids' argument 7 names different: declaration 'process_id' definition 'process_id_arg'.
      int process_id_arg)
          ^
src/transaction/client_credentials.cpp:103:41: style:inconclusive: Function 'set_client_info' argument 1 names different: declaration 'client_info' definition 'client_info_arg'. [funcArgNamesDifferent]
clientids::set_client_info (const char *client_info_arg)
                                        ^
src/transaction/client_credentials.hpp:75:39: note: Function 'set_client_info' argument 1 names different: declaration 'client_info' definition 'client_info_arg'.
    void set_client_info (const char *client_info);
                                      ^
src/transaction/client_credentials.cpp:103:41: note: Function 'set_client_info' argument 1 names different: declaration 'client_info' definition 'client_info_arg'.
clientids::set_client_info (const char *client_info_arg)
                                        ^
src/transaction/client_credentials.cpp:109:34: style:inconclusive: Function 'set_user' argument 1 names different: declaration 'db_user' definition 'db_user_arg'. [funcArgNamesDifferent]
clientids::set_user (const char *db_user_arg)
                                 ^
src/transaction/client_credentials.hpp:61:32: note: Function 'set_user' argument 1 names different: declaration 'db_user' definition 'db_user_arg'.
    void set_user (const char *db_user);
                               ^
src/transaction/client_credentials.cpp:109:34: note: Function 'set_user' argument 1 names different: declaration 'db_user' definition 'db_user_arg'.
clientids::set_user (const char *db_user_arg)
                                 ^
src/transaction/client_credentials.cpp:115:42: style:inconclusive: Function 'set_program_name' argument 1 names different: declaration 'program_name' definition 'program_name_arg'. [funcArgNamesDifferent]
clientids::set_program_name (const char *program_name_arg)
                                         ^
src/transaction/client_credentials.hpp:76:40: note: Function 'set_program_name' argument 1 names different: declaration 'program_name' definition 'program_name_arg'.
    void set_program_name (const char *program_name);
                                       ^
src/transaction/client_credentials.cpp:115:42: note: Function 'set_program_name' argument 1 names different: declaration 'program_name' definition 'program_name_arg'.
clientids::set_program_name (const char *program_name_arg)
                                         ^
src/transaction/client_credentials.cpp:130:40: style:inconclusive: Function 'set_login_name' argument 1 names different: declaration 'login_name' definition 'login_name_arg'. [funcArgNamesDifferent]
clientids::set_login_name (const char *login_name_arg)
                                       ^
src/transaction/client_credentials.hpp:77:38: note: Function 'set_login_name' argument 1 names different: declaration 'login_name' definition 'login_name_arg'.
    void set_login_name (const char *login_name);
                                     ^
src/transaction/client_credentials.cpp:130:40: note: Function 'set_login_name' argument 1 names different: declaration 'login_name' definition 'login_name_arg'.
clientids::set_login_name (const char *login_name_arg)
                                       ^
src/transaction/client_credentials.cpp:136:39: style:inconclusive: Function 'set_host_name' argument 1 names different: declaration 'host_name' definition 'host_name_arg'. [funcArgNamesDifferent]
clientids::set_host_name (const char *host_name_arg)
                                      ^
src/transaction/client_credentials.hpp:78:37: note: Function 'set_host_name' argument 1 names different: declaration 'host_name' definition 'host_name_arg'.
    void set_host_name (const char *host_name);
                                    ^
src/transaction/client_credentials.cpp:136:39: note: Function 'set_host_name' argument 1 names different: declaration 'host_name' definition 'host_name_arg'.
clientids::set_host_name (const char *host_name_arg)
                                      ^
src/transaction/client_credentials.cpp:149:55: style:inconclusive: Function 'set_system_internal_with_user' argument 1 names different: declaration 'db_user' definition 'db_user_arg'. [funcArgNamesDifferent]
clientids::set_system_internal_with_user (const char *db_user_arg)
                                                      ^
src/transaction/client_credentials.hpp:64:53: note: Function 'set_system_internal_with_user' argument 1 names different: declaration 'db_user' definition 'db_user_arg'.
    void set_system_internal_with_user (const char *db_user);
                                                    ^
src/transaction/client_credentials.cpp:149:55: note: Function 'set_system_internal_with_user' argument 1 names different: declaration 'db_user' definition 'db_user_arg'.
clientids::set_system_internal_with_user (const char *db_user_arg)
                                                      ^
src/transaction/locator.c:470:33: style: The scope of the variable 'new_obj' can be reduced. [variableScope]
  LC_COPYAREA_ONEOBJ *old_obj, *new_obj;
                                ^
src/transaction/locator.c:407:43: style:inconclusive: Function 'locator_allocate_copy_area_by_length' argument 1 names different: declaration 'length' definition 'min_length'. [funcArgNamesDifferent]
locator_allocate_copy_area_by_length (int min_length)
                                          ^
src/transaction/locator.h:395:63: note: Function 'locator_allocate_copy_area_by_length' argument 1 names different: declaration 'length' definition 'min_length'.
extern LC_COPYAREA *locator_allocate_copy_area_by_length (int length);
                                                              ^
src/transaction/locator.c:407:43: note: Function 'locator_allocate_copy_area_by_length' argument 1 names different: declaration 'length' definition 'min_length'.
locator_allocate_copy_area_by_length (int min_length)
                                          ^
src/transaction/locator.c:2153:39: style:inconclusive: Function 'locator_clear_oid_set' argument 1 names different: declaration 'thrd' definition 'thread_p'. [funcArgNamesDifferent]
locator_clear_oid_set (THREAD_ENTRY * thread_p, LC_OIDSET * oidset)
                                      ^
src/transaction/locator.h:431:51: note: Function 'locator_clear_oid_set' argument 1 names different: declaration 'thrd' definition 'thread_p'.
extern void locator_clear_oid_set (THREAD_ENTRY * thrd, LC_OIDSET * oidset);
                                                  ^
src/transaction/locator.c:2153:39: note: Function 'locator_clear_oid_set' argument 1 names different: declaration 'thrd' definition 'thread_p'.
locator_clear_oid_set (THREAD_ENTRY * thread_p, LC_OIDSET * oidset)
                                      ^
src/transaction/locator.c:2255:37: style:inconclusive: Function 'locator_add_oid_set' argument 1 names different: declaration 'thrd' definition 'thread_p'. [funcArgNamesDifferent]
locator_add_oid_set (THREAD_ENTRY * thread_p, LC_OIDSET * set, HFID * heap, OID * class_oid, OID * obj_oid)
                                    ^
src/transaction/locator.h:433:55: note: Function 'locator_add_oid_set' argument 1 names different: declaration 'thrd' definition 'thread_p'.
extern LC_OIDMAP *locator_add_oid_set (THREAD_ENTRY * thrd, LC_OIDSET * set, HFID * heap, OID * class_oid,
                                                      ^
src/transaction/locator.c:2255:37: note: Function 'locator_add_oid_set' argument 1 names different: declaration 'thrd' definition 'thread_p'.
locator_add_oid_set (THREAD_ENTRY * thread_p, LC_OIDSET * set, HFID * heap, OID * class_oid, OID * obj_oid)
                                    ^
src/transaction/locator.c:707:12: style: Local variable 'len' shadows outer variable [shadowVariable]
       int len = *contents_length;
           ^
src/transaction/locator.c:670:10: note: Shadowed declaration
  int i, len;
         ^
src/transaction/locator.c:707:12: note: Shadow variable
       int len = *contents_length;
           ^
src/transaction/locator.c:916:23: style: The scope of the variable 'obj' can be reduced. [variableScope]
  LC_COPYAREA_ONEOBJ *obj; /* Describe on object in area */
                      ^
src/transaction/locator.c:917:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
src/transaction/locator.c:284:6: style: Variable 'rv' is assigned a value that is never used. [unreadVariable]
  rv = pthread_mutex_lock (&locator_Keep.packed_areas.lock);
     ^
src/transaction/locator.c:355:6: style: Variable 'rv' is assigned a value that is never used. [unreadVariable]
  rv = pthread_mutex_lock (&locator_Keep.packed_areas.lock);
     ^
src/transaction/locator.c:429:6: style: Variable 'rv' is assigned a value that is never used. [unreadVariable]
  rv = pthread_mutex_lock (&locator_Keep.copy_areas.lock);
     ^
src/transaction/locator.c:546:6: style: Variable 'rv' is assigned a value that is never used. [unreadVariable]
  rv = pthread_mutex_lock (&locator_Keep.copy_areas.lock);
     ^
src/transaction/locator.c:970:6: style: Variable 'rv' is assigned a value that is never used. [unreadVariable]
  rv = pthread_mutex_lock (&locator_Keep.lockset_areas.lock);
     ^
src/transaction/locator.c:1153:6: style: Variable 'rv' is assigned a value that is never used. [unreadVariable]
  rv = pthread_mutex_lock (&locator_Keep.lockset_areas.lock);
     ^
src/transaction/locator.c:1642:6: style: Variable 'rv' is assigned a value that is never used. [unreadVariable]
  rv = pthread_mutex_lock (&locator_Keep.lockhint_areas.lock);
     ^
src/transaction/locator.c:1778:6: style: Variable 'rv' is assigned a value that is never used. [unreadVariable]
  rv = pthread_mutex_lock (&locator_Keep.lockhint_areas.lock);
     ^
src/transaction/locator_cl.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/transaction/log_lsa.hpp:36:3: error: Code 'std::int64_t' is invalid C code. Use --std or --language to configure the language. [syntaxError]
  std::int64_t pageid:48;  /* Log page identifier : 6 bytes length */
  ^
src/transaction/locator_sr.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/transaction/locator_sr.c:470:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/locator_sr.c:694:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/locator_sr.c:771:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/locator_sr.c:933:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/locator_sr.c:1040:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/locator_sr.c:1187:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  if (entry == NULL || entry->e_tran_index != LOG_FIND_THREAD_TRAN_INDEX (thread_p))
^
src/transaction/locator_sr.c:1195:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  assert (entry->e_tran_index == LOG_FIND_THREAD_TRAN_INDEX (thread_p));
^
src/transaction/locator_sr.c:1264:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/locator_sr.c:1352:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/locator_sr.c:1513:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/locator_sr.c:1610:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/locator_sr.c:1675:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/locator_sr.c:2194:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/locator_sr.c:2328:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/locator_sr.c:6158:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
       LOG_FIND_THREAD_TRAN_INDEX (thread_p));
^
src/transaction/locator_sr.c:6212:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    LOG_FIND_THREAD_TRAN_INDEX (thread_p));
^
src/transaction/locator_sr.c:6274:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   LOG_FIND_THREAD_TRAN_INDEX (thread_p));
^
src/transaction/locator_sr.c:6412:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/locator_sr.c:8610:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
       tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/locator_sr.c:8760:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/locator_sr.c:9182:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/locator_sr.c:9220:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/locator_sr.c:9323:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/locator_sr.c:9747:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/locator_sr.c:11053:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/locator_sr.c:12100:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/locator_sr.c:12569:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
       LOG_FIND_THREAD_TRAN_INDEX (thread_p));
^
src/transaction/lock_manager.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 23 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/transaction/lock_manager.c:2671:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   owner_tran_index = LOG_FIND_THREAD_TRAN_INDEX (waiter->thrd_entry);
^
src/transaction/lock_manager.c:2823:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   owner_tran_index = LOG_FIND_THREAD_TRAN_INDEX (check->thrd_entry);
^
src/transaction/lock_manager.c:3977:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/lock_manager.c:4175:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/lock_manager.c:5882:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/lock_manager.c:5985:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/lock_manager.c:6157:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/lock_manager.c:6297:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/lock_manager.c:6400:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/lock_manager.c:6564:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/lock_manager.c:6640:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/lock_manager.c:6726:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/lock_manager.c:6800:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/lock_manager.c:6849:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/lock_manager.c:7197:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/lock_manager.c:7517:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/lock_manager.c:8303:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/lock_manager.c:8541:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  lockcomp->tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/lock_manager.c:9613:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/log_2pc.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 15 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/transaction/log_2pc.c:882:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/log_2pc.c:926:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/log_2pc.c:1088:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/log_2pc.c:1176:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/log_2pc.c:1233:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    LOG_FIND_THREAD_TRAN_INDEX (thread_p));
^
src/transaction/log_append.cpp:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 14 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/transaction/log_lsa.hpp:45:15: performance:inconclusive: Technically the member function 'log_lsa::is_null' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  inline bool is_null () const;
              ^
src/transaction/log_lsa.hpp:92:10: note: Technically the member function 'log_lsa::is_null' can be static (but you may consider moving to unnamed namespace).
log_lsa::is_null () const
         ^
src/transaction/log_lsa.hpp:45:15: note: Technically the member function 'log_lsa::is_null' can be static (but you may consider moving to unnamed namespace).
  inline bool is_null () const;
              ^
src/transaction/log_lsa.hpp:46:15: performance:inconclusive: Technically the member function 'log_lsa::set_null' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  inline void set_null ();
              ^
src/transaction/log_lsa.hpp:98:10: note: Technically the member function 'log_lsa::set_null' can be static (but you may consider moving to unnamed namespace).
log_lsa::set_null ()
         ^
src/transaction/log_lsa.hpp:46:15: note: Technically the member function 'log_lsa::set_null' can be static (but you may consider moving to unnamed namespace).
  inline void set_null ();
              ^
src/transaction/log_append.cpp:798:7: style: Condition 'is_diff' is always false [knownConditionTrueFalse]
  if (is_diff)
      ^
src/transaction/log_append.cpp:673:60: note: Assignment 'is_diff=false', assigned value is 0
  bool is_undo_zip = false, is_redo_zip = false, is_diff = false;
                                                           ^
src/transaction/log_append.cpp:798:7: note: Condition 'is_diff' is always false
  if (is_diff)
      ^
src/transaction/log_append.cpp:555:9: style: The scope of the variable 'ptr' can be reduced. [variableScope]
  char *ptr;
        ^
src/transaction/log_append.cpp:600:9: style: The scope of the variable 'ptr' can be reduced. [variableScope]
  char *ptr;
        ^
src/transaction/log_append.cpp:1649:7: style: The scope of the variable 'copy_length' can be reduced. [variableScope]
  int copy_length;  /* Amount of contiguous data that can be copied */
      ^
src/transaction/log_append.cpp:78:43: style:inconclusive: Function 'log_data_addr' argument 1 names different: declaration 'vfid' definition 'vfid_arg'. [funcArgNamesDifferent]
log_data_addr::log_data_addr (const VFID *vfid_arg, PAGE_PTR pgptr_arg, PGLENGTH offset_arg)
                                          ^
src/transaction/log_append.hpp:61:30: note: Function 'log_data_addr' argument 1 names different: declaration 'vfid' definition 'vfid_arg'.
  log_data_addr (const VFID *vfid, PAGE_PTR pgptr, PGLENGTH offset);
                             ^
src/transaction/log_append.cpp:78:43: note: Function 'log_data_addr' argument 1 names different: declaration 'vfid' definition 'vfid_arg'.
log_data_addr::log_data_addr (const VFID *vfid_arg, PAGE_PTR pgptr_arg, PGLENGTH offset_arg)
                                          ^
src/transaction/log_append.cpp:78:62: style:inconclusive: Function 'log_data_addr' argument 2 names different: declaration 'pgptr' definition 'pgptr_arg'. [funcArgNamesDifferent]
log_data_addr::log_data_addr (const VFID *vfid_arg, PAGE_PTR pgptr_arg, PGLENGTH offset_arg)
                                                             ^
src/transaction/log_append.hpp:61:45: note: Function 'log_data_addr' argument 2 names different: declaration 'pgptr' definition 'pgptr_arg'.
  log_data_addr (const VFID *vfid, PAGE_PTR pgptr, PGLENGTH offset);
                                            ^
src/transaction/log_append.cpp:78:62: note: Function 'log_data_addr' argument 2 names different: declaration 'pgptr' definition 'pgptr_arg'.
log_data_addr::log_data_addr (const VFID *vfid_arg, PAGE_PTR pgptr_arg, PGLENGTH offset_arg)
                                                             ^
src/transaction/log_append.cpp:78:82: style:inconclusive: Function 'log_data_addr' argument 3 names different: declaration 'offset' definition 'offset_arg'. [funcArgNamesDifferent]
log_data_addr::log_data_addr (const VFID *vfid_arg, PAGE_PTR pgptr_arg, PGLENGTH offset_arg)
                                                                                 ^
src/transaction/log_append.hpp:61:61: note: Function 'log_data_addr' argument 3 names different: declaration 'offset' definition 'offset_arg'.
  log_data_addr (const VFID *vfid, PAGE_PTR pgptr, PGLENGTH offset);
                                                            ^
src/transaction/log_append.cpp:78:82: note: Function 'log_data_addr' argument 3 names different: declaration 'offset' definition 'offset_arg'.
log_data_addr::log_data_addr (const VFID *vfid_arg, PAGE_PTR pgptr_arg, PGLENGTH offset_arg)
                                                                                 ^
src/transaction/log_append.cpp:1354:17: style: Variable 'mvccid' is assigned a value that is never used. [unreadVariable]
  MVCCID mvccid = MVCCID_NULL;
                ^
src/transaction/log_applier.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 23 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/transaction/log_applier_sql_log.c:153:7: error: Resource leak: catalog_fp [resourceLeak]
      return ER_FAILED;
      ^
src/transaction/log_applier_sql_log.c:158:7: error: Resource leak: catalog_fp [resourceLeak]
      return ER_FAILED;
      ^
src/transaction/log_applier_sql_log.c:161:3: error: Resource leak: catalog_fp [resourceLeak]
  return NO_ERROR;
  ^
src/transaction/log_applier_sql_log.c:521:28: warning: Either the condition 'select!=NULL' is redundant or there is possible null pointer dereference: select. [nullPointerRedundantCheck]
    (select == NULL) ? 0 : select->len (), query.len ());
                           ^
src/transaction/log_applier_sql_log.c:524:14: note: Assuming that condition 'select!=NULL' is not redundant
  if (select != NULL)
             ^
src/transaction/log_applier_sql_log.c:521:28: note: Null pointer dereference
    (select == NULL) ? 0 : select->len (), query.len ());
                           ^
src/transaction/log_applier_sql_log.c:205:15: style: The scope of the variable 'midxkey' can be reduced. [variableScope]
  DB_MIDXKEY *midxkey;
              ^
src/transaction/log_applier_sql_log.c:206:17: style: The scope of the variable 'pk_att' can be reduced. [variableScope]
  SM_ATTRIBUTE *pk_att;
                ^
src/transaction/log_applier_sql_log.c:357:7: style: The scope of the variable 'result' can be reduced. [variableScope]
  int result;
      ^
src/transaction/log_applier_sql_log.c:442:8: style: The scope of the variable 'default_ha_prm' can be reduced. [variableScope]
  char default_ha_prm[LINE_MAX];
       ^
src/transaction/log_applier_sql_log.c:439:85: style:inconclusive: Function 'sl_write_statement_sql' argument 4 names different: declaration 'ddl' definition 'stmt_text'. [funcArgNamesDifferent]
sl_write_statement_sql (char *class_name, char *db_user, int item_type, const char *stmt_text, char *ha_sys_prm)
                                                                                    ^
src/transaction/log_applier_sql_log.h:31:96: note: Function 'sl_write_statement_sql' argument 4 names different: declaration 'ddl' definition 'stmt_text'.
extern int sl_write_statement_sql (char *class_name, char *db_user, int item_type, const char *ddl, char *ha_sys_prm);
                                                                                               ^
src/transaction/log_applier_sql_log.c:439:85: note: Function 'sl_write_statement_sql' argument 4 names different: declaration 'ddl' definition 'stmt_text'.
sl_write_statement_sql (char *class_name, char *db_user, int item_type, const char *stmt_text, char *ha_sys_prm)
                                                                                    ^
src/transaction/log_applier_sql_log.c:141:9: style: Local variable 'catalog_fp' shadows outer variable [shadowVariable]
  FILE *catalog_fp;
        ^
src/transaction/log_applier_sql_log.c:66:14: note: Shadowed declaration
static FILE *catalog_fp;
             ^
src/transaction/log_applier_sql_log.c:141:9: note: Shadow variable
  FILE *catalog_fp;
        ^
src/transaction/log_applier_sql_log.c:441:13: style: Variable 'error' is assigned a value that is never used. [unreadVariable]
  int error = NO_ERROR;
            ^
src/transaction/log_compress.c:232:12: style: Local variable 'log_zip' shadows outer function [shadowFunction]
  LOG_ZIP *log_zip = NULL;
           ^
src/transaction/log_compress.h:63:13: note: Shadowed declaration
extern bool log_zip (LOG_ZIP * log_zip, LOG_ZIP_SIZE_T length, const void *data);
            ^
src/transaction/log_compress.c:232:12: note: Shadow variable
  LOG_ZIP *log_zip = NULL;
           ^
src/transaction/log_global.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/transaction/log_manager.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 21 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/transaction/log_manager.c:1690:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  save_tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/log_manager.c:2071:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/log_manager.c:2200:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/log_manager.c:2344:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/log_manager.c:2650:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/log_manager.c:2746:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/log_manager.c:2871:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/log_manager.c:3124:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/log_manager.c:3164:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/log_manager.c:3355:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/log_manager.c:3588:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/log_manager.c:4150:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  *tran_index_out = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/log_manager.c:4171:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/log_manager.c:4204:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/log_manager.c:4240:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/log_manager.c:4767:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/log_manager.c:4795:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/log_manager.c:5086:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/log_manager.c:5194:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/log_manager.c:5288:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/log_manager.c:5439:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   log_Gl.mvcc_table.reset_transaction_lowest_active (LOG_FIND_THREAD_TRAN_INDEX (thread_p));
^
src/transaction/log_manager.c:5723:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   log_Gl.mvcc_table.reset_transaction_lowest_active (LOG_FIND_THREAD_TRAN_INDEX (thread_p));
^
src/transaction/log_manager.c:10147:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  LOG_TDES *tdes = LOG_FIND_TDES (LOG_FIND_THREAD_TRAN_INDEX (thread_p));
^
src/transaction/log_manager.c:10180:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  LOG_TDES *tdes = LOG_FIND_TDES (LOG_FIND_THREAD_TRAN_INDEX (thread_p));
^
src/transaction/log_page_buffer.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/transaction/log_postpone_cache.cpp:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 14 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/transaction/log_postpone_cache.cpp:91:12: style: C-style pointer casting [cstyleCast]
  assert (((log_rec_redo *) node.data_header)->length == node.rlength);
           ^
src/transaction/log_postpone_cache.cpp:176:29: style: C-style pointer casting [cstyleCast]
      log_rec_redo redo = * (log_rec_redo *) redo_data;
                            ^
src/transaction/log_recovery.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 17 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/transaction/log_recovery.c:665:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/log_system_tran.cpp:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 14 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/transaction/log_system_tran.cpp:71:7: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
      tdes = NULL;
      ^
src/transaction/log_system_tran.hpp:37:5: style: Class 'log_system_tdes' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    log_system_tdes (log_tdes *tdes);
    ^
src/transaction/log_system_tran.cpp:202:13: style: The scope of the variable 'tdes' can be reduced. [variableScope]
  log_tdes *tdes;
            ^
src/transaction/log_system_tran.cpp:236:17: style: Local variable 'tdes' shadows outer variable [shadowVariable]
      log_tdes *tdes = systdes_create_tdes ();
                ^
src/transaction/log_system_tran.cpp:233:13: note: Shadowed declaration
  log_tdes *tdes = rv_get_tdes (trid);
            ^
src/transaction/log_system_tran.cpp:236:17: note: Shadow variable
      log_tdes *tdes = systdes_create_tdes ();
                ^
src/transaction/log_tran_table.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 17 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/transaction/log_tran_table.c:1023:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/log_tran_table.c:1210:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  log_tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/log_tran_table.c:1798:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/log_tran_table.c:1894:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  return logtb_find_tranid (LOG_FIND_THREAD_TRAN_INDEX (thread_p));
^
src/transaction/log_tran_table.c:2058:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  logtb_set_user_name (LOG_FIND_THREAD_TRAN_INDEX (thread_p), user_name);
^
src/transaction/log_tran_table.c:2074:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/log_tran_table.c:2420:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  return logtb_find_client_type (LOG_FIND_THREAD_TRAN_INDEX (thread_p));
^
src/transaction/log_tran_table.c:2431:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  return logtb_find_client_name (LOG_FIND_THREAD_TRAN_INDEX (thread_p));
^
src/transaction/log_tran_table.c:2442:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  return logtb_find_client_hostname (LOG_FIND_THREAD_TRAN_INDEX (thread_p));
^
src/transaction/log_tran_table.c:2504:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/log_tran_table.c:2618:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/log_tran_table.c:2671:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/log_tran_table.c:2689:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  logtb_set_tran_index_interrupt (thread_p, LOG_FIND_THREAD_TRAN_INDEX (thread_p), set);
^
src/transaction/log_tran_table.c:2877:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/log_tran_table.c:2930:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  logtb_set_suppress_repl_on_transaction (thread_p, LOG_FIND_THREAD_TRAN_INDEX (thread_p), set);
^
src/transaction/log_tran_table.c:2995:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/log_tran_table.c:3033:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/log_tran_table.c:3077:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/log_tran_table.c:3114:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/log_tran_table.c:3284:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  LOG_TDES *tdes = LOG_FIND_TDES (LOG_FIND_THREAD_TRAN_INDEX (thread_p));
^
src/transaction/log_tran_table.c:3365:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  LOG_TDES *tdes = LOG_FIND_TDES (LOG_FIND_THREAD_TRAN_INDEX (thread_p));
^
src/transaction/log_tran_table.c:3429:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  LOG_TDES *tdes = LOG_FIND_TDES (LOG_FIND_THREAD_TRAN_INDEX (thread_p));
^
src/transaction/log_tran_table.c:3461:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  LOG_TDES *tdes = LOG_FIND_TDES (LOG_FIND_THREAD_TRAN_INDEX (thread_p));
^
src/transaction/log_tran_table.c:3642:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  LOG_TDES *tdes = LOG_FIND_TDES (LOG_FIND_THREAD_TRAN_INDEX (thread_p));
^
src/transaction/log_tran_table.c:3777:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  LOG_TDES *tdes = LOG_FIND_TDES (LOG_FIND_THREAD_TRAN_INDEX (thread_p));
^
src/transaction/log_tran_table.c:3804:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  LOG_TDES *tdes = LOG_FIND_TDES (LOG_FIND_THREAD_TRAN_INDEX (thread_p));
^
src/transaction/log_tran_table.c:3855:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tdes = LOG_FIND_TDES (LOG_FIND_THREAD_TRAN_INDEX (thread_p));
^
src/transaction/log_tran_table.c:3882:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  LOG_TDES *tdes = LOG_FIND_TDES (LOG_FIND_THREAD_TRAN_INDEX (thread_p));
^
src/transaction/log_tran_table.c:3915:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  LOG_TDES *tdes = LOG_FIND_TDES (LOG_FIND_THREAD_TRAN_INDEX (thread_p));
^
src/transaction/log_tran_table.c:3949:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  LOG_TDES *tdes = LOG_FIND_TDES (LOG_FIND_THREAD_TRAN_INDEX (thread_p));
^
src/transaction/log_tran_table.c:4001:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/log_tran_table.c:4350:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  LOG_TDES *tdes = LOG_FIND_TDES (LOG_FIND_THREAD_TRAN_INDEX (thread_p));
^
src/transaction/log_writer.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 20 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/transaction/log_writer.c:2515:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/mvcc_active_tran.cpp:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 14 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/transaction/mvcc_table.cpp:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 14 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/transaction/mvcc_table.cpp:623:27: warning: Identical inner 'if' condition is always true. [identicalInnerCondition]
      if (m_ov_lock_count == 0)
                          ^
src/transaction/mvcc_table.cpp:620:23: note: outer condition: m_ov_lock_count==0
  if (m_ov_lock_count == 0)
                      ^
src/transaction/mvcc_table.cpp:623:27: note: identical inner condition: m_ov_lock_count==0
      if (m_ov_lock_count == 0)
                          ^
src/transaction/mvcc_table.cpp:556:50: style: Variable 'm_current_trans_status.m_last_completed_mvccid' is reassigned a value before the old one has been used. [redundantAssignment]
  m_current_trans_status.m_last_completed_mvccid = mvcc_trans_status::SUBTRAN;
                                                 ^
src/transaction/mvcc_table.cpp:555:50: note: m_current_trans_status.m_last_completed_mvccid is assigned
  m_current_trans_status.m_last_completed_mvccid = mvccid;
                                                 ^
src/transaction/mvcc_table.cpp:556:50: note: m_current_trans_status.m_last_completed_mvccid is overwritten
  m_current_trans_status.m_last_completed_mvccid = mvcc_trans_status::SUBTRAN;
                                                 ^
src/transaction/recovery.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 17 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/transaction/replication.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 17 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/transaction/replication.c:236:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/replication.c:302:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/replication.c:518:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/replication.c:613:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
       LOG_FIND_THREAD_TRAN_INDEX (thread_p));
^
src/transaction/replication.c:643:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
       LOG_FIND_THREAD_TRAN_INDEX (thread_p));
^
src/transaction/transaction_cl.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/transaction/transaction_sr.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 17 configurations. Use --force to check all configurations. [toomanyconfigs]

^
src/transaction/transaction_sr.c:79:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/transaction_sr.c:119:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/transaction_sr.c:260:0: information: Skipping configuration 'LOG_FIND_THREAD_TRAN_INDEX;SERVER_MODE' since the value of 'LOG_FIND_THREAD_TRAN_INDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      int tran_index = LOG_FIND_THREAD_TRAN_INDEX (thread_p);
^
src/transaction/transaction_transient.cpp:401:38: style: The scope of the variable 'tmp' can be reduced. [variableScope]
       lob_savepoint_entry *savept, *tmp;
                                     ^
src/transaction/transaction_transient.cpp:91:79: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
  for (list_type::const_iterator it = m_list.cbegin (); it != m_list.cend (); it++)
                                                                              ^
src/transaction/wait_for_graph.c:341:9: style: The scope of the variable 'temp_p' can be reduced. [variableScope]
  void *temp_p;   /* temporary pointer */
        ^
src/transaction/wait_for_graph.c:342:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;   /* loop counter */
      ^
src/transaction/wait_for_graph.c:638:7: style: The scope of the variable 'holder' can be reduced. [variableScope]
  int holder;
      ^
src/transaction/wait_for_graph.c:1030:14: style: The scope of the variable 'temp_p' can be reduced. [variableScope]
  WFG_CYCLE *temp_p;  /* temp variable for current_cycle_p */
             ^
src/transaction/wait_for_graph.c:433:58: style:inconclusive: Function 'wfg_insert_out_edges' argument 2 names different: declaration 'wtran_index' definition 'waiter_tran_index'. [funcArgNamesDifferent]
wfg_insert_out_edges (THREAD_ENTRY * thread_p, const int waiter_tran_index, int num_holders,
                                                         ^
src/transaction/wait_for_graph.h:60:69: note: Function 'wfg_insert_out_edges' argument 2 names different: declaration 'wtran_index' definition 'waiter_tran_index'.
extern int wfg_insert_out_edges (THREAD_ENTRY * thread_p, const int wtran_index, int num_holders,
                                                                    ^
src/transaction/wait_for_graph.c:433:58: note: Function 'wfg_insert_out_edges' argument 2 names different: declaration 'wtran_index' definition 'waiter_tran_index'.
wfg_insert_out_edges (THREAD_ENTRY * thread_p, const int waiter_tran_index, int num_holders,
                                                         ^
src/transaction/wait_for_graph.c:434:20: style:inconclusive: Function 'wfg_insert_out_edges' argument 4 names different: declaration 'htran_indices' definition 'holder_tran_indeces'. [funcArgNamesDifferent]
        const int *holder_tran_indeces, int (*cycle_resolution_fn) (int tran_index, void *args),
                   ^
src/transaction/wait_for_graph.h:61:17: note: Function 'wfg_insert_out_edges' argument 4 names different: declaration 'htran_indices' definition 'holder_tran_indeces'.
     const int *htran_indices, int (*cycle_resolution_fn) (int tran_index, void *args),
                ^
src/transaction/wait_for_graph.c:434:20: note: Function 'wfg_insert_out_edges' argument 4 names different: declaration 'htran_indices' definition 'holder_tran_indeces'.
        const int *holder_tran_indeces, int (*cycle_resolution_fn) (int tran_index, void *args),
                   ^
src/transaction/wait_for_graph.c:635:95: style:inconclusive: Function 'wfg_link_edge_holders_waiter_list' argument 3 names different: declaration 'waiter_tran_index' definition 'waiter'. [funcArgNamesDifferent]
wfg_link_edge_holders_waiter_list (WFG_EDGE * first_edge_p, WFG_EDGE * last_edge_p, const int waiter)
                                                                                              ^
src/transaction/wait_for_graph.c:150:22: note: Function 'wfg_link_edge_holders_waiter_list' argument 3 names different: declaration 'waiter_tran_index' definition 'waiter'.
           const int waiter_tran_index);
                     ^
src/transaction/wait_for_graph.c:635:95: note: Function 'wfg_link_edge_holders_waiter_list' argument 3 names different: declaration 'waiter_tran_index' definition 'waiter'.
wfg_link_edge_holders_waiter_list (WFG_EDGE * first_edge_p, WFG_EDGE * last_edge_p, const int waiter)
                                                                                              ^
src/transaction/wait_for_graph.c:789:20: style:inconclusive: Function 'wfg_remove_out_edges' argument 4 names different: declaration 'htran_indices_p' definition 'holder_tran_indices_p'. [funcArgNamesDifferent]
        const int *holder_tran_indices_p)
                   ^
src/transaction/wait_for_graph.h:64:17: note: Function 'wfg_remove_out_edges' argument 4 names different: declaration 'htran_indices_p' definition 'holder_tran_indices_p'.
     const int *htran_indices_p);
                ^
src/transaction/wait_for_graph.c:789:20: note: Function 'wfg_remove_out_edges' argument 4 names different: declaration 'htran_indices_p' definition 'holder_tran_indices_p'.
        const int *holder_tran_indices_p)
                   ^
src/transaction/wait_for_graph.c:2177:99: style:inconclusive: Function 'wfg_detect_tran_group_cycle' argument 3 names different: declaration 'list_cycles' definition 'list_cycles_p'. [funcArgNamesDifferent]
wfg_detect_tran_group_cycle (THREAD_ENTRY * thread_p, WFG_CYCLE_CASE * cycle_case_p, WFG_CYCLE ** list_cycles_p)
                                                                                                  ^
src/transaction/wait_for_graph.c:133:19: note: Function 'wfg_detect_tran_group_cycle' argument 3 names different: declaration 'list_cycles' definition 'list_cycles_p'.
     WFG_CYCLE ** list_cycles);
                  ^
src/transaction/wait_for_graph.c:2177:99: note: Function 'wfg_detect_tran_group_cycle' argument 3 names different: declaration 'list_cycles' definition 'list_cycles_p'.
wfg_detect_tran_group_cycle (THREAD_ENTRY * thread_p, WFG_CYCLE_CASE * cycle_case_p, WFG_CYCLE ** list_cycles_p)
                                                                                                  ^
src/transaction/wait_for_graph.c:1245:18: style: Variable 'error_code' is assigned a value that is never used. [unreadVariable]
  int error_code = NO_ERROR;
                 ^
src/transaction/wait_for_graph.c:681:92: style:inconclusive: Function 'wfg_check_remove_out_edges' argument 3 names different: declaration 'holder_tran_indeces' definition 'holder_tran_indices_p'. [funcArgNamesDifferent]
wfg_check_remove_out_edges (const int waiter_tran_index, const int num_holders, const int *holder_tran_indices_p)
                                                                                           ^
src/transaction/wait_for_graph.c:144:97: note: Function 'wfg_check_remove_out_edges' argument 3 names different: declaration 'holder_tran_indeces' definition 'holder_tran_indices_p'.
static int wfg_check_remove_out_edges (const int waiter_tran_index, int num_holders, const int *holder_tran_indeces);
                                                                                                ^
src/transaction/wait_for_graph.c:681:92: note: Function 'wfg_check_remove_out_edges' argument 3 names different: declaration 'holder_tran_indeces' definition 'holder_tran_indices_p'.
wfg_check_remove_out_edges (const int waiter_tran_index, const int num_holders, const int *holder_tran_indices_p)
                                                                                           ^
src/win_tools/ctrlservice/ctrlservice.cpp:220:16: style: Local variable 'argv' shadows outer argument [shadowArgument]
       LPCTSTR argv[2] =
               ^
src/win_tools/ctrlservice/ctrlservice.cpp:79:25: note: Shadowed declaration
_tmain (int argc, char *argv[])
                        ^
src/win_tools/ctrlservice/ctrlservice.cpp:220:16: note: Shadow variable
       LPCTSTR argv[2] =
               ^
src/win_tools/ctrlservice/ctrlservice.cpp:320:16: style: Local variable 'argv' shadows outer argument [shadowArgument]
       LPCTSTR argv[2] =
               ^
src/win_tools/ctrlservice/ctrlservice.cpp:79:25: note: Shadowed declaration
_tmain (int argc, char *argv[])
                        ^
src/win_tools/ctrlservice/ctrlservice.cpp:320:16: note: Shadow variable
       LPCTSTR argv[2] =
               ^
src/win_tools/cubridservice/cubridservice.cpp:113:9: style: The scope of the variable 'args' can be reduced. [variableScope]
  char *args[5];
        ^
src/win_tools/cubridtray/CASManage.cpp:43:16: warning: Member variable 'CUniCASManage::bUNICAS' is not initialized in the constructor. [uninitMemberVar]
CUniCASManage::CUniCASManage()
               ^
src/win_tools/cubridtray/CASManage.h:39:8: performance:inconclusive: Technically the member function 'CUniCASManage::bCheckUniCAS' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  bool bCheckUniCAS ();
       ^
src/win_tools/cubridtray/CASManage.cpp:136:21: note: Technically the member function 'CUniCASManage::bCheckUniCAS' can be static (but you may consider moving to unnamed namespace).
bool CUniCASManage::bCheckUniCAS()
                    ^
src/win_tools/cubridtray/CASManage.h:39:8: note: Technically the member function 'CUniCASManage::bCheckUniCAS' can be static (but you may consider moving to unnamed namespace).
  bool bCheckUniCAS ();
       ^
src/win_tools/cubridtray/CASManage.h:46:8: performance:inconclusive: Technically the member function 'CUniCASManage::bInstallStatus' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  bool bInstallStatus ();
       ^
src/win_tools/cubridtray/CASManage.cpp:158:21: note: Technically the member function 'CUniCASManage::bInstallStatus' can be static (but you may consider moving to unnamed namespace).
bool CUniCASManage::bInstallStatus()
                    ^
src/win_tools/cubridtray/CASManage.h:46:8: note: Technically the member function 'CUniCASManage::bInstallStatus' can be static (but you may consider moving to unnamed namespace).
  bool bInstallStatus ();
       ^
src/win_tools/cubridtray/CASManage.cpp:189:9: error: Mismatching allocation and deallocation: sFullName [mismatchAllocDealloc]
 delete sFullName;
        ^
src/win_tools/cubridtray/CASManage.cpp:181:20: note: Mismatching allocation and deallocation: sFullName
 char* sFullName = new char[ dSize + 5 ];
                   ^
src/win_tools/cubridtray/CASManage.cpp:189:9: note: Mismatching allocation and deallocation: sFullName
 delete sFullName;
        ^
src/win_tools/cubridtray/CASManage.cpp:153:11: style: Checking if unsigned expression 'lRes' is less than zero. [unsignedLessThanZero]
 if( lRes <= 0 ) return false;
          ^
src/win_tools/cubridtray/CASManage.cpp:164:32: style: Checking if unsigned expression 'strlen(sPath)' is less than zero. [unsignedLessThanZero]
 if( !sPath || strlen( sPath ) <= 0 )
                               ^
src/win_tools/cubridtray/CASManage.cpp:192:36: style: Checking if unsigned expression 'strlen(sResult)' is less than zero. [unsignedLessThanZero]
 if( !sResult || strlen( sResult ) <= 0 )
                                   ^
src/win_tools/cubridtray/CASManage.cpp:73:13: style: Variable 'dchdir' is assigned a value that is never used. [unreadVariable]
 int dchdir = _chdir( sWorkDir );
            ^
src/win_tools/cubridtray/COMMONMETHOD.CPP:102:10: error: Mismatching allocation and deallocation: sFullName [mismatchAllocDealloc]
  delete sFullName;
         ^
src/win_tools/cubridtray/COMMONMETHOD.CPP:94:20: note: Mismatching allocation and deallocation: sFullName
 char* sFullName = new char[ dSize + 5 ];
                   ^
src/win_tools/cubridtray/COMMONMETHOD.CPP:102:10: note: Mismatching allocation and deallocation: sFullName
  delete sFullName;
         ^
src/win_tools/cubridtray/COMMONMETHOD.CPP:115:10: error: Mismatching allocation and deallocation: sFullName [mismatchAllocDealloc]
  delete sFullName;
         ^
src/win_tools/cubridtray/COMMONMETHOD.CPP:94:20: note: Mismatching allocation and deallocation: sFullName
 char* sFullName = new char[ dSize + 5 ];
                   ^
src/win_tools/cubridtray/COMMONMETHOD.CPP:115:10: note: Mismatching allocation and deallocation: sFullName
  delete sFullName;
         ^
src/win_tools/cubridtray/COMMONMETHOD.CPP:122:9: error: Mismatching allocation and deallocation: sFullName [mismatchAllocDealloc]
 delete sFullName;
        ^
src/win_tools/cubridtray/COMMONMETHOD.CPP:94:20: note: Mismatching allocation and deallocation: sFullName
 char* sFullName = new char[ dSize + 5 ];
                   ^
src/win_tools/cubridtray/COMMONMETHOD.CPP:122:9: note: Mismatching allocation and deallocation: sFullName
 delete sFullName;
        ^
src/win_tools/cubridtray/CUBRIDManage.h:62:8: performance:inconclusive: Technically the member function 'CCUBRIDManage::bCompareDB' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  bool bCompareDB (char *sDBName, DBNAMEPtr_t pDBList);
       ^
src/win_tools/cubridtray/CUBRIDManage.cpp:593:21: note: Technically the member function 'CCUBRIDManage::bCompareDB' can be static (but you may consider moving to unnamed namespace).
bool CCUBRIDManage::bCompareDB( char* sDBName, DBNAMEPtr_t pDBList )
                    ^
src/win_tools/cubridtray/CUBRIDManage.h:62:8: note: Technically the member function 'CCUBRIDManage::bCompareDB' can be static (but you may consider moving to unnamed namespace).
  bool bCompareDB (char *sDBName, DBNAMEPtr_t pDBList);
       ^
src/win_tools/cubridtray/CUBRIDManage.h:94:8: performance:inconclusive: Technically the member function 'CCUBRIDManage::bCheckServer' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  bool bCheckServer ();
       ^
src/win_tools/cubridtray/CUBRIDManage.cpp:118:21: note: Technically the member function 'CCUBRIDManage::bCheckServer' can be static (but you may consider moving to unnamed namespace).
bool CCUBRIDManage::bCheckServer()
                    ^
src/win_tools/cubridtray/CUBRIDManage.h:94:8: note: Technically the member function 'CCUBRIDManage::bCheckServer' can be static (but you may consider moving to unnamed namespace).
  bool bCheckServer ();
       ^
src/win_tools/cubridtray/CUBRIDManage.h:98:8: performance:inconclusive: Technically the member function 'CCUBRIDManage::bStartMaster' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  bool bStartMaster ();
       ^
src/win_tools/cubridtray/CUBRIDManage.cpp:652:21: note: Technically the member function 'CCUBRIDManage::bStartMaster' can be static (but you may consider moving to unnamed namespace).
bool CCUBRIDManage::bStartMaster()
                    ^
src/win_tools/cubridtray/CUBRIDManage.h:98:8: note: Technically the member function 'CCUBRIDManage::bStartMaster' can be static (but you may consider moving to unnamed namespace).
  bool bStartMaster ();
       ^
src/win_tools/cubridtray/CUBRIDManage.h:101:8: performance:inconclusive: Technically the member function 'CCUBRIDManage::bStopMaster' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  bool bStopMaster ();
       ^
src/win_tools/cubridtray/CUBRIDManage.cpp:757:21: note: Technically the member function 'CCUBRIDManage::bStopMaster' can be static (but you may consider moving to unnamed namespace).
bool CCUBRIDManage::bStopMaster()
                    ^
src/win_tools/cubridtray/CUBRIDManage.h:101:8: note: Technically the member function 'CCUBRIDManage::bStopMaster' can be static (but you may consider moving to unnamed namespace).
  bool bStopMaster ();
       ^
src/win_tools/cubridtray/CUBRIDManage.h:109:8: performance:inconclusive: Technically the member function 'CCUBRIDManage::bInstallStatus' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  bool bInstallStatus ();
       ^
src/win_tools/cubridtray/CUBRIDManage.cpp:822:21: note: Technically the member function 'CCUBRIDManage::bInstallStatus' can be static (but you may consider moving to unnamed namespace).
bool CCUBRIDManage::bInstallStatus()
                    ^
src/win_tools/cubridtray/CUBRIDManage.h:109:8: note: Technically the member function 'CCUBRIDManage::bInstallStatus' can be static (but you may consider moving to unnamed namespace).
  bool bInstallStatus ();
       ^
src/win_tools/cubridtray/CUBRIDManage.h:112:8: performance:inconclusive: Technically the member function 'CCUBRIDManage::bDestoryDBList' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  bool bDestoryDBList (DBNAMEPtr_t pDBList);
       ^
src/win_tools/cubridtray/CUBRIDManage.cpp:614:21: note: Technically the member function 'CCUBRIDManage::bDestoryDBList' can be static (but you may consider moving to unnamed namespace).
bool CCUBRIDManage::bDestoryDBList( DBNAMEPtr_t pDBList )
                    ^
src/win_tools/cubridtray/CUBRIDManage.h:112:8: note: Technically the member function 'CCUBRIDManage::bDestoryDBList' can be static (but you may consider moving to unnamed namespace).
  bool bDestoryDBList (DBNAMEPtr_t pDBList);
       ^
src/win_tools/cubridtray/CUBRIDManage.cpp:445:6: style: Condition '!sCatchResStr' is always false [knownConditionTrueFalse]
 if( !sCatchResStr || strlen( sCatchResStr ) <= 0 )
     ^
src/win_tools/cubridtray/CUBRIDManage.cpp:260:7: style: The scope of the variable 'bFind' can be reduced. [variableScope]
 bool bFind;
      ^
src/win_tools/cubridtray/CUBRIDManage.cpp:356:8: style: The scope of the variable 'sDBName' can be reduced. [variableScope]
 char* sDBName;
       ^
src/win_tools/cubridtray/CUBRIDManage.cpp:364:12: style: The scope of the variable 'db' can be reduced. [variableScope]
  CDBInfo *db;
           ^
src/win_tools/cubridtray/CUBRIDManage.cpp:682:16: style: The scope of the variable 'bRes' can be reduced. [variableScope]
 unsigned long bRes;
               ^
src/win_tools/cubridtray/CUBRIDManage.cpp:731:14: style: The scope of the variable 'pCurDB' can be reduced. [variableScope]
 DBNAMEPtr_t pCurDB;
             ^
src/win_tools/cubridtray/CUBRIDManage.cpp:779:14: style: The scope of the variable 'pCurDB' can be reduced. [variableScope]
 DBNAMEPtr_t pCurDB;
             ^
src/win_tools/cubridtray/CUBRIDManage.cpp:781:7: style: The scope of the variable 'bRes' can be reduced. [variableScope]
 bool bRes;
      ^
src/win_tools/cubridtray/CUBRIDManage.cpp:108:11: style: Checking if unsigned expression 'lRes' is less than zero. [unsignedLessThanZero]
 if( lRes <= 0 )
          ^
src/win_tools/cubridtray/CUBRIDManage.cpp:137:11: style: Checking if unsigned expression 'lRes' is less than zero. [unsignedLessThanZero]
 if( lRes <= 0 ) return false;
          ^
src/win_tools/cubridtray/CUBRIDManage.cpp:445:46: style: Checking if unsigned expression 'strlen(sCatchResStr)' is less than zero. [unsignedLessThanZero]
 if( !sCatchResStr || strlen( sCatchResStr ) <= 0 )
                                             ^
src/win_tools/cubridtray/CUBRIDManage.cpp:828:32: style: Checking if unsigned expression 'strlen(sPath)' is less than zero. [unsignedLessThanZero]
 if( !sPath || strlen( sPath ) <= 0 ) return false;
                               ^
src/win_tools/cubridtray/CUBRIDManage.cpp:548:8: style: Local variable 'theLang' shadows outer variable [shadowVariable]
 CLang theLang;
       ^
src/win_tools/cubridtray/CUBRIDManage.cpp:37:14: note: Shadowed declaration
extern CLang theLang;
             ^
src/win_tools/cubridtray/CUBRIDManage.cpp:548:8: note: Shadow variable
 CLang theLang;
       ^
src/win_tools/cubridtray/CUBRIDManage.cpp:666:13: style: Variable 'dchdir' is assigned a value that is never used. [unreadVariable]
 int dchdir = _chdir( sWorkDir );
            ^
src/win_tools/cubridtray/CUBRIDManage.cpp:713:13: style: Variable 'dchdir' is assigned a value that is never used. [unreadVariable]
 int dchdir = _chdir( sWorkDir );
            ^
src/win_tools/cubridtray/CUBRIDtray.cpp:46:1: error: There is an unknown macro here somewhere. Configuration is required. If BEGIN_MESSAGE_MAP is a macro then please configure it. [unknownMacro]
BEGIN_MESSAGE_MAP(CUnitrayApp, CWinApp)
^
src/win_tools/cubridtray/DBSTARTUP.CPP:61:1: error: There is an unknown macro here somewhere. Configuration is required. If BEGIN_MESSAGE_MAP is a macro then please configure it. [unknownMacro]
BEGIN_MESSAGE_MAP(CDBStartUp, CDialog)
^
src/win_tools/cubridtray/FOLDER_DIALOG.CPP:22:1: error: There is an unknown macro here somewhere. Configuration is required. If IMPLEMENT_DYNAMIC is a macro then please configure it. [unknownMacro]
IMPLEMENT_DYNAMIC(CFolderDialog, CFileDialog)
^
src/win_tools/cubridtray/LANG.CPP:35:6: style: The scope of the variable 'ptr' can be reduced. [variableScope]
int  ptr, count;
     ^
src/win_tools/cubridtray/LANG.CPP:35:11: style: The scope of the variable 'count' can be reduced. [variableScope]
int  ptr, count;
          ^
src/win_tools/cubridtray/MAINFRM.CPP:230:1: error: There is an unknown macro here somewhere. Configuration is required. If IMPLEMENT_DYNCREATE is a macro then please configure it. [unknownMacro]
IMPLEMENT_DYNCREATE(CMainFrame, CFrameWnd)
^
src/win_tools/cubridtray/MANAGEREGISTRY.CPP:109:5: style: Condition '!sBuff' is always false [knownConditionTrueFalse]
 if(!sBuff || len <= 0)
    ^
src/win_tools/cubridtray/MANAGEREGISTRY.CPP:92:7: warning: Either the condition '!sBuff' is redundant or there is possible null pointer dereference: sBuff. [nullPointerRedundantCheck]
 char sBuff[BUF_SIZE];
      ^
src/win_tools/cubridtray/MANAGEREGISTRY.CPP:109:5: note: Assuming that condition '!sBuff' is not redundant
 if(!sBuff || len <= 0)
    ^
src/win_tools/cubridtray/MANAGEREGISTRY.CPP:92:7: note: Null pointer dereference
 char sBuff[BUF_SIZE];
      ^
src/win_tools/cubridtray/MANAGEREGISTRY.CPP:100:9: warning: Either the condition '!sBuff' is redundant or there is possible null pointer dereference: sBuff. [nullPointerRedundantCheck]
 memset(sBuff, 0x00, BUF_SIZE);
        ^
src/win_tools/cubridtray/MANAGEREGISTRY.CPP:109:5: note: Assuming that condition '!sBuff' is not redundant
 if(!sBuff || len <= 0)
    ^
src/win_tools/cubridtray/MANAGEREGISTRY.CPP:100:9: note: Null pointer dereference
 memset(sBuff, 0x00, BUF_SIZE);
        ^
src/win_tools/cubridtray/MONITOR.CPP:87:1: error: There is an unknown macro here somewhere. Configuration is required. If BEGIN_MESSAGE_MAP is a macro then please configure it. [unknownMacro]
BEGIN_MESSAGE_MAP(CMonitor, CDialog)
^
src/win_tools/cubridtray/Manager.h:38:8: performance:inconclusive: Technically the member function 'CEasyManager::bCheckEMSCMServer' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  bool bCheckEMSCMServer ();
       ^
src/win_tools/cubridtray/Manager.cpp:117:20: note: Technically the member function 'CEasyManager::bCheckEMSCMServer' can be static (but you may consider moving to unnamed namespace).
bool CEasyManager::bCheckEMSCMServer()
                   ^
src/win_tools/cubridtray/Manager.h:38:8: note: Technically the member function 'CEasyManager::bCheckEMSCMServer' can be static (but you may consider moving to unnamed namespace).
  bool bCheckEMSCMServer ();
       ^
src/win_tools/cubridtray/Manager.h:45:8: performance:inconclusive: Technically the member function 'CEasyManager::bInstallStatus' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  bool bInstallStatus ();
       ^
src/win_tools/cubridtray/Manager.cpp:63:20: note: Technically the member function 'CEasyManager::bInstallStatus' can be static (but you may consider moving to unnamed namespace).
bool CEasyManager::bInstallStatus()
                   ^
src/win_tools/cubridtray/Manager.h:45:8: note: Technically the member function 'CEasyManager::bInstallStatus' can be static (but you may consider moving to unnamed namespace).
  bool bInstallStatus ();
       ^
src/win_tools/cubridtray/Manager.h:49:8: performance:inconclusive: Technically the member function 'CEasyManager::bStartEasyManagerServer' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  bool bStartEasyManagerServer ();
       ^
src/win_tools/cubridtray/Manager.cpp:82:20: note: Technically the member function 'CEasyManager::bStartEasyManagerServer' can be static (but you may consider moving to unnamed namespace).
bool CEasyManager::bStartEasyManagerServer()
                   ^
src/win_tools/cubridtray/Manager.h:49:8: note: Technically the member function 'CEasyManager::bStartEasyManagerServer' can be static (but you may consider moving to unnamed namespace).
  bool bStartEasyManagerServer ();
       ^
src/win_tools/cubridtray/Manager.h:50:8: performance:inconclusive: Technically the member function 'CEasyManager::bStopEasyManagerServer' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  bool bStopEasyManagerServer ();
       ^
src/win_tools/cubridtray/Manager.cpp:100:20: note: Technically the member function 'CEasyManager::bStopEasyManagerServer' can be static (but you may consider moving to unnamed namespace).
bool CEasyManager::bStopEasyManagerServer()
                   ^
src/win_tools/cubridtray/Manager.h:50:8: note: Technically the member function 'CEasyManager::bStopEasyManagerServer' can be static (but you may consider moving to unnamed namespace).
  bool bStopEasyManagerServer ();
       ^
src/win_tools/cubridtray/Manager.cpp:140:11: style: Checking if unsigned expression 'lRes' is less than zero. [unsignedLessThanZero]
 if( lRes <= 0 ) return false;
          ^
src/win_tools/cubridtray/Manager.cpp:91:11: style: Variable 'dRes' is assigned a value that is never used. [unreadVariable]
 int dRes = WinExec( sFullName, SW_HIDE );
          ^
src/win_tools/cubridtray/Manager.cpp:109:11: style: Variable 'dRes' is assigned a value that is never used. [unreadVariable]
 int dRes = WinExec( sFullName, SW_HIDE );
          ^
src/win_tools/cubridtray/NTRAY.CPP:28:1: error: There is an unknown macro here somewhere. Configuration is required. If IMPLEMENT_DYNAMIC is a macro then please configure it. [unknownMacro]
IMPLEMENT_DYNAMIC(CTrayNotifyIcon, CObject)
^
src/win_tools/cubridtray/ORDBLIST.CPP:39:10: style: The scope of the variable 'db' can be reduced. [variableScope]
CDBInfo *db;
         ^
src/win_tools/cubridtray/ORDBLIST.CPP:148:12: style: The scope of the variable 'db' can be reduced. [variableScope]
CDBInfo   *db;
           ^
src/win_tools/cubridtray/ORDBLIST.CPP:194:10: style: The scope of the variable 'db' can be reduced. [variableScope]
CDBInfo *db;
         ^
src/win_tools/cubridtray/ORDBLIST.CPP:198:6: style: The scope of the variable 'count' can be reduced. [variableScope]
int  count;
     ^
src/win_tools/cubridtray/ORDBLIST.CPP:220:10: style: The scope of the variable 'db' can be reduced. [variableScope]
CDBInfo *db;
         ^
src/win_tools/cubridtray/ORDBLIST.CPP:238:10: style: The scope of the variable 'db' can be reduced. [variableScope]
CDBInfo *db;
         ^
src/win_tools/cubridtray/PARSEDB.CPP:77:10: error: Mismatching allocation and deallocation: sFullName [mismatchAllocDealloc]
  delete sFullName;
         ^
src/win_tools/cubridtray/PARSEDB.CPP:69:20: note: Mismatching allocation and deallocation: sFullName
 char* sFullName = new char[ dSize + 5 ];
                   ^
src/win_tools/cubridtray/PARSEDB.CPP:77:10: note: Mismatching allocation and deallocation: sFullName
  delete sFullName;
         ^
src/win_tools/cubridtray/PARSEDB.CPP:95:10: error: Mismatching allocation and deallocation: sFullName [mismatchAllocDealloc]
  delete sFullName;
         ^
src/win_tools/cubridtray/PARSEDB.CPP:69:20: note: Mismatching allocation and deallocation: sFullName
 char* sFullName = new char[ dSize + 5 ];
                   ^
src/win_tools/cubridtray/PARSEDB.CPP:95:10: note: Mismatching allocation and deallocation: sFullName
  delete sFullName;
         ^
src/win_tools/cubridtray/PARSEDB.CPP:106:10: error: Mismatching allocation and deallocation: sFullName [mismatchAllocDealloc]
  delete sFullName;
         ^
src/win_tools/cubridtray/PARSEDB.CPP:69:20: note: Mismatching allocation and deallocation: sFullName
 char* sFullName = new char[ dSize + 5 ];
                   ^
src/win_tools/cubridtray/PARSEDB.CPP:106:10: note: Mismatching allocation and deallocation: sFullName
  delete sFullName;
         ^
src/win_tools/cubridtray/PARSEDB.CPP:118:10: error: Mismatching allocation and deallocation: sFullName [mismatchAllocDealloc]
  delete sFullName;
         ^
src/win_tools/cubridtray/PARSEDB.CPP:69:20: note: Mismatching allocation and deallocation: sFullName
 char* sFullName = new char[ dSize + 5 ];
                   ^
src/win_tools/cubridtray/PARSEDB.CPP:118:10: note: Mismatching allocation and deallocation: sFullName
  delete sFullName;
         ^
src/win_tools/cubridtray/PARSEDB.CPP:91:7: style: Redundant initialization for 'sTmp'. The initialized value is overwritten before it is read. [redundantInitialization]
 sTmp = strstr( sResult, " Server" );
      ^
src/win_tools/cubridtray/PARSEDB.CPP:86:13: note: sTmp is initialized
 char* sTmp = sResult;
            ^
src/win_tools/cubridtray/PARSEDB.CPP:91:7: note: sTmp is overwritten
 sTmp = strstr( sResult, " Server" );
      ^
src/win_tools/cubridtray/PARSEDB.CPP:75:36: style: Checking if unsigned expression 'strlen(sResult)' is less than zero. [unsignedLessThanZero]
 if( !sResult || strlen( sResult ) <= 0 )
                                   ^
src/win_tools/cubridtray/PARSESTATUS.CPP:100:10: error: Mismatching allocation and deallocation: sFullName [mismatchAllocDealloc]
  delete sFullName;
         ^
src/win_tools/cubridtray/PARSESTATUS.CPP:92:20: note: Mismatching allocation and deallocation: sFullName
 char* sFullName = new char[ strlen( sPath ) + strlen( "commdb.exe" ) + 5 ];
                   ^
src/win_tools/cubridtray/PARSESTATUS.CPP:100:10: note: Mismatching allocation and deallocation: sFullName
  delete sFullName;
         ^
src/win_tools/cubridtray/PARSESTATUS.CPP:117:10: error: Mismatching allocation and deallocation: sFullName [mismatchAllocDealloc]
  delete sFullName;
         ^
src/win_tools/cubridtray/PARSESTATUS.CPP:92:20: note: Mismatching allocation and deallocation: sFullName
 char* sFullName = new char[ strlen( sPath ) + strlen( "commdb.exe" ) + 5 ];
                   ^
src/win_tools/cubridtray/PARSESTATUS.CPP:117:10: note: Mismatching allocation and deallocation: sFullName
  delete sFullName;
         ^
src/win_tools/cubridtray/PARSESTATUS.CPP:128:10: error: Mismatching allocation and deallocation: sFullName [mismatchAllocDealloc]
  delete sFullName;
         ^
src/win_tools/cubridtray/PARSESTATUS.CPP:92:20: note: Mismatching allocation and deallocation: sFullName
 char* sFullName = new char[ strlen( sPath ) + strlen( "commdb.exe" ) + 5 ];
                   ^
src/win_tools/cubridtray/PARSESTATUS.CPP:128:10: note: Mismatching allocation and deallocation: sFullName
  delete sFullName;
         ^
src/win_tools/cubridtray/PARSESTATUS.CPP:140:10: error: Mismatching allocation and deallocation: sFullName [mismatchAllocDealloc]
  delete sFullName;
         ^
src/win_tools/cubridtray/PARSESTATUS.CPP:92:20: note: Mismatching allocation and deallocation: sFullName
 char* sFullName = new char[ strlen( sPath ) + strlen( "commdb.exe" ) + 5 ];
                   ^
src/win_tools/cubridtray/PARSESTATUS.CPP:140:10: note: Mismatching allocation and deallocation: sFullName
  delete sFullName;
         ^
src/win_tools/cubridtray/PARSESTATUS.CPP:270:10: error: Mismatching allocation and deallocation: sFullName [mismatchAllocDealloc]
  delete sFullName;
         ^
src/win_tools/cubridtray/PARSESTATUS.CPP:262:20: note: Mismatching allocation and deallocation: sFullName
 char* sFullName = new char[ strlen( sPath ) + strlen( "monitor.exe" ) + 5 ];
                   ^
src/win_tools/cubridtray/PARSESTATUS.CPP:270:10: note: Mismatching allocation and deallocation: sFullName
  delete sFullName;
         ^
src/win_tools/cubridtray/PARSESTATUS.CPP:283:10: error: Mismatching allocation and deallocation: sFullName [mismatchAllocDealloc]
  delete sFullName;
         ^
src/win_tools/cubridtray/PARSESTATUS.CPP:262:20: note: Mismatching allocation and deallocation: sFullName
 char* sFullName = new char[ strlen( sPath ) + strlen( "monitor.exe" ) + 5 ];
                   ^
src/win_tools/cubridtray/PARSESTATUS.CPP:283:10: note: Mismatching allocation and deallocation: sFullName
  delete sFullName;
         ^
src/win_tools/cubridtray/PARSESTATUS.CPP:290:9: error: Mismatching allocation and deallocation: sFullName [mismatchAllocDealloc]
 delete sFullName;
        ^
src/win_tools/cubridtray/PARSESTATUS.CPP:262:20: note: Mismatching allocation and deallocation: sFullName
 char* sFullName = new char[ strlen( sPath ) + strlen( "monitor.exe" ) + 5 ];
                   ^
src/win_tools/cubridtray/PARSESTATUS.CPP:290:9: note: Mismatching allocation and deallocation: sFullName
 delete sFullName;
        ^
src/win_tools/cubridtray/PARSESTATUS.CPP:333:10: error: Mismatching allocation and deallocation: sFullName [mismatchAllocDealloc]
  delete sFullName;
         ^
src/win_tools/cubridtray/PARSESTATUS.CPP:325:20: note: Mismatching allocation and deallocation: sFullName
 char* sFullName = new char[ strlen( sPath ) + strlen( "commdb.exe" ) + 5 ];
                   ^
src/win_tools/cubridtray/PARSESTATUS.CPP:333:10: note: Mismatching allocation and deallocation: sFullName
  delete sFullName;
         ^
src/win_tools/cubridtray/PARSESTATUS.CPP:346:10: error: Mismatching allocation and deallocation: sFullName [mismatchAllocDealloc]
  delete sFullName;
         ^
src/win_tools/cubridtray/PARSESTATUS.CPP:325:20: note: Mismatching allocation and deallocation: sFullName
 char* sFullName = new char[ strlen( sPath ) + strlen( "commdb.exe" ) + 5 ];
                   ^
src/win_tools/cubridtray/PARSESTATUS.CPP:346:10: note: Mismatching allocation and deallocation: sFullName
  delete sFullName;
         ^
src/win_tools/cubridtray/PARSESTATUS.CPP:353:9: error: Mismatching allocation and deallocation: sFullName [mismatchAllocDealloc]
 delete sFullName;
        ^
src/win_tools/cubridtray/PARSESTATUS.CPP:325:20: note: Mismatching allocation and deallocation: sFullName
 char* sFullName = new char[ strlen( sPath ) + strlen( "commdb.exe" ) + 5 ];
                   ^
src/win_tools/cubridtray/PARSESTATUS.CPP:353:9: note: Mismatching allocation and deallocation: sFullName
 delete sFullName;
        ^
src/win_tools/cubridtray/PARSESTATUS.CPP:381:10: error: Mismatching allocation and deallocation: sFullName [mismatchAllocDealloc]
  delete sFullName;
         ^
src/win_tools/cubridtray/PARSESTATUS.CPP:373:20: note: Mismatching allocation and deallocation: sFullName
 char* sFullName = new char[ strlen( sPath ) + strlen( "commdb.exe" ) + 5 ];
                   ^
src/win_tools/cubridtray/PARSESTATUS.CPP:381:10: note: Mismatching allocation and deallocation: sFullName
  delete sFullName;
         ^
src/win_tools/cubridtray/PARSESTATUS.CPP:394:10: error: Mismatching allocation and deallocation: sFullName [mismatchAllocDealloc]
  delete sFullName;
         ^
src/win_tools/cubridtray/PARSESTATUS.CPP:373:20: note: Mismatching allocation and deallocation: sFullName
 char* sFullName = new char[ strlen( sPath ) + strlen( "commdb.exe" ) + 5 ];
                   ^
src/win_tools/cubridtray/PARSESTATUS.CPP:394:10: note: Mismatching allocation and deallocation: sFullName
  delete sFullName;
         ^
src/win_tools/cubridtray/PARSESTATUS.CPP:401:9: error: Mismatching allocation and deallocation: sFullName [mismatchAllocDealloc]
 delete sFullName;
        ^
src/win_tools/cubridtray/PARSESTATUS.CPP:373:20: note: Mismatching allocation and deallocation: sFullName
 char* sFullName = new char[ strlen( sPath ) + strlen( "commdb.exe" ) + 5 ];
                   ^
src/win_tools/cubridtray/PARSESTATUS.CPP:401:9: note: Mismatching allocation and deallocation: sFullName
 delete sFullName;
        ^
src/win_tools/cubridtray/PROCESS.CPP:70:17: style: Variable 'sTmpName' is assigned a value that is never used. [unreadVariable]
 char* sTmpName = ( char* )LPCTSTR( process_name );
                ^
src/win_tools/cubridtray/PROPERTY.CPP:65:1: error: There is an unknown macro here somewhere. Configuration is required. If BEGIN_MESSAGE_MAP is a macro then please configure it. [unknownMacro]
BEGIN_MESSAGE_MAP(CProperty, CDialog)
^
src/win_tools/cubridtray/REDIRECT.CPP:40:29: style: Variable 'WindowsMajorVersion' is assigned a value that is never used. [unreadVariable]
  DWORD WindowsMajorVersion = (DWORD)(LOBYTE(LOWORD(WindowsVersion)));
                            ^
src/win_tools/cubridtray/REDIRECT.CPP:41:29: style: Variable 'WindowsMinorVersion' is assigned a value that is never used. [unreadVariable]
  DWORD WindowsMinorVersion = (DWORD)(HIBYTE(LOWORD(WindowsVersion)));
                            ^
src/win_tools/cubridtray/REDIRECT.CPP:261:18: style: Variable 'hProcess' is assigned a value that is never used. [unreadVariable]
 HANDLE hProcess = ::GetCurrentProcess();
                 ^
src/win_tools/cubridtray/SHOWRUNDB.CPP:69:1: error: There is an unknown macro here somewhere. Configuration is required. If BEGIN_MESSAGE_MAP is a macro then please configure it. [unknownMacro]
BEGIN_MESSAGE_MAP(CShowRunDB, CDialog)
^
src/win_tools/cubridtray/SHUTDOWN.CPP:58:1: error: There is an unknown macro here somewhere. Configuration is required. If BEGIN_MESSAGE_MAP is a macro then please configure it. [unknownMacro]
BEGIN_MESSAGE_MAP(CShutdown, CDialog)
^
src/win_tools/cubridtray/STARTTARGETDB.CPP:73:1: error: There is an unknown macro here somewhere. Configuration is required. If BEGIN_MESSAGE_MAP is a macro then please configure it. [unknownMacro]
BEGIN_MESSAGE_MAP(CStartTargetDB, CDialog)
^
src/win_tools/cubridtray/STOPTARGETDB.CPP:72:1: error: There is an unknown macro here somewhere. Configuration is required. If BEGIN_MESSAGE_MAP is a macro then please configure it. [unknownMacro]
BEGIN_MESSAGE_MAP(CStopTargetDB, CDialog)
^
src/win_tools/cubridtray/TEXTPROGRESSCTRL.CPP:145:1: error: There is an unknown macro here somewhere. Configuration is required. If BEGIN_MESSAGE_MAP is a macro then please configure it. [unknownMacro]
BEGIN_MESSAGE_MAP(CTextProgressCtrl, CProgressCtrl)
^
src/win_tools/cubridtray/ToolManage.h:44:8: performance:inconclusive: Technically the member function 'CUniToolManage::bStartVSQL' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  bool bStartVSQL ();
       ^
src/win_tools/cubridtray/ToolManage.cpp:151:22: note: Technically the member function 'CUniToolManage::bStartVSQL' can be static (but you may consider moving to unnamed namespace).
bool CUniToolManage::bStartVSQL()
                     ^
src/win_tools/cubridtray/ToolManage.h:44:8: note: Technically the member function 'CUniToolManage::bStartVSQL' can be static (but you may consider moving to unnamed namespace).
  bool bStartVSQL ();
       ^
src/win_tools/cubridtray/ToolManage.h:47:8: performance:inconclusive: Technically the member function 'CUniToolManage::bCheckInstallVSQL' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  bool bCheckInstallVSQL ();
       ^
src/win_tools/cubridtray/ToolManage.cpp:136:22: note: Technically the member function 'CUniToolManage::bCheckInstallVSQL' can be static (but you may consider moving to unnamed namespace).
bool CUniToolManage::bCheckInstallVSQL()
                     ^
src/win_tools/cubridtray/ToolManage.h:47:8: note: Technically the member function 'CUniToolManage::bCheckInstallVSQL' can be static (but you may consider moving to unnamed namespace).
  bool bCheckInstallVSQL ();
       ^
src/win_tools/cubridtray/ToolManage.cpp:115:13: style: Variable 'dchdir' is assigned a value that is never used. [unreadVariable]
 int dchdir = _chdir( cubridmanager_path );
            ^
src/win_tools/cubridtray/ToolManage.cpp:131:14: style: Variable 'errorno' is assigned a value that is never used. [unreadVariable]
 int errorno = WinExec( sFullName, SW_SHOW );
             ^
src/win_tools/cubridtray/ToolManage.cpp:161:13: style: Variable 'dchdir' is assigned a value that is never used. [unreadVariable]
 int dchdir = _chdir( sRootPath );
            ^
src/win_tools/cubridtray/ToolManage.cpp:167:14: style: Variable 'errorno' is assigned a value that is never used. [unreadVariable]
 int errorno = WinExec( sFullName, SW_SHOW );
             ^
src/win_tools/cubridtray/UCCONF.CPP:37:10: style: The scope of the variable 'ucinfo' can be reduced. [variableScope]
CUCInfo *ucinfo;
         ^
src/win_tools/cubridtray/UCCONF.CPP:52:9: style: The scope of the variable 'token' can be reduced. [variableScope]
char   *token, *value;
        ^
src/win_tools/cubridtray/UCCONF.CPP:104:10: style: The scope of the variable 'ucinfo' can be reduced. [variableScope]
CUCInfo *ucinfo;
         ^
src/win_tools/cubridtray/UCMDETAIL.CPP:72:1: error: There is an unknown macro here somewhere. Configuration is required. If BEGIN_MESSAGE_MAP is a macro then please configure it. [unknownMacro]
BEGIN_MESSAGE_MAP(CUCMDetail, CDialog)
^
src/win_tools/cubridtray/UCMINFO.CPP:60:8: style: Variable 'tmp' is reassigned a value before the old one has been used. [redundantAssignment]
   tmp = strtok(NULL, ",");
       ^
src/win_tools/cubridtray/UCMINFO.CPP:59:8: note: tmp is assigned
   tmp = strtok((char *)LPCSTR(tmpStr), ":");
       ^
src/win_tools/cubridtray/UCMINFO.CPP:60:8: note: tmp is overwritten
   tmp = strtok(NULL, ",");
       ^
src/win_tools/cubridtray/UCMINFO.CPP:32:11: style: The scope of the variable 'ucminfo' can be reduced. [variableScope]
CUCMInfo *ucminfo;
          ^
src/win_tools/cubridtray/UCPDETAIL.CPP:115:1: error: There is an unknown macro here somewhere. Configuration is required. If BEGIN_MESSAGE_MAP is a macro then please configure it. [unknownMacro]
BEGIN_MESSAGE_MAP(CUCPDetail, CDialog)
^
src/win_tools/cubridtray/UCPROPERTY.CPP:77:1: error: There is an unknown macro here somewhere. Configuration is required. If BEGIN_MESSAGE_MAP is a macro then please configure it. [unknownMacro]
BEGIN_MESSAGE_MAP(CUCProperty, CDialog)
^
src/win_tools/cubridtray/UNITRAYDLG.CPP:70:1: error: There is an unknown macro here somewhere. Configuration is required. If BEGIN_MESSAGE_MAP is a macro then please configure it. [unknownMacro]
BEGIN_MESSAGE_MAP(CAboutDlg, CDialog)
^
src/win_tools/cubridtray/UNITRAYDOC.CPP:35:1: error: There is an unknown macro here somewhere. Configuration is required. If IMPLEMENT_DYNCREATE is a macro then please configure it. [unknownMacro]
IMPLEMENT_DYNCREATE(CUnitrayDoc, CDocument)
^
src/win_tools/cubridtray/UNITRAYVIEW.CPP:36:1: error: There is an unknown macro here somewhere. Configuration is required. If IMPLEMENT_DYNCREATE is a macro then please configure it. [unknownMacro]
IMPLEMENT_DYNCREATE(CUnitrayView, CView)
^
src/win_tools/cubridtray/VAS.CPP:75:1: error: There is an unknown macro here somewhere. Configuration is required. If BEGIN_MESSAGE_MAP is a macro then please configure it. [unknownMacro]
BEGIN_MESSAGE_MAP(CVas, CDialog)
^
src/win_tools/cubridtray/WAS.CPP:74:1: error: There is an unknown macro here somewhere. Configuration is required. If BEGIN_MESSAGE_MAP is a macro then please configure it. [unknownMacro]
BEGIN_MESSAGE_MAP(CWas, CDialog)
^
src/xasl/access_json_table.cpp:155:19: style: Redundant initialization for 'status_cast'. The initialized value is overwritten before it is read. [redundantInitialization]
      status_cast = tp_value_cast (m_output_value_pointer, m_output_value_pointer, m_domain, false);
                  ^
src/xasl/access_json_table.cpp:131:36: note: status_cast is initialized
      TP_DOMAIN_STATUS status_cast = TP_DOMAIN_STATUS::DOMAIN_COMPATIBLE;
                                   ^
src/xasl/access_json_table.cpp:155:19: note: status_cast is overwritten
      status_cast = tp_value_cast (m_output_value_pointer, m_output_value_pointer, m_domain, false);
                  ^
src/xasl/access_json_table.cpp:185:19: style: Redundant initialization for 'status_cast'. The initialized value is overwritten before it is read. [redundantInitialization]
      status_cast = tp_value_cast (m_output_value_pointer, m_output_value_pointer, m_domain, false);
                  ^
src/xasl/access_json_table.cpp:173:36: note: status_cast is initialized
      TP_DOMAIN_STATUS status_cast = TP_DOMAIN_STATUS::DOMAIN_COMPATIBLE;
                                   ^
src/xasl/access_json_table.cpp:185:19: note: status_cast is overwritten
      status_cast = tp_value_cast (m_output_value_pointer, m_output_value_pointer, m_domain, false);
                  ^
src/xasl/xasl_stream.cpp:289:33: warning: Function 'stx_build_string' argument order different: declaration 'thread_p, tmp, ptr' definition 'thread_p, ptr, string' [funcArgOrderDifferent]
stx_build_string (THREAD_ENTRY *thread_p, char *ptr, char *string)
                                ^
src/xasl/xasl_stream.hpp:78:39: note: Function 'stx_build_string' argument order different: declaration 'thread_p, tmp, ptr' definition 'thread_p, ptr, string'
char *stx_build_string (THREAD_ENTRY *thread_p, char *tmp, char *ptr);
                                      ^
src/xasl/xasl_stream.cpp:289:33: note: Function 'stx_build_string' argument order different: declaration 'thread_p, tmp, ptr' definition 'thread_p, ptr, string'
stx_build_string (THREAD_ENTRY *thread_p, char *ptr, char *string)
                                ^
src/xasl/xasl_stream.cpp:439:79: style:inconclusive: Function 'stx_build' argument 3 names different: declaration 'jts' definition 'json_table_spec'. [funcArgNamesDifferent]
stx_build (THREAD_ENTRY *thread_p, char *ptr, cubxasl::json_table::spec_node &json_table_spec)
                                                                              ^
src/xasl/xasl_stream.hpp:69:85: note: Function 'stx_build' argument 3 names different: declaration 'jts' definition 'json_table_spec'.
char *stx_build (THREAD_ENTRY *thread_p, char *ptr, cubxasl::json_table::spec_node &jts);
                                                                                    ^
src/xasl/xasl_stream.cpp:439:79: note: Function 'stx_build' argument 3 names different: declaration 'jts' definition 'json_table_spec'.
stx_build (THREAD_ENTRY *thread_p, char *ptr, cubxasl::json_table::spec_node &json_table_spec)
                                                                              ^
src/xasl/xasl_stream.cpp:465:43: style:inconclusive: Function 'stx_unpack' argument 2 names different: declaration 'tmp' definition 'ptr'. [funcArgNamesDifferent]
stx_unpack (THREAD_ENTRY *thread_p, char *ptr, json_table_column_behavior &behavior)
                                          ^
src/xasl/xasl_stream.hpp:84:49: note: Function 'stx_unpack' argument 2 names different: declaration 'tmp' definition 'ptr'.
char *stx_unpack (THREAD_ENTRY *thread_p, char *tmp, json_table_column_behavior &behavior);
                                                ^
src/xasl/xasl_stream.cpp:465:43: note: Function 'stx_unpack' argument 2 names different: declaration 'tmp' definition 'ptr'.
stx_unpack (THREAD_ENTRY *thread_p, char *ptr, json_table_column_behavior &behavior)
                                          ^
src/xasl/xasl_stream.cpp:365:38: style: Variable 'xasl_unpack_info' is assigned a value that is never used. [unreadVariable]
  XASL_UNPACK_INFO *xasl_unpack_info = get_xasl_unpack_info_ptr (thread_p);
                                     ^
src/xasl/xasl_unpack_info.cpp:86:67: style:inconclusive: Function 'free_unpack_extra_buff' argument 2 names different: declaration 'unpack_info_ptr' definition 'xasl_unpack_info'. [funcArgNamesDifferent]
free_unpack_extra_buff (THREAD_ENTRY *thread_p, XASL_UNPACK_INFO *xasl_unpack_info)
                                                                  ^
src/xasl/xasl_unpack_info.hpp:84:72: note: Function 'free_unpack_extra_buff' argument 2 names different: declaration 'unpack_info_ptr' definition 'xasl_unpack_info'.
void free_unpack_extra_buff (THREAD_ENTRY *thread_p, XASL_UNPACK_INFO *unpack_info_ptr);
                                                                       ^
src/xasl/xasl_unpack_info.cpp:86:67: note: Function 'free_unpack_extra_buff' argument 2 names different: declaration 'unpack_info_ptr' definition 'xasl_unpack_info'.
free_unpack_extra_buff (THREAD_ENTRY *thread_p, XASL_UNPACK_INFO *xasl_unpack_info)
                                                                  ^
unit_tests/common/test_perf_compare.hpp:82:12: style:inconclusive: Technically the member function 'test_common::perf_compare::get_step_count' can be const. [functionConst]
    size_t get_step_count (void);
           ^
unit_tests/common/test_perf_compare.cpp:120:15: note: Technically the member function 'test_common::perf_compare::get_step_count' can be const.
perf_compare::get_step_count (void)
              ^
unit_tests/common/test_perf_compare.hpp:82:12: note: Technically the member function 'test_common::perf_compare::get_step_count' can be const.
    size_t get_step_count (void);
           ^
unit_tests/common/test_perf_compare.hpp:93:17: performance:inconclusive: Technically the member function 'test_common::perf_compare::print_alloc_name_column' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    inline void print_alloc_name_column (const char *str, std::ostream &output);
                ^
unit_tests/common/test_perf_compare.cpp:143:15: note: Technically the member function 'test_common::perf_compare::print_alloc_name_column' can be static (but you may consider moving to unnamed namespace).
perf_compare::print_alloc_name_column (const char *str, std::ostream &output)
              ^
unit_tests/common/test_perf_compare.hpp:93:17: note: Technically the member function 'test_common::perf_compare::print_alloc_name_column' can be static (but you may consider moving to unnamed namespace).
    inline void print_alloc_name_column (const char *str, std::ostream &output);
                ^
unit_tests/common/test_perf_compare.hpp:96:17: performance:inconclusive: Technically the member function 'test_common::perf_compare::print_warning_header' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    inline void print_warning_header (bool &no_warnings, std::ostream &output);
                ^
unit_tests/common/test_perf_compare.cpp:173:15: note: Technically the member function 'test_common::perf_compare::print_warning_header' can be static (but you may consider moving to unnamed namespace).
perf_compare::print_warning_header (bool &no_warnings, std::ostream &output)
              ^
unit_tests/common/test_perf_compare.hpp:96:17: note: Technically the member function 'test_common::perf_compare::print_warning_header' can be static (but you may consider moving to unnamed namespace).
    inline void print_warning_header (bool &no_warnings, std::ostream &output);
                ^
unit_tests/common/test_string_collection.hpp:36:5: style: Class 'string_collection' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    string_collection (Args &... args)
    ^
unit_tests/loaddb/test_loaddb.cpp:63:19: style: Local variable 'driver' shadows outer variable [shadowVariable]
 cubload::driver *driver = new cubload::driver ();
                  ^
unit_tests/loaddb/test_loaddb.cpp:33:19: note: Shadowed declaration
  cubload::driver driver;
                  ^
unit_tests/loaddb/test_loaddb.cpp:63:19: note: Shadow variable
 cubload::driver *driver = new cubload::driver ();
                  ^
unit_tests/loaddb/test_loaddb.cpp:83:21: style: Local variable 'driver' shadows outer variable [shadowVariable]
    cubload::driver driver;
                    ^
unit_tests/loaddb/test_loaddb.cpp:33:19: note: Shadowed declaration
  cubload::driver driver;
                  ^
unit_tests/loaddb/test_loaddb.cpp:83:21: note: Shadow variable
    cubload::driver driver;
                    ^
unit_tests/lockfree/test_cqueue_functional.cpp:195:9: style: The scope of the variable 'val' can be reduced. [variableScope]
    int val;
        ^
unit_tests/lockfree/test_cqueue_functional.cpp:268:29: style: Variable 'one_thread_count' is assigned a value that is never used. [unreadVariable]
    size_t one_thread_count = 1;
                            ^
unit_tests/lockfree/test_freelist_functional.cpp:52:10: performance:inconclusive: Technically the member function 'test_lockfree::my_item::on_reclaim' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    void on_reclaim () {}  // do nothing
         ^
unit_tests/lockfree/test_freelist_functional.cpp:91:12: style: The scope of the variable 'random_var' can be reduced. [variableScope]
    size_t random_var;
           ^
unit_tests/lockfree/test_freelist_functional.cpp:207:24: style: Consider using std::copy algorithm instead of a raw loop. [useStlAlgorithm]
     l_remaining_nodes.push_back (it);
                       ^
unit_tests/lockfree/test_hashmap.cpp:163:7: performance: Variable 'm_find_ops' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
      m_find_ops = 0;
      ^
unit_tests/lockfree/test_hashmap.cpp:164:7: performance: Variable 'm_find_or_insert_ops' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
      m_find_or_insert_ops = 0;
      ^
unit_tests/lockfree/test_hashmap.cpp:165:7: performance: Variable 'm_insert_ops' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
      m_insert_ops = 0;
      ^
unit_tests/lockfree/test_hashmap.cpp:166:7: performance: Variable 'm_insert_given_ops' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
      m_insert_given_ops = 0;
      ^
unit_tests/lockfree/test_hashmap.cpp:167:7: performance: Variable 'm_erase_ops' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
      m_erase_ops = 0;
      ^
unit_tests/lockfree/test_hashmap.cpp:168:7: performance: Variable 'm_erase_locked_ops' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
      m_erase_locked_ops = 0;
      ^
unit_tests/lockfree/test_hashmap.cpp:169:7: performance: Variable 'm_iterate_ops' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
      m_iterate_ops = 0;
      ^
unit_tests/lockfree/test_hashmap.cpp:170:7: performance: Variable 'm_clear_ops' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
      m_clear_ops = 0;
      ^
unit_tests/lockfree/test_hashmap.cpp:171:7: performance: Variable 'm_claim_ops' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
      m_claim_ops = 0;
      ^
unit_tests/lockfree/test_hashmap.cpp:172:7: performance: Variable 'm_retire_ops' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
      m_retire_ops = 0;
      ^
unit_tests/lockfree/test_hashmap.cpp:175:7: performance: Variable 'm_successful_inserts' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
      m_successful_inserts = 0;
      ^
unit_tests/lockfree/test_hashmap.cpp:176:7: performance: Variable 'm_rejected_inserts' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
      m_rejected_inserts = 0;
      ^
unit_tests/lockfree/test_hashmap.cpp:177:7: performance: Variable 'm_found_on_inserts' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
      m_found_on_inserts = 0;
      ^
unit_tests/lockfree/test_hashmap.cpp:178:7: performance: Variable 'm_found_on_finds' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
      m_found_on_finds = 0;
      ^
unit_tests/lockfree/test_hashmap.cpp:179:7: performance: Variable 'm_not_found_on_finds' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
      m_not_found_on_finds = 0;
      ^
unit_tests/lockfree/test_hashmap.cpp:180:7: performance: Variable 'm_found_on_erase_ops' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
      m_found_on_erase_ops = 0;
      ^
unit_tests/lockfree/test_hashmap.cpp:181:7: performance: Variable 'm_not_found_on_erase_ops' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
      m_not_found_on_erase_ops = 0;
      ^
unit_tests/lockfree/test_hashmap.cpp:182:7: performance: Variable 'm_iterate_increments' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
      m_iterate_increments = 0;
      ^
unit_tests/lockfree/test_hashmap.cpp:216:10: performance:inconclusive: Technically the member function 'test_lockfree::test_result::dump_not_zero' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    void dump_not_zero (const char *name, std::atomic<std::uint64_t> &val)
         ^
unit_tests/lockfree/test_hashmap.cpp:238:7: style: Class 'hash_tester' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
      hash_tester (test_type tt);
      ^
unit_tests/lockfree/test_hashmap.cpp:412:6: warning: Either the condition 'myent!=NULL' is redundant or there is possible null pointer dereference: myent. [nullPointerRedundantCheck]
     myent->m_key = k;
     ^
unit_tests/lockfree/test_hashmap.cpp:422:20: note: Assuming that condition 'myent!=NULL' is not redundant
     assert (myent != NULL);
                   ^
unit_tests/lockfree/test_hashmap.cpp:412:6: note: Null pointer dereference
     myent->m_key = k;
     ^
unit_tests/lockfree/test_hashmap.cpp:988:7: style: C-style pointer casting [cstyleCast]
    * (my_key *) dest = * (my_key *) src;
      ^
unit_tests/lockfree/test_hashmap.cpp:995:17: style: C-style pointer casting [cstyleCast]
    my_key *a = (my_key *) key1;
                ^
unit_tests/lockfree/test_hashmap.cpp:996:17: style: C-style pointer casting [cstyleCast]
    my_key *b = (my_key *) key2;
                ^
unit_tests/lockfree/test_hashmap.cpp:1005:13: style: C-style pointer casting [cstyleCast]
    return ((my_key *) key)->m_1 % hash_size;
            ^
unit_tests/lockfree/test_hashmap.cpp:1043:19: style: C-style pointer casting [cstyleCast]
    my_entry *e = (my_entry *) p;
                  ^
unit_tests/lockfree/test_hashmap.cpp:1051:19: style: C-style pointer casting [cstyleCast]
    my_entry *e = (my_entry *) p;
                  ^
unit_tests/lockfree/test_hashmap.cpp:1060:19: style: C-style pointer casting [cstyleCast]
    my_entry *e = (my_entry *) p;
                  ^
unit_tests/lockfree/test_hashmap.cpp:324:12: style: The scope of the variable 'random_op' can be reduced. [variableScope]
    size_t random_op;
           ^
unit_tests/lockfree/test_hashmap.cpp:387:12: style: The scope of the variable 'random_op' can be reduced. [variableScope]
    size_t random_op;
           ^
unit_tests/lockfree/test_hashmap.cpp:465:12: style: The scope of the variable 'random_op' can be reduced. [variableScope]
    size_t random_op;
           ^
unit_tests/lockfree/test_hashmap.cpp:528:12: style: The scope of the variable 'random_op' can be reduced. [variableScope]
    size_t random_op;
           ^
unit_tests/lockfree/test_hashmap.cpp:613:12: style: The scope of the variable 'random_op' can be reduced. [variableScope]
    size_t random_op;
           ^
unit_tests/lockfree/test_hashmap.cpp:813:72: style:inconclusive: Function 'run_test' argument 2 names different: declaration 'case_func' definition 'f'. [funcArgNamesDifferent]
  hash_tester<Hash, Tran>::run_test (const std::string &case_name, F &&f, Args &&...args)
                                                                       ^
unit_tests/lockfree/test_hashmap.cpp:241:56: note: Function 'run_test' argument 2 names different: declaration 'case_func' definition 'f'.
      void run_test (const std::string &case_name, F &&case_func, Args &&...args);
                                                       ^
unit_tests/lockfree/test_hashmap.cpp:813:72: note: Function 'run_test' argument 2 names different: declaration 'case_func' definition 'f'.
  hash_tester<Hash, Tran>::run_test (const std::string &case_name, F &&f, Args &&...args)
                                                                       ^
unit_tests/lockfree/test_hashmap.cpp:1004:23: style: Variable 'size' is assigned a value that is never used. [unreadVariable]
    unsigned int size = (unsigned int) hash_size;
                      ^
unit_tests/lockfree/test_hashmap.cpp:605:22: style: Variable 'iter_incr' is assigned a value that is never used. [unreadVariable]
    size_t iter_incr = 0;
                     ^
unit_tests/memory_alloc/test_db_private_alloc.cpp:255:12: error: Deallocation of an auto-variable results in undefined behaviour. [autovarInvalidDeallocation]
    delete pointers;
           ^
unit_tests/memory_alloc/test_memory_alloc_helper.hpp:80:8: error: Deallocation of an auto-variable results in undefined behaviour. [autovarInvalidDeallocation]
 free (pointer);
       ^
unit_tests/memory_alloc/test_memory_alloc_helper.hpp:78:12: performance:inconclusive: Technically the member function 'mallocator < char >::deallocate' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      void deallocate (T *pointer, size_t UNUSED (size))
           ^
unit_tests/memory_alloc/test_memory_alloc_helper.hpp:82:14: performance:inconclusive: Technically the member function 'mallocator < char >::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      size_t max_size (void) const
             ^
unit_tests/memory_alloc/test_memory_alloc_helper.hpp:78:12: performance:inconclusive: Technically the member function 'mallocator < std :: array <unsigned long , SIZE_64 > >::deallocate' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      void deallocate (T *pointer, size_t UNUSED (size))
           ^
unit_tests/memory_alloc/test_memory_alloc_helper.hpp:82:14: performance:inconclusive: Technically the member function 'mallocator < std :: array <unsigned long , SIZE_64 > >::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      size_t max_size (void) const
             ^
unit_tests/memory_alloc/test_memory_alloc_helper.hpp:78:12: performance:inconclusive: Technically the member function 'mallocator < std :: array <unsigned long , SIZE_ONE_K > >::deallocate' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      void deallocate (T *pointer, size_t UNUSED (size))
           ^
unit_tests/memory_alloc/test_memory_alloc_helper.hpp:82:14: performance:inconclusive: Technically the member function 'mallocator < std :: array <unsigned long , SIZE_ONE_K > >::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      size_t max_size (void) const
             ^
unit_tests/memory_alloc/test_memory_alloc_helper.hpp:78:12: performance:inconclusive: Technically the member function 'mallocator < unsigned long >::deallocate' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      void deallocate (T *pointer, size_t UNUSED (size))
           ^
unit_tests/memory_alloc/test_memory_alloc_helper.hpp:82:14: performance:inconclusive: Technically the member function 'mallocator < unsigned long >::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      size_t max_size (void) const
             ^
unit_tests/memory_alloc/test_db_private_alloc.cpp:294:7: style: Class 'random_values' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
      random_values (size_t size)
      ^
unit_tests/memory_alloc/test_db_private_alloc.cpp:77:89: warning: Access of forwarded variable 'args'. [accessForwarded]
    run_test (global_error, fn_std, std::ref (compare_performance), std::forward<Args> (args)...);
                                                                                        ^
unit_tests/memory_alloc/test_db_private_alloc.cpp:76:73: note: Calling std::forward(args)
    run_test (global_error, fn_private, std::ref (compare_performance), std::forward<Args> (args)...);
                                                                        ^
unit_tests/memory_alloc/test_db_private_alloc.cpp:77:89: note: Access of forwarded variable 'args'.
    run_test (global_error, fn_std, std::ref (compare_performance), std::forward<Args> (args)...);
                                                                                        ^
unit_tests/memory_alloc/test_db_private_alloc.cpp:78:92: warning: Access of forwarded variable 'args'. [accessForwarded]
    run_test (global_error, fn_malloc, std::ref (compare_performance), std::forward<Args> (args)...);
                                                                                           ^
unit_tests/memory_alloc/test_db_private_alloc.cpp:77:69: note: Calling std::forward(args)
    run_test (global_error, fn_std, std::ref (compare_performance), std::forward<Args> (args)...);
                                                                    ^
unit_tests/memory_alloc/test_db_private_alloc.cpp:78:92: note: Access of forwarded variable 'args'.
    run_test (global_error, fn_malloc, std::ref (compare_performance), std::forward<Args> (args)...);
                                                                                           ^
unit_tests/memory_alloc/test_db_private_alloc.cpp:98:79: warning: Access of forwarded variable 'args'. [accessForwarded]
    run_parallel (fn_std, std::ref (compare_performance), std::forward<Args> (args)...);
                                                                              ^
unit_tests/memory_alloc/test_db_private_alloc.cpp:97:63: note: Calling std::forward(args)
    run_parallel (fn_private, std::ref (compare_performance), std::forward<Args> (args)...);
                                                              ^
unit_tests/memory_alloc/test_db_private_alloc.cpp:98:79: note: Access of forwarded variable 'args'.
    run_parallel (fn_std, std::ref (compare_performance), std::forward<Args> (args)...);
                                                                              ^
unit_tests/memory_alloc/test_db_private_alloc.cpp:99:82: warning: Access of forwarded variable 'args'. [accessForwarded]
    run_parallel (fn_malloc, std::ref (compare_performance), std::forward<Args> (args)...);
                                                                                 ^
unit_tests/memory_alloc/test_db_private_alloc.cpp:98:59: note: Calling std::forward(args)
    run_parallel (fn_std, std::ref (compare_performance), std::forward<Args> (args)...);
                                                          ^
unit_tests/memory_alloc/test_db_private_alloc.cpp:99:82: note: Access of forwarded variable 'args'.
    run_parallel (fn_malloc, std::ref (compare_performance), std::forward<Args> (args)...);
                                                                                 ^
unit_tests/memory_alloc/test_memory_alloc_helper.hpp:78:12: performance:inconclusive: Technically the member function 'test_memalloc::mallocator::deallocate' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      void deallocate (T *pointer, size_t UNUSED (size))
           ^
unit_tests/memory_alloc/test_memory_alloc_helper.hpp:82:14: performance:inconclusive: Technically the member function 'test_memalloc::mallocator::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      size_t max_size (void) const
             ^
unit_tests/memory_alloc/test_private_unique_ptr.cpp:110:10: performance:inconclusive: Technically the member function 'test_memalloc::Foo::test_arrow_operator' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    void test_arrow_operator()
         ^
unit_tests/memory_alloc/test_private_unique_ptr.cpp:128:16: style: C-style pointer casting [cstyleCast]
    Foo *ptr = (Foo *) db_private_alloc (cte.get_thread_entry(), sizeof (Foo));
               ^
unit_tests/object_factory/test_object_factory.hpp:46:11: style: The function 'get_height' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
      int get_height ()
          ^
unit_tests/object_factory/test_object_factory.hpp:33:19: note: Virtual function in base class
      virtual int get_height () = 0;
                  ^
unit_tests/object_factory/test_object_factory.hpp:46:11: note: Function in derived class
      int get_height ()
          ^
unit_tests/object_factory/test_object_factory.hpp:59:11: style: The function 'get_height' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
      int get_height ()
          ^
unit_tests/object_factory/test_object_factory.hpp:33:19: note: Virtual function in base class
      virtual int get_height () = 0;
                  ^
unit_tests/object_factory/test_object_factory.hpp:59:11: note: Function in derived class
      int get_height ()
          ^
unit_tests/object_factory/test_object_factory.hpp:72:11: style: The function 'get_height' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
      int get_height ()
          ^
unit_tests/object_factory/test_object_factory.hpp:33:19: note: Virtual function in base class
      virtual int get_height () = 0;
                  ^
unit_tests/object_factory/test_object_factory.hpp:72:11: note: Function in derived class
      int get_height ()
          ^
unit_tests/packing/test_packing.cpp:396:32: warning: Assert statement modifies 'cnt_classes_unpack'. [assignmentInAssert]
    assert (cnt_classes_unpack = cnt_classes);
                               ^
unit_tests/packing/test_packing.cpp:301:14: style: Variable 'obj_size' is assigned a value that is never used. [unreadVariable]
    obj_size = 0;
             ^
unit_tests/packing/test_packing.cpp:304:11: style: Variable 'obj_size' is assigned a value that is never used. [unreadVariable]
 obj_size += test_objects[i].get_packed_size (packer_instance);
          ^
unit_tests/string_buffer/src/allocator_stack.hpp:82:12: style:inconclusive: Technically the member function 'allocator::stack::owns' can be const. [functionConst]
      bool owns (cubmem::block b)
           ^
unit_tests/string_buffer/src/allocator_stack.hpp:87:14: style:inconclusive: Technically the member function 'allocator::stack::get_available' can be const. [functionConst]
      size_t get_available ()
             ^
unit_tests/string_buffer/src/allocator_affix.hpp:64:16: performance:inconclusive: Technically the member function 'affix < allocator :: stack , prefix , suffix >::check' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      unsigned check (const cubmem::block &b)
               ^
unit_tests/string_buffer/src/allocator_affix.hpp:42:7: style: Class 'affix < allocator :: stack , prefix , suffix >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
      affix (Allocator &a)
      ^
unit_tests/string_buffer/src/test_string_buffer.cpp:106:4: error: Common realloc mistake: 'm_ref' nulled but not freed upon failure [memleakOnRealloc]
   m_ref = (char *) realloc (m_ref, m_dim);
   ^
unit_tests/string_buffer/src/test_string_buffer.cpp:216:11: style: Variable 't0' is assigned a value that is never used. [unreadVariable]
  auto t0 = std::chrono::high_resolution_clock::now ();
          ^
unit_tests/string_buffer/src/test_string_buffer.cpp:228:11: style: Variable 't1' is assigned a value that is never used. [unreadVariable]
  auto t1 = std::chrono::high_resolution_clock::now ();
          ^
unit_tests/thread/test_worker_pool.cpp:45:12: performance:inconclusive: Technically the member function 'test_thread::test_context::interrupt_execution' can be static (but you may consider moving to unnamed namespace). [functionStatic]
      void interrupt_execution (void)
           ^
src/broker/broker_monitor.c:1359:7: warning: Null pointer dereference: shm_appl [ctunullpointer]
  if (shm_appl->shard_flag == OFF)
      ^
src/broker/broker_monitor.c:1758:10: note: Assuming that condition 'if(shm_appl)' is not redundant

         ^
src/broker/broker_monitor.c:1752:25: note: Calling function set_monitor_items, 3rd argument is null
      set_monitor_items (mnt_items_cur_p, br_info_p, shm_appl, shm_proxy_p, mnt_type);
                        ^
src/broker/broker_monitor.c:1359:7: note: Dereferencing argument shm_appl that is null
  if (shm_appl->shard_flag == OFF)
      ^
src/broker/broker_util.c:566:17: warning: Null pointer dereference: port_name [ctunullpointer]
  if (snprintf (port_name, len, "%s%s.P%d", dir_name, broker_name, proxy_id + 1) < 0)
                ^
src/broker/cas_network.c:227:17: note: Assuming that condition 'port_name==NULL' is not redundant

                ^
src/broker/cas_network.c:225:26: note: Calling function ut_get_proxy_port_name, 1st argument is null
  ut_get_proxy_port_name (port_name, shm_appl->broker_name, as_info->proxy_id, BROKER_PATH_MAX);
                         ^
src/broker/broker_util.c:566:17: note: Dereferencing argument port_name that is null
  if (snprintf (port_name, len, "%s%s.P%d", dir_name, broker_name, proxy_id + 1) < 0)
                ^
src/cci/cci_handle_mng.c:1100:7: warning: Null pointer dereference: con_handle [ctunullpointer]
  if (con_handle->broker_info[BROKER_INFO_PROTO_VERSION] & CAS_PROTO_INDICATOR)
      ^
src/cci/cci_query_execute.c:632:7: note: Assuming that condition 'con_handle' is not redundant

      ^
src/cci/cci_query_execute.c:643:38: note: Calling function hm_get_broker_version, 1st argument is null
  broker_ver = hm_get_broker_version (con_handle);
                                     ^
src/cci/cci_handle_mng.c:1100:7: note: Dereferencing argument con_handle that is null
  if (con_handle->broker_info[BROKER_INFO_PROTO_VERSION] & CAS_PROTO_INDICATOR)
      ^
src/cci/cci_network.c:600:3: warning: Null pointer dereference: con_handle [ctunullpointer]
  API_SLOG (con_handle);
  ^
src/cci/cas_cci.c:4934:7: note: Assuming that condition 'con_handle' is not redundant

      ^
src/cci/cas_cci.c:4943:29: note: Calling function net_check_cas_request, 1st argument is null
  if (net_check_cas_request (con_handle) != 0)
                            ^
src/cci/cci_network.c:600:3: note: Dereferencing argument con_handle that is null
  API_SLOG (con_handle);
  ^
src/cci/cci_network.c:624:37: warning: Null pointer dereference: con_handle [ctunullpointer]
  memcpy (send_msg_header.info_ptr, con_handle->cas_info, MSG_HEADER_INFO_SIZE);
                                    ^
src/cci/cci_query_execute.c:459:7: note: Assuming that condition 'con_handle' is not redundant

      ^
src/cci/cci_query_execute.c:470:27: note: Calling function net_send_msg, 1st argument is null
  err_code = net_send_msg (con_handle, net_buf.data, net_buf.data_size);
                          ^
src/cci/cci_network.c:624:37: note: Dereferencing argument con_handle that is null
  memcpy (send_msg_header.info_ptr, con_handle->cas_info, MSG_HEADER_INFO_SIZE);
                                    ^
src/cci/cci_query_execute.c:4704:10: warning: Null pointer dereference: con_handle [ctunullpointer]
  type = con_handle->broker_info[BROKER_INFO_DBMS_TYPE];
         ^
src/cci/cas_cci.c:6569:18: note: Assuming that condition 'con_handle==NULL' is not redundant

                 ^
src/cci/cas_cci.c:6560:19: note: Calling function qe_is_shard, 1st argument is null
  if (qe_is_shard (con_handle))
                  ^
src/cci/cci_query_execute.c:4704:10: note: Dereferencing argument con_handle that is null
  type = con_handle->broker_info[BROKER_INFO_DBMS_TYPE];
         ^
src/compat/db_json.cpp:330:0: style: The function 'Bool' is never used. [unusedFunction]

^
src/cci/cas_cci.c:264:0: style: The function 'DllMain' is never used. [unusedFunction]

^
src/compat/db_json.cpp:378:0: style: The function 'EndArray' is never used. [unusedFunction]

^
src/compat/db_json.cpp:370:0: style: The function 'EndObject' is never used. [unusedFunction]

^
src/compat/db_json_allocator.cpp:62:0: style: The function 'Free' is never used. [unusedFunction]

^
contrib/ruby/driver/ext/cubrid.c:138:0: style: The function 'Init_cubrid' is never used. [unusedFunction]

^
src/compat/db_json.cpp:342:0: style: The function 'Int64' is never used. [unusedFunction]

^
src/compat/db_json_types_internal.cpp:22:0: style: The function 'IsLeaf' is never used. [unusedFunction]

^
src/cm_common/cm_broker_jni.c:262:0: style: The function 'Java_com_cubrid_jni_BrokerJni_getAllBrokerInfo0' is never used. [unusedFunction]

^
src/cm_common/cm_broker_jni.c:370:0: style: The function 'Java_com_cubrid_jni_BrokerJni_getAllCasInfo0' is never used. [unusedFunction]

^
src/cm_common/cm_broker_jni.c:477:0: style: The function 'Java_com_cubrid_jni_BrokerJni_getAllJobInfo0' is never used. [unusedFunction]

^
src/compat/db_json.cpp:366:0: style: The function 'Key' is never used. [unusedFunction]

^
src/transaction/log_append.cpp:145:0: style: The function 'LOG_APPEND_PTR' is never used. [unusedFunction]

^
src/transaction/log_append.cpp:129:0: style: The function 'LOG_RESET_APPEND_LSA' is never used. [unusedFunction]

^
src/transaction/log_append.cpp:137:0: style: The function 'LOG_RESET_PREV_LSA' is never used. [unusedFunction]

^
src/compat/db_json_allocator.cpp:26:0: style: The function 'Malloc' is never used. [unusedFunction]

^
src/compat/db_json.cpp:354:0: style: The function 'RawNumber' is never used. [unusedFunction]

^
src/compat/db_json_allocator.cpp:44:0: style: The function 'Realloc' is never used. [unusedFunction]

^
src/base/sha1.c:400:0: style: The function 'SHA1Compare' is never used. [unusedFunction]

^
src/compat/db_json.cpp:374:0: style: The function 'StartArray' is never used. [unusedFunction]

^
src/compat/db_json.cpp:362:0: style: The function 'StartObject' is never used. [unusedFunction]

^
src/compat/db_json.cpp:338:0: style: The function 'Uint' is never used. [unusedFunction]

^
src/compat/db_json.cpp:346:0: style: The function 'Uint64' is never used. [unusedFunction]

^
src/broker/cas.c:447:0: style: The function 'WinMain' is never used. [unusedFunction]

^
src/base/dtoa.c:851:0: style: The function '_Jv_dtoa' is never used. [unusedFunction]

^
contrib/perl/dbdimp.c:1570:0: style: The function '_cubrid_foreign_key' is never used. [unusedFunction]

^
contrib/perl/dbdimp.c:1519:0: style: The function '_cubrid_primary_key' is never used. [unusedFunction]

^
src/win_tools/ctrlservice/ctrlservice.cpp:79:0: style: The function '_tmain' is never used. [unusedFunction]

^
src/executables/util_cs.c:1128:0: style: The function 'acldb' is never used. [unusedFunction]

^
src/storage/btree_unique.cpp:163:0: style: The function 'add_empty' is never used. [unusedFunction]

^
src/storage/btree_unique.cpp:156:0: style: The function 'add_index_stats' is never used. [unusedFunction]

^
src/transaction/log_postpone_cache.cpp:112:0: style: The function 'add_lsa' is never used. [unusedFunction]

^
src/transaction/log_postpone_cache.cpp:51:0: style: The function 'add_redo_data' is never used. [unusedFunction]

^
src/storage/btree_unique.cpp:74:0: style: The function 'add_row' is never used. [unusedFunction]

^
src/executables/util_cs.c:355:0: style: The function 'addvoldb' is never used. [unusedFunction]

^
src/base/adjustable_array.c:391:0: style: The function 'adj_ar_get_nth_buffer' is never used. [unusedFunction]

^
src/broker/broker_admin_pub.c:234:0: style: The function 'admin_isstarted_cmd' is never used. [unusedFunction]

^
src/executables/util_sa.c:1896:0: style: The function 'alterdbhost' is never used. [unusedFunction]

^
src/monitor/monitor_statistic.cpp:41:0: style: The function 'amount_rep_cast' is never used. [unusedFunction]

^
src/api/api_util.c:458:0: style: The function 'api_check_memory' is never used. [unusedFunction]

^
src/api/db_object.c:1129:0: style: The function 'apif_last_pos' is never used. [unusedFunction]

^
src/api/db_object.c:1104:0: style: The function 'apif_tell' is never used. [unusedFunction]

^
src/loaddb/load_semantic_helper.cpp:60:0: style: The function 'append_char' is never used. [unusedFunction]

^
src/loaddb/load_semantic_helper.cpp:92:0: style: The function 'append_constant_list' is never used. [unusedFunction]

^
src/loaddb/load_semantic_helper.cpp:86:0: style: The function 'append_string_list' is never used. [unusedFunction]

^
src/executables/util_cs.c:3130:0: style: The function 'applyinfo' is never used. [unusedFunction]

^
src/executables/util_cs.c:2862:0: style: The function 'applylogdb' is never used. [unusedFunction]

^
src/win_tools/cubridtray/Manager.cpp:54:0: style: The function 'bCheckEasyManagerServer' is never used. [unusedFunction]

^
src/win_tools/cubridtray/ToolManage.cpp:57:0: style: The function 'bCheckInstallEasyManage' is never used. [unusedFunction]

^
src/win_tools/cubridtray/ToolManage.cpp:136:0: style: The function 'bCheckInstallVSQL' is never used. [unusedFunction]

^
src/win_tools/cubridtray/CUBRIDManage.cpp:118:0: style: The function 'bCheckServer' is never used. [unusedFunction]

^
src/win_tools/cubridtray/Manager.cpp:144:0: style: The function 'bEasyManagerServerCheckOnly' is never used. [unusedFunction]

^
src/win_tools/cubridtray/CASManage.cpp:158:0: style: The function 'bInstallStatus' is never used. [unusedFunction]

^
src/win_tools/cubridtray/CASManage.cpp:112:0: style: The function 'bRestartUniCAS' is never used. [unusedFunction]

^
src/win_tools/cubridtray/CUBRIDManage.cpp:699:0: style: The function 'bStartCUBRID' is never used. [unusedFunction]

^
src/win_tools/cubridtray/ToolManage.cpp:89:0: style: The function 'bStartEasyManage' is never used. [unusedFunction]

^
src/win_tools/cubridtray/Manager.cpp:82:0: style: The function 'bStartEasyManagerServer' is never used. [unusedFunction]

^
src/win_tools/cubridtray/CASManage.cpp:59:0: style: The function 'bStartUniCAS' is never used. [unusedFunction]

^
src/win_tools/cubridtray/ToolManage.cpp:151:0: style: The function 'bStartVSQL' is never used. [unusedFunction]

^
src/win_tools/cubridtray/CASManage.cpp:171:0: style: The function 'bStatusUniCAS' is never used. [unusedFunction]

^
src/win_tools/cubridtray/CUBRIDManage.cpp:762:0: style: The function 'bStopCUBRID' is never used. [unusedFunction]

^
src/win_tools/cubridtray/CUBRIDManage.cpp:757:0: style: The function 'bStopMaster' is never used. [unusedFunction]

^
src/win_tools/cubridtray/CASManage.cpp:91:0: style: The function 'bStopUniCAS' is never used. [unusedFunction]

^
src/executables/util_cs.c:121:0: style: The function 'backupdb' is never used. [unusedFunction]

^
src/base/base64.c:387:0: style: The function 'base64_decode' is never used. [unusedFunction]

^
src/base/base64.c:502:0: style: The function 'base64_encode' is never used. [unusedFunction]

^
src/base/binaryheap.c:184:0: style: The function 'bh_add' is never used. [unusedFunction]

^
src/base/binaryheap.c:278:0: style: The function 'bh_build_heap' is never used. [unusedFunction]

^
src/base/binaryheap.c:114:0: style: The function 'bh_create' is never used. [unusedFunction]

^
src/base/binaryheap.c:157:0: style: The function 'bh_destroy' is never used. [unusedFunction]

^
src/base/binaryheap.c:442:0: style: The function 'bh_element_at' is never used. [unusedFunction]

^
src/base/binaryheap.c:304:0: style: The function 'bh_extract_max' is never used. [unusedFunction]

^
src/base/binaryheap.c:457:0: style: The function 'bh_is_consistent' is never used. [unusedFunction]

^
src/base/binaryheap.c:469:0: style: The function 'bh_is_full' is never used. [unusedFunction]

^
src/base/binaryheap.c:357:0: style: The function 'bh_peek_max' is never used. [unusedFunction]

^
src/base/binaryheap.c:378:0: style: The function 'bh_to_sorted_array' is never used. [unusedFunction]

^
src/base/binaryheap.c:249:0: style: The function 'bh_try_insert' is never used. [unusedFunction]

^
src/base/bit.c:284:0: style: The function 'bit16_clear' is never used. [unusedFunction]

^
src/base/bit.c:263:0: style: The function 'bit16_count_leading_ones' is never used. [unusedFunction]

^
src/base/bit.c:173:0: style: The function 'bit16_count_ones' is never used. [unusedFunction]

^
src/base/bit.c:220:0: style: The function 'bit16_count_trailing_ones' is never used. [unusedFunction]

^
src/base/bit.c:180:0: style: The function 'bit16_count_zeros' is never used. [unusedFunction]

^
src/base/bit.c:269:0: style: The function 'bit16_is_set' is never used. [unusedFunction]

^
src/base/bit.c:276:0: style: The function 'bit16_set' is never used. [unusedFunction]

^
src/base/bit.c:292:0: style: The function 'bit16_set_trailing_bits' is never used. [unusedFunction]

^
src/base/bit.c:431:0: style: The function 'bit32_clear' is never used. [unusedFunction]

^
src/base/bit.c:410:0: style: The function 'bit32_count_leading_ones' is never used. [unusedFunction]

^
src/base/bit.c:362:0: style: The function 'bit32_count_trailing_ones' is never used. [unusedFunction]

^
src/base/bit.c:313:0: style: The function 'bit32_count_zeros' is never used. [unusedFunction]

^
src/base/bit.c:416:0: style: The function 'bit32_is_set' is never used. [unusedFunction]

^
src/base/bit.c:423:0: style: The function 'bit32_set' is never used. [unusedFunction]

^
src/base/bit.c:439:0: style: The function 'bit32_set_trailing_bits' is never used. [unusedFunction]

^
src/base/bit.c:566:0: style: The function 'bit64_count_leading_ones' is never used. [unusedFunction]

^
src/base/bit.c:153:0: style: The function 'bit8_clear' is never used. [unusedFunction]

^
src/base/bit.c:132:0: style: The function 'bit8_count_leading_ones' is never used. [unusedFunction]

^
src/base/bit.c:51:0: style: The function 'bit8_count_ones' is never used. [unusedFunction]

^
src/base/bit.c:94:0: style: The function 'bit8_count_trailing_ones' is never used. [unusedFunction]

^
src/base/bit.c:58:0: style: The function 'bit8_count_zeros' is never used. [unusedFunction]

^
src/base/bit.c:138:0: style: The function 'bit8_is_set' is never used. [unusedFunction]

^
src/base/bit.c:145:0: style: The function 'bit8_set' is never used. [unusedFunction]

^
src/base/bit.c:161:0: style: The function 'bit8_set_trailing_bits' is never used. [unusedFunction]

^
src/optimizer/query_bitset.c:138:0: style: The function 'bitset_add' is never used. [unusedFunction]

^
src/optimizer/query_bitset.c:120:0: style: The function 'bitset_assign' is never used. [unusedFunction]

^
src/optimizer/query_bitset.c:393:0: style: The function 'bitset_cardinality' is never used. [unusedFunction]

^
src/optimizer/query_bitset.c:571:0: style: The function 'bitset_delset' is never used. [unusedFunction]

^
src/optimizer/query_bitset.c:224:0: style: The function 'bitset_difference' is never used. [unusedFunction]

^
src/optimizer/query_bitset.c:514:0: style: The function 'bitset_first_member' is never used. [unusedFunction]

^
src/optimizer/query_bitset.c:557:0: style: The function 'bitset_init' is never used. [unusedFunction]

^
src/optimizer/query_bitset.c:200:0: style: The function 'bitset_intersect' is never used. [unusedFunction]

^
src/optimizer/query_bitset.c:295:0: style: The function 'bitset_intersects' is never used. [unusedFunction]

^
src/optimizer/query_bitset.c:243:0: style: The function 'bitset_invert' is never used. [unusedFunction]

^
src/optimizer/query_bitset.c:342:0: style: The function 'bitset_is_equivalent' is never used. [unusedFunction]

^
src/optimizer/query_bitset.c:423:0: style: The function 'bitset_position' is never used. [unusedFunction]

^
src/optimizer/query_bitset.c:527:0: style: The function 'bitset_print' is never used. [unusedFunction]

^
src/optimizer/query_bitset.c:158:0: style: The function 'bitset_remove' is never used. [unusedFunction]

^
src/optimizer/query_bitset.c:263:0: style: The function 'bitset_subset' is never used. [unusedFunction]

^
src/optimizer/query_bitset.c:176:0: style: The function 'bitset_union' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:4151:0: style: The function 'boot_find_last_temp' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:4073:0: style: The function 'boot_find_number_temp_volumes' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:9650:0: style: The function 'boot_get_server_locales' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:9814:0: style: The function 'boot_get_server_timezone_checksum' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:3639:0: style: The function 'boot_initialize_server' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:5388:0: style: The function 'boot_notify_ha_log_applier_state' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:3677:0: style: The function 'boot_register_client' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:3755:0: style: The function 'boot_unregister_client' is never used. [unusedFunction]

^
src/storage/storage_common.c:404:0: style: The function 'btid_to_string' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:5584:0: style: The function 'btree_add_index' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:6285:0: style: The function 'btree_class_test_unique' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:5897:0: style: The function 'btree_delete_index' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:6029:0: style: The function 'btree_find_unique' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:8068:0: style: The function 'btree_get_index_key_type' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:5671:0: style: The function 'btree_load_index' is never used. [unusedFunction]

^
src/transaction/mvcc_table.cpp:224:0: style: The function 'build_mvcc_info' is never used. [unusedFunction]

^
src/broker/cas_meta.c:118:0: style: The function 'cas_bi_get_cci_pconnect' is never used. [unusedFunction]

^
src/broker/cas_meta.c:64:0: style: The function 'cas_bi_get_dbms_type' is never used. [unusedFunction]

^
src/broker/cas_meta.c:76:0: style: The function 'cas_bi_get_keep_connection' is never used. [unusedFunction]

^
src/broker/cas_meta.c:130:0: style: The function 'cas_bi_get_protocol_version' is never used. [unusedFunction]

^
src/broker/cas_meta.c:197:0: style: The function 'cas_bi_get_renewed_error_code' is never used. [unusedFunction]

^
src/broker/cas_meta.c:97:0: style: The function 'cas_bi_get_statement_pooling' is never used. [unusedFunction]

^
src/broker/cas_meta.c:58:0: style: The function 'cas_bi_set_dbms_type' is never used. [unusedFunction]

^
src/broker/cas_meta.c:70:0: style: The function 'cas_bi_set_keep_connection' is never used. [unusedFunction]

^
src/broker/cas_meta.c:124:0: style: The function 'cas_bi_set_protocol_version' is never used. [unusedFunction]

^
src/broker/cas_meta.c:184:0: style: The function 'cas_bi_set_renewed_error_code' is never used. [unusedFunction]

^
src/broker/cas_error_log.c:193:0: style: The function 'cas_error_log_get_eid' is never used. [unusedFunction]

^
src/broker/cas_error_log.c:167:0: style: The function 'cas_error_log_write' is never used. [unusedFunction]

^
src/broker/cas_log.c:641:0: style: The function 'cas_log_write_query_string_nonl' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:7497:0: style: The function 'catalog_check_rep_dir' is never used. [unusedFunction]

^
src/cci/cas_cci.c:1228:0: style: The function 'cci_bind_param_array' is never used. [unusedFunction]

^
src/cci/cas_cci.c:1203:0: style: The function 'cci_bind_param_array_size' is never used. [unusedFunction]

^
src/cci/cas_cci.c:1142:0: style: The function 'cci_bind_param_ex' is never used. [unusedFunction]

^
src/cci/cas_cci.c:729:0: style: The function 'cci_cancel' is never used. [unusedFunction]

^
src/cci/cas_cci.c:2162:0: style: The function 'cci_close_query_result' is never used. [unusedFunction]

^
src/cci/cas_cci.c:2974:0: style: The function 'cci_col_get' is never used. [unusedFunction]

^
src/cci/cas_cci.c:3100:0: style: The function 'cci_col_seq_drop' is never used. [unusedFunction]

^
src/cci/cas_cci.c:3110:0: style: The function 'cci_col_seq_insert' is never used. [unusedFunction]

^
src/cci/cas_cci.c:3120:0: style: The function 'cci_col_seq_put' is never used. [unusedFunction]

^
src/cci/cas_cci.c:3090:0: style: The function 'cci_col_set_add' is never used. [unusedFunction]

^
src/cci/cas_cci.c:3080:0: style: The function 'cci_col_set_drop' is never used. [unusedFunction]

^
src/cci/cas_cci.c:3038:0: style: The function 'cci_col_size' is never used. [unusedFunction]

^
src/cci/cas_cci.c:430:0: style: The function 'cci_connect_3_0' is never used. [unusedFunction]

^
src/cci/cas_cci.c:415:0: style: The function 'cci_connect_ex' is never used. [unusedFunction]

^
src/cci/cas_cci.c:6196:0: style: The function 'cci_datasource_borrow' is never used. [unusedFunction]

^
src/cci/cas_cci.c:6078:0: style: The function 'cci_datasource_change_property' is never used. [unusedFunction]

^
src/cci/cas_cci.c:5805:0: style: The function 'cci_datasource_create' is never used. [unusedFunction]

^
src/cci/cas_cci.c:6026:0: style: The function 'cci_datasource_destroy' is never used. [unusedFunction]

^
src/cci/cas_cci.c:6342:0: style: The function 'cci_datasource_release' is never used. [unusedFunction]

^
src/cci/cas_cci.c:3260:0: style: The function 'cci_fetch_buffer_clear' is never used. [unusedFunction]

^
src/cci/cas_cci.c:2339:0: style: The function 'cci_fetch_sensitive' is never used. [unusedFunction]

^
src/cci/cas_cci.c:2305:0: style: The function 'cci_fetch_size' is never used. [unusedFunction]

^
src/cci/cas_cci.c:3466:0: style: The function 'cci_get_attr_type_str' is never used. [unusedFunction]

^
src/cci/cas_cci.c:6606:0: style: The function 'cci_get_cas_info' is never used. [unusedFunction]

^
src/cci/cas_cci.c:2840:0: style: The function 'cci_get_class_num_objs' is never used. [unusedFunction]

^
src/cci/cas_cci.c:4181:0: style: The function 'cci_get_dbms_type' is never used. [unusedFunction]

^
src/cci/cas_cci.c:2771:0: style: The function 'cci_get_holdability' is never used. [unusedFunction]

^
src/cci/cas_cci.c:3351:0: style: The function 'cci_get_login_timeout' is never used. [unusedFunction]

^
src/cci/cas_cci.c:3619:0: style: The function 'cci_get_param_info' is never used. [unusedFunction]

^
src/cci/cas_cci.c:3695:0: style: The function 'cci_get_query_timeout' is never used. [unusedFunction]

^
src/cci/cas_cci.c:4284:0: style: The function 'cci_get_shard_id_with_con_handle' is never used. [unusedFunction]

^
src/cci/cas_cci.c:6416:0: style: The function 'cci_get_shard_info' is never used. [unusedFunction]

^
src/cci/cas_cci.c:319:0: style: The function 'cci_get_version_string' is never used. [unusedFunction]

^
src/cci/cas_cci.c:1029:0: style: The function 'cci_is_holdable' is never used. [unusedFunction]

^
src/cci/cas_cci.c:1007:0: style: The function 'cci_is_updatable' is never used. [unusedFunction]

^
src/cci/cci_log.cpp:795:0: style: The function 'cci_log_add' is never used. [unusedFunction]

^
src/cci/cci_log.cpp:906:0: style: The function 'cci_log_change_max_file_size_appender' is never used. [unusedFunction]

^
src/cci/cci_log.cpp:805:0: style: The function 'cci_log_finalize' is never used. [unusedFunction]

^
src/cci/cci_log.cpp:841:0: style: The function 'cci_log_remove' is never used. [unusedFunction]

^
src/cci/cci_log.cpp:925:0: style: The function 'cci_log_set_default_postfix' is never used. [unusedFunction]

^
src/cci/cci_log.cpp:870:0: style: The function 'cci_log_set_force_flush' is never used. [unusedFunction]

^
src/cci/cci_log.cpp:882:0: style: The function 'cci_log_use_default_newline' is never used. [unusedFunction]

^
src/cci/cci_log.cpp:894:0: style: The function 'cci_log_use_default_prefix' is never used. [unusedFunction]

^
src/cci/cci_log.cpp:829:0: style: The function 'cci_log_write' is never used. [unusedFunction]

^
src/cci/cci_common.c:734:0: style: The function 'cci_mht_put' is never used. [unusedFunction]

^
src/cci/cas_cci.c:2592:0: style: The function 'cci_oid_put' is never used. [unusedFunction]

^
src/cci/cas_cci.c:3653:0: style: The function 'cci_param_info_free' is never used. [unusedFunction]

^
src/cci/cas_cci.c:1163:0: style: The function 'cci_register_out_param' is never used. [unusedFunction]

^
src/cci/cas_cci.c:4230:0: style: The function 'cci_row_count' is never used. [unusedFunction]

^
src/cci/cas_cci.c:3577:0: style: The function 'cci_savepoint' is never used. [unusedFunction]

^
src/cci/cas_cci.c:6385:0: style: The function 'cci_set_allocators' is never used. [unusedFunction]

^
src/cci/cas_cci.c:2091:0: style: The function 'cci_set_cas_change_mode' is never used. [unusedFunction]

^
src/cci/cas_cci.c:4198:0: style: The function 'cci_set_charset' is never used. [unusedFunction]

^
src/cci/cas_cci.c:2743:0: style: The function 'cci_set_holdability' is never used. [unusedFunction]

^
src/cci/cas_cci.c:3550:0: style: The function 'cci_set_max_row' is never used. [unusedFunction]

^
src/cci/cas_cci.c:3664:0: style: The function 'cci_set_query_timeout' is never used. [unusedFunction]

^
src/cci/cas_cci.c:6459:0: style: The function 'cci_shard_info_free' is never used. [unusedFunction]

^
src/cci/cas_cci.c:2460:0: style: The function 'cci_shard_schema_info' is never used. [unusedFunction]

^
src/broker/cas_dbms_util.c:72:0: style: The function 'cfg_get_dbinfo' is never used. [unusedFunction]

^
src/broker/cas_dbms_util.c:133:0: style: The function 'cfg_read_dbinfo' is never used. [unusedFunction]

^
src/base/databases_file.c:847:0: style: The function 'cfg_update_db' is never used. [unusedFunction]

^
src/executables/util_cs.c:2486:0: style: The function 'changemode' is never used. [unusedFunction]

^
src/base/chartype.c:134:0: style: The function 'char_isascii' is never used. [unusedFunction]

^
src/base/chartype.c:85:0: style: The function 'char_isxdigit' is never used. [unusedFunction]

^
src/loaddb/load_sa_loader.cpp:646:0: style: The function 'check_class' is never used. [unusedFunction]

^
src/executables/util_cs.c:2456:0: style: The function 'check_server_ha_mode' is never used. [unusedFunction]

^
src/query/string_regex.cpp:140:0: style: The function 'check_should_recompile' is never used. [unusedFunction]

^
src/base/tz_support.c:5041:0: style: The function 'check_timezone_compat' is never used. [unusedFunction]

^
src/thread/thread_waiter.cpp:102:0: style: The function 'check_wake' is never used. [unusedFunction]

^
src/executables/util_cs.c:621:0: style: The function 'checkdb' is never used. [unusedFunction]

^
src/executables/checksumdb.c:2068:0: style: The function 'checksumdb' is never used. [unusedFunction]

^
src/api/cubrid_api.c:1239:0: style: The function 'ci_batch_res_get_error' is never used. [unusedFunction]

^
src/api/cubrid_api.c:1209:0: style: The function 'ci_batch_res_get_result' is never used. [unusedFunction]

^
src/api/cubrid_api.c:1180:0: style: The function 'ci_batch_res_query_count' is never used. [unusedFunction]

^
src/api/cubrid_api.c:1625:0: style: The function 'ci_collection_delete' is never used. [unusedFunction]

^
src/api/cubrid_api.c:1502:0: style: The function 'ci_collection_free' is never used. [unusedFunction]

^
src/api/cubrid_api.c:1691:0: style: The function 'ci_collection_get' is never used. [unusedFunction]

^
src/api/cubrid_api.c:1657:0: style: The function 'ci_collection_get_elem_domain_info' is never used. [unusedFunction]

^
src/api/cubrid_api.c:1564:0: style: The function 'ci_collection_insert' is never used. [unusedFunction]

^
src/api/cubrid_api.c:1530:0: style: The function 'ci_collection_length' is never used. [unusedFunction]

^
src/api/cubrid_api.c:1477:0: style: The function 'ci_collection_new' is never used. [unusedFunction]

^
src/api/cubrid_api.c:1596:0: style: The function 'ci_collection_update' is never used. [unusedFunction]

^
src/api/cubrid_api.c:126:0: style: The function 'ci_conn_close' is never used. [unusedFunction]

^
src/api/cubrid_api.c:235:0: style: The function 'ci_conn_commit' is never used. [unusedFunction]

^
src/api/cubrid_api.c:101:0: style: The function 'ci_conn_connect' is never used. [unusedFunction]

^
src/api/cubrid_api.c:157:0: style: The function 'ci_conn_create_statement' is never used. [unusedFunction]

^
src/api/cubrid_api.c:278:0: style: The function 'ci_conn_get_error' is never used. [unusedFunction]

^
src/api/cubrid_api.c:209:0: style: The function 'ci_conn_get_option' is never used. [unusedFunction]

^
src/api/cubrid_api.c:255:0: style: The function 'ci_conn_rollback' is never used. [unusedFunction]

^
src/api/cubrid_api.c:180:0: style: The function 'ci_conn_set_option' is never used. [unusedFunction]

^
src/api/cubrid_api.c:85:0: style: The function 'ci_create_connection' is never used. [unusedFunction]

^
src/api/cubrid_api.c:1379:0: style: The function 'ci_oid_delete' is never used. [unusedFunction]

^
src/api/cubrid_api.c:1411:0: style: The function 'ci_oid_get_classname' is never used. [unusedFunction]

^
src/api/cubrid_api.c:1442:0: style: The function 'ci_oid_get_resultset' is never used. [unusedFunction]

^
src/api/cubrid_api.c:1266:0: style: The function 'ci_pmeta_get_count' is never used. [unusedFunction]

^
src/api/cubrid_api.c:1296:0: style: The function 'ci_pmeta_get_info' is never used. [unusedFunction]

^
src/api/cubrid_api.c:1139:0: style: The function 'ci_res_apply_row' is never used. [unusedFunction]

^
src/api/cubrid_api.c:1004:0: style: The function 'ci_res_clear_updates' is never used. [unusedFunction]

^
src/api/cubrid_api.c:1159:0: style: The function 'ci_res_close' is never used. [unusedFunction]

^
src/api/cubrid_api.c:1024:0: style: The function 'ci_res_delete_row' is never used. [unusedFunction]

^
src/api/cubrid_api.c:957:0: style: The function 'ci_res_fetch' is never used. [unusedFunction]

^
src/api/cubrid_api.c:978:0: style: The function 'ci_res_fetch_tell' is never used. [unusedFunction]

^
src/api/cubrid_api.c:923:0: style: The function 'ci_res_get_resultset_metadata' is never used. [unusedFunction]

^
src/api/cubrid_api.c:1050:0: style: The function 'ci_res_get_value' is never used. [unusedFunction]

^
src/api/cubrid_api.c:1082:0: style: The function 'ci_res_get_value_by_name' is never used. [unusedFunction]

^
src/api/cubrid_api.c:1113:0: style: The function 'ci_res_update_value' is never used. [unusedFunction]

^
src/api/cubrid_api.c:1323:0: style: The function 'ci_rmeta_get_count' is never used. [unusedFunction]

^
src/api/cubrid_api.c:1353:0: style: The function 'ci_rmeta_get_info' is never used. [unusedFunction]

^
src/api/cubrid_api.c:369:0: style: The function 'ci_stmt_add_batch' is never used. [unusedFunction]

^
src/api/cubrid_api.c:343:0: style: The function 'ci_stmt_add_batch_query' is never used. [unusedFunction]

^
src/api/cubrid_api.c:753:0: style: The function 'ci_stmt_affected_rows' is never used. [unusedFunction]

^
src/api/cubrid_api.c:389:0: style: The function 'ci_stmt_clear_batch' is never used. [unusedFunction]

^
src/api/cubrid_api.c:304:0: style: The function 'ci_stmt_close' is never used. [unusedFunction]

^
src/api/cubrid_api.c:442:0: style: The function 'ci_stmt_execute' is never used. [unusedFunction]

^
src/api/cubrid_api.c:469:0: style: The function 'ci_stmt_execute_batch' is never used. [unusedFunction]

^
src/api/cubrid_api.c:413:0: style: The function 'ci_stmt_execute_immediate' is never used. [unusedFunction]

^
src/api/cubrid_api.c:865:0: style: The function 'ci_stmt_get_first_error' is never used. [unusedFunction]

^
src/api/cubrid_api.c:896:0: style: The function 'ci_stmt_get_next_error' is never used. [unusedFunction]

^
src/api/cubrid_api.c:498:0: style: The function 'ci_stmt_get_option' is never used. [unusedFunction]

^
src/api/cubrid_api.c:668:0: style: The function 'ci_stmt_get_parameter' is never used. [unusedFunction]

^
src/api/cubrid_api.c:636:0: style: The function 'ci_stmt_get_parameter_metadata' is never used. [unusedFunction]

^
src/api/cubrid_api.c:780:0: style: The function 'ci_stmt_get_query_type' is never used. [unusedFunction]

^
src/api/cubrid_api.c:726:0: style: The function 'ci_stmt_get_resultset' is never used. [unusedFunction]

^
src/api/cubrid_api.c:609:0: style: The function 'ci_stmt_get_resultset_metadata' is never used. [unusedFunction]

^
src/api/cubrid_api.c:807:0: style: The function 'ci_stmt_get_start_line' is never used. [unusedFunction]

^
src/api/cubrid_api.c:834:0: style: The function 'ci_stmt_next_result' is never used. [unusedFunction]

^
src/api/cubrid_api.c:555:0: style: The function 'ci_stmt_prepare' is never used. [unusedFunction]

^
src/api/cubrid_api.c:582:0: style: The function 'ci_stmt_register_out_parameter' is never used. [unusedFunction]

^
src/api/cubrid_api.c:527:0: style: The function 'ci_stmt_set_option' is never used. [unusedFunction]

^
src/api/cubrid_api.c:699:0: style: The function 'ci_stmt_set_parameter' is never used. [unusedFunction]

^
src/thread/thread_entry.cpp:389:0: style: The function 'claim_system_worker' is never used. [unusedFunction]

^
src/base/error_context.cpp:270:0: style: The function 'clear_current_error_level' is never used. [unusedFunction]

^
src/query/scan_json_table.cpp:404:0: style: The function 'clear_node_columns' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:4974:0: style: The function 'clogin_user' is never used. [unusedFunction]

^
src/cm_common/cm_broker_admin.c:101:0: style: The function 'cm_broker_as_restart' is never used. [unusedFunction]

^
src/cm_common/cm_broker_admin.c:321:0: style: The function 'cm_broker_conf_free' is never used. [unusedFunction]

^
src/cm_common/cm_broker_admin.c:75:0: style: The function 'cm_broker_env_start' is never used. [unusedFunction]

^
src/cm_common/cm_broker_admin.c:87:0: style: The function 'cm_broker_env_stop' is never used. [unusedFunction]

^
src/cm_common/cm_broker_admin.c:130:0: style: The function 'cm_broker_off' is never used. [unusedFunction]

^
src/cm_common/cm_broker_admin.c:115:0: style: The function 'cm_broker_on' is never used. [unusedFunction]

^
src/cm_common/cm_broker_admin.c:360:0: style: The function 'cm_conf_find_broker' is never used. [unusedFunction]

^
src/cm_common/cm_broker_admin.c:348:0: style: The function 'cm_cpu_time_str' is never used. [unusedFunction]

^
src/cm_common/cm_mem_cpu_stat.c:131:0: style: The function 'cm_db_proc_stat_all_free' is never used. [unusedFunction]

^
src/cm_common/cm_broker_admin.c:334:0: style: The function 'cm_del_cas_log' is never used. [unusedFunction]

^
src/cm_common/cm_broker_admin.c:296:0: style: The function 'cm_get_broker_conf' is never used. [unusedFunction]

^
src/cm_common/cm_broker_admin.c:549:0: style: The function 'cm_get_broker_file' is never used. [unusedFunction]

^
src/cm_common/cm_mem_cpu_stat.c:192:0: style: The function 'cm_get_broker_proc_stat' is never used. [unusedFunction]

^
src/cm_common/cm_mem_cpu_stat.c:272:0: style: The function 'cm_get_broker_proc_stat_all' is never used. [unusedFunction]

^
src/cm_common/cm_mem_cpu_stat.c:957:0: style: The function 'cm_get_db_exec_stat' is never used. [unusedFunction]

^
src/cm_common/cm_mem_cpu_stat.c:73:0: style: The function 'cm_get_db_proc_stat' is never used. [unusedFunction]

^
src/cm_common/cm_mem_cpu_stat.c:112:0: style: The function 'cm_get_db_proc_stat_all' is never used. [unusedFunction]

^
src/cm_common/cm_dep_tasks.c:265:0: style: The function 'cm_get_diag_data' is never used. [unusedFunction]

^
src/cm_common/cm_mem_cpu_stat.c:937:0: style: The function 'cm_get_host_disk_partition_stat' is never used. [unusedFunction]

^
src/cm_common/cm_mem_cpu_stat.c:825:0: style: The function 'cm_get_host_stat' is never used. [unusedFunction]

^
src/cm_common/cm_dep_tasks.c:381:0: style: The function 'cm_tsDBMTUserLogin' is never used. [unusedFunction]

^
src/cm_common/cm_dep_tasks.c:621:0: style: The function 'cm_ts_class' is never used. [unusedFunction]

^
src/cm_common/cm_dep_tasks.c:563:0: style: The function 'cm_ts_class_info' is never used. [unusedFunction]

^
src/cm_common/cm_dep_tasks.c:1168:0: style: The function 'cm_ts_create_user' is never used. [unusedFunction]

^
src/cm_common/cm_dep_tasks.c:333:0: style: The function 'cm_ts_delete_user' is never used. [unusedFunction]

^
src/cm_common/cm_dep_tasks.c:673:0: style: The function 'cm_ts_get_triggerinfo' is never used. [unusedFunction]

^
src/cm_common/cm_dep_tasks.c:481:0: style: The function 'cm_ts_optimizedb' is never used. [unusedFunction]

^
src/cm_common/cm_dep_tasks.c:745:0: style: The function 'cm_ts_update_attribute' is never used. [unusedFunction]

^
src/cm_common/cm_dep_tasks.c:940:0: style: The function 'cm_ts_update_user' is never used. [unusedFunction]

^
src/cm_common/cm_dep_tasks.c:1297:0: style: The function 'cm_ts_userinfo' is never used. [unusedFunction]

^
src/cm_common/cm_utils.c:748:0: style: The function 'cm_util_log_write_command' is never used. [unusedFunction]

^
src/cm_common/cm_utils.c:722:0: style: The function 'cm_util_log_write_errid' is never used. [unusedFunction]

^
src/cm_common/cm_utils.c:735:0: style: The function 'cm_util_log_write_errstr' is never used. [unusedFunction]

^
src/cm_common/cm_utils.c:716:0: style: The function 'cm_util_log_write_result' is never used. [unusedFunction]

^
src/compat/cnv.c:8687:0: style: The function 'cnv_cleanup' is never used. [unusedFunction]

^
src/compat/cnv.c:2553:0: style: The function 'cnv_valid_timestamp' is never used. [unusedFunction]

^
src/base/condition_handler.c:411:0: style: The function 'co_final' is never used. [unusedFunction]

^
src/base/condition_handler.c:387:0: style: The function 'co_put_detail' is never used. [unusedFunction]

^
src/base/condition_handler.c:187:0: style: The function 'co_report' is never used. [unusedFunction]

^
src/executables/compactdb.c:98:0: style: The function 'compactdb' is never used. [unusedFunction]

^
src/query/string_regex.cpp:160:0: style: The function 'compile' is never used. [unusedFunction]

^
src/transaction/mvcc_table.cpp:466:0: style: The function 'complete_mvcc' is never used. [unusedFunction]

^
src/transaction/mvcc_table.cpp:542:0: style: The function 'complete_sub_mvcc' is never used. [unusedFunction]

^
src/storage/btree_unique.cpp:144:0: style: The function 'construct' is never used. [unusedFunction]

^
src/base/tz_support.c:5207:0: style: The function 'conv_tz' is never used. [unusedFunction]

^
src/compat/db_vdb.c:2052:0: style: The function 'copy_execution_values' is never used. [unusedFunction]

^
src/executables/util_sa.c:1236:0: style: The function 'copydb' is never used. [unusedFunction]

^
src/executables/util_cs.c:2633:0: style: The function 'copylogdb' is never used. [unusedFunction]

^
src/base/perf.cpp:137:0: style: The function 'create_atomic_statset' is never used. [unusedFunction]

^
src/base/process_util.c:41:0: style: The function 'create_child_process' is never used. [unusedFunction]

^
src/thread/thread_manager.cpp:206:0: style: The function 'create_daemon_without_entry' is never used. [unusedFunction]

^
src/executables/util_sa.c:303:0: style: The function 'createdb' is never used. [unusedFunction]

^
src/base/encryption.c:91:0: style: The function 'crypt_encrypt_printable' is never used. [unusedFunction]

^
src/base/encryption.c:200:0: style: The function 'crypt_encrypt_sha1_printable' is never used. [unusedFunction]

^
src/base/encryption.c:62:0: style: The function 'crypt_seed' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:4451:0: style: The function 'csession_set_row_count' is never used. [unusedFunction]

^
src/connection/connection_list_sr.c:206:0: style: The function 'css_add_list_to_head' is never used. [unusedFunction]

^
src/connection/connection_support.c:2220:0: style: The function 'css_check_ip' is never used. [unusedFunction]

^
src/connection/tcp.c:1242:0: style: The function 'css_close_server_connection_socket' is never used. [unusedFunction]

^
src/connection/connection_sr.c:634:0: style: The function 'css_dealloc_conn_rmutex' is never used. [unusedFunction]

^
src/connection/tcp.c:1296:0: style: The function 'css_fd_down' is never used. [unusedFunction]

^
src/connection/connection_sr.c:519:0: style: The function 'css_final_conn_list' is never used. [unusedFunction]

^
src/connection/connection_sr.c:1207:0: style: The function 'css_find_conn_by_tran_index' is never used. [unusedFunction]

^
src/connection/connection_sr.c:3079:0: style: The function 'css_free_user_access_status' is never used. [unusedFunction]

^
src/connection/connection_sr.c:668:0: style: The function 'css_get_num_free_conn' is never used. [unusedFunction]

^
src/connection/connection_sr.c:1267:0: style: The function 'css_get_session_ids_for_active_connections' is never used. [unusedFunction]

^
src/connection/wintcp.c:73:0: style: The function 'css_get_wsa_error' is never used. [unusedFunction]

^
src/connection/tcp.c:1209:0: style: The function 'css_gethostid' is never used. [unusedFunction]

^
src/connection/connection_support.c:2169:0: style: The function 'css_ha_applier_state_string' is never used. [unusedFunction]

^
src/connection/connection_support.c:2193:0: style: The function 'css_ha_mode_string' is never used. [unusedFunction]

^
src/connection/tcp.c:227:0: style: The function 'css_hostname_to_ip' is never used. [unusedFunction]

^
src/connection/connection_sr.c:811:0: style: The function 'css_increment_num_conn' is never used. [unusedFunction]

^
src/connection/connection_sr.c:422:0: style: The function 'css_init_conn_list' is never used. [unusedFunction]

^
src/connection/connection_sr.c:608:0: style: The function 'css_insert_into_active_conn_list' is never used. [unusedFunction]

^
src/connection/connection_list_sr.c:148:0: style: The function 'css_list_isempty' is never used. [unusedFunction]

^
src/connection/connection_support.c:2070:0: style: The function 'css_local_host_name' is never used. [unusedFunction]

^
src/connection/connection_support.c:1453:0: style: The function 'css_net_send_buffer_only' is never used. [unusedFunction]

^
src/connection/connection_support.c:1397:0: style: The function 'css_net_send_large_data_with_arg' is never used. [unusedFunction]

^
src/connection/connection_support.c:282:0: style: The function 'css_net_send_no_block' is never used. [unusedFunction]

^
src/connection/tcp.c:1059:0: style: The function 'css_open_new_socket_from_master' is never used. [unusedFunction]

^
src/connection/connection_support.c:2094:0: style: The function 'css_peer_host_name' is never used. [unusedFunction]

^
src/connection/tcp.c:1374:0: style: The function 'css_ping' is never used. [unusedFunction]

^
src/connection/connection_sr.c:935:0: style: The function 'css_print_conn_list' is never used. [unusedFunction]

^
src/connection/connection_sr.c:963:0: style: The function 'css_print_free_conn_list' is never used. [unusedFunction]

^
src/connection/connection_sr.c:1528:0: style: The function 'css_read_and_queue' is never used. [unusedFunction]

^
src/connection/connection_support.c:2257:0: style: The function 'css_read_ip_info' is never used. [unusedFunction]

^
src/connection/client_support.c:603:0: style: The function 'css_receive_error_from_server' is never used. [unusedFunction]

^
src/connection/connection_sr.c:1016:0: style: The function 'css_register_handler_routines' is never used. [unusedFunction]

^
src/connection/connection_list_sr.c:265:0: style: The function 'css_remove_list' is never used. [unusedFunction]

^
src/connection/connection_less.c:274:0: style: The function 'css_return_eid_from_conn' is never used. [unusedFunction]

^
src/executables/master.c:1424:0: style: The function 'css_return_entry_by_conn' is never used. [unusedFunction]

^
src/connection/connection_sr.c:1445:0: style: The function 'css_send_abort_request' is never used. [unusedFunction]

^
src/connection/connection_support.c:1958:0: style: The function 'css_send_four_data' is never used. [unusedFunction]

^
src/connection/connection_support.c:2001:0: style: The function 'css_send_large_data' is never used. [unusedFunction]

^
src/connection/connection_support.c:1810:0: style: The function 'css_send_request_with_socket' is never used. [unusedFunction]

^
src/executables/master_request.c:607:0: style: The function 'css_send_term_signal' is never used. [unusedFunction]

^
src/connection/connection_support.c:1916:0: style: The function 'css_send_three_data' is never used. [unusedFunction]

^
src/connection/connection_support.c:1882:0: style: The function 'css_send_two_data' is never used. [unusedFunction]

^
src/connection/tcp.c:1256:0: style: The function 'css_server_accept' is never used. [unusedFunction]

^
src/connection/connection_sr.c:3004:0: style: The function 'css_set_user_access_status' is never used. [unusedFunction]

^
src/connection/connection_sr.c:1333:0: style: The function 'css_shutdown_conn_by_tran_index' is never used. [unusedFunction]

^
src/connection/connection_support.c:2538:0: style: The function 'css_user_access_status_start_scan' is never used. [unusedFunction]

^
src/connection/wintcp.c:84:0: style: The function 'css_windows_blocking_hook' is never used. [unusedFunction]

^
contrib/cubmemc/wraplib/libcubmemc.c:1364:0: style: The function 'cubmemc_add' is never used. [unusedFunction]

^
contrib/cubmemc/wraplib/libcubmemc.c:1392:0: style: The function 'cubmemc_append' is never used. [unusedFunction]

^
contrib/cubmemc/wraplib/libcubmemc.c:1538:0: style: The function 'cubmemc_decrement' is never used. [unusedFunction]

^
contrib/cubmemc/wraplib/libcubmemc.c:1303:0: style: The function 'cubmemc_delete' is never used. [unusedFunction]

^
contrib/cubmemc/wraplib/libcubmemc.c:1138:0: style: The function 'cubmemc_get_binary' is never used. [unusedFunction]

^
contrib/cubmemc/wraplib/libcubmemc.c:1131:0: style: The function 'cubmemc_get_string' is never used. [unusedFunction]

^
contrib/cubmemc/wraplib/libcubmemc.c:1525:0: style: The function 'cubmemc_increment' is never used. [unusedFunction]

^
contrib/cubmemc/wraplib/libcubmemc.c:1406:0: style: The function 'cubmemc_prepend' is never used. [unusedFunction]

^
contrib/cubmemc/wraplib/libcubmemc.c:1378:0: style: The function 'cubmemc_replace' is never used. [unusedFunction]

^
contrib/cubmemc/wraplib/libcubmemc.c:1284:0: style: The function 'cubmemc_set' is never used. [unusedFunction]

^
contrib/cubmemc/wraplib/libcubmemc.c:849:0: style: The function 'cubmemc_strerror' is never used. [unusedFunction]

^
contrib/perl/dbdimp.c:992:0: style: The function 'cubrid_bind_ph' is never used. [unusedFunction]

^
contrib/perl/dbdimp.c:441:0: style: The function 'cubrid_db_FETCH_attrib' is never used. [unusedFunction]

^
contrib/perl/dbdimp.c:401:0: style: The function 'cubrid_db_STORE_attrib' is never used. [unusedFunction]

^
contrib/perl/dbdimp.c:309:0: style: The function 'cubrid_db_commit' is never used. [unusedFunction]

^
contrib/perl/dbdimp.c:347:0: style: The function 'cubrid_db_destroy' is never used. [unusedFunction]

^
contrib/perl/dbdimp.c:476:0: style: The function 'cubrid_db_last_insert_id' is never used. [unusedFunction]

^
contrib/perl/dbdimp.c:270:0: style: The function 'cubrid_db_login6' is never used. [unusedFunction]

^
contrib/perl/dbdimp.c:527:0: style: The function 'cubrid_db_ping' is never used. [unusedFunction]

^
contrib/perl/dbdimp.c:1095:0: style: The function 'cubrid_db_quote' is never used. [unusedFunction]

^
contrib/perl/dbdimp.c:315:0: style: The function 'cubrid_db_rollback' is never used. [unusedFunction]

^
contrib/perl/dbdimp.c:127:0: style: The function 'cubrid_init' is never used. [unusedFunction]

^
contrib/perl/dbdimp.c:850:0: style: The function 'cubrid_st_FETCH_attrib' is never used. [unusedFunction]

^
contrib/perl/dbdimp.c:830:0: style: The function 'cubrid_st_STORE_attrib' is never used. [unusedFunction]

^
contrib/perl/dbdimp.c:937:0: style: The function 'cubrid_st_blob_read' is never used. [unusedFunction]

^
contrib/perl/dbdimp.c:788:0: style: The function 'cubrid_st_destroy' is never used. [unusedFunction]

^
contrib/perl/dbdimp.c:641:0: style: The function 'cubrid_st_execute' is never used. [unusedFunction]

^
contrib/perl/dbdimp.c:708:0: style: The function 'cubrid_st_fetch' is never used. [unusedFunction]

^
contrib/perl/dbdimp.c:764:0: style: The function 'cubrid_st_finish' is never used. [unusedFunction]

^
contrib/perl/dbdimp.c:1395:0: style: The function 'cubrid_st_lob_close' is never used. [unusedFunction]

^
contrib/perl/dbdimp.c:1185:0: style: The function 'cubrid_st_lob_export' is never used. [unusedFunction]

^
contrib/perl/dbdimp.c:1150:0: style: The function 'cubrid_st_lob_get' is never used. [unusedFunction]

^
contrib/perl/dbdimp.c:1306:0: style: The function 'cubrid_st_lob_import' is never used. [unusedFunction]

^
contrib/perl/dbdimp.c:595:0: style: The function 'cubrid_st_prepare' is never used. [unusedFunction]

^
contrib/perl/dbdimp.c:966:0: style: The function 'cubrid_st_rows' is never used. [unusedFunction]

^
src/compat/db_class.c:988:0: style: The function 'db_add_argument' is never used. [unusedFunction]

^
src/compat/db_class.c:248:0: style: The function 'db_add_attribute' is never used. [unusedFunction]

^
src/compat/db_class.c:288:0: style: The function 'db_add_class_attribute' is never used. [unusedFunction]

^
src/compat/db_class.c:819:0: style: The function 'db_add_class_method' is never used. [unusedFunction]

^
src/compat/db_class.c:1581:0: style: The function 'db_add_class_resolution' is never used. [unusedFunction]

^
src/compat/db_class.c:490:0: style: The function 'db_add_element_domain' is never used. [unusedFunction]

^
src/compat/db_class.c:797:0: style: The function 'db_add_method' is never used. [unusedFunction]

^
src/compat/db_class.c:1127:0: style: The function 'db_add_method_file' is never used. [unusedFunction]

^
src/compat/db_virt.c:458:0: style: The function 'db_add_query_spec' is never used. [unusedFunction]

^
src/compat/db_class.c:1534:0: style: The function 'db_add_resolution' is never used. [unusedFunction]

^
src/compat/db_class.c:1049:0: style: The function 'db_add_set_argument_domain' is never used. [unusedFunction]

^
src/compat/db_class.c:268:0: style: The function 'db_add_shared_attribute' is never used. [unusedFunction]

^
src/compat/db_class.c:1267:0: style: The function 'db_add_super' is never used. [unusedFunction]

^
src/compat/db_admin.c:314:0: style: The function 'db_add_volume' is never used. [unusedFunction]

^
src/compat/db_date.c:5009:0: style: The function 'db_add_weeks_and_days_to_date' is never used. [unusedFunction]

^
src/compat/db_obj.c:1438:0: style: The function 'db_alter_trigger_priority' is never used. [unusedFunction]

^
src/compat/db_obj.c:1462:0: style: The function 'db_alter_trigger_status' is never used. [unusedFunction]

^
src/compat/db_info.c:1083:0: style: The function 'db_attribute_comment' is never used. [unusedFunction]

^
src/compat/db_info.c:1282:0: style: The function 'db_attribute_is_foreign_key' is never used. [unusedFunction]

^
src/compat/db_info.c:1402:0: style: The function 'db_attribute_is_reverse_indexed' is never used. [unusedFunction]

^
src/compat/db_info.c:1102:0: style: The function 'db_attribute_length' is never used. [unusedFunction]

^
src/compat/db_info.c:1047:0: style: The function 'db_attribute_ordered_next' is never used. [unusedFunction]

^
src/compat/db_vdb.c:3799:0: style: The function 'db_bind_parameter_name' is never used. [unusedFunction]

^
src/compat/db_class.c:871:0: style: The function 'db_change_method_implementation' is never used. [unusedFunction]

^
src/compat/db_virt.c:558:0: style: The function 'db_change_query_spec' is never used. [unusedFunction]

^
src/compat/db_admin.c:1872:0: style: The function 'db_check_authorization_and_grant_option' is never used. [unusedFunction]

^
src/compat/db_date.c:4914:0: style: The function 'db_check_time_date_format' is never used. [unusedFunction]

^
src/compat/db_admin.c:2660:0: style: The function 'db_chn' is never used. [unusedFunction]

^
src/compat/db_query.c:1208:0: style: The function 'db_clear_client_query_result' is never used. [unusedFunction]

^
src/compat/db_admin.c:546:0: style: The function 'db_clear_delayed_hosts_count' is never used. [unusedFunction]

^
src/compat/db_admin.c:580:0: style: The function 'db_clear_host_status' is never used. [unusedFunction]

^
src/compat/db_set.c:1057:0: style: The function 'db_col_add' is never used. [unusedFunction]

^
src/compat/db_set.c:1192:0: style: The function 'db_col_cardinality' is never used. [unusedFunction]

^
src/compat/db_set.c:975:0: style: The function 'db_col_copy' is never used. [unusedFunction]

^
src/compat/db_set.c:1421:0: style: The function 'db_col_domain' is never used. [unusedFunction]

^
src/compat/db_set.c:1084:0: style: The function 'db_col_drop' is never used. [unusedFunction]

^
src/compat/db_set.c:1112:0: style: The function 'db_col_drop_element' is never used. [unusedFunction]

^
src/compat/db_set.c:1139:0: style: The function 'db_col_drop_nulls' is never used. [unusedFunction]

^
src/compat/db_set.c:1024:0: style: The function 'db_col_filter' is never used. [unusedFunction]

^
src/compat/db_set.c:1367:0: style: The function 'db_col_find' is never used. [unusedFunction]

^
src/compat/db_set.c:1289:0: style: The function 'db_col_insert' is never used. [unusedFunction]

^
src/compat/db_set.c:1327:0: style: The function 'db_col_ismember' is never used. [unusedFunction]

^
src/compat/db_set.c:1478:0: style: The function 'db_col_optimize' is never used. [unusedFunction]

^
src/compat/db_set.c:1466:0: style: The function 'db_col_print' is never used. [unusedFunction]

^
src/compat/db_obj.c:171:0: style: The function 'db_copy' is never used. [unusedFunction]

^
src/compat/db_query.c:1114:0: style: The function 'db_cp_colname_list' is never used. [unusedFunction]

^
src/compat/db_query.c:1164:0: style: The function 'db_cp_domain_list' is never used. [unusedFunction]

^
src/compat/db_obj.c:69:0: style: The function 'db_create' is never used. [unusedFunction]

^
src/compat/db_obj.c:115:0: style: The function 'db_create_by_name' is never used. [unusedFunction]

^
src/compat/db_class.c:70:0: style: The function 'db_create_class' is never used. [unusedFunction]

^
src/compat/db_elo.c:47:0: style: The function 'db_create_fbo' is never used. [unusedFunction]

^
src/compat/db_obj.c:1301:0: style: The function 'db_create_trigger' is never used. [unusedFunction]

^
src/compat/db_virt.c:140:0: style: The function 'db_create_vclass' is never used. [unusedFunction]

^
src/compat/db_date.c:3481:0: style: The function 'db_date_parse_date' is never used. [unusedFunction]

^
src/compat/db_date.c:2933:0: style: The function 'db_date_parse_time' is never used. [unusedFunction]

^
src/compat/db_date.c:3438:0: style: The function 'db_date_parse_timestamp' is never used. [unusedFunction]

^
src/compat/db_date.c:4375:0: style: The function 'db_datetime_to_string2' is never used. [unusedFunction]

^
src/compat/db_obj.c:1805:0: style: The function 'db_decode_object' is never used. [unusedFunction]

^
src/object/quick_fit.c:58:0: style: The function 'db_destroy_workspace_heap' is never used. [unusedFunction]

^
src/compat/db_obj.c:1224:0: style: The function 'db_dfind_multi_unique' is never used. [unusedFunction]

^
src/compat/db_obj.c:1200:0: style: The function 'db_dfind_unique' is never used. [unusedFunction]

^
src/compat/db_admin.c:1001:0: style: The function 'db_disable_modification' is never used. [unusedFunction]

^
src/compat/db_obj.c:908:0: style: The function 'db_dput' is never used. [unusedFunction]

^
src/compat/db_vdb.c:3204:0: style: The function 'db_drop_all_statements' is never used. [unusedFunction]

^
src/compat/db_class.c:354:0: style: The function 'db_drop_attribute' is never used. [unusedFunction]

^
src/compat/db_class.c:110:0: style: The function 'db_drop_class' is never used. [unusedFunction]

^
src/compat/db_class.c:421:0: style: The function 'db_drop_class_attribute' is never used. [unusedFunction]

^
src/compat/db_class.c:852:0: style: The function 'db_drop_class_method' is never used. [unusedFunction]

^
src/compat/db_class.c:1668:0: style: The function 'db_drop_class_resolution' is never used. [unusedFunction]

^
src/compat/db_obj.c:1527:0: style: The function 'db_drop_deferred_activities' is never used. [unusedFunction]

^
src/compat/db_class.c:559:0: style: The function 'db_drop_element_domain' is never used. [unusedFunction]

^
src/compat/db_class.c:835:0: style: The function 'db_drop_method' is never used. [unusedFunction]

^
src/compat/db_class.c:1174:0: style: The function 'db_drop_method_file' is never used. [unusedFunction]

^
src/compat/db_class.c:1218:0: style: The function 'db_drop_method_files' is never used. [unusedFunction]

^
src/compat/db_virt.c:507:0: style: The function 'db_drop_query_spec' is never used. [unusedFunction]

^
src/compat/db_class.c:1625:0: style: The function 'db_drop_resolution' is never used. [unusedFunction]

^
src/compat/db_class.c:404:0: style: The function 'db_drop_shared_attribute' is never used. [unusedFunction]

^
src/compat/db_class.c:1346:0: style: The function 'db_drop_super' is never used. [unusedFunction]

^
src/compat/db_class.c:1399:0: style: The function 'db_drop_super_connect' is never used. [unusedFunction]

^
src/compat/db_obj.c:1325:0: style: The function 'db_drop_trigger' is never used. [unusedFunction]

^
src/compat/db_obj.c:999:0: style: The function 'db_dsend' is never used. [unusedFunction]

^
src/compat/db_obj.c:1042:0: style: The function 'db_dsend_argarray' is never used. [unusedFunction]

^
src/compat/db_obj.c:1022:0: style: The function 'db_dsend_arglist' is never used. [unusedFunction]

^
src/compat/db_obj.c:1067:0: style: The function 'db_dsend_quick' is never used. [unusedFunction]

^
src/compat/db_query.c:1064:0: style: The function 'db_dump_query_result' is never used. [unusedFunction]

^
src/compat/db_elo.c:102:0: style: The function 'db_elo_copy' is never used. [unusedFunction]

^
src/compat/db_elo.c:74:0: style: The function 'db_elo_copy_structure' is never used. [unusedFunction]

^
src/compat/db_elo.c:87:0: style: The function 'db_elo_free_structure' is never used. [unusedFunction]

^
src/compat/db_elo.c:145:0: style: The function 'db_elo_read' is never used. [unusedFunction]

^
src/compat/db_elo.c:128:0: style: The function 'db_elo_size' is never used. [unusedFunction]

^
src/compat/db_elo.c:177:0: style: The function 'db_elo_write' is never used. [unusedFunction]

^
src/compat/db_admin.c:1015:0: style: The function 'db_enable_modification' is never used. [unusedFunction]

^
src/compat/db_admin.c:558:0: style: The function 'db_enable_trigger' is never used. [unusedFunction]

^
src/compat/db_obj.c:1787:0: style: The function 'db_encode_object' is never used. [unusedFunction]

^
src/compat/db_admin.c:2123:0: style: The function 'db_error_code_test' is never used. [unusedFunction]

^
src/compat/db_admin.c:2164:0: style: The function 'db_error_init' is never used. [unusedFunction]

^
src/compat/db_admin.c:2089:0: style: The function 'db_error_string_test' is never used. [unusedFunction]

^
src/compat/db_obj.c:1496:0: style: The function 'db_execute_deferred_activities' is never used. [unusedFunction]

^
src/compat/db_query.c:1852:0: style: The function 'db_execute_oid' is never used. [unusedFunction]

^
src/compat/db_info.c:178:0: style: The function 'db_fetch_all_objects' is never used. [unusedFunction]

^
src/compat/db_info.c:223:0: style: The function 'db_fetch_base_classes' is never used. [unusedFunction]

^
src/compat/db_admin.c:2407:0: style: The function 'db_fetch_composition' is never used. [unusedFunction]

^
src/compat/db_admin.c:2254:0: style: The function 'db_fetch_list' is never used. [unusedFunction]

^
src/compat/db_admin.c:2388:0: style: The function 'db_fetch_seq' is never used. [unusedFunction]

^
src/compat/db_info.c:74:0: style: The function 'db_find_class_of_index' is never used. [unusedFunction]

^
src/compat/db_info.c:153:0: style: The function 'db_find_class_with_purpose' is never used. [unusedFunction]

^
src/compat/db_obj.c:1421:0: style: The function 'db_find_event_triggers' is never used. [unusedFunction]

^
src/compat/db_obj.c:1169:0: style: The function 'db_find_multi_unique' is never used. [unusedFunction]

^
src/compat/db_admin.c:2885:0: style: The function 'db_find_or_create_session' is never used. [unusedFunction]

^
src/compat/db_obj.c:1138:0: style: The function 'db_find_primary_key' is never used. [unusedFunction]

^
src/compat/db_obj.c:1370:0: style: The function 'db_find_trigger' is never used. [unusedFunction]

^
src/compat/db_obj.c:1115:0: style: The function 'db_find_unique_write_mode' is never used. [unusedFunction]

^
src/base/fixed_alloc.c:109:0: style: The function 'db_fixed_free' is never used. [unusedFunction]

^
src/compat/db_admin.c:2564:0: style: The function 'db_flush_static_methods' is never used. [unusedFunction]

^
src/compat/db_admin.c:2579:0: style: The function 'db_force_method_reload' is never used. [unusedFunction]

^
src/compat/db_obj.c:1268:0: style: The function 'db_fprint' is never used. [unusedFunction]

^
src/compat/db_value_printer.cpp:586:0: style: The function 'db_fprint_value' is never used. [unusedFunction]

^
src/compat/db_obj.c:875:0: style: The function 'db_free_method_descriptor' is never used. [unusedFunction]

^
src/compat/db_admin.c:2054:0: style: The function 'db_freepgs' is never used. [unusedFunction]

^
src/compat/db_vdb.c:3409:0: style: The function 'db_get_all_vclasses' is never used. [unusedFunction]

^
src/compat/db_vdb.c:3398:0: style: The function 'db_get_all_vclasses_on_ldb' is never used. [unusedFunction]

^
src/compat/db_old.c:675:0: style: The function 'db_get_attribute_class' is never used. [unusedFunction]

^
src/compat/db_old.c:615:0: style: The function 'db_get_attribute_domain' is never used. [unusedFunction]

^
src/compat/db_old.c:257:0: style: The function 'db_get_attribute_names' is never used. [unusedFunction]

^
src/compat/db_info.c:284:0: style: The function 'db_get_base_classes' is never used. [unusedFunction]

^
src/compat/db_info.c:2365:0: style: The function 'db_get_btree_statistics' is never used. [unusedFunction]

^
src/compat/db_vdb.c:864:0: style: The function 'db_get_cacheinfo' is never used. [unusedFunction]

^
src/compat/db_old.c:331:0: style: The function 'db_get_class_attribute_names' is never used. [unusedFunction]

^
src/compat/db_old.c:431:0: style: The function 'db_get_class_method_names' is never used. [unusedFunction]

^
src/compat/db_info.c:2311:0: style: The function 'db_get_class_num_objs_and_pages' is never used. [unusedFunction]

^
src/compat/db_info.c:2346:0: style: The function 'db_get_class_privilege' is never used. [unusedFunction]

^
src/compat/db_admin.c:471:0: style: The function 'db_get_database_comments' is never used. [unusedFunction]

^
src/compat/db_admin.c:455:0: style: The function 'db_get_database_version' is never used. [unusedFunction]

^
src/compat/db_admin.c:540:0: style: The function 'db_get_delayed_hosts_count' is never used. [unusedFunction]

^
src/compat/db_obj.c:296:0: style: The function 'db_get_expression' is never used. [unusedFunction]

^
src/compat/db_admin.c:776:0: style: The function 'db_get_host_list_with_given_status' is never used. [unusedFunction]

^
src/compat/db_vdb.c:1548:0: style: The function 'db_get_hostvars' is never used. [unusedFunction]

^
src/compat/db_vdb.c:830:0: style: The function 'db_get_jdbccachehint' is never used. [unusedFunction]

^
src/compat/db_admin.c:1058:0: style: The function 'db_get_last_insert_id' is never used. [unusedFunction]

^
src/compat/db_vdb.c:1081:0: style: The function 'db_get_line_col_of_1st_error' is never used. [unusedFunction]

^
src/compat/db_vdb.c:4222:0: style: The function 'db_get_line_of_statement' is never used. [unusedFunction]

^
src/compat/db_info.c:2239:0: style: The function 'db_get_loader_commands' is never used. [unusedFunction]

^
src/compat/db_vdb.c:1559:0: style: The function 'db_get_lock_classes' is never used. [unusedFunction]

^
src/compat/db_admin.c:534:0: style: The function 'db_get_max_num_delayed_hosts_lookup' is never used. [unusedFunction]

^
src/compat/db_obj.c:857:0: style: The function 'db_get_method_descriptor' is never used. [unusedFunction]

^
src/compat/db_old.c:548:0: style: The function 'db_get_method_file_names' is never used. [unusedFunction]

^
src/compat/db_old.c:582:0: style: The function 'db_get_method_function' is never used. [unusedFunction]

^
src/compat/db_old.c:398:0: style: The function 'db_get_method_names' is never used. [unusedFunction]

^
src/compat/db_old.c:761:0: style: The function 'db_get_method_source_file' is never used. [unusedFunction]

^
src/compat/db_vdb.c:999:0: style: The function 'db_get_next_warning' is never used. [unusedFunction]

^
src/compat/db_virt.c:669:0: style: The function 'db_get_object_id' is never used. [unusedFunction]

^
src/compat/db_query.c:1897:0: style: The function 'db_get_objfetch_query_result' is never used. [unusedFunction]

^
src/compat/db_old.c:366:0: style: The function 'db_get_ordered_attribute_names' is never used. [unusedFunction]

^
src/compat/db_info.c:971:0: style: The function 'db_get_ordered_attributes' is never used. [unusedFunction]

^
src/compat/db_vdb.c:1195:0: style: The function 'db_get_output_markers' is never used. [unusedFunction]

^
src/compat/db_vdb.c:3730:0: style: The function 'db_get_parameters' is never used. [unusedFunction]

^
src/compat/db_vdb.c:354:0: style: The function 'db_get_parser_line_col' is never used. [unusedFunction]

^
src/compat/db_query.c:1558:0: style: The function 'db_get_query_format' is never used. [unusedFunction]

^
src/compat/db_query.c:2055:0: style: The function 'db_get_query_result_format' is never used. [unusedFunction]

^
src/compat/db_query.c:1387:0: style: The function 'db_get_query_type' is never used. [unusedFunction]

^
src/compat/db_admin.c:1046:0: style: The function 'db_get_row_count' is never used. [unusedFunction]

^
src/compat/db_info.c:2407:0: style: The function 'db_get_schema_def_dbval' is never used. [unusedFunction]

^
src/compat/db_obj.c:1820:0: style: The function 'db_get_serial_current_value' is never used. [unusedFunction]

^
src/compat/db_obj.c:1866:0: style: The function 'db_get_serial_next_value' is never used. [unusedFunction]

^
src/compat/db_obj.c:255:0: style: The function 'db_get_shared' is never used. [unusedFunction]

^
src/compat/db_old.c:295:0: style: The function 'db_get_shared_attribute_names' is never used. [unusedFunction]

^
src/compat/db_old.c:506:0: style: The function 'db_get_subclass_names' is never used. [unusedFunction]

^
src/compat/db_old.c:464:0: style: The function 'db_get_superclass_names' is never used. [unusedFunction]

^
src/compat/db_admin.c:1554:0: style: The function 'db_get_tran_settings' is never used. [unusedFunction]

^
src/compat/db_virt.c:199:0: style: The function 'db_get_vclass_ldb_name' is never used. [unusedFunction]

^
src/compat/db_vdb.c:971:0: style: The function 'db_get_warnings' is never used. [unusedFunction]

^
src/compat/db_date.c:4854:0: style: The function 'db_get_week_of_year' is never used. [unusedFunction]

^
src/compat/db_vdb.c:2860:0: style: The function 'db_has_modified_class' is never used. [unusedFunction]

^
src/compat/db_virt.c:281:0: style: The function 'db_instance_equal' is never used. [unusedFunction]

^
src/compat/db_query.c:3432:0: style: The function 'db_is_client_cache_reusable' is never used. [unusedFunction]

^
src/compat/db_old.c:705:0: style: The function 'db_is_indexed' is never used. [unusedFunction]

^
src/compat/db_vdb.c:1285:0: style: The function 'db_is_input_marker' is never used. [unusedFunction]

^
src/compat/db_info.c:417:0: style: The function 'db_is_instance_of' is never used. [unusedFunction]

^
src/compat/db_vdb.c:1304:0: style: The function 'db_is_output_marker' is never used. [unusedFunction]

^
src/compat/db_virt.c:395:0: style: The function 'db_is_updatable_attribute' is never used. [unusedFunction]

^
src/compat/db_json.cpp:1408:0: style: The function 'db_json_add_member_to_object' is never used. [unusedFunction]

^
src/compat/db_json.cpp:3122:0: style: The function 'db_json_are_docs_equal' is never used. [unusedFunction]

^
src/compat/db_json.cpp:2401:0: style: The function 'db_json_are_validators_equal' is never used. [unusedFunction]

^
src/compat/db_json.cpp:2042:0: style: The function 'db_json_array_append_func' is never used. [unusedFunction]

^
src/compat/db_json.cpp:2124:0: style: The function 'db_json_array_insert_func' is never used. [unusedFunction]

^
src/compat/db_json.cpp:2561:0: style: The function 'db_json_copy_string_from_document' is never used. [unusedFunction]

^
src/compat/db_json.cpp:2382:0: style: The function 'db_json_copy_validator' is never used. [unusedFunction]

^
src/compat/db_json.cpp:2394:0: style: The function 'db_json_delete_validator' is never used. [unusedFunction]

^
src/compat/db_json.cpp:4266:0: style: The function 'db_json_deserialize' is never used. [unusedFunction]

^
src/compat/db_json.cpp:3141:0: style: The function 'db_json_doc_has_numeric_type' is never used. [unusedFunction]

^
src/compat/db_json.cpp:3147:0: style: The function 'db_json_doc_is_uncomparable' is never used. [unusedFunction]

^
src/compat/db_json.cpp:2852:0: style: The function 'db_json_get_all_paths_func' is never used. [unusedFunction]

^
src/compat/db_json.cpp:2531:0: style: The function 'db_json_get_bigint_from_document' is never used. [unusedFunction]

^
src/compat/db_json.cpp:2549:0: style: The function 'db_json_get_bool_as_str_from_document' is never used. [unusedFunction]

^
src/compat/db_json.cpp:2555:0: style: The function 'db_json_get_bool_from_document' is never used. [unusedFunction]

^
src/compat/db_json.cpp:1079:0: style: The function 'db_json_get_depth' is never used. [unusedFunction]

^
src/compat/db_json.cpp:2537:0: style: The function 'db_json_get_double_from_document' is never used. [unusedFunction]

^
src/compat/db_json.cpp:2525:0: style: The function 'db_json_get_int_from_document' is never used. [unusedFunction]

^
src/compat/db_json.cpp:1370:0: style: The function 'db_json_get_json_body_from_document' is never used. [unusedFunction]

^
src/compat/db_json.cpp:1046:0: style: The function 'db_json_get_length' is never used. [unusedFunction]

^
src/compat/db_json.cpp:2543:0: style: The function 'db_json_get_string_from_document' is never used. [unusedFunction]

^
src/compat/db_json.cpp:1002:0: style: The function 'db_json_get_type_as_str' is never used. [unusedFunction]

^
src/compat/db_json.cpp:1665:0: style: The function 'db_json_insert_func' is never used. [unusedFunction]

^
src/compat/db_json.cpp:994:0: style: The function 'db_json_is_valid' is never used. [unusedFunction]

^
src/compat/db_json.cpp:957:0: style: The function 'db_json_iterator_is_empty' is never used. [unusedFunction]

^
src/compat/db_json.cpp:2919:0: style: The function 'db_json_keys_func' is never used. [unusedFunction]

^
src/compat/db_json.cpp:2362:0: style: The function 'db_json_load_validator' is never used. [unusedFunction]

^
src/compat/db_json.cpp:2347:0: style: The function 'db_json_make_json_array' is never used. [unusedFunction]

^
src/compat/db_json.cpp:2339:0: style: The function 'db_json_make_json_object' is never used. [unusedFunction]

^
src/compat/db_json.cpp:2469:0: style: The function 'db_json_merge_patch_func' is never used. [unusedFunction]

^
src/compat/db_json.cpp:2501:0: style: The function 'db_json_merge_preserve_func' is never used. [unusedFunction]

^
src/compat/db_json.cpp:2749:0: style: The function 'db_json_normalize_path_string' is never used. [unusedFunction]

^
src/compat/db_json.cpp:2297:0: style: The function 'db_json_object_contains_key' is never used. [unusedFunction]

^
src/compat/db_json.cpp:2776:0: style: The function 'db_json_path_contains_wildcard' is never used. [unusedFunction]

^
src/compat/db_json.cpp:2765:0: style: The function 'db_json_path_unquote_object_keys_external' is never used. [unusedFunction]

^
src/compat/db_json.cpp:2881:0: style: The function 'db_json_pretty_func' is never used. [unusedFunction]

^
src/compat/db_json.cpp:1911:0: style: The function 'db_json_remove_func' is never used. [unusedFunction]

^
src/compat/db_json.cpp:1743:0: style: The function 'db_json_replace_func' is never used. [unusedFunction]

^
src/compat/db_json.cpp:1961:0: style: The function 'db_json_search_func' is never used. [unusedFunction]

^
src/compat/db_json.cpp:3931:0: style: The function 'db_json_serialize' is never used. [unusedFunction]

^
src/compat/db_json.cpp:3946:0: style: The function 'db_json_serialize_length' is never used. [unusedFunction]

^
src/compat/db_json.cpp:3116:0: style: The function 'db_json_set_bigint_to_doc' is never used. [unusedFunction]

^
src/compat/db_json.cpp:3104:0: style: The function 'db_json_set_double_to_doc' is never used. [unusedFunction]

^
src/compat/db_json.cpp:1838:0: style: The function 'db_json_set_func' is never used. [unusedFunction]

^
src/compat/db_json.cpp:3110:0: style: The function 'db_json_set_int_to_doc' is never used. [unusedFunction]

^
src/compat/db_json.cpp:1090:0: style: The function 'db_json_unquote' is never used. [unusedFunction]

^
src/compat/db_json.cpp:2388:0: style: The function 'db_json_validate_doc' is never used. [unusedFunction]

^
src/compat/db_json.cpp:2976:0: style: The function 'db_json_value_is_contained_in_doc' is never used. [unusedFunction]

^
src/compat/db_admin.c:391:0: style: The function 'db_last_volume' is never used. [unusedFunction]

^
src/compat/db_admin.c:2523:0: style: The function 'db_link_static_methods' is never used. [unusedFunction]

^
src/compat/db_date.c:1000:0: style: The function 'db_localtime' is never used. [unusedFunction]

^
src/storage/storage_common.c:79:0: style: The function 'db_log_page_size' is never used. [unusedFunction]

^
src/compat/db_vdb.c:275:0: style: The function 'db_make_session_for_one_statement_execution' is never used. [unusedFunction]

^
src/compat/db_vdb.c:1262:0: style: The function 'db_marker_domain' is never used. [unusedFunction]

^
src/compat/db_vdb.c:1243:0: style: The function 'db_marker_index' is never used. [unusedFunction]

^
src/compat/db_vdb.c:1224:0: style: The function 'db_marker_next' is never used. [unusedFunction]

^
src/compat/db_date.c:557:0: style: The function 'db_mktime' is never used. [unusedFunction]

^
src/compat/db_virt.c:84:0: style: The function 'db_namelist_add' is never used. [unusedFunction]

^
src/compat/db_old.c:148:0: style: The function 'db_namelist_copy' is never used. [unusedFunction]

^
src/compat/db_old.c:233:0: style: The function 'db_namelist_print' is never used. [unusedFunction]

^
src/compat/db_old.c:213:0: style: The function 'db_namelist_remove' is never used. [unusedFunction]

^
src/compat/db_admin.c:709:0: style: The function 'db_need_reconnect' is never used. [unusedFunction]

^
src/compat/db_admin.c:374:0: style: The function 'db_num_volumes' is never used. [unusedFunction]

^
src/compat/db_vdb.c:1138:0: style: The function 'db_number_of_output_markers' is never used. [unusedFunction]

^
src/compat/db_old.c:96:0: style: The function 'db_objlist_get' is never used. [unusedFunction]

^
src/compat/db_info.c:2271:0: style: The function 'db_objlist_next' is never used. [unusedFunction]

^
src/compat/db_info.c:2290:0: style: The function 'db_objlist_object' is never used. [unusedFunction]

^
src/compat/db_old.c:121:0: style: The function 'db_objlist_print' is never used. [unusedFunction]

^
src/compat/db_vdb.c:375:0: style: The function 'db_open_file_name' is never used. [unusedFunction]

^
src/compat/db_vdb.c:3777:0: style: The function 'db_parameter_name' is never used. [unusedFunction]

^
src/compat/db_vdb.c:3758:0: style: The function 'db_parameter_next' is never used. [unusedFunction]

^
src/compat/db_vdb.c:297:0: style: The function 'db_parse_one_statement' is never used. [unusedFunction]

^
src/compat/db_admin.c:983:0: style: The function 'db_ping_server' is never used. [unusedFunction]

^
src/compat/db_admin.c:2476:0: style: The function 'db_preload_classes' is never used. [unusedFunction]

^
src/compat/db_obj.c:1251:0: style: The function 'db_print' is never used. [unusedFunction]

^
src/storage/storage_common.c:197:0: style: The function 'db_print_data' is never used. [unusedFunction]

^
src/compat/db_admin.c:1985:0: style: The function 'db_print_stats' is never used. [unusedFunction]

^
src/compat/db_query.c:1808:0: style: The function 'db_query_execute' is never used. [unusedFunction]

^
src/compat/db_query.c:1870:0: style: The function 'db_query_execute_immediate' is never used. [unusedFunction]

^
src/compat/db_query.c:1622:0: style: The function 'db_query_format_attr_name' is never used. [unusedFunction]

^
src/compat/db_query.c:1740:0: style: The function 'db_query_format_class_name' is never used. [unusedFunction]

^
src/compat/db_query.c:1590:0: style: The function 'db_query_format_col_type' is never used. [unusedFunction]

^
src/compat/db_query.c:1766:0: style: The function 'db_query_format_is_non_null' is never used. [unusedFunction]

^
src/compat/db_query.c:1648:0: style: The function 'db_query_format_original_name' is never used. [unusedFunction]

^
src/compat/db_query.c:1635:0: style: The function 'db_query_format_spec_name' is never used. [unusedFunction]

^
src/compat/db_query.c:3451:0: style: The function 'db_query_get_cache_time' is never used. [unusedFunction]

^
src/compat/db_query.c:2959:0: style: The function 'db_query_get_tuple_value_by_name' is never used. [unusedFunction]

^
src/compat/db_query.c:3275:0: style: The function 'db_query_get_value_length' is never used. [unusedFunction]

^
src/compat/db_query.c:3235:0: style: The function 'db_query_get_value_type' is never used. [unusedFunction]

^
src/compat/db_query.c:3520:0: style: The function 'db_query_prefetch_columns' is never used. [unusedFunction]

^
src/compat/db_vdb.c:3811:0: style: The function 'db_query_produce_updatable_result' is never used. [unusedFunction]

^
src/compat/db_query.c:3161:0: style: The function 'db_query_stmt_id' is never used. [unusedFunction]

^
src/compat/db_admin.c:2183:0: style: The function 'db_register_error_log_handler' is never used. [unusedFunction]

^
src/compat/db_class.c:701:0: style: The function 'db_rename_attribute' is never used. [unusedFunction]

^
src/compat/db_class.c:726:0: style: The function 'db_rename_method' is never used. [unusedFunction]

^
src/compat/db_obj.c:1346:0: style: The function 'db_rename_trigger' is never used. [unusedFunction]

^
src/compat/db_admin.c:2742:0: style: The function 'db_reset_system_parameters_from_assignments' is never used. [unusedFunction]

^
src/compat/db_vdb.c:771:0: style: The function 'db_rewind_statement' is never used. [unusedFunction]

^
src/compat/db_set.c:867:0: style: The function 'db_seq_cardinality' is never used. [unusedFunction]

^
src/compat/db_set.c:823:0: style: The function 'db_seq_drop' is never used. [unusedFunction]

^
src/compat/db_set.c:372:0: style: The function 'db_seq_filter' is never used. [unusedFunction]

^
src/compat/db_set.c:908:0: style: The function 'db_seq_find' is never used. [unusedFunction]

^
src/compat/db_set.c:323:0: style: The function 'db_seq_free' is never used. [unusedFunction]

^
src/compat/db_set.c:786:0: style: The function 'db_seq_insert' is never used. [unusedFunction]

^
src/compat/db_set.c:886:0: style: The function 'db_seq_print' is never used. [unusedFunction]

^
src/compat/db_vdb.c:1026:0: style: The function 'db_session_set_holdable' is never used. [unusedFunction]

^
src/compat/db_vdb.c:1061:0: style: The function 'db_session_set_return_generated_keys' is never used. [unusedFunction]

^
src/compat/db_vdb.c:1043:0: style: The function 'db_session_set_xasl_cache_pinned' is never used. [unusedFunction]

^
src/compat/db_set.c:578:0: style: The function 'db_set_cardinality' is never used. [unusedFunction]

^
src/compat/db_class.c:1024:0: style: The function 'db_set_class_method_arg_domain' is never used. [unusedFunction]

^
src/compat/db_vdb.c:799:0: style: The function 'db_set_client_cache_time' is never used. [unusedFunction]

^
src/compat/db_admin.c:522:0: style: The function 'db_set_connect_order' is never used. [unusedFunction]

^
src/compat/db_admin.c:681:0: style: The function 'db_set_connected_host_status' is never used. [unusedFunction]

^
src/compat/db_set.c:402:0: style: The function 'db_set_copy' is never used. [unusedFunction]

^
src/compat/db_set.c:72:0: style: The function 'db_set_create' is never used. [unusedFunction]

^
src/compat/db_set.c:530:0: style: The function 'db_set_drop' is never used. [unusedFunction]

^
src/compat/db_set.c:344:0: style: The function 'db_set_filter' is never used. [unusedFunction]

^
src/compat/db_set.c:644:0: style: The function 'db_set_has_null' is never used. [unusedFunction]

^
src/compat/db_set.c:621:0: style: The function 'db_set_isempty' is never used. [unusedFunction]

^
src/compat/db_set.c:598:0: style: The function 'db_set_ismember' is never used. [unusedFunction]

^
src/compat/db_class.c:1075:0: style: The function 'db_set_loader_commands' is never used. [unusedFunction]

^
src/compat/db_admin.c:528:0: style: The function 'db_set_max_num_delayed_hosts_lookup' is never used. [unusedFunction]

^
src/compat/db_class.c:1006:0: style: The function 'db_set_method_arg_domain' is never used. [unusedFunction]

^
src/compat/db_vdb.c:3159:0: style: The function 'db_set_system_generated_statement' is never used. [unusedFunction]

^
src/compat/db_admin.c:2727:0: style: The function 'db_set_system_parameters_for_ha_repl' is never used. [unusedFunction]

^
src/compat/db_admin.c:1765:0: style: The function 'db_set_user_comment' is never used. [unusedFunction]

^
src/compat/db_value_printer.cpp:633:0: style: The function 'db_sprint_value' is never used. [unusedFunction]

^
src/compat/db_query.c:3320:0: style: The function 'db_sqlx_debug_print_result' is never used. [unusedFunction]

^
src/compat/db_date.c:3629:0: style: The function 'db_string_check_explicit_date' is never used. [unusedFunction]

^
src/compat/db_date.c:1331:0: style: The function 'db_string_check_explicit_time' is never used. [unusedFunction]

^
src/compat/cnv.c:7014:0: style: The function 'db_string_date' is never used. [unusedFunction]

^
src/compat/cnv.c:8268:0: style: The function 'db_string_datetime' is never used. [unusedFunction]

^
src/compat/cnv.c:7725:0: style: The function 'db_string_time' is never used. [unusedFunction]

^
src/compat/cnv.c:7945:0: style: The function 'db_string_timestamp' is never used. [unusedFunction]

^
src/compat/cnv.c:6797:0: style: The function 'db_string_to_value' is never used. [unusedFunction]

^
src/compat/db_admin.c:1586:0: style: The function 'db_synchronize_cache' is never used. [unusedFunction]

^
src/compat/db_date.c:579:0: style: The function 'db_timestamp_encode' is never used. [unusedFunction]

^
src/compat/db_admin.c:2073:0: style: The function 'db_totalpgs' is never used. [unusedFunction]

^
src/compat/db_info.c:742:0: style: The function 'db_type_from_string' is never used. [unusedFunction]

^
src/compat/db_admin.c:2546:0: style: The function 'db_unlink_static_methods' is never used. [unusedFunction]

^
src/compat/db_vdb.c:3559:0: style: The function 'db_validate' is never used. [unusedFunction]

^
src/compat/cnv.c:8601:0: style: The function 'db_validate_format' is never used. [unusedFunction]

^
src/compat/db_json.cpp:3309:0: style: The function 'db_value_to_json_key' is never used. [unusedFunction]

^
src/compat/db_json.cpp:3163:0: style: The function 'db_value_to_json_path' is never used. [unusedFunction]

^
src/compat/db_json.cpp:3254:0: style: The function 'db_value_to_json_value' is never used. [unusedFunction]

^
src/compat/cnv.c:6969:0: style: The function 'db_value_to_string' is never used. [unusedFunction]

^
src/compat/db_admin.c:412:0: style: The function 'db_vol_label' is never used. [unusedFunction]

^
src/compat/db_admin.c:2452:0: style: The function 'db_warnspace' is never used. [unusedFunction]

^
src/object/quick_fit.c:123:0: style: The function 'db_ws_realloc' is never used. [unusedFunction]

^
src/compat/cnvlex.c:1728:0: style: The function 'dbcnvrestart' is never used. [unusedFunction]

^
src/compat/cnvlex.c:1743:0: style: The function 'dbcnvswitch_to_buffer' is never used. [unusedFunction]

^
src/parser/double_byte_support.c:102:0: style: The function 'dbcs_get_next' is never used. [unusedFunction]

^
src/parser/double_byte_support.c:89:0: style: The function 'dbcs_start_input' is never used. [unusedFunction]

^
contrib/perl/dbdimp.c:167:0: style: The function 'dbd_discon_all' is never used. [unusedFunction]

^
src/query/execute_statement.c:13810:0: style: The function 'dbmeth_class_name' is never used. [unusedFunction]

^
src/query/execute_statement.c:13841:0: style: The function 'dbmeth_print' is never used. [unusedFunction]

^
src/compat/db_temp.c:800:0: style: The function 'dbt_add_argument' is never used. [unusedFunction]

^
src/compat/db_temp.c:272:0: style: The function 'dbt_add_attribute' is never used. [unusedFunction]

^
src/compat/db_temp.c:317:0: style: The function 'dbt_add_class_attribute' is never used. [unusedFunction]

^
src/compat/db_temp.c:823:0: style: The function 'dbt_add_set_argument_domain' is never used. [unusedFunction]

^
src/compat/db_temp.c:294:0: style: The function 'dbt_add_shared_attribute' is never used. [unusedFunction]

^
src/compat/db_temp.c:382:0: style: The function 'dbt_constrain_unique' is never used. [unusedFunction]

^
src/compat/db_obj.c:468:0: style: The function 'dbt_create_object' is never used. [unusedFunction]

^
src/compat/db_obj.c:953:0: style: The function 'dbt_dput' is never used. [unusedFunction]

^
src/compat/db_temp.c:1181:0: style: The function 'dbt_drop_class_resolution' is never used. [unusedFunction]

^
src/compat/db_temp.c:1054:0: style: The function 'dbt_drop_method_files' is never used. [unusedFunction]

^
src/compat/db_temp.c:633:0: style: The function 'dbt_drop_set_attribute_domain' is never used. [unusedFunction]

^
src/compat/db_temp.c:714:0: style: The function 'dbt_drop_shared_attribute' is never used. [unusedFunction]

^
src/compat/db_temp.c:945:0: style: The function 'dbt_drop_super_connect' is never used. [unusedFunction]

^
src/compat/db_obj.c:583:0: style: The function 'dbt_finish_object_and_decache_when_failure' is never used. [unusedFunction]

^
src/compat/db_obj.c:635:0: style: The function 'dbt_put' is never used. [unusedFunction]

^
src/compat/db_temp.c:1095:0: style: The function 'dbt_set_loader_commands' is never used. [unusedFunction]

^
src/transaction/transaction_transient.cpp:125:0: style: The function 'decache_heap_repr' is never used. [unusedFunction]

^
src/base/packer.cpp:922:0: style: The function 'delegate_to_or_buf' is never used. [unusedFunction]

^
src/storage/record_descriptor.cpp:298:0: style: The function 'delete_data' is never used. [unusedFunction]

^
src/storage/btree_unique.cpp:80:0: style: The function 'delete_key_and_row' is never used. [unusedFunction]

^
src/storage/btree_unique.cpp:87:0: style: The function 'delete_null_and_row' is never used. [unusedFunction]

^
src/executables/util_sa.c:708:0: style: The function 'deletedb' is never used. [unusedFunction]

^
src/thread/thread_manager.cpp:364:0: style: The function 'destroy_daemon_without_entry' is never used. [unusedFunction]

^
src/storage/btree_unique.cpp:150:0: style: The function 'destruct' is never used. [unusedFunction]

^
src/executables/util_sa.c:1446:0: style: The function 'diagdb' is never used. [unusedFunction]

^
contrib/cubmemc/wraplib/dict/dict.c:39:0: style: The function 'dict_int_cmp' is never used. [unusedFunction]

^
contrib/cubmemc/wraplib/dict/dict.c:55:0: style: The function 'dict_long_cmp' is never used. [unusedFunction]

^
contrib/cubmemc/wraplib/dict/dict.c:27:0: style: The function 'dict_set_free' is never used. [unusedFunction]

^
contrib/cubmemc/wraplib/dict/dict.c:47:0: style: The function 'dict_uint_cmp' is never used. [unusedFunction]

^
contrib/cubmemc/wraplib/dict/dict.c:63:0: style: The function 'dict_ulong_cmp' is never used. [unusedFunction]

^
src/storage/disk_manager.c:2296:0: style: The function 'disk_add_volume_extension' is never used. [unusedFunction]

^
src/storage/disk_manager.c:2474:0: style: The function 'disk_auto_expansion_execute' is never used. [unusedFunction]

^
src/storage/disk_manager.c:5067:0: style: The function 'disk_check_sectors_are_reserved' is never used. [unusedFunction]

^
src/storage/disk_manager.c:5002:0: style: The function 'disk_format_first_volume' is never used. [unusedFunction]

^
src/storage/disk_manager.c:5788:0: style: The function 'disk_get_boot_db_charset' is never used. [unusedFunction]

^
src/storage/disk_manager.c:1130:0: style: The function 'disk_get_boot_hfid' is never used. [unusedFunction]

^
src/storage/disk_manager.c:5458:0: style: The function 'disk_get_checkpoint' is never used. [unusedFunction]

^
src/storage/disk_manager.c:5488:0: style: The function 'disk_get_creation_time' is never used. [unusedFunction]

^
src/storage/disk_manager.c:1165:0: style: The function 'disk_get_link' is never used. [unusedFunction]

^
src/storage/disk_manager.c:5692:0: style: The function 'disk_get_total_numsectors' is never used. [unusedFunction]

^
src/storage/disk_manager.c:4100:0: style: The function 'disk_is_page_sector_reserved' is never used. [unusedFunction]

^
src/storage/disk_manager.c:6701:0: style: The function 'disk_map_clone_check_leaks' is never used. [unusedFunction]

^
src/storage/disk_manager.c:6669:0: style: The function 'disk_map_clone_clear' is never used. [unusedFunction]

^
src/storage/disk_manager.c:6537:0: style: The function 'disk_map_clone_create' is never used. [unusedFunction]

^
src/storage/disk_manager.c:4221:0: style: The function 'disk_reserve_sectors' is never used. [unusedFunction]

^
src/storage/disk_manager.c:1405:0: style: The function 'disk_rv_dump_hdr' is never used. [unusedFunction]

^
src/storage/disk_manager.c:1453:0: style: The function 'disk_rv_dump_init_map' is never used. [unusedFunction]

^
src/storage/disk_manager.c:1528:0: style: The function 'disk_rv_dump_link' is never used. [unusedFunction]

^
src/storage/disk_manager.c:1567:0: style: The function 'disk_rv_dump_set_boot_hfid' is never used. [unusedFunction]

^
src/storage/disk_manager.c:1489:0: style: The function 'disk_rv_dump_set_creation_time' is never used. [unusedFunction]

^
src/storage/disk_manager.c:1600:0: style: The function 'disk_rv_dump_volume_expand' is never used. [unusedFunction]

^
src/storage/disk_manager.c:1196:0: style: The function 'disk_rv_redo_dboutside_newvol' is never used. [unusedFunction]

^
src/storage/disk_manager.c:1325:0: style: The function 'disk_rv_redo_format' is never used. [unusedFunction]

^
src/storage/disk_manager.c:1419:0: style: The function 'disk_rv_redo_init_map' is never used. [unusedFunction]

^
src/storage/disk_manager.c:1582:0: style: The function 'disk_rv_redo_volume_expand' is never used. [unusedFunction]

^
src/storage/disk_manager.c:3834:0: style: The function 'disk_rv_reserve_sectors' is never used. [unusedFunction]

^
src/storage/disk_manager.c:1220:0: style: The function 'disk_rv_undo_format' is never used. [unusedFunction]

^
src/storage/disk_manager.c:1505:0: style: The function 'disk_rv_undoredo_link' is never used. [unusedFunction]

^
src/storage/disk_manager.c:1543:0: style: The function 'disk_rv_undoredo_set_boot_hfid' is never used. [unusedFunction]

^
src/storage/disk_manager.c:1464:0: style: The function 'disk_rv_undoredo_set_creation_time' is never used. [unusedFunction]

^
src/storage/disk_manager.c:3915:0: style: The function 'disk_rv_unreserve_sectors' is never used. [unusedFunction]

^
src/storage/disk_manager.c:2001:0: style: The function 'disk_rv_volhead_extend_redo' is never used. [unusedFunction]

^
src/storage/disk_manager.c:2060:0: style: The function 'disk_rv_volhead_extend_undo' is never used. [unusedFunction]

^
src/storage/disk_manager.c:1089:0: style: The function 'disk_set_boot_hfid' is never used. [unusedFunction]

^
src/storage/disk_manager.c:5421:0: style: The function 'disk_set_checkpoint' is never used. [unusedFunction]

^
src/storage/disk_manager.c:3410:0: style: The function 'disk_stab_cursor_clear_bit' is never used. [unusedFunction]

^
src/storage/disk_manager.c:3427:0: style: The function 'disk_stab_cursor_get_bit_index_in_page' is never used. [unusedFunction]

^
src/storage/disk_manager.c:4634:0: style: The function 'disk_unreserve_ordered_sectors' is never used. [unusedFunction]

^
src/storage/disk_manager.c:6726:0: style: The function 'disk_volheader_check_magic' is never used. [unusedFunction]

^
src/storage/disk_manager.c:3080:0: style: The function 'disk_volume_header_end_scan' is never used. [unusedFunction]

^
src/storage/disk_manager.c:2948:0: style: The function 'disk_volume_header_next_scan' is never used. [unusedFunction]

^
src/storage/disk_manager.c:2896:0: style: The function 'disk_volume_header_start_scan' is never used. [unusedFunction]

^
src/base/dynamic_load.c:1776:0: style: The function 'dl_destroy_module' is never used. [unusedFunction]

^
src/base/dynamic_load.c:1728:0: style: The function 'dl_initiate_module' is never used. [unusedFunction]

^
src/base/dynamic_load.c:1812:0: style: The function 'dl_load_object_module' is never used. [unusedFunction]

^
src/base/dynamic_load.c:1853:0: style: The function 'dl_resolve_object_symbol' is never used. [unusedFunction]

^
src/query/execute_schema.c:6437:0: style: The function 'do_analyze_partition' is never used. [unusedFunction]

^
src/query/execute_schema.c:4488:0: style: The function 'do_drop_partitioned_class' is never used. [unusedFunction]

^
src/query/execute_schema.c:4754:0: style: The function 'do_find_auto_increment_serial' is never used. [unusedFunction]

^
src/query/execute_statement.c:3914:0: style: The function 'do_internal_statements' is never used. [unusedFunction]

^
src/transaction/log_postpone_cache.cpp:137:0: style: The function 'do_postpone' is never used. [unusedFunction]

^
src/query/execute_schema.c:4561:0: style: The function 'do_rename_partition' is never used. [unusedFunction]

^
src/query/execute_statement.c:942:0: style: The function 'do_reset_auto_increment_serial' is never used. [unusedFunction]

^
src/query/execute_statement.c:3820:0: style: The function 'do_statements' is never used. [unusedFunction]

^
src/base/rand.c:85:0: style: The function 'drand48' is never used. [unusedFunction]

^
src/cm_common/cm_dstring.c:118:0: style: The function 'dst_size' is never used. [unusedFunction]

^
src/executables/util_sa.c:4113:0: style: The function 'dump_tz' is never used. [unusedFunction]

^
src/executables/util_sa.c:2289:0: style: The function 'dumplocale' is never used. [unusedFunction]

^
src/storage/double_write_buffer.c:504:0: style: The function 'dwb_block_add_wait_queue_entry' is never used. [unusedFunction]

^
src/storage/double_write_buffer.c:1924:0: style: The function 'dwb_compare_vol_fd' is never used. [unusedFunction]

^
src/storage/double_write_buffer.c:3299:0: style: The function 'dwb_destroy' is never used. [unusedFunction]

^
src/storage/double_write_buffer.c:3666:0: style: The function 'dwb_file_sync_helper' is never used. [unusedFunction]

^
src/storage/double_write_buffer.c:4066:0: style: The function 'dwb_file_sync_helper_daemon_is_running' is never used. [unusedFunction]

^
src/storage/double_write_buffer.c:4050:0: style: The function 'dwb_flush_block_daemon_is_running' is never used. [unusedFunction]

^
src/storage/double_write_buffer.c:3355:0: style: The function 'dwb_flush_next_block' is never used. [unusedFunction]

^
src/storage/double_write_buffer.c:3336:0: style: The function 'dwb_get_volume_name' is never used. [unusedFunction]

^
src/storage/double_write_buffer.c:4035:0: style: The function 'dwb_is_file_sync_helper_daemon_available' is never used. [unusedFunction]

^
src/storage/double_write_buffer.c:4021:0: style: The function 'dwb_is_flush_block_daemon_available' is never used. [unusedFunction]

^
src/storage/double_write_buffer.c:3095:0: style: The function 'dwb_load_and_recover_pages' is never used. [unusedFunction]

^
src/storage/double_write_buffer.c:3869:0: style: The function 'dwb_read_page' is never used. [unusedFunction]

^
src/storage/double_write_buffer.c:2863:0: style: The function 'dwb_recreate' is never used. [unusedFunction]

^
src/storage/double_write_buffer.c:1507:0: style: The function 'dwb_set_status_resumed' is never used. [unusedFunction]

^
src/storage/extendible_hash.c:3410:0: style: The function 'ehash_delete' is never used. [unusedFunction]

^
src/storage/extendible_hash.c:4855:0: style: The function 'ehash_dump' is never used. [unusedFunction]

^
src/storage/extendible_hash.c:1455:0: style: The function 'ehash_insert' is never used. [unusedFunction]

^
src/storage/extendible_hash.c:4775:0: style: The function 'ehash_map' is never used. [unusedFunction]

^
src/storage/extendible_hash.c:5084:0: style: The function 'ehash_print_bucket' is never used. [unusedFunction]

^
src/storage/extendible_hash.c:5722:0: style: The function 'ehash_rv_connect_bucket_redo' is never used. [unusedFunction]

^
src/storage/extendible_hash.c:5474:0: style: The function 'ehash_rv_delete_redo' is never used. [unusedFunction]

^
src/storage/extendible_hash.c:5513:0: style: The function 'ehash_rv_delete_undo' is never used. [unusedFunction]

^
src/storage/extendible_hash.c:5698:0: style: The function 'ehash_rv_increment' is never used. [unusedFunction]

^
src/storage/extendible_hash.c:5316:0: style: The function 'ehash_rv_init_bucket_redo' is never used. [unusedFunction]

^
src/storage/extendible_hash.c:733:0: style: The function 'ehash_rv_init_dir_new_page_redo' is never used. [unusedFunction]

^
src/storage/extendible_hash.c:5365:0: style: The function 'ehash_rv_init_dir_redo' is never used. [unusedFunction]

^
src/storage/extendible_hash.c:5382:0: style: The function 'ehash_rv_insert_redo' is never used. [unusedFunction]

^
src/storage/extendible_hash.c:5419:0: style: The function 'ehash_rv_insert_undo' is never used. [unusedFunction]

^
src/storage/extendible_hash.c:1373:0: style: The function 'ehash_search' is never used. [unusedFunction]

^
src/base/environment_variable.c:239:0: style: The function 'envvar_expand' is never used. [unusedFunction]

^
src/base/environment_variable.c:400:0: style: The function 'envvar_javadir_file' is never used. [unusedFunction]

^
src/loaddb/load_object.c:1679:0: style: The function 'er_filter_fileset' is never used. [unusedFunction]

^
src/broker/cas_error.c:152:0: style: The function 'error_info_set_force' is never used. [unusedFunction]

^
src/storage/es.c:353:0: style: The function 'es_copy_file' is never used. [unusedFunction]

^
src/storage/es.c:140:0: style: The function 'es_create_file' is never used. [unusedFunction]

^
src/storage/es.c:479:0: style: The function 'es_get_file_size' is never used. [unusedFunction]

^
src/storage/es.c:53:0: style: The function 'es_init' is never used. [unusedFunction]

^
src/storage/es.c:243:0: style: The function 'es_read_file' is never used. [unusedFunction]

^
src/storage/es.c:187:0: style: The function 'es_write_file' is never used. [unusedFunction]

^
src/executables/util_sa.c:1733:0: style: The function 'estimatedb_data' is never used. [unusedFunction]

^
src/executables/util_sa.c:1746:0: style: The function 'estimatedb_index' is never used. [unusedFunction]

^
src/base/event_log.c:405:0: style: The function 'event_log_bind_values' is never used. [unusedFunction]

^
src/base/event_log.c:208:0: style: The function 'event_log_final' is never used. [unusedFunction]

^
src/base/event_log.c:70:0: style: The function 'event_log_init' is never used. [unusedFunction]

^
src/base/event_log.c:446:0: style: The function 'event_log_log_flush_thr_wait' is never used. [unusedFunction]

^
src/base/event_log.c:335:0: style: The function 'event_log_print_client_info' is never used. [unusedFunction]

^
src/base/event_log.c:362:0: style: The function 'event_log_sql_string' is never used. [unusedFunction]

^
src/base/perf_monitor.c:3386:0: style: The function 'f_load_Count_get_oldest_mvcc_retry' is never used. [unusedFunction]

^
src/base/perf_monitor.c:3355:0: style: The function 'f_load_Count_get_snapshot_retry' is never used. [unusedFunction]

^
src/base/perf_monitor.c:3376:0: style: The function 'f_load_Time_get_oldest_mvcc_acquire_time' is never used. [unusedFunction]

^
src/base/perf_monitor.c:3345:0: style: The function 'f_load_Time_get_snapshot_acquire_time' is never used. [unusedFunction]

^
src/base/perf_monitor.c:3365:0: style: The function 'f_load_Time_tran_complete_time' is never used. [unusedFunction]

^
src/base/fault_injection.c:287:0: style: The function 'fi_reset' is never used. [unusedFunction]

^
src/base/fault_injection.c:224:0: style: The function 'fi_set' is never used. [unusedFunction]

^
src/base/fault_injection.c:258:0: style: The function 'fi_set_force' is never used. [unusedFunction]

^
src/base/fault_injection.c:338:0: style: The function 'fi_state' is never used. [unusedFunction]

^
src/base/fault_injection.c:305:0: style: The function 'fi_test' is never used. [unusedFunction]

^
src/base/fault_injection.c:361:0: style: The function 'fi_test_on' is never used. [unusedFunction]

^
src/storage/file_io.c:8214:0: style: The function 'fileio_backup_volume' is never used. [unusedFunction]

^
src/storage/file_io.c:2809:0: style: The function 'fileio_copy_volume' is never used. [unusedFunction]

^
src/storage/file_io.c:3374:0: style: The function 'fileio_dismount_all' is never used. [unusedFunction]

^
src/storage/file_io.c:6410:0: style: The function 'fileio_find_next_perm_volume' is never used. [unusedFunction]

^
src/storage/file_io.c:7335:0: style: The function 'fileio_finish_backup' is never used. [unusedFunction]

^
src/storage/file_io.c:819:0: style: The function 'fileio_flush_control_add_tokens' is never used. [unusedFunction]

^
src/storage/file_io.c:702:0: style: The function 'fileio_flush_control_finalize' is never used. [unusedFunction]

^
src/storage/file_io.c:658:0: style: The function 'fileio_flush_control_initialize' is never used. [unusedFunction]

^
src/storage/file_io.c:5459:0: style: The function 'fileio_get_max_name' is never used. [unusedFunction]

^
src/storage/file_io.c:9959:0: style: The function 'fileio_get_next_restore_file' is never used. [unusedFunction]

^
src/storage/file_io.c:5604:0: style: The function 'fileio_get_volume_max_suffix' is never used. [unusedFunction]

^
src/storage/file_io.c:11840:0: style: The function 'fileio_is_formatted_page' is never used. [unusedFunction]

^
src/storage/file_io.c:6358:0: style: The function 'fileio_is_temp_volume' is never used. [unusedFunction]

^
src/storage/file_io.c:1545:0: style: The function 'fileio_lock_la_dbname' is never used. [unusedFunction]

^
src/storage/file_io.c:1392:0: style: The function 'fileio_lock_la_log_path' is never used. [unusedFunction]

^
src/storage/file_io.c:5931:0: style: The function 'fileio_make_ha_sock_name' is never used. [unusedFunction]

^
src/storage/file_io.c:5897:0: style: The function 'fileio_make_keys_name' is never used. [unusedFunction]

^
src/storage/file_io.c:5914:0: style: The function 'fileio_make_keys_name_given_path' is never used. [unusedFunction]

^
src/storage/file_io.c:5707:0: style: The function 'fileio_make_log_active_name' is never used. [unusedFunction]

^
src/storage/file_io.c:5758:0: style: The function 'fileio_make_log_archive_name' is never used. [unusedFunction]

^
src/storage/file_io.c:5793:0: style: The function 'fileio_make_log_archive_temp_name' is never used. [unusedFunction]

^
src/storage/file_io.c:5815:0: style: The function 'fileio_make_log_info_name' is never used. [unusedFunction]

^
src/storage/file_io.c:5777:0: style: The function 'fileio_make_removed_log_archive_name' is never used. [unusedFunction]

^
src/storage/file_io.c:5726:0: style: The function 'fileio_make_temp_log_files_from_backup' is never used. [unusedFunction]

^
src/storage/file_io.c:5672:0: style: The function 'fileio_make_volume_ext_given_name' is never used. [unusedFunction]

^
src/storage/file_io.c:5690:0: style: The function 'fileio_make_volume_temp_name' is never used. [unusedFunction]

^
src/storage/file_io.c:11614:0: style: The function 'fileio_page_bitmap_create' is never used. [unusedFunction]

^
src/storage/file_io.c:11683:0: style: The function 'fileio_page_bitmap_list_add' is never used. [unusedFunction]

^
src/storage/file_io.c:11725:0: style: The function 'fileio_page_bitmap_list_destroy' is never used. [unusedFunction]

^
src/storage/file_io.c:11652:0: style: The function 'fileio_page_bitmap_list_find' is never used. [unusedFunction]

^
src/storage/file_io.c:11600:0: style: The function 'fileio_page_bitmap_list_init' is never used. [unusedFunction]

^
src/storage/file_io.c:4680:0: style: The function 'fileio_read_user_area' is never used. [unusedFunction]

^
src/storage/file_io.c:5070:0: style: The function 'fileio_rename' is never used. [unusedFunction]

^
src/storage/file_io.c:10234:0: style: The function 'fileio_restore_volume' is never used. [unusedFunction]

^
src/storage/file_io.c:7154:0: style: The function 'fileio_start_backup' is never used. [unusedFunction]

^
src/storage/file_io.c:11502:0: style: The function 'fileio_symlink' is never used. [unusedFunction]

^
src/storage/file_io.c:4531:0: style: The function 'fileio_synchronize_bg_archive_volume' is never used. [unusedFunction]

^
src/storage/file_io.c:2669:0: style: The function 'fileio_truncate' is never used. [unusedFunction]

^
src/storage/file_io.c:1691:0: style: The function 'fileio_unlock_la_dbname' is never used. [unusedFunction]

^
src/storage/file_io.c:11029:0: style: The function 'fileio_write_backup_info_entries' is never used. [unusedFunction]

^
src/storage/file_io.c:4795:0: style: The function 'fileio_write_user_area' is never used. [unusedFunction]

^
src/storage/file_io.c:4412:0: style: The function 'fileio_writev' is never used. [unusedFunction]

^
src/query/execute_statement.c:6044:0: style: The function 'find_update_columns' is never used. [unusedFunction]

^
src/loaddb/load_sa_loader.cpp:931:0: style: The function 'finish_line' is never used. [unusedFunction]

^
src/monitor/monitor_statistic.cpp:56:0: style: The function 'floating_rep_cast' is never used. [unusedFunction]

^
src/loaddb/load_sa_loader.cpp:766:0: style: The function 'flush_records' is never used. [unusedFunction]

^
src/compat/cnv.c:3180:0: style: The function 'fmt_add_decimal' is never used. [unusedFunction]

^
src/compat/cnv.c:3273:0: style: The function 'fmt_add_fractional' is never used. [unusedFunction]

^
src/compat/cnv.c:3102:0: style: The function 'fmt_add_integral' is never used. [unusedFunction]

^
src/compat/cnv.c:4389:0: style: The function 'fmt_datetime_string' is never used. [unusedFunction]

^
src/compat/cnv.c:4429:0: style: The function 'fmt_datetime_value' is never used. [unusedFunction]

^
src/compat/cnv.c:3254:0: style: The function 'fmt_decimals' is never used. [unusedFunction]

^
src/compat/cnv.c:3306:0: style: The function 'fmt_drop_fractional' is never used. [unusedFunction]

^
src/compat/cnv.c:3136:0: style: The function 'fmt_drop_integral' is never used. [unusedFunction]

^
src/compat/cnv.c:3062:0: style: The function 'fmt_drop_thousands' is never used. [unusedFunction]

^
src/broker/shard_proxy_function.c:3912:0: style: The function 'fn_proxy_cas_conn_error' is never used. [unusedFunction]

^
src/object/trigger_description.cpp:189:0: style: The function 'fprint' is never used. [unusedFunction]

^
src/xasl/xasl_unpack_info.cpp:67:0: style: The function 'free_xasl_unpack_info' is never used. [unusedFunction]

^
src/executables/util_sa.c:3924:0: style: The function 'gen_tz' is never used. [unusedFunction]

^
src/executables/util_sa.c:2059:0: style: The function 'genlocale' is never used. [unusedFunction]

^
src/cci/cci_log.cpp:669:0: style: The function 'getPath' is never used. [unusedFunction]

^
src/base/mem_block.cpp:189:0: style: The function 'get_block' is never used. [unusedFunction]

^
src/base/mem_block.cpp:183:0: style: The function 'get_block_allocator' is never used. [unusedFunction]

^
src/transaction/transaction_transient.cpp:48:0: style: The function 'get_classname' is never used. [unusedFunction]

^
src/transaction/client_credentials.cpp:51:0: style: The function 'get_client_info' is never used. [unusedFunction]

^
src/base/locale_helper.cpp:38:0: style: The function 'get_codeset_name' is never used. [unusedFunction]

^
src/broker/broker_admin_pub.c:3582:0: style: The function 'get_cubrid_version' is never used. [unusedFunction]

^
src/storage/record_descriptor.cpp:211:0: style: The function 'get_data_for_modify' is never used. [unusedFunction]

^
src/transaction/client_credentials.cpp:212:0: style: The function 'get_db_name' is never used. [unusedFunction]

^
src/transaction/client_credentials.cpp:218:0: style: The function 'get_db_password' is never used. [unusedFunction]

^
src/loaddb/load_object.c:1800:0: style: The function 'get_ignored_errors' is never used. [unusedFunction]

^
src/thread/internal_tasks_worker_pool.cpp:48:0: style: The function 'get_instance' is never used. [unusedFunction]

^
src/storage/btree_unique.cpp:42:0: style: The function 'get_key_count' is never used. [unusedFunction]

^
src/base/error_context.cpp:309:0: style: The function 'get_logging' is never used. [unusedFunction]

^
src/thread/thread_manager.cpp:567:0: style: The function 'get_main_entry' is never used. [unusedFunction]

^
src/transaction/mvcc_table.cpp:567:0: style: The function 'get_new_mvccid' is never used. [unusedFunction]

^
src/storage/btree_unique.cpp:54:0: style: The function 'get_null_count' is never used. [unusedFunction]

^
src/query/scan_json_table.cpp:563:0: style: The function 'get_predicate' is never used. [unusedFunction]

^
src/storage/btree_unique.cpp:48:0: style: The function 'get_row_count' is never used. [unusedFunction]

^
src/loaddb/load_driver.cpp:108:0: style: The function 'get_semantic_helper' is never used. [unusedFunction]

^
src/monitor/monitor_registration.cpp:72:0: style: The function 'get_statistic_values_memsize' is never used. [unusedFunction]

^
src/storage/btree_unique.cpp:188:0: style: The function 'get_stats_of' is never used. [unusedFunction]

^
src/transaction/log_system_tran.cpp:136:0: style: The function 'get_tdes' is never used. [unusedFunction]

^
src/base/error_context.cpp:348:0: style: The function 'get_thread_local_error' is never used. [unusedFunction]

^
src/transaction/mvcc_table.cpp:580:0: style: The function 'get_two_new_mvccid' is never used. [unusedFunction]

^
src/parser/func_type.cpp:886:0: style: The function 'get_types' is never used. [unusedFunction]

^
src/transaction/transaction_transient.cpp:72:0: style: The function 'has_class' is never used. [unusedFunction]

^
src/base/error_context.cpp:303:0: style: The function 'has_error_stack' is never used. [unusedFunction]

^
contrib/cubmemc/wraplib/dict/hashtable.c:369:0: style: The function 'hashtable_resize' is never used. [unusedFunction]

^
contrib/cubmemc/wraplib/dict/hashtable.c:348:0: style: The function 'hashtable_size' is never used. [unusedFunction]

^
contrib/cubmemc/wraplib/dict/hashtable.c:356:0: style: The function 'hashtable_slots_used' is never used. [unusedFunction]

^
src/connection/heartbeat.c:321:0: style: The function 'hb_deregister_from_master' is never used. [unusedFunction]

^
src/connection/heartbeat.c:752:0: style: The function 'hb_node_state_string' is never used. [unusedFunction]

^
src/connection/heartbeat.c:447:0: style: The function 'hb_process_master_request' is never used. [unusedFunction]

^
src/connection/heartbeat.c:735:0: style: The function 'hb_process_term' is never used. [unusedFunction]

^
src/connection/heartbeat.c:104:0: style: The function 'hb_process_type_string' is never used. [unusedFunction]

^
src/connection/heartbeat.c:253:0: style: The function 'hb_thread_master_reader' is never used. [unusedFunction]

^
contrib/cubmemc/wraplib/dict/hb_tree.c:465:0: style: The function 'hb_tree_height' is never used. [unusedFunction]

^
contrib/cubmemc/wraplib/dict/hb_tree.c:428:0: style: The function 'hb_tree_max' is never used. [unusedFunction]

^
contrib/cubmemc/wraplib/dict/hb_tree.c:473:0: style: The function 'hb_tree_mheight' is never used. [unusedFunction]

^
contrib/cubmemc/wraplib/dict/hb_tree.c:413:0: style: The function 'hb_tree_min' is never used. [unusedFunction]

^
contrib/cubmemc/wraplib/dict/hb_tree.c:481:0: style: The function 'hb_tree_pathlen' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:1608:0: style: The function 'heap_create' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:1659:0: style: The function 'heap_destroy' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:1708:0: style: The function 'heap_destroy_newly_created' is never used. [unusedFunction]

^
src/heaplayers/lea_heap.c:272:0: style: The function 'hl_clear_lea_heap' is never used. [unusedFunction]

^
src/heaplayers/customheaps.cpp:119:0: style: The function 'hl_ostk_alloc' is never used. [unusedFunction]

^
src/heaplayers/customheaps.cpp:130:0: style: The function 'hl_ostk_free' is never used. [unusedFunction]

^
src/heaplayers/customheaps.cpp:96:0: style: The function 'hl_register_ostk_heap' is never used. [unusedFunction]

^
src/heaplayers/customheaps.cpp:108:0: style: The function 'hl_unregister_ostk_heap' is never used. [unusedFunction]

^
src/broker/cas_handle.c:402:0: style: The function 'hm_col_update_info_clear' is never used. [unusedFunction]

^
src/cci/cci_handle_mng.c:1004:0: style: The function 'hm_get_ha_connected_host' is never used. [unusedFunction]

^
src/broker/cas_handle.c:308:0: style: The function 'hm_qresult_clear' is never used. [unusedFunction]

^
src/broker/cas_handle.c:226:0: style: The function 'hm_srv_handle_unset_prepare_flag_all' is never used. [unusedFunction]

^
src/query/execute_schema.c:15352:0: style: The function 'ib_get_thread_count' is never used. [unusedFunction]

^
src/heaplayers/malloc_2_8_3.c:4617:0: style: The function 'independent_calloc' is never used. [unusedFunction]

^
src/heaplayers/malloc_2_8_3.c:4624:0: style: The function 'independent_comalloc' is never used. [unusedFunction]

^
src/base/ini_parser.c:1020:0: style: The function 'ini_getfloat' is never used. [unusedFunction]

^
src/base/ini_parser.c:940:0: style: The function 'ini_getuint_min' is never used. [unusedFunction]

^
src/base/ini_parser.c:365:0: style: The function 'ini_table_unset' is never used. [unusedFunction]

^
contrib/python-obsolete/cubrid.c:241:0: style: The function 'init_cubrid' is never used. [unusedFunction]

^
src/transaction/log_system_tran.cpp:194:0: style: The function 'init_system_transations' is never used. [unusedFunction]

^
contrib/python-obsolete/cubrid.c:251:0: style: The function 'initcubrid' is never used. [unusedFunction]

^
src/storage/record_descriptor.cpp:307:0: style: The function 'insert_data' is never used. [unusedFunction]

^
src/storage/btree_unique.cpp:60:0: style: The function 'insert_key_and_row' is never used. [unusedFunction]

^
src/storage/btree_unique.cpp:67:0: style: The function 'insert_null_and_row' is never used. [unusedFunction]

^
src/executables/util_sa.c:1117:0: style: The function 'installdb' is never used. [unusedFunction]

^
src/query/string_regex.cpp:324:0: style: The function 'instr' is never used. [unusedFunction]

^
unit_tests/thread/test_worker_pool.cpp:45:0: style: The function 'interrupt_execution' is never used. [unusedFunction]

^
src/base/intl_support.c:3572:0: style: The function 'intl_backskip_spaces' is never used. [unusedFunction]

^
src/base/intl_support.c:6140:0: style: The function 'intl_binary_to_euckr' is never used. [unusedFunction]

^
src/base/intl_support.c:2455:0: style: The function 'intl_case_match_tok' is never used. [unusedFunction]

^
src/base/intl_support.c:1066:0: style: The function 'intl_char_size_pseudo_kor' is never used. [unusedFunction]

^
src/base/intl_support.c:1345:0: style: The function 'intl_cmp_char_pseudo_kor' is never used. [unusedFunction]

^
src/base/intl_support.c:953:0: style: The function 'intl_convert_charset' is never used. [unusedFunction]

^
src/base/intl_support.c:690:0: style: The function 'intl_copy_lowercase' is never used. [unusedFunction]

^
src/base/intl_support.c:4942:0: style: The function 'intl_euckr_to_iso88591' is never used. [unusedFunction]

^
src/base/intl_support.c:5683:0: style: The function 'intl_get_money_symbol' is never used. [unusedFunction]

^
src/base/intl_support.c:5719:0: style: The function 'intl_get_money_symbol_grammar' is never used. [unusedFunction]

^
src/base/intl_support.c:2785:0: style: The function 'intl_identifier_cmp' is never used. [unusedFunction]

^
src/base/intl_support.c:2803:0: style: The function 'intl_identifier_namecmp' is never used. [unusedFunction]

^
src/base/intl_support.c:1735:0: style: The function 'intl_is_korean' is never used. [unusedFunction]

^
src/base/intl_support.c:1896:0: style: The function 'intl_is_max_bound_chr' is never used. [unusedFunction]

^
src/base/intl_support.c:1939:0: style: The function 'intl_is_min_bound_chr' is never used. [unusedFunction]

^
src/base/intl_support.c:5308:0: style: The function 'intl_iso88591_to_euckr' is never used. [unusedFunction]

^
src/base/intl_support.c:1394:0: style: The function 'intl_kor_cmp' is never used. [unusedFunction]

^
src/base/intl_support.c:1751:0: style: The function 'intl_language' is never used. [unusedFunction]

^
src/base/intl_support.c:1627:0: style: The function 'intl_lower_string_size' is never used. [unusedFunction]

^
src/base/intl_support.c:394:0: style: The function 'intl_mbs_cmp' is never used. [unusedFunction]

^
src/base/intl_support.c:548:0: style: The function 'intl_mbs_lower' is never used. [unusedFunction]

^
src/base/intl_support.c:310:0: style: The function 'intl_mbs_namecmp' is never used. [unusedFunction]

^
src/base/intl_support.c:593:0: style: The function 'intl_mbs_nlower' is never used. [unusedFunction]

^
src/base/intl_support.c:644:0: style: The function 'intl_mbs_upper' is never used. [unusedFunction]

^
src/base/intl_support.c:1218:0: style: The function 'intl_next_char' is never used. [unusedFunction]

^
src/base/intl_support.c:1255:0: style: The function 'intl_next_char_pseudo_kor' is never used. [unusedFunction]

^
src/base/intl_support.c:1444:0: style: The function 'intl_pad_char' is never used. [unusedFunction]

^
src/base/intl_support.c:1486:0: style: The function 'intl_pad_size' is never used. [unusedFunction]

^
src/base/intl_support.c:1128:0: style: The function 'intl_prev_char' is never used. [unusedFunction]

^
src/base/intl_support.c:1167:0: style: The function 'intl_prev_char_pseudo_kor' is never used. [unusedFunction]

^
src/base/intl_support.c:3350:0: style: The function 'intl_put_char' is never used. [unusedFunction]

^
src/base/intl_support.c:1802:0: style: The function 'intl_reverse_string' is never used. [unusedFunction]

^
src/base/intl_support.c:1982:0: style: The function 'intl_set_max_bound_chr' is never used. [unusedFunction]

^
src/base/intl_support.c:1960:0: style: The function 'intl_set_min_bound_chr' is never used. [unusedFunction]

^
src/base/intl_support.c:3301:0: style: The function 'intl_strncat' is never used. [unusedFunction]

^
src/base/intl_support.c:1516:0: style: The function 'intl_upper_string_size' is never used. [unusedFunction]

^
src/base/packer.cpp:845:0: style: The function 'is_ended' is never used. [unusedFunction]

^
src/transaction/mvcc_table.cpp:646:0: style: The function 'is_global_oldest_visible_locked' is never used. [unusedFunction]

^
src/thread/thread_manager.cpp:648:0: style: The function 'is_logging_configured' is never used. [unusedFunction]

^
src/thread/thread_entry.cpp:318:0: style: The function 'is_on_current_thread' is never used. [unusedFunction]

^
src/thread/thread_manager.cpp:338:0: style: The function 'is_pool_full' is never used. [unusedFunction]

^
src/broker/cas_ssl.c:301:0: style: The function 'is_ssl_data_ready' is never used. [unusedFunction]

^
src/storage/btree_unique.cpp:100:0: style: The function 'is_zero' is never used. [unusedFunction]

^
src/jsp/jsp_file.c:102:0: style: The function 'javasp_get_error_file' is never used. [unusedFunction]

^
src/jsp/jsp_file.c:117:0: style: The function 'javasp_get_log_file' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:8528:0: style: The function 'jsp_get_server_port' is never used. [unusedFunction]

^
src/executables/util_cs.c:1842:0: style: The function 'killtran' is never used. [unusedFunction]

^
src/compat/cnv.c:1461:0: style: The function 'ko_mtime_value' is never used. [unusedFunction]

^
src/base/language_support.c:2031:0: style: The function 'lang_char_mem_size' is never used. [unusedFunction]

^
src/base/language_support.c:2050:0: style: The function 'lang_char_screen_size' is never used. [unusedFunction]

^
src/base/language_support.c:2777:0: style: The function 'lang_charset_cubrid_name_to_id' is never used. [unusedFunction]

^
src/base/language_support.c:2563:0: style: The function 'lang_charset_name' is never used. [unusedFunction]

^
src/base/language_support.c:2685:0: style: The function 'lang_charset_name_to_id' is never used. [unusedFunction]

^
src/base/language_support.c:7497:0: style: The function 'lang_check_coll_compat' is never used. [unusedFunction]

^
src/base/language_support.c:2103:0: style: The function 'lang_check_identifier' is never used. [unusedFunction]

^
src/base/language_support.c:7586:0: style: The function 'lang_check_locale_compat' is never used. [unusedFunction]

^
src/base/language_support.c:2018:0: style: The function 'lang_currency_symbol' is never used. [unusedFunction]

^
src/base/language_support.c:2407:0: style: The function 'lang_date_format_parse' is never used. [unusedFunction]

^
src/base/language_support.c:2537:0: style: The function 'lang_digit_fractional_symbol' is never used. [unusedFunction]

^
src/base/language_support.c:2522:0: style: The function 'lang_digit_grouping_symbol' is never used. [unusedFunction]

^
src/base/language_support.c:2707:0: style: The function 'lang_get_client_charset' is never used. [unusedFunction]

^
src/base/language_support.c:2729:0: style: The function 'lang_get_client_collation' is never used. [unusedFunction]

^
src/base/language_support.c:2375:0: style: The function 'lang_get_lang_id_from_flag' is never used. [unusedFunction]

^
src/base/language_support.c:2763:0: style: The function 'lang_get_parser_use_client_charset' is never used. [unusedFunction]

^
src/base/language_support.c:1952:0: style: The function 'lang_locale_currency' is never used. [unusedFunction]

^
src/base/language_support.c:1349:0: style: The function 'lang_locales_count' is never used. [unusedFunction]

^
src/base/language_support.c:1210:0: style: The function 'lang_set_charset' is never used. [unusedFunction]

^
src/base/language_support.c:1233:0: style: The function 'lang_set_language' is never used. [unusedFunction]

^
src/base/language_support.c:1743:0: style: The function 'lang_user_alphabet_w_coll' is never used. [unusedFunction]

^
src/base/language_support.c:2066:0: style: The function 'lang_wchar_mem_size' is never used. [unusedFunction]

^
src/base/language_support.c:2085:0: style: The function 'lang_wchar_screen_size' is never used. [unusedFunction]

^
src/loaddb/load_sa_loader.cpp:6204:0: style: The function 'ldr_sa_load' is never used. [unusedFunction]

^
src/broker/broker_list.c:63:0: style: The function 'link_list_add' is never used. [unusedFunction]

^
src/broker/broker_list.c:263:0: style: The function 'link_list_default_assign_func' is never used. [unusedFunction]

^
src/broker/broker_list.c:271:0: style: The function 'link_list_default_compare_func' is never used. [unusedFunction]

^
src/broker/broker_list.c:230:0: style: The function 'link_list_delete' is never used. [unusedFunction]

^
src/broker/broker_list.c:156:0: style: The function 'link_list_node_delete' is never used. [unusedFunction]

^
src/broker/broker_list.c:197:0: style: The function 'link_list_node_delete2' is never used. [unusedFunction]

^
src/broker/broker_list.c:244:0: style: The function 'link_list_traverse' is never used. [unusedFunction]

^
src/loaddb/load_session.cpp:566:0: style: The function 'load_batch' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:10340:0: style: The function 'loaddb_destroy' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:10306:0: style: The function 'loaddb_fetch_status' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:10190:0: style: The function 'loaddb_init' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:10216:0: style: The function 'loaddb_install_class' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:10361:0: style: The function 'loaddb_interrupt' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:10253:0: style: The function 'loaddb_load_batch' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:10371:0: style: The function 'loaddb_update_stats' is never used. [unusedFunction]

^
src/object/lob_locator.cpp:88:0: style: The function 'lob_locator_add' is never used. [unusedFunction]

^
src/object/lob_locator.cpp:105:0: style: The function 'lob_locator_change_state' is never used. [unusedFunction]

^
src/object/lob_locator.cpp:120:0: style: The function 'lob_locator_drop' is never used. [unusedFunction]

^
src/object/lob_locator.cpp:72:0: style: The function 'lob_locator_find' is never used. [unusedFunction]

^
src/compat/cnv.c:2316:0: style: The function 'local_datetime_value' is never used. [unusedFunction]

^
src/transaction/locator.c:2255:0: style: The function 'locator_add_oid_set' is never used. [unusedFunction]

^
src/transaction/locator.c:1876:0: style: The function 'locator_allocate_and_unpack_lockhint' is never used. [unusedFunction]

^
src/transaction/locator.c:1302:0: style: The function 'locator_allocate_and_unpack_lockset' is never used. [unusedFunction]

^
src/transaction/locator.c:390:0: style: The function 'locator_allocate_copyarea' is never used. [unusedFunction]

^
src/transaction/locator.c:1069:0: style: The function 'locator_allocate_lockset_by_length' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:1262:0: style: The function 'locator_assign_oid' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:1320:0: style: The function 'locator_assign_oid_batch' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:8700:0: style: The function 'locator_check_fk_validity' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:1143:0: style: The function 'locator_delete_class_name' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:10147:0: style: The function 'locator_demote_class_lock' is never used. [unusedFunction]

^
src/transaction/locator.c:913:0: style: The function 'locator_dump_copy_area' is never used. [unusedFunction]

^
src/transaction/locator.c:1852:0: style: The function 'locator_dump_lockhint' is never used. [unusedFunction]

^
src/transaction/locator.c:1259:0: style: The function 'locator_dump_lockset' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:258:0: style: The function 'locator_fetch' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:869:0: style: The function 'locator_fetch_all_reference_lockset' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:1516:0: style: The function 'locator_fetch_lockhint_classes' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:769:0: style: The function 'locator_fetch_lockset' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:955:0: style: The function 'locator_find_class_oid' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:1402:0: style: The function 'locator_find_lockhint_class_oids' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:657:0: style: The function 'locator_force' is never used. [unusedFunction]

^
src/transaction/locator.c:206:0: style: The function 'locator_free_areas' is never used. [unusedFunction]

^
src/transaction/locator.c:1765:0: style: The function 'locator_free_lockhint' is never used. [unusedFunction]

^
src/transaction/locator.c:1140:0: style: The function 'locator_free_lockset' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:328:0: style: The function 'locator_get_class' is never used. [unusedFunction]

^
src/transaction/locator.c:2363:0: style: The function 'locator_get_packed_oid_set_size' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:1082:0: style: The function 'locator_get_reserved_class_name_oid' is never used. [unusedFunction]

^
src/transaction/locator.c:166:0: style: The function 'locator_initialize_areas' is never used. [unusedFunction]

^
src/transaction/locator.c:2603:0: style: The function 'locator_manyobj_flag_remove' is never used. [unusedFunction]

^
src/transaction/locator.c:2610:0: style: The function 'locator_manyobj_flag_set' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:543:0: style: The function 'locator_notify_isolation_incons' is never used. [unusedFunction]

^
src/transaction/locator.c:1970:0: style: The function 'locator_pack_lockhint' is never used. [unusedFunction]

^
src/transaction/locator.c:1429:0: style: The function 'locator_pack_lockset' is never used. [unusedFunction]

^
src/transaction/locator.c:2400:0: style: The function 'locator_pack_oid_set' is never used. [unusedFunction]

^
src/transaction/locator.c:467:0: style: The function 'locator_reallocate_copy_area_by_length' is never used. [unusedFunction]

^
src/transaction/locator.c:1731:0: style: The function 'locator_reallocate_lockhint' is never used. [unusedFunction]

^
src/transaction/locator.c:1091:0: style: The function 'locator_reallocate_lockset' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:5975:0: style: The function 'locator_remove_class_from_index' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:1200:0: style: The function 'locator_rename_class_name' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:594:0: style: The function 'locator_repl_force' is never used. [unusedFunction]

^
src/transaction/locator.c:664:0: style: The function 'locator_send_copy_area' is never used. [unusedFunction]

^
src/transaction/locator.c:2445:0: style: The function 'locator_unpack_oid_set_to_exist' is never used. [unusedFunction]

^
src/transaction/locator.c:2499:0: style: The function 'locator_unpack_oid_set_to_new' is never used. [unusedFunction]

^
src/transaction/mvcc_table.cpp:633:0: style: The function 'lock_global_oldest_visible' is never used. [unusedFunction]

^
src/executables/util_cs.c:1203:0: style: The function 'lockdb' is never used. [unusedFunction]

^
src/transaction/log_append.cpp:232:0: style: The function 'log_append_final_zip' is never used. [unusedFunction]

^
src/transaction/log_append.cpp:185:0: style: The function 'log_append_init_zip' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:9943:0: style: The function 'log_does_active_user_exist' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:2401:0: style: The function 'log_dump_stat' is never used. [unusedFunction]

^
src/transaction/log_append.cpp:152:0: style: The function 'log_prior_has_worker_log_records' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:2291:0: style: The function 'log_reset_isolation' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:2244:0: style: The function 'log_reset_wait_msecs' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:2337:0: style: The function 'log_set_interrupt' is never used. [unusedFunction]

^
src/broker/broker_log_time.c:54:0: style: The function 'log_time_diff' is never used. [unusedFunction]

^
src/broker/broker_log_time.c:35:0: style: The function 'log_time_make' is never used. [unusedFunction]

^
src/transaction/log_compress.c:123:0: style: The function 'log_unzip' is never used. [unusedFunction]

^
src/base/ddl_log.c:412:0: style: The function 'logddl_set_commit_count' is never used. [unusedFunction]

^
src/base/ddl_log.c:403:0: style: The function 'logddl_set_execute_type' is never used. [unusedFunction]

^
src/base/ddl_log.c:430:0: style: The function 'logddl_set_jsp_mode' is never used. [unusedFunction]

^
src/base/ddl_log.c:307:0: style: The function 'logddl_set_loaddb_file_type' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:7911:0: style: The function 'logtb_dump_trantable' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:8774:0: style: The function 'logwr_get_log_pages' is never used. [unusedFunction]

^
src/loaddb/load_semantic_helper.cpp:196:0: style: The function 'make_monetary_constant' is never used. [unusedFunction]

^
src/loaddb/load_semantic_helper.cpp:174:0: style: The function 'make_real' is never used. [unusedFunction]

^
src/loaddb/load_semantic_helper.cpp:115:0: style: The function 'make_string_by_buffer' is never used. [unusedFunction]

^
src/loaddb/load_semantic_helper.cpp:138:0: style: The function 'make_string_by_yytext' is never used. [unusedFunction]

^
src/heaplayers/malloc_2_8_3.c:4673:0: style: The function 'mallinfo' is never used. [unusedFunction]

^
src/heaplayers/malloc_2_8_3.c:4660:0: style: The function 'malloc_footprint' is never used. [unusedFunction]

^
src/heaplayers/malloc_2_8_3.c:4666:0: style: The function 'malloc_max_footprint' is never used. [unusedFunction]

^
src/heaplayers/malloc_2_8_3.c:4680:0: style: The function 'malloc_stats' is never used. [unusedFunction]

^
src/heaplayers/malloc_2_8_3.c:4648:0: style: The function 'malloc_trim' is never used. [unusedFunction]

^
src/heaplayers/malloc_2_8_3.c:4686:0: style: The function 'malloc_usable_size' is never used. [unusedFunction]

^
src/heaplayers/malloc_2_8_3.c:4698:0: style: The function 'mallopt' is never used. [unusedFunction]

^
src/transaction/log_system_tran.cpp:250:0: style: The function 'map_all_tdes' is never used. [unusedFunction]

^
src/query/regu_var.cpp:107:0: style: The function 'map_regu_and_xasl' is never used. [unusedFunction]

^
src/broker/broker_max_heap.c:49:0: style: The function 'max_heap_change_priority' is never used. [unusedFunction]

^
src/parser/method_transform.c:225:0: style: The function 'meth_translate' is never used. [unusedFunction]

^
src/base/memory_hash.c:420:0: style: The function 'mht_1strlowerhash' is never used. [unusedFunction]

^
src/base/memory_hash.c:505:0: style: The function 'mht_4strhash' is never used. [unusedFunction]

^
src/base/memory_hash.c:791:0: style: The function 'mht_compare_dbvalues_are_equal' is never used. [unusedFunction]

^
src/base/memory_hash.c:731:0: style: The function 'mht_compare_ints_are_equal' is never used. [unusedFunction]

^
src/base/memory_hash.c:743:0: style: The function 'mht_compare_logpageids_are_equal' is never used. [unusedFunction]

^
src/base/memory_hash.c:779:0: style: The function 'mht_compare_ptrs_are_equal' is never used. [unusedFunction]

^
src/base/memory_hash.c:2006:0: style: The function 'mht_count' is never used. [unusedFunction]

^
src/base/memory_hash.c:1143:0: style: The function 'mht_dump' is never used. [unusedFunction]

^
src/base/memory_hash.c:1283:0: style: The function 'mht_get2' is never used. [unusedFunction]

^
src/base/memory_hash.c:2278:0: style: The function 'mht_get_linear_hash32' is never used. [unusedFunction]

^
src/base/memory_hash.c:1977:0: style: The function 'mht_map_no_key' is never used. [unusedFunction]

^
src/base/memory_hash.c:533:0: style: The function 'mht_numhash' is never used. [unusedFunction]

^
src/base/memory_hash.c:547:0: style: The function 'mht_ptrhash' is never used. [unusedFunction]

^
src/base/memory_hash.c:1678:0: style: The function 'mht_put2' is never used. [unusedFunction]

^
src/base/memory_hash.c:1655:0: style: The function 'mht_put2_data' is never used. [unusedFunction]

^
src/base/memory_hash.c:1647:0: style: The function 'mht_put2_new' is never used. [unusedFunction]

^
src/base/memory_hash.c:1495:0: style: The function 'mht_put_if_not_exists' is never used. [unusedFunction]

^
src/base/memory_hash.c:1469:0: style: The function 'mht_put_new' is never used. [unusedFunction]

^
src/base/memory_hash.c:1476:0: style: The function 'mht_put_orderly' is never used. [unusedFunction]

^
src/base/memory_hash.c:1824:0: style: The function 'mht_rem2' is never used. [unusedFunction]

^
src/parser/view_transform.c:5100:0: style: The function 'mq_collapse_dot' is never used. [unusedFunction]

^
src/parser/view_transform.c:10720:0: style: The function 'mq_fetch_one_real_class' is never used. [unusedFunction]

^
src/parser/view_transform.c:5742:0: style: The function 'mq_free_virtual_query_cache' is never used. [unusedFunction]

^
src/parser/view_transform.c:10445:0: style: The function 'mq_get_attribute' is never used. [unusedFunction]

^
src/parser/view_transform.c:10943:0: style: The function 'mq_is_real_class_of_vclass' is never used. [unusedFunction]

^
src/parser/view_transform.c:10807:0: style: The function 'mq_mget_exprs' is never used. [unusedFunction]

^
src/parser/view_transform.c:10567:0: style: The function 'mq_update_attribute' is never used. [unusedFunction]

^
src/parser/view_transform.c:5770:0: style: The function 'mq_virtual_queries' is never used. [unusedFunction]

^
src/base/message_catalog.c:642:0: style: The function 'msgcat_get_descriptor' is never used. [unusedFunction]

^
src/base/message_catalog.c:696:0: style: The function 'msgcat_open_file' is never used. [unusedFunction]

^
src/broker/cas_net_buf.c:548:0: style: The function 'net_arg_get_date' is never used. [unusedFunction]

^
src/broker/cas_net_buf.c:565:0: style: The function 'net_arg_get_time' is never used. [unusedFunction]

^
src/broker/cas_net_buf.c:608:0: style: The function 'net_arg_get_timestamptz' is never used. [unusedFunction]

^
src/broker/cas_net_buf.c:213:0: style: The function 'net_buf_cp_double' is never used. [unusedFunction]

^
src/broker/cas_net_buf.c:199:0: style: The function 'net_buf_cp_float' is never used. [unusedFunction]

^
src/broker/cas_net_buf.c:256:0: style: The function 'net_buf_cp_lob_handle' is never used. [unusedFunction]

^
src/broker/cas_net_buf.c:241:0: style: The function 'net_buf_cp_object' is never used. [unusedFunction]

^
src/broker/cas_net_buf.c:83:0: style: The function 'net_buf_cp_post_send_file' is never used. [unusedFunction]

^
src/broker/cas_net_buf.c:75:0: style: The function 'net_buf_destroy' is never used. [unusedFunction]

^
src/broker/cas_net_buf.c:150:0: style: The function 'net_buf_overwrite_int' is never used. [unusedFunction]

^
src/communication/network_cl.c:3974:0: style: The function 'net_cleanup_client_queues' is never used. [unusedFunction]

^
src/communication/network_cl.c:2215:0: style: The function 'net_client_check_log_header' is never used. [unusedFunction]

^
src/communication/network_cl.c:3990:0: style: The function 'net_client_final' is never used. [unusedFunction]

^
src/communication/network_cl.c:935:0: style: The function 'net_client_get_server_host' is never used. [unusedFunction]

^
src/communication/network_cl.c:3920:0: style: The function 'net_client_init' is never used. [unusedFunction]

^
src/communication/network_cl.c:2486:0: style: The function 'net_client_logwr_send_end_msg' is never used. [unusedFunction]

^
src/communication/network_cl.c:3781:0: style: The function 'net_client_ping_server_with_handshake' is never used. [unusedFunction]

^
src/communication/network_cl.c:4036:0: style: The function 'net_client_receive_action' is never used. [unusedFunction]

^
src/communication/network_cl.c:3168:0: style: The function 'net_client_recv_copyarea' is never used. [unusedFunction]

^
src/communication/network_cl.c:1052:0: style: The function 'net_client_request' is never used. [unusedFunction]

^
src/communication/network_cl.c:1287:0: style: The function 'net_client_request2' is never used. [unusedFunction]

^
src/communication/network_cl.c:1394:0: style: The function 'net_client_request2_no_malloc' is never used. [unusedFunction]

^
src/communication/network_cl.c:2768:0: style: The function 'net_client_request_2recv_copyarea' is never used. [unusedFunction]

^
src/communication/network_cl.c:1489:0: style: The function 'net_client_request_3_data' is never used. [unusedFunction]

^
src/communication/network_cl.c:3003:0: style: The function 'net_client_request_3_data_recv_copyarea' is never used. [unusedFunction]

^
src/communication/network_cl.c:3391:0: style: The function 'net_client_request_3recv_copyarea' is never used. [unusedFunction]

^
src/communication/network_cl.c:895:0: style: The function 'net_client_request_no_reply' is never used. [unusedFunction]

^
src/communication/network_cl.c:2582:0: style: The function 'net_client_request_recv_copyarea' is never used. [unusedFunction]

^
src/communication/network_cl.c:1172:0: style: The function 'net_client_request_recv_large_data' is never used. [unusedFunction]

^
src/communication/network_cl.c:3586:0: style: The function 'net_client_request_recv_stream' is never used. [unusedFunction]

^
src/communication/network_cl.c:1080:0: style: The function 'net_client_request_send_large_data' is never used. [unusedFunction]

^
src/communication/network_cl.c:1610:0: style: The function 'net_client_request_with_callback' is never used. [unusedFunction]

^
src/communication/network_cl.c:2328:0: style: The function 'net_client_request_with_logwr_context' is never used. [unusedFunction]

^
src/communication/network_cl.c:3902:0: style: The function 'net_client_shutdown_server' is never used. [unusedFunction]

^
src/communication/network_cl.c:694:0: style: The function 'net_histo_print' is never used. [unusedFunction]

^
src/communication/network_cl.c:755:0: style: The function 'net_histo_print_global_stats' is never used. [unusedFunction]

^
src/communication/network_cl.c:774:0: style: The function 'net_histo_start' is never used. [unusedFunction]

^
src/communication/network_cl.c:803:0: style: The function 'net_histo_stop' is never used. [unusedFunction]

^
src/broker/cas_network.c:446:0: style: The function 'net_read_to_file' is never used. [unusedFunction]

^
src/cci/cci_network.c:1187:0: style: The function 'net_recv_file' is never used. [unusedFunction]

^
src/cci/cci_network.c:1148:0: style: The function 'net_send_file' is never used. [unusedFunction]

^
src/cci/cci_network.c:1212:0: style: The function 'net_send_int' is never used. [unusedFunction]

^
src/query/scan_json_table.cpp:295:0: style: The function 'next_scan' is never used. [unusedFunction]

^
src/query/numeric_opfunc.c:3044:0: style: The function 'numeric_coerce_double_to_num' is never used. [unusedFunction]

^
src/query/numeric_opfunc.c:2074:0: style: The function 'numeric_db_value_abs' is never used. [unusedFunction]

^
src/query/numeric_opfunc.c:3519:0: style: The function 'numeric_db_value_coerce_from_num' is never used. [unusedFunction]

^
src/query/numeric_opfunc.c:3730:0: style: The function 'numeric_db_value_coerce_from_num_strict' is never used. [unusedFunction]

^
src/query/numeric_opfunc.c:1873:0: style: The function 'numeric_db_value_div' is never used. [unusedFunction]

^
src/query/numeric_opfunc.c:3937:0: style: The function 'numeric_db_value_increase' is never used. [unusedFunction]

^
src/query/numeric_opfunc.c:2089:0: style: The function 'numeric_db_value_is_positive' is never used. [unusedFunction]

^
src/query/numeric_opfunc.c:3916:0: style: The function 'numeric_db_value_is_zero' is never used. [unusedFunction]

^
src/query/numeric_opfunc.c:2047:0: style: The function 'numeric_db_value_negate' is never used. [unusedFunction]

^
src/query/numeric_opfunc.c:2572:0: style: The function 'numeric_fast_convert' is never used. [unusedFunction]

^
src/query/numeric_opfunc.c:497:0: style: The function 'numeric_init_power_value_string' is never used. [unusedFunction]

^
src/cm_common/cm_nameval.c:197:0: style: The function 'nv_add_nvp_float' is never used. [unusedFunction]

^
src/cm_common/cm_nameval.c:180:0: style: The function 'nv_add_nvp_int' is never used. [unusedFunction]

^
src/cm_common/cm_nameval.c:189:0: style: The function 'nv_add_nvp_int64' is never used. [unusedFunction]

^
src/cm_common/cm_nameval.c:205:0: style: The function 'nv_add_nvp_time' is never used. [unusedFunction]

^
src/cm_common/cm_nameval.c:64:0: style: The function 'nv_create' is never used. [unusedFunction]

^
src/cm_common/cm_nameval.c:294:0: style: The function 'nv_destroy' is never used. [unusedFunction]

^
src/cm_common/cm_nameval.c:273:0: style: The function 'nv_reset_nvp' is never used. [unusedFunction]

^
src/cm_common/cm_nameval.c:264:0: style: The function 'nv_update_val_int' is never used. [unusedFunction]

^
src/cm_common/cm_nameval.c:322:0: style: The function 'nv_writeto' is never used. [unusedFunction]

^
src/storage/oid.c:327:0: style: The function 'oid_check_cached_class_oid' is never used. [unusedFunction]

^
src/storage/oid.c:351:0: style: The function 'oid_get_cached_class_name' is never used. [unusedFunction]

^
src/storage/oid.c:207:0: style: The function 'oid_get_partition_oid' is never used. [unusedFunction]

^
src/storage/oid.c:386:0: style: The function 'oid_get_rep_read_tran_oid' is never used. [unusedFunction]

^
src/storage/oid.c:171:0: style: The function 'oid_get_serial_oid' is never used. [unusedFunction]

^
src/storage/oid.c:231:0: style: The function 'oid_is_db_attribute' is never used. [unusedFunction]

^
src/storage/oid.c:219:0: style: The function 'oid_is_db_class' is never used. [unusedFunction]

^
src/storage/oid.c:195:0: style: The function 'oid_is_partition' is never used. [unusedFunction]

^
src/storage/oid.c:135:0: style: The function 'oid_is_root' is never used. [unusedFunction]

^
src/storage/oid.c:159:0: style: The function 'oid_is_serial' is never used. [unusedFunction]

^
src/storage/oid.c:400:0: style: The function 'oid_is_system_class' is never used. [unusedFunction]

^
src/storage/oid.c:339:0: style: The function 'oid_set_cached_class_oid' is never used. [unusedFunction]

^
src/storage/oid.c:183:0: style: The function 'oid_set_partition' is never used. [unusedFunction]

^
src/storage/oid.c:118:0: style: The function 'oid_set_root' is never used. [unusedFunction]

^
src/storage/oid.c:147:0: style: The function 'oid_set_serial' is never used. [unusedFunction]

^
src/storage/storage_common.c:372:0: style: The function 'oid_to_string' is never used. [unusedFunction]

^
src/transaction/log_system_tran.cpp:158:0: style: The function 'on_sysop_end' is never used. [unusedFunction]

^
src/transaction/log_system_tran.cpp:142:0: style: The function 'on_sysop_start' is never used. [unusedFunction]

^
src/executables/util_sa.c:1349:0: style: The function 'optimizedb' is never used. [unusedFunction]

^
src/loaddb/load_object_table.c:382:0: style: The function 'otable_prepare' is never used. [unusedFunction]

^
src/loaddb/load_object_table.c:345:0: style: The function 'otable_set_presize' is never used. [unusedFunction]

^
src/win_tools/cubridtray/CUBRIDManage.cpp:248:0: style: The function 'pGetStartDBList' is never used. [unusedFunction]

^
src/win_tools/cubridtray/CUBRIDManage.cpp:255:0: style: The function 'pGetStopDBList' is never used. [unusedFunction]

^
src/win_tools/cubridtray/CUBRIDManage.cpp:235:0: style: The function 'pReqStartDBList' is never used. [unusedFunction]

^
src/win_tools/cubridtray/CUBRIDManage.cpp:229:0: style: The function 'pReqStopDBList' is never used. [unusedFunction]

^
src/executables/util_cs.c:2206:0: style: The function 'paramdump' is never used. [unusedFunction]

^
src/loaddb/load_common.cpp:312:0: style: The function 'parse_ignore_class_file' is never used. [unusedFunction]

^
src/query/string_regex.cpp:99:0: style: The function 'parse_match_type' is never used. [unusedFunction]

^
src/parser/parse_tree.c:271:0: style: The function 'parser_create_node' is never used. [unusedFunction]

^
src/parser/parse_evaluate.c:884:0: style: The function 'parser_final' is never used. [unusedFunction]

^
src/executables/util_sa.c:1672:0: style: The function 'patchdb' is never used. [unusedFunction]

^
src/broker/broker_process_size.c:483:0: style: The function 'pdh_collect' is never used. [unusedFunction]

^
src/broker/broker_process_size.c:357:0: style: The function 'pdh_get_value' is never used. [unusedFunction]

^
src/broker/broker_process_size.c:390:0: style: The function 'pdh_init' is never used. [unusedFunction]

^
src/storage/record_descriptor.cpp:104:0: style: The function 'peek' is never used. [unusedFunction]

^
src/base/perf_monitor.c:3231:0: style: The function 'perfmon_add_stat_at_offset' is never used. [unusedFunction]

^
src/base/perf_monitor.c:3713:0: style: The function 'perfmon_allocate_packed_values_buffer' is never used. [unusedFunction]

^
src/base/perf_monitor.c:3695:0: style: The function 'perfmon_allocate_values' is never used. [unusedFunction]

^
src/base/perf_monitor.c:1305:0: style: The function 'perfmon_calc_diff_stats' is never used. [unusedFunction]

^
src/base/perf_monitor.c:3735:0: style: The function 'perfmon_copy_values' is never used. [unusedFunction]

^
src/base/perf_monitor.c:3123:0: style: The function 'perfmon_finalize' is never used. [unusedFunction]

^
src/base/perf_monitor.c:1565:0: style: The function 'perfmon_get_current_times' is never used. [unusedFunction]

^
src/base/perf_monitor.c:3685:0: style: The function 'perfmon_get_number_of_statistic_values' is never used. [unusedFunction]

^
src/base/perf_monitor.c:3801:0: style: The function 'perfmon_get_peek_stats' is never used. [unusedFunction]

^
src/base/perf_monitor.c:2990:0: style: The function 'perfmon_initialize' is never used. [unusedFunction]

^
src/base/perf_monitor.c:3751:0: style: The function 'perfmon_pack_stats' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:7446:0: style: The function 'perfmon_server_copy_global_stats' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:7393:0: style: The function 'perfmon_server_copy_stats' is never used. [unusedFunction]

^
src/base/perf_monitor.c:1482:0: style: The function 'perfmon_server_dump_stats' is never used. [unusedFunction]

^
src/base/perf_monitor.c:1372:0: style: The function 'perfmon_server_dump_stats_to_buffer' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:7317:0: style: The function 'perfmon_server_start_stats' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:7355:0: style: The function 'perfmon_server_stop_stats' is never used. [unusedFunction]

^
src/base/perf_monitor.c:2847:0: style: The function 'perfmon_stat_dump_in_buffer_flushed_block_volumes_array_stat' is never used. [unusedFunction]

^
src/base/perf_monitor.c:2919:0: style: The function 'perfmon_stat_dump_in_buffer_snapshot_array_stat' is never used. [unusedFunction]

^
src/base/perf_monitor.c:2961:0: style: The function 'perfmon_stat_dump_in_file_snapshot_array_stat' is never used. [unusedFunction]

^
src/base/perf_monitor.c:3777:0: style: The function 'perfmon_unpack_stats' is never used. [unusedFunction]

^
src/executables/util_cs.c:2105:0: style: The function 'plandump' is never used. [unusedFunction]

^
contrib/collectd-plugin/a.c:33:0: style: The function 'plugin_log' is never used. [unusedFunction]

^
src/base/error_context.cpp:294:0: style: The function 'pop_error_stack_and_destroy' is never used. [unusedFunction]

^
src/executables/esql_host_variable.c:520:0: style: The function 'pp_add_host_str' is never used. [unusedFunction]

^
src/executables/esql_declare.c:1046:0: style: The function 'pp_add_initializer' is never used. [unusedFunction]

^
src/executables/esql_misc.c:294:0: style: The function 'pp_add_ptr' is never used. [unusedFunction]

^
src/executables/esql_declare.c:1098:0: style: The function 'pp_add_whenever_to_scope' is never used. [unusedFunction]

^
src/executables/esql_host_variable.c:1239:0: style: The function 'pp_addr_of' is never used. [unusedFunction]

^
src/executables/esql_host_variable.c:589:0: style: The function 'pp_check_host_var_list' is never used. [unusedFunction]

^
src/executables/esql_host_variable.c:554:0: style: The function 'pp_check_type' is never used. [unusedFunction]

^
src/executables/esql_host_variable.c:494:0: style: The function 'pp_detach_host_refs' is never used. [unusedFunction]

^
src/executables/esql_declare.c:1066:0: style: The function 'pp_disallow_storage_classes' is never used. [unusedFunction]

^
src/executables/esql_declare.c:397:0: style: The function 'pp_do_enum' is never used. [unusedFunction]

^
src/executables/esql_misc.c:163:0: style: The function 'pp_finish' is never used. [unusedFunction]

^
src/executables/esql_misc.c:231:0: style: The function 'pp_free_ptr_vec' is never used. [unusedFunction]

^
src/executables/esql_host_variable.c:112:0: style: The function 'pp_gather_input_refs' is never used. [unusedFunction]

^
src/executables/esql_host_variable.c:128:0: style: The function 'pp_gather_output_refs' is never used. [unusedFunction]

^
src/executables/esql_host_variable.c:144:0: style: The function 'pp_input_refs' is never used. [unusedFunction]

^
src/executables/esql_cursor.c:56:0: style: The function 'pp_new_cursor' is never used. [unusedFunction]

^
src/executables/esql_misc.c:197:0: style: The function 'pp_new_ptr_vec' is never used. [unusedFunction]

^
src/executables/esql_cursor.c:261:0: style: The function 'pp_new_stmt' is never used. [unusedFunction]

^
src/executables/esql_host_variable.c:154:0: style: The function 'pp_output_refs' is never used. [unusedFunction]

^
src/executables/esql_declare.c:1380:0: style: The function 'pp_print_decls' is never used. [unusedFunction]

^
src/executables/esql_declare.c:1404:0: style: The function 'pp_print_specs' is never used. [unusedFunction]

^
src/executables/esql_host_variable.c:1160:0: style: The function 'pp_ptr_deref' is never used. [unusedFunction]

^
src/executables/esql_misc.c:335:0: style: The function 'pp_ptr_vec_elems' is never used. [unusedFunction]

^
src/executables/esql_misc.c:316:0: style: The function 'pp_ptr_vec_n_elems' is never used. [unusedFunction]

^
src/executables/esql_misc.c:145:0: style: The function 'pp_startup' is never used. [unusedFunction]

^
src/executables/esql_host_variable.c:1191:0: style: The function 'pp_struct_deref' is never used. [unusedFunction]

^
src/executables/esql_host_variable.c:1498:0: style: The function 'pp_switch_to_descriptor' is never used. [unusedFunction]

^
contrib/cubmemc/wraplib/dict/pr_tree.c:518:0: style: The function 'pr_tree_height' is never used. [unusedFunction]

^
contrib/cubmemc/wraplib/dict/pr_tree.c:481:0: style: The function 'pr_tree_max' is never used. [unusedFunction]

^
contrib/cubmemc/wraplib/dict/pr_tree.c:526:0: style: The function 'pr_tree_mheight' is never used. [unusedFunction]

^
contrib/cubmemc/wraplib/dict/pr_tree.c:466:0: style: The function 'pr_tree_min' is never used. [unusedFunction]

^
contrib/cubmemc/wraplib/dict/pr_tree.c:534:0: style: The function 'pr_tree_pathlen' is never used. [unusedFunction]

^
src/transaction/log_append.cpp:1567:0: style: The function 'prior_is_tde_encrypted' is never used. [unusedFunction]

^
src/transaction/log_append.cpp:407:0: style: The function 'prior_lsa_alloc_and_copy_crumbs' is never used. [unusedFunction]

^
src/transaction/log_append.cpp:273:0: style: The function 'prior_lsa_alloc_and_copy_data' is never used. [unusedFunction]

^
src/transaction/log_append.cpp:1537:0: style: The function 'prior_lsa_next_record' is never used. [unusedFunction]

^
src/transaction/log_append.cpp:1543:0: style: The function 'prior_lsa_next_record_with_lock' is never used. [unusedFunction]

^
src/transaction/log_append.cpp:1549:0: style: The function 'prior_set_tde_encrypted' is never used. [unusedFunction]

^
src/base/system_parameter.c:7535:0: style: The function 'prm_check_parameters' is never used. [unusedFunction]

^
src/base/system_parameter.c:10989:0: style: The function 'prm_get_float_value' is never used. [unusedFunction]

^
src/executables/commdb.c:387:0: style: The function 'process_master_kill' is never used. [unusedFunction]

^
src/broker/shard_proxy_io.c:3581:0: style: The function 'proxy_cas_find_io_by_ctx' is never used. [unusedFunction]

^
src/broker/shard_proxy_io.c:1025:0: style: The function 'proxy_io_make_client_acl_fail' is never used. [unusedFunction]

^
src/broker/shard_proxy_io.c:471:0: style: The function 'proxy_set_con_status_out_tran' is never used. [unusedFunction]

^
src/parser/compile.c:361:0: style: The function 'pt_add_row_classoid_name' is never used. [unusedFunction]

^
src/parser/scanner_support.c:528:0: style: The function 'pt_check_hint' is never used. [unusedFunction]

^
src/parser/scanner_support.c:136:0: style: The function 'pt_cleanup_hint' is never used. [unusedFunction]

^
src/parser/compile.c:1018:0: style: The function 'pt_compile_trigger_stmt' is never used. [unusedFunction]

^
src/parser/compile.c:1373:0: style: The function 'pt_exec_trigger_stmt' is never used. [unusedFunction]

^
src/parser/parse_evaluate.c:777:0: style: The function 'pt_find_labels' is never used. [unusedFunction]

^
src/parser/scanner_support.c:156:0: style: The function 'pt_get_hint' is never used. [unusedFunction]

^
src/parser/parse_tree.c:1106:0: style: The function 'pt_get_varchar_length' is never used. [unusedFunction]

^
src/parser/keyword.c:580:0: style: The function 'pt_identifier_or_keyword' is never used. [unusedFunction]

^
src/parser/keyword.c:630:0: style: The function 'pt_is_keyword' is never used. [unusedFunction]

^
src/parser/scanner_support.c:123:0: style: The function 'pt_nextchar' is never used. [unusedFunction]

^
src/parser/scanner_support.c:109:0: style: The function 'pt_parser_line_col' is never used. [unusedFunction]

^
src/parser/method_transform.c:204:0: style: The function 'pt_statement_have_methods' is never used. [unusedFunction]

^
src/base/error_context.cpp:276:0: style: The function 'push_error_stack' is never used. [unusedFunction]

^
src/thread/thread_manager.cpp:270:0: style: The function 'push_task' is never used. [unusedFunction]

^
src/thread/thread_manager.cpp:293:0: style: The function 'push_task_on_core' is never used. [unusedFunction]

^
src/heaplayers/malloc_2_8_3.c:4639:0: style: The function 'pvalloc' is never used. [unusedFunction]

^
src/query/query_aggregate.cpp:2254:0: style: The function 'qdata_agg_hkey_eq' is never used. [unusedFunction]

^
src/query/query_aggregate.cpp:206:0: style: The function 'qdata_aggregate_accumulator_to_accumulator' is never used. [unusedFunction]

^
src/query/query_aggregate.cpp:1987:0: style: The function 'qdata_alloc_agg_hvalue' is never used. [unusedFunction]

^
src/query/query_aggregate.cpp:2271:0: style: The function 'qdata_copy_agg_hkey' is never used. [unusedFunction]

^
src/query/query_aggregate.cpp:1046:0: style: The function 'qdata_evaluate_aggregate_hierarchy' is never used. [unusedFunction]

^
src/query/query_aggregate.cpp:594:0: style: The function 'qdata_evaluate_aggregate_list' is never used. [unusedFunction]

^
src/query/query_analytic.cpp:108:0: style: The function 'qdata_evaluate_analytic_func' is never used. [unusedFunction]

^
src/query/query_aggregate.cpp:1180:0: style: The function 'qdata_finalize_aggregate_list' is never used. [unusedFunction]

^
src/query/query_analytic.cpp:751:0: style: The function 'qdata_finalize_analytic_func' is never used. [unusedFunction]

^
src/query/query_aggregate.cpp:2105:0: style: The function 'qdata_get_agg_hkey_size' is never used. [unusedFunction]

^
src/query/query_aggregate.cpp:2128:0: style: The function 'qdata_get_agg_hvalue_size' is never used. [unusedFunction]

^
src/query/query_aggregate.cpp:2189:0: style: The function 'qdata_hash_agg_hkey' is never used. [unusedFunction]

^
src/query/query_aggregate.cpp:135:0: style: The function 'qdata_initialize_aggregate_list' is never used. [unusedFunction]

^
src/query/query_analytic.cpp:48:0: style: The function 'qdata_initialize_analytic_func' is never used. [unusedFunction]

^
src/query/query_aggregate.cpp:2593:0: style: The function 'qdata_load_agg_hentry_from_list' is never used. [unusedFunction]

^
src/query/query_aggregate.cpp:2304:0: style: The function 'qdata_load_agg_hvalue_in_agg_list' is never used. [unusedFunction]

^
src/query/query_aggregate.cpp:2624:0: style: The function 'qdata_save_agg_htable_to_list' is never used. [unusedFunction]

^
src/cci/cci_query_execute.c:371:0: style: The function 'qe_end_session' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:7086:0: style: The function 'qmgr_dump_query_cache' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:6572:0: style: The function 'qmgr_execute_query' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:6823:0: style: The function 'qmgr_prepare_and_execute_query' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:6391:0: style: The function 'qmgr_prepare_query' is never used. [unusedFunction]

^
src/optimizer/query_rewrite.c:6462:0: style: The function 'qo_is_partition_attr' is never used. [unusedFunction]

^
src/optimizer/query_rewrite.c:484:0: style: The function 'qo_rewrite_as_derived' is never used. [unusedFunction]

^
src/optimizer/query_rewrite.c:456:0: style: The function 'qo_rewrite_as_join' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:7118:0: style: The function 'qp_get_sys_timestamp' is never used. [unusedFunction]

^
contrib/cubmemc/wraplib/dict/rb_tree.c:462:0: style: The function 'rb_tree_height' is never used. [unusedFunction]

^
contrib/cubmemc/wraplib/dict/rb_tree.c:501:0: style: The function 'rb_tree_max' is never used. [unusedFunction]

^
contrib/cubmemc/wraplib/dict/rb_tree.c:470:0: style: The function 'rb_tree_mheight' is never used. [unusedFunction]

^
contrib/cubmemc/wraplib/dict/rb_tree.c:486:0: style: The function 'rb_tree_min' is never used. [unusedFunction]

^
contrib/cubmemc/wraplib/dict/rb_tree.c:478:0: style: The function 'rb_tree_pathlen' is never used. [unusedFunction]

^
src/storage/storage_common.c:342:0: style: The function 'recdes_allocate_data_area' is never used. [unusedFunction]

^
src/storage/storage_common.c:359:0: style: The function 'recdes_free_data_area' is never used. [unusedFunction]

^
src/storage/storage_common.c:365:0: style: The function 'recdes_set_data_area' is never used. [unusedFunction]

^
src/parser/xasl_regu_alloc.cpp:420:0: style: The function 'regu_int_array_alloc' is never used. [unusedFunction]

^
src/parser/xasl_regu_alloc.cpp:428:0: style: The function 'regu_oid_array_alloc' is never used. [unusedFunction]

^
src/parser/xasl_regu_alloc.cpp:127:0: style: The function 'regu_spec_alloc' is never used. [unusedFunction]

^
src/parser/xasl_regu_alloc.cpp:41:0: style: The function 'regu_xasl_node_alloc' is never used. [unusedFunction]

^
src/base/release_string.c:222:0: style: The function 'rel_copyright_body' is never used. [unusedFunction]

^
src/base/release_string.c:208:0: style: The function 'rel_copyright_header' is never used. [unusedFunction]

^
src/base/release_string.c:294:0: style: The function 'rel_get_disk_compatible' is never used. [unusedFunction]

^
src/base/release_string.c:249:0: style: The function 'rel_set_disk_compatible' is never used. [unusedFunction]

^
src/storage/record_descriptor.cpp:353:0: style: The function 'release_buffer' is never used. [unusedFunction]

^
src/executables/util_sa.c:1026:0: style: The function 'renamedb' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:8569:0: style: The function 'repl_log_get_append_lsa' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:8621:0: style: The function 'repl_set_info' is never used. [unusedFunction]

^
src/query/string_regex.cpp:528:0: style: The function 'replace' is never used. [unusedFunction]

^
src/base/error_context.cpp:185:0: style: The function 'reserve_message_area' is never used. [unusedFunction]

^
src/thread/thread_daemon.cpp:112:0: style: The function 'reset_looper' is never used. [unusedFunction]

^
src/transaction/mvcc_table.cpp:594:0: style: The function 'reset_transaction_lowest_active' is never used. [unusedFunction]

^
src/executables/util_sa.c:908:0: style: The function 'restoredb' is never used. [unusedFunction]

^
src/executables/util_sa.c:3736:0: style: The function 'restoreslave' is never used. [unusedFunction]

^
src/thread/thread_entry.cpp:397:0: style: The function 'retire_system_worker' is never used. [unusedFunction]

^
src/transaction/log_system_tran.cpp:262:0: style: The function 'rv_delete_all_tdes_if' is never used. [unusedFunction]

^
src/transaction/log_system_tran.cpp:278:0: style: The function 'rv_delete_tdes' is never used. [unusedFunction]

^
src/transaction/log_system_tran.cpp:187:0: style: The function 'rv_end_simulation' is never used. [unusedFunction]

^
src/transaction/log_system_tran.cpp:292:0: style: The function 'rv_final' is never used. [unusedFunction]

^
src/transaction/log_system_tran.cpp:231:0: style: The function 'rv_get_or_alloc_tdes' is never used. [unusedFunction]

^
src/transaction/log_system_tran.cpp:172:0: style: The function 'rv_simulate_system_tdes' is never used. [unusedFunction]

^
src/broker/cas_schema_info.c:56:0: style: The function 'schema_attr_meta' is never used. [unusedFunction]

^
src/broker/cas_schema_info.c:140:0: style: The function 'schema_attrpriv_meta' is never used. [unusedFunction]

^
src/broker/cas_schema_info.c:131:0: style: The function 'schema_classpriv_meta' is never used. [unusedFunction]

^
src/broker/cas_schema_info.c:100:0: style: The function 'schema_constraint_meta' is never used. [unusedFunction]

^
src/broker/cas_schema_info.c:149:0: style: The function 'schema_directsuper_meta' is never used. [unusedFunction]

^
src/broker/cas_schema_info.c:167:0: style: The function 'schema_fk_info_meta' is never used. [unusedFunction]

^
src/broker/cas_schema_info.c:76:0: style: The function 'schema_method_meta' is never used. [unusedFunction]

^
src/broker/cas_schema_info.c:85:0: style: The function 'schema_methodfile_meta' is never used. [unusedFunction]

^
src/broker/cas_schema_info.c:157:0: style: The function 'schema_primarykey_meta' is never used. [unusedFunction]

^
src/broker/cas_schema_info.c:49:0: style: The function 'schema_query_spec_meta' is never used. [unusedFunction]

^
src/broker/cas_schema_info.c:92:0: style: The function 'schema_superclasss_meta' is never used. [unusedFunction]

^
src/broker/cas_schema_info.c:39:0: style: The function 'schema_table_meta' is never used. [unusedFunction]

^
src/broker/cas_schema_info.c:114:0: style: The function 'schema_trigger_meta' is never used. [unusedFunction]

^
src/executables/commdb.c:273:0: style: The function 'send_for_server_downtime' is never used. [unusedFunction]

^
src/base/error_context.cpp:149:0: style: The function 'set_error' is never used. [unusedFunction]

^
src/storage/record_descriptor.cpp:243:0: style: The function 'set_external_buffer' is never used. [unusedFunction]

^
src/query/query_reevaluation.cpp:80:0: style: The function 'set_filters' is never used. [unusedFunction]

^
src/loaddb/load_semantic_helper.cpp:219:0: style: The function 'set_in_instance_line' is never used. [unusedFunction]

^
src/thread/thread_manager.cpp:582:0: style: The function 'set_manager' is never used. [unusedFunction]

^
src/broker/cas_network.c:705:0: style: The function 'set_net_timeout_flag' is never used. [unusedFunction]

^
src/transaction/log_append.cpp:112:0: style: The function 'set_nxio_lsa' is never used. [unusedFunction]

^
src/loaddb/load_semantic_helper.cpp:98:0: style: The function 'set_quoted_string_buffer' is never used. [unusedFunction]

^
src/storage/record_descriptor.cpp:228:0: style: The function 'set_record_length' is never used. [unusedFunction]

^
src/query/query_reevaluation.cpp:38:0: style: The function 'set_scan_reevaluation' is never used. [unusedFunction]

^
src/optimizer/query_bitset.c:73:0: style: The function 'set_stats' is never used. [unusedFunction]

^
src/transaction/client_credentials.cpp:149:0: style: The function 'set_system_internal_with_user' is never used. [unusedFunction]

^
src/query/query_reevaluation.cpp:30:0: style: The function 'set_update_reevaluation' is never used. [unusedFunction]

^
src/query/scan_json_table.cpp:569:0: style: The function 'set_value_descriptor' is never used. [unusedFunction]

^
src/broker/shard_metadata.c:889:0: style: The function 'shard_metadata_get_shard_user_from_shm' is never used. [unusedFunction]

^
src/broker/shard_admin_pub.c:679:0: style: The function 'shard_process_activate' is never used. [unusedFunction]

^
src/broker/shard_shm.c:203:0: style: The function 'shard_shm_as_initialize' is never used. [unusedFunction]

^
src/broker/broker_admin_pub.c:3750:0: style: The function 'shard_shm_set_param_shard_in_proxy' is never used. [unusedFunction]

^
src/parser/show_meta.c:753:0: style: The function 'showstmt_get_attributes' is never used. [unusedFunction]

^
src/parser/show_meta.c:994:0: style: The function 'showstmt_metadata_final' is never used. [unusedFunction]

^
src/parser/show_meta.c:937:0: style: The function 'showstmt_metadata_init' is never used. [unusedFunction]

^
contrib/cubmemc/wraplib/dict/test.c:51:0: style: The function 'shuffle' is never used. [unusedFunction]

^
src/transaction/log_applier_sql_log.c:165:0: style: The function 'sl_init' is never used. [unusedFunction]

^
src/transaction/log_applier_sql_log.c:417:0: style: The function 'sl_write_delete_sql' is never used. [unusedFunction]

^
src/transaction/log_applier_sql_log.c:329:0: style: The function 'sl_write_insert_sql' is never used. [unusedFunction]

^
src/transaction/log_applier_sql_log.c:439:0: style: The function 'sl_write_statement_sql' is never used. [unusedFunction]

^
src/transaction/log_applier_sql_log.c:355:0: style: The function 'sl_write_update_sql' is never used. [unusedFunction]

^
src/storage/external_sort.c:1345:0: style: The function 'sort_listfile' is never used. [unusedFunction]

^
src/broker/shard_parser.c:149:0: style: The function 'sp_get_dynamic_hint_count' is never used. [unusedFunction]

^
src/broker/shard_parser.c:179:0: style: The function 'sp_get_first_dynamic_hint' is never used. [unusedFunction]

^
src/broker/shard_parser.c:167:0: style: The function 'sp_get_first_static_hint' is never used. [unusedFunction]

^
src/broker/shard_parser.c:191:0: style: The function 'sp_get_hint_key' is never used. [unusedFunction]

^
src/broker/shard_parser.c:185:0: style: The function 'sp_get_next_dynamic_hint' is never used. [unusedFunction]

^
src/broker/shard_parser.c:173:0: style: The function 'sp_get_next_static_hint' is never used. [unusedFunction]

^
src/broker/shard_parser.c:143:0: style: The function 'sp_get_static_hint_count' is never used. [unusedFunction]

^
src/broker/shard_parser.c:137:0: style: The function 'sp_get_total_hint_count' is never used. [unusedFunction]

^
contrib/cubmemc/wraplib/dict/sp_tree.c:454:0: style: The function 'sp_tree_height' is never used. [unusedFunction]

^
contrib/cubmemc/wraplib/dict/sp_tree.c:493:0: style: The function 'sp_tree_max' is never used. [unusedFunction]

^
contrib/cubmemc/wraplib/dict/sp_tree.c:462:0: style: The function 'sp_tree_mheight' is never used. [unusedFunction]

^
contrib/cubmemc/wraplib/dict/sp_tree.c:478:0: style: The function 'sp_tree_min' is never used. [unusedFunction]

^
contrib/cubmemc/wraplib/dict/sp_tree.c:470:0: style: The function 'sp_tree_pathlen' is never used. [unusedFunction]

^
src/executables/util_cs.c:844:0: style: The function 'spacedb' is never used. [unusedFunction]

^
src/loaddb/load_common.cpp:622:0: style: The function 'split' is never used. [unusedFunction]

^
src/broker/cas_sql_log2.c:165:0: style: The function 'sql_log2_append_file' is never used. [unusedFunction]

^
src/broker/cas_sql_log2.c:94:0: style: The function 'sql_log2_dup_stdout' is never used. [unusedFunction]

^
src/broker/cas_sql_log2.c:132:0: style: The function 'sql_log2_flush' is never used. [unusedFunction]

^
src/broker/cas_sql_log2.c:106:0: style: The function 'sql_log2_restore_stdout' is never used. [unusedFunction]

^
src/loaddb/load_sa_loader.cpp:788:0: style: The function 'start_line' is never used. [unusedFunction]

^
src/executables/util_cs.c:2323:0: style: The function 'statdump' is never used. [unusedFunction]

^
src/storage/statistics_cl.c:294:0: style: The function 'stats_dump' is never used. [unusedFunction]

^
src/storage/statistics_cl.c:54:0: style: The function 'stats_get_statistics' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:5532:0: style: The function 'stats_update_all_statistics' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:5484:0: style: The function 'stats_update_statistics' is never used. [unusedFunction]

^
src/broker/cas_str_like.c:72:0: style: The function 'str_like' is never used. [unusedFunction]

^
src/xasl/xasl_stream.cpp:199:0: style: The function 'stx_free_visited_ptrs' is never used. [unusedFunction]

^
src/xasl/xasl_stream.cpp:39:0: style: The function 'stx_get_xasl_errcode' is never used. [unusedFunction]

^
src/xasl/xasl_stream.cpp:72:0: style: The function 'stx_init_xasl_unpack_info' is never used. [unusedFunction]

^
src/executables/util_sa.c:2582:0: style: The function 'synccolldb' is never used. [unusedFunction]

^
src/base/system_parameter.c:12131:0: style: The function 'sysprm_compare_values' is never used. [unusedFunction]

^
src/base/system_parameter.c:10277:0: style: The function 'sysprm_final' is never used. [unusedFunction]

^
src/base/system_parameter.c:11181:0: style: The function 'sysprm_find_err_in_integer_list' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:8394:0: style: The function 'sysprm_get_force_server_parameters' is never used. [unusedFunction]

^
src/base/system_parameter.c:12621:0: style: The function 'sysprm_get_session_parameters_count' is never used. [unusedFunction]

^
src/base/system_parameter.c:12487:0: style: The function 'sysprm_init_intl_param' is never used. [unusedFunction]

^
src/base/system_parameter.c:6816:0: style: The function 'sysprm_load_and_init_client' is never used. [unusedFunction]

^
src/base/system_parameter.c:11763:0: style: The function 'sysprm_pack_assign_values' is never used. [unusedFunction]

^
src/base/system_parameter.c:11638:0: style: The function 'sysprm_pack_session_parameters' is never used. [unusedFunction]

^
src/base/system_parameter.c:11792:0: style: The function 'sysprm_packed_assign_values_length' is never used. [unusedFunction]

^
src/base/system_parameter.c:11673:0: style: The function 'sysprm_packed_session_parameters_length' is never used. [unusedFunction]

^
src/base/system_parameter.c:12353:0: style: The function 'sysprm_print_parameters_for_qry_string' is never used. [unusedFunction]

^
src/base/system_parameter.c:6829:0: style: The function 'sysprm_reload_and_init' is never used. [unusedFunction]

^
src/base/system_parameter.c:11970:0: style: The function 'sysprm_session_init_session_parameters' is never used. [unusedFunction]

^
src/base/system_parameter.c:11819:0: style: The function 'sysprm_unpack_assign_values' is never used. [unusedFunction]

^
src/base/system_parameter.c:11701:0: style: The function 'sysprm_unpack_session_parameters' is never used. [unusedFunction]

^
src/base/system_parameter.c:11271:0: style: The function 'sysprm_update_flag_allocated' is never used. [unusedFunction]

^
src/thread/thread_worker_pool.cpp:113:0: style: The function 'system_core_count' is never used. [unusedFunction]

^
src/base/util_func.c:171:0: style: The function 'system_quit_handler' is never used. [unusedFunction]

^
src/executables/util_cs.c:3644:0: style: The function 'tde' is never used. [unusedFunction]

^
src/storage/tde.c:1504:0: style: The function 'tde_find_first_mk' is never used. [unusedFunction]

^
src/storage/tde.c:1437:0: style: The function 'tde_find_mk' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:1854:0: style: The function 'tde_get_data_keys' is never used. [unusedFunction]

^
unit_tests/lockfree/test_cqueue_functional.cpp:115:0: style: The function 'test_cqueue_no_hang' is never used. [unusedFunction]

^
unit_tests/loaddb/test_loaddb.cpp:77:0: style: The function 'test_parse_reusing_driver' is never used. [unusedFunction]

^
unit_tests/loaddb/test_loaddb.cpp:53:0: style: The function 'test_parse_with_multiple_threads' is never used. [unusedFunction]

^
src/thread/thread_entry.cpp:610:0: style: The function 'thread_check_suspend_reason_and_wakeup' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:7671:0: style: The function 'thread_dump_cs_stat' is never used. [unusedFunction]

^
src/thread/thread_entry.cpp:748:0: style: The function 'thread_resume_status_to_string' is never used. [unusedFunction]

^
src/thread/thread_entry.cpp:723:0: style: The function 'thread_status_to_string' is never used. [unusedFunction]

^
src/thread/thread_entry.cpp:638:0: style: The function 'thread_suspend_with_other_mutex' is never used. [unusedFunction]

^
src/thread/thread_entry.cpp:692:0: style: The function 'thread_type_to_string' is never used. [unusedFunction]

^
src/thread/thread_entry.cpp:604:0: style: The function 'thread_wakeup' is never used. [unusedFunction]

^
src/executables/csql_result_format.c:623:0: style: The function 'time_as_string' is never used. [unusedFunction]

^
src/monitor/monitor_statistic.cpp:72:0: style: The function 'time_rep_cast' is never used. [unusedFunction]

^
contrib/cubmemc/wraplib/dict/tr_tree.c:393:0: style: The function 'tr_tree_height' is never used. [unusedFunction]

^
contrib/cubmemc/wraplib/dict/tr_tree.c:432:0: style: The function 'tr_tree_max' is never used. [unusedFunction]

^
contrib/cubmemc/wraplib/dict/tr_tree.c:401:0: style: The function 'tr_tree_mheight' is never used. [unusedFunction]

^
contrib/cubmemc/wraplib/dict/tr_tree.c:417:0: style: The function 'tr_tree_min' is never used. [unusedFunction]

^
contrib/cubmemc/wraplib/dict/tr_tree.c:409:0: style: The function 'tr_tree_pathlen' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:2828:0: style: The function 'tran_is_blocked' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:3233:0: style: The function 'tran_server_2pc_attach_global_tran' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:3133:0: style: The function 'tran_server_2pc_prepare' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:3280:0: style: The function 'tran_server_2pc_prepare_global_tran' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:3176:0: style: The function 'tran_server_2pc_recovery_prepared' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:3093:0: style: The function 'tran_server_2pc_start' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:2724:0: style: The function 'tran_server_abort' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:2645:0: style: The function 'tran_server_commit' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:3380:0: style: The function 'tran_server_end_topop' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:3046:0: style: The function 'tran_server_get_global_tran_info' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:2875:0: style: The function 'tran_server_has_updated' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:2915:0: style: The function 'tran_server_is_active_and_has_updated' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:3485:0: style: The function 'tran_server_partial_abort' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:3430:0: style: The function 'tran_server_savepoint' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:2997:0: style: The function 'tran_server_set_global_tran_info' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:3329:0: style: The function 'tran_server_start_topop' is never used. [unusedFunction]

^
src/communication/network_interface_cl.c:2961:0: style: The function 'tran_wait_server_active_trans' is never used. [unusedFunction]

^
src/executables/util_cs.c:1672:0: style: The function 'tranlist' is never used. [unusedFunction]

^
src/base/tsc_timer.c:135:0: style: The function 'tsc_elapsed_utime' is never used. [unusedFunction]

^
src/base/tsc_timer.c:162:0: style: The function 'tsc_end_time_usec' is never used. [unusedFunction]

^
src/base/tsc_timer.c:150:0: style: The function 'tsc_start_time_usec' is never used. [unusedFunction]

^
src/transaction/transaction_transient.cpp:372:0: style: The function 'tx_lob_locator_clear' is never used. [unusedFunction]

^
src/parser/func_type.cpp:809:0: style: The function 'type_checking' is never used. [unusedFunction]

^
src/base/tz_support.c:4973:0: style: The function 'tz_check_geographic_tz' is never used. [unusedFunction]

^
src/base/tz_support.c:4993:0: style: The function 'tz_check_session_has_geographic_tz' is never used. [unusedFunction]

^
src/base/tz_support.c:3856:0: style: The function 'tz_conv_tz_datetime_w_zone_name' is never used. [unusedFunction]

^
src/base/tz_support.c:4066:0: style: The function 'tz_create_datetimetz_from_offset' is never used. [unusedFunction]

^
src/base/tz_support.c:5136:0: style: The function 'tz_create_datetimetz_from_parts' is never used. [unusedFunction]

^
src/base/tz_support.c:1493:0: style: The function 'tz_create_datetimetz_from_ses' is never used. [unusedFunction]

^
src/base/tz_support.c:4210:0: style: The function 'tz_create_datetimetz_from_zoneid_and_tzd' is never used. [unusedFunction]

^
src/base/tz_support.c:1091:0: style: The function 'tz_create_session_tzid_for_time' is never used. [unusedFunction]

^
src/base/tz_support.c:4105:0: style: The function 'tz_create_timestamptz_from_offset' is never used. [unusedFunction]

^
src/base/tz_support.c:4278:0: style: The function 'tz_create_timestamptz_from_zoneid_and_tzd' is never used. [unusedFunction]

^
src/base/tz_support.c:1628:0: style: The function 'tz_datetimeltz_to_local' is never used. [unusedFunction]

^
src/base/tz_support.c:3891:0: style: The function 'tz_explain_tz_id' is never used. [unusedFunction]

^
src/base/tz_support.c:4773:0: style: The function 'tz_full_timezones_start_scan' is never used. [unusedFunction]

^
src/base/tz_support.c:4155:0: style: The function 'tz_get_best_match_zone' is never used. [unusedFunction]

^
src/base/tz_support.c:935:0: style: The function 'tz_get_timezone_offset' is never used. [unusedFunction]

^
src/base/tz_support.c:803:0: style: The function 'tz_id_to_region' is never used. [unusedFunction]

^
src/base/tz_support.c:1843:0: style: The function 'tz_timestamptz_fix_zone' is never used. [unusedFunction]

^
src/base/tz_support.c:4714:0: style: The function 'tz_timezones_start_scan' is never used. [unusedFunction]

^
src/base/tz_support.c:5066:0: style: The function 'tz_tzid_convert_region_to_offset' is never used. [unusedFunction]

^
src/base/tz_compile.c:2609:0: style: The function 'tzc_index_raw_data_w_static' is never used. [unusedFunction]

^
src/broker/broker_admin_so.c:369:0: style: The function 'uc_add' is never used. [unusedFunction]

^
src/broker/broker_admin_so.c:208:0: style: The function 'uc_as_shm_open' is never used. [unusedFunction]

^
src/broker/broker_admin_so.c:164:0: style: The function 'uc_broker_shm_open' is never used. [unusedFunction]

^
src/broker/broker_admin_so.c:983:0: style: The function 'uc_cas_changer' is never used. [unusedFunction]

^
src/broker/broker_admin_so.c:942:0: style: The function 'uc_change_config' is never used. [unusedFunction]

^
src/broker/broker_admin_so.c:977:0: style: The function 'uc_changer' is never used. [unusedFunction]

^
src/broker/broker_admin_so.c:887:0: style: The function 'uc_conf_broker_add' is never used. [unusedFunction]

^
src/broker/broker_admin_so.c:419:0: style: The function 'uc_drop' is never used. [unusedFunction]

^
src/broker/broker_admin_so.c:260:0: style: The function 'uc_get_active_session_with_opened_shm' is never used. [unusedFunction]

^
src/broker/broker_admin_so.c:231:0: style: The function 'uc_get_as_num_with_opened_shm' is never used. [unusedFunction]

^
src/broker/broker_admin_so.c:294:0: style: The function 'uc_get_as_query_processed_with_opened_shm' is never used. [unusedFunction]

^
src/broker/broker_admin_so.c:238:0: style: The function 'uc_get_as_reqs_received_with_opened_shm' is never used. [unusedFunction]

^
src/broker/broker_admin_so.c:279:0: style: The function 'uc_get_as_tran_processed_with_opened_shm' is never used. [unusedFunction]

^
src/broker/broker_admin_so.c:191:0: style: The function 'uc_get_br_name_with_opened_shm' is never used. [unusedFunction]

^
src/broker/broker_admin_so.c:184:0: style: The function 'uc_get_br_num_with_opened_shm' is never used. [unusedFunction]

^
src/broker/broker_admin_so.c:309:0: style: The function 'uc_shm_detach' is never used. [unusedFunction]

^
src/broker/broker_admin_so.c:315:0: style: The function 'uc_version' is never used. [unusedFunction]

^
src/executables/esql_cli.c:1211:0: style: The function 'uci_close_cs' is never used. [unusedFunction]

^
src/executables/esql_cli.c:611:0: style: The function 'uci_connect' is never used. [unusedFunction]

^
src/executables/esql_cli.c:1176:0: style: The function 'uci_delete_cs' is never used. [unusedFunction]

^
src/executables/esql_cli.c:1328:0: style: The function 'uci_describe' is never used. [unusedFunction]

^
src/executables/esql_cli.c:542:0: style: The function 'uci_end' is never used. [unusedFunction]

^
src/executables/esql_cli.c:1367:0: style: The function 'uci_execute' is never used. [unusedFunction]

^
src/executables/esql_cli.c:1460:0: style: The function 'uci_execute_immediate' is never used. [unusedFunction]

^
src/executables/esql_cli.c:1125:0: style: The function 'uci_fetch_cs' is never used. [unusedFunction]

^
src/executables/esql_cli.c:1985:0: style: The function 'uci_get_db_value' is never used. [unusedFunction]

^
src/executables/esql_cli.c:2072:0: style: The function 'uci_get_descriptor' is never used. [unusedFunction]

^
src/executables/esql_cli.c:583:0: style: The function 'uci_get_sqlcode' is never used. [unusedFunction]

^
src/executables/esql_cli.c:593:0: style: The function 'uci_get_sqlwarn_0' is never used. [unusedFunction]

^
src/executables/esql_cli.c:1548:0: style: The function 'uci_object_describe' is never used. [unusedFunction]

^
src/executables/esql_cli.c:1580:0: style: The function 'uci_object_fetch' is never used. [unusedFunction]

^
src/executables/esql_cli.c:995:0: style: The function 'uci_open_cs' is never used. [unusedFunction]

^
src/executables/esql_cli.c:1273:0: style: The function 'uci_prepare' is never used. [unusedFunction]

^
src/executables/esql_cli.c:1235:0: style: The function 'uci_psh_curr_csr_oid' is never used. [unusedFunction]

^
src/executables/esql_cli.c:2051:0: style: The function 'uci_put_descriptor' is never used. [unusedFunction]

^
src/executables/esql_cli.c:446:0: style: The function 'uci_startup' is never used. [unusedFunction]

^
src/executables/esql_cli.c:733:0: style: The function 'uci_static' is never used. [unusedFunction]

^
src/executables/esql_cli.c:563:0: style: The function 'uci_stop' is never used. [unusedFunction]

^
src/query/execute_statement.c:6854:0: style: The function 'unlink_list' is never used. [unusedFunction]

^
src/executables/unloaddb.c:93:0: style: The function 'unloaddb' is never used. [unusedFunction]

^
src/transaction/mvcc_table.cpp:639:0: style: The function 'unlock_global_oldest_visible' is never used. [unusedFunction]

^
src/base/packer.cpp:732:0: style: The function 'unpack_string_to_memblock' is never used. [unusedFunction]

^
src/broker/cas_xa.c:285:0: style: The function 'unset_xa_prepare_flag' is never used. [unusedFunction]

^
src/loaddb/load_session.cpp:483:0: style: The function 'update_class_statistics' is never used. [unusedFunction]

^
src/transaction/mvcc_table.cpp:618:0: style: The function 'update_global_oldest_visible' is never used. [unusedFunction]

^
src/loaddb/load_driver.cpp:126:0: style: The function 'update_start_line' is never used. [unusedFunction]

^
src/executables/util_service.c:3753:0: style: The function 'us_hb_process_server' is never used. [unusedFunction]

^
src/executables/util_service.c:3299:0: style: The function 'us_hb_utils_start' is never used. [unusedFunction]

^
src/executables/util_service.c:3314:0: style: The function 'us_hb_utils_stop' is never used. [unusedFunction]

^
src/base/misc_string.c:116:0: style: The function 'ustr_lower' is never used. [unusedFunction]

^
src/broker/broker_util.c:67:0: style: The function 'ut_access_log' is never used. [unusedFunction]

^
src/broker/broker_util.c:139:0: style: The function 'ut_file_lock' is never used. [unusedFunction]

^
src/broker/broker_util.c:166:0: style: The function 'ut_file_unlock' is never used. [unusedFunction]

^
src/executables/util_sa.c:122:0: style: The function 'util_admin_usage' is never used. [unusedFunction]

^
src/executables/util_sa.c:139:0: style: The function 'util_admin_version' is never used. [unusedFunction]

^
src/base/util_func.c:756:0: style: The function 'util_bsearch' is never used. [unusedFunction]

^
src/base/util_func.c:402:0: style: The function 'util_shuffle_string_array' is never used. [unusedFunction]

^
src/broker/broker_error.c:135:0: style: The function 'uw_error_message' is never used. [unusedFunction]

^
src/broker/broker_error.c:147:0: style: The function 'uw_error_message_r' is never used. [unusedFunction]

^
src/broker/broker_error.c:156:0: style: The function 'uw_os_err_msg' is never used. [unusedFunction]

^
src/executables/util_cs.c:3560:0: style: The function 'vacuumdb' is never used. [unusedFunction]

^
src/heaplayers/malloc_2_8_3.c:4630:0: style: The function 'valloc' is never used. [unusedFunction]

^
src/storage/storage_common.c:388:0: style: The function 'vfid_to_string' is never used. [unusedFunction]

^
src/storage/storage_common.c:380:0: style: The function 'vpid_to_string' is never used. [unusedFunction]

^
src/base/variable_string.c:435:0: style: The function 'vs_strcatn' is never used. [unusedFunction]

^
src/base/variable_string.c:530:0: style: The function 'vs_strlen' is never used. [unusedFunction]

^
src/loaddb/load_session.cpp:299:0: style: The function 'wait_for_completion' is never used. [unusedFunction]

^
contrib/cubmemc/wraplib/dict/wb_tree.c:478:0: style: The function 'wb_tree_height' is never used. [unusedFunction]

^
contrib/cubmemc/wraplib/dict/wb_tree.c:441:0: style: The function 'wb_tree_max' is never used. [unusedFunction]

^
contrib/cubmemc/wraplib/dict/wb_tree.c:486:0: style: The function 'wb_tree_mheight' is never used. [unusedFunction]

^
contrib/cubmemc/wraplib/dict/wb_tree.c:426:0: style: The function 'wb_tree_min' is never used. [unusedFunction]

^
contrib/cubmemc/wraplib/dict/wb_tree.c:494:0: style: The function 'wb_tree_pathlen' is never used. [unusedFunction]

^
src/transaction/wait_for_graph.c:232:0: style: The function 'wfg_alloc_nodes' is never used. [unusedFunction]

^
src/transaction/wait_for_graph.c:1241:0: style: The function 'wfg_alloc_tran_group' is never used. [unusedFunction]

^
src/transaction/wait_for_graph.c:910:0: style: The function 'wfg_detect_cycle' is never used. [unusedFunction]

^
src/transaction/wait_for_graph.c:1189:0: style: The function 'wfg_dump' is never used. [unusedFunction]

^
src/transaction/wait_for_graph.c:338:0: style: The function 'wfg_free_nodes' is never used. [unusedFunction]

^
src/transaction/wait_for_graph.c:880:0: style: The function 'wfg_get_status' is never used. [unusedFunction]

^
src/transaction/wait_for_graph.c:2391:0: style: The function 'wfg_get_tran_entries' is never used. [unusedFunction]

^
src/transaction/wait_for_graph.c:1299:0: style: The function 'wfg_insert_holder_tran_group' is never used. [unusedFunction]

^
src/transaction/wait_for_graph.c:433:0: style: The function 'wfg_insert_out_edges' is never used. [unusedFunction]

^
src/transaction/wait_for_graph.c:1465:0: style: The function 'wfg_insert_waiter_tran_group' is never used. [unusedFunction]

^
src/transaction/wait_for_graph.c:2311:0: style: The function 'wfg_is_waiting' is never used. [unusedFunction]

^
src/transaction/wait_for_graph.c:1377:0: style: The function 'wfg_remove_holder_tran_group' is never used. [unusedFunction]

^
src/transaction/wait_for_graph.c:788:0: style: The function 'wfg_remove_out_edges' is never used. [unusedFunction]

^
src/transaction/wait_for_graph.c:1555:0: style: The function 'wfg_remove_waiter_tran_group' is never used. [unusedFunction]

^
src/loaddb/load_worker_manager.cpp:182:0: style: The function 'worker_manager_get_stats' is never used. [unusedFunction]

^
src/loaddb/load_worker_manager.cpp:162:0: style: The function 'worker_manager_stop_all' is never used. [unusedFunction]

^
src/thread/thread_worker_pool.cpp:97:0: style: The function 'wp_worker_statset_get_count' is never used. [unusedFunction]

^
src/thread/thread_worker_pool.cpp:103:0: style: The function 'wp_worker_statset_get_name' is never used. [unusedFunction]

^
src/xasl/xasl_stream.cpp:482:0: style: The function 'xasl_stream_compare' is never used. [unusedFunction]

^
contrib/cubmemc/wraplib/dict/demo.c:211:0: style: The function 'xcalloc' is never used. [unusedFunction]

^
src/storage/disk_manager.c:5516:0: style: The function 'xdisk_get_purpose' is never used. [unusedFunction]

^
src/storage/disk_manager.c:5552:0: style: The function 'xdisk_get_purpose_and_space_info' is never used. [unusedFunction]

^
src/storage/disk_manager.c:5600:0: style: The function 'xdisk_get_purpose_and_sys_lastpage' is never used. [unusedFunction]

^
src/storage/extendible_hash.c:864:0: style: The function 'xehash_create' is never used. [unusedFunction]

^
src/storage/extendible_hash.c:1253:0: style: The function 'xehash_destroy' is never used. [unusedFunction]

^
src/session/session_sr.c:357:0: style: The function 'xsession_clear_query_entry_info' is never used. [unusedFunction]

^
src/session/session_sr.c:271:0: style: The function 'xsession_get_session_variable' is never used. [unusedFunction]

^
src/session/session_sr.c:330:0: style: The function 'xsession_load_query_entry_info' is never used. [unusedFunction]

^
src/session/session_sr.c:343:0: style: The function 'xsession_remove_query_entry_info' is never used. [unusedFunction]

^
src/session/session_sr.c:106:0: style: The function 'xsession_set_cur_insert_id' is never used. [unusedFunction]

^
src/session/session_sr.c:370:0: style: The function 'xsession_set_tran_auto_commit' is never used. [unusedFunction]

^
src/session/session_sr.c:318:0: style: The function 'xsession_store_query_entry_info' is never used. [unusedFunction]

^
src/base/system_parameter.c:8711:0: style: The function 'xsysprm_get_force_server_parameters' is never used. [unusedFunction]

^
nofile:0:0: information: Cppcheck cannot find all the include files (use --check-config for details) [missingInclude]

